#!/usr/bin/env python3
# # -*- coding: utf-8 -*-
""" Include ros headers files """
import rospy
""" Include headers files """
from asr.socket_class import socket_node
""" Include message files """
from geometry_msgs.msg import Twist

""" Instantiate ros socket module

The module can be connected to the ASR socket module for data transimission,
and transmit the received data o the ROS Master
"""

def main():
    # Initialize ROS node
    rospy.init_node("asr_socket_server", anonymous = True)
    rate = rospy.Rate(10) # 10Hz
    # Create ROS publisher
    ASR_cmd_val_pub = rospy.Publisher("motion/cmd_val", Twist, queue_size = 1000)

    # Initialize socket node
    SocketNode = socket_node('IPv4', 'TCP')
    SocketNode.server('127.0.0.1', 8080)

    while not rospy.is_shutdown():
        print("\nto close this node, you need ctrl + c, and then close the client node to close it")
        print("to close this node, you need ctrl + c, and then close the client node to close it")
        print("to close this node, you need ctrl + c, and then close the client node to close it")

        # BUG : KeyboardInterrupt can't close
        SocketNode.scan_client()
        # publish msg
        msg = Twist()

        while (not rospy.is_shutdown() and SocketNode.client_status):
            cmd_val = SocketNode.get_msg()
            val = 5
            if cmd_val == "going":
                msg.linear.x = 0
                msg.linear.y = val
                msg.linear.z = 0

            elif cmd_val == "move left":
                msg.linear.x = -val
                msg.linear.y = 0
                msg.linear.z = 0

            elif cmd_val == "go back":
                msg.linear.x = 0
                msg.linear.y = -val
                msg.linear.z = 0

            elif cmd_val == "move right":
                msg.linear.x = val
                msg.linear.y = 0
                msg.linear.z = 0

            elif cmd_val == "shoot":
                msg.linear.x = 0
                msg.linear.y = 0
                msg.linear.z = 0

            elif cmd_val == "-1":
                msg.linear.x = 0
                msg.linear.y = 0
                msg.linear.z = 0

            else:
                pass

            ASR_cmd_val_pub.publish(msg)

        rate.sleep()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
    # except KeyboardInterrupt:
        # print("shutting down")
