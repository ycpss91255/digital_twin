
DE0_NANO_SDRAM_Nios_Test.elf:     file format elf32-littlenios2
DE0_NANO_SDRAM_Nios_Test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000d71c memsz 0x0000d71c flags r-x
    LOAD off    0x0000e73c vaddr 0x0000d73c paddr 0x0000f198 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00010bf4 vaddr 0x00010bf4 paddr 0x00010bf4 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d100  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000488  0000d2b4  0000d2b4  0000e2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0000d73c  0000f198  0000e73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00010bf4  00010bf4  00010bf4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00010198  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d58  00000000  00000000  000101c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001449  00000000  00000000  00010f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026259  00000000  00000000  00012361  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000810b  00000000  00000000  000385ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014ae4  00000000  00000000  000406c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000019a0  00000000  00000000  000551ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000022b2  00000000  00000000  00056b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c1d7  00000000  00000000  00058dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00064fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00065038  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00068a5b  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00068a5e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00068a68  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00068a69  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00068a6a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00068a6e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00068a72  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00068a76  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00068a7f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00068a88  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  00068a91  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000048  00000000  00000000  00068a9e  2**0
                  CONTENTS, READONLY
 29 .jdi          00005173  00000000  00000000  00068ae6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00045ea0  00000000  00000000  0006dc59  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000d2b4 l    d  .rodata	00000000 .rodata
0000d73c l    d  .rwdata	00000000 .rwdata
00010bf4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mem_verify.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000b74 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000fb8 l     F .text	00000058 __sprint_r
0000d472 l     O .rodata	00000010 blanks.3452
0000d462 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000301c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004a18 l     F .text	00000058 std
00004b24 l     F .text	00000008 __fp_lock
00004b2c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000d73c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0000f164 l     O .rwdata	00000004 charset
0000d4a8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000d5f0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00008fe8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000a7a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000a848 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000a948 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000aa68 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000ab48 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000aca4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000aed0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000f188 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000b340 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e0f8 l     O .rwdata	00001060 jtag_uart
0000b430 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000b670 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000b898 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000bf14 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000c368 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c78c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000c8c8 l     F .text	000000dc alt_file_locked
0000cb2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000d09c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000d250 l     F .text	00000040 alt_sim_halt
00000dd8 g     F .text	0000001c putchar
00006734 g     F .text	00000094 _mprec_log10
00006820 g     F .text	00000088 __any_on
00008264 g     F .text	00000070 _isatty_r
0000d5c8 g     O .rodata	00000028 __mprec_tinytens
0000ad04 g     F .text	0000006c alt_main
00000dfc g     F .text	000000a0 _puts_r
00010c50 g     O .bss	00000100 alt_irq
000082d4 g     F .text	00000078 _lseek_r
0000f198 g       *ABS*	00000000 __flash_rwdata_start
00009b08 g     F .text	00000088 __eqdf2
00010ee0 g       *ABS*	00000000 __alt_heap_start
00000d60 g     F .text	00000044 printf
00007be4 g     F .text	00000068 __sseek
00004a80 g     F .text	000000a4 __sinit
00007de4 g     F .text	00000130 __swbuf_r
00005758 g     F .text	00000084 _setlocale_r
00004b80 g     F .text	00000068 __sfmoreglue
0000ad90 g     F .text	00000020 __malloc_unlock
000061b0 g     F .text	000000e0 memmove
00004b70 g     F .text	00000010 _cleanup
000068a8 g     F .text	000000bc _Balloc
00009c18 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000081f0 g     F .text	00000074 _fstat_r
00010c0c g     O .bss	00000004 errno
00010c14 g     O .bss	00000004 alt_argv
00017158 g       *ABS*	00000000 _gp
0000b1f0 g     F .text	00000030 usleep
0000df78 g     O .rwdata	00000180 alt_fd_list
00000df4 g     F .text	00000008 _putchar_r
0000cbac g     F .text	00000094 alt_find_dev
00000cc0 g     F .text	000000a0 memcpy
000003f4 g     F .text	00000540 TMEM_Verify
00004b64 g     F .text	0000000c _cleanup_r
00009db0 g     F .text	000000f8 __floatsidf
0000c850 g     F .text	00000078 alt_io_redirect
00009d28 g     F .text	00000088 __ltdf2
0000d2b4 g       *ABS*	00000000 __DTOR_END__
00000e9c g     F .text	00000014 puts
00006684 g     F .text	000000b0 __ratio
0000bab0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000da4 g     F .text	00000034 _printf_r
00000cb0 g     F .text	00000008 __udivsi3
0000a9a8 g     F .text	000000c0 isatty
0000d4d8 g     O .rodata	000000c8 __mprec_tens
00005734 g     F .text	00000008 __locale_charset
0000ce18 g     F .text	00000090 alt_icache_flush
00010c00 g     O .bss	00000004 __malloc_top_pad
0000f160 g     O .rwdata	00000004 __mb_cur_max
0000573c g     F .text	0000000c _localeconv_r
00006fa0 g     F .text	0000003c __i2b
00005118 g     F .text	0000049c __sfvwrite_r
00007b6c g     F .text	00000070 _sbrk_r
0000834c g     F .text	00000078 _read_r
0000db3c g     O .rwdata	0000000c __lc_ctype
0000f180 g     O .rwdata	00000004 alt_max_fd
0000a4a8 g     F .text	00000138 __unpack_d
000080cc g     F .text	00000110 _fclose_r
000049e4 g     F .text	00000034 fflush
00010c04 g     O .bss	00000004 __malloc_max_sbrked_mem
00009478 g     F .text	00000074 __adddf3
00006564 g     F .text	00000120 __b2d
00008a38 g     F .text	000005b0 __umoddi3
0000abb4 g     F .text	000000f0 lseek
0000f15c g     O .rwdata	00000004 _global_impure_ptr
00007508 g     F .text	000005f4 _realloc_r
00010ee0 g       *ABS*	00000000 __bss_end
0000c694 g     F .text	000000f8 alt_iic_isr_register
0000b0e4 g     F .text	0000010c alt_tick
0000845c g     F .text	000005dc __udivdi3
0000d5a0 g     O .rodata	00000028 __mprec_bigtens
000071fc g     F .text	00000120 __s2b
00009f80 g     F .text	00000194 __floatunsidf
00006484 g     F .text	00000060 __mcmp
00004b4c g     F .text	00000018 __fp_lock_all
0000c64c g     F .text	00000048 alt_ic_irq_enabled
0000b04c g     F .text	00000098 alt_alarm_stop
00010c24 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000df50 g     O .rwdata	00000028 alt_dev_null
0000a804 g     F .text	00000044 alt_dcache_flush_all
00006350 g     F .text	00000070 __hi0bits
00009ea8 g     F .text	000000d8 __fixdfsi
0000f198 g       *ABS*	00000000 __ram_rwdata_end
0000f178 g     O .rwdata	00000008 alt_dev_list
0000b220 g     F .text	00000120 write
00007420 g     F .text	000000e8 _putc_r
0000d73c g       *ABS*	00000000 __ram_rodata_end
0000a874 g     F .text	000000d4 fstat
000070dc g     F .text	00000120 __pow5mult
00010bf4 g     O .bss	00000004 __nlocale_changed
00000cb8 g     F .text	00000008 __umodsi3
00010ee0 g       *ABS*	00000000 end
0000b5b0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000d2b0 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
0000bf84 g     F .text	00000090 alt_avalon_timer_sc_init
0000a114 g     F .text	00000080 __clzsi2
0000bcd4 g     F .text	00000240 altera_avalon_jtag_uart_write
00004a70 g     F .text	00000004 __sfp_lock_acquire
000060cc g     F .text	000000e4 memchr
00001010 g     F .text	00001eac ___vfprintf_internal_r
00004e04 g     F .text	00000314 _free_r
0000d0a0 g     F .text	000001b0 __call_exitprocs
00010bf8 g     O .bss	00000004 __mlocale_changed
0000f16c g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000004c _start
00010c1c g     O .bss	00000004 _alt_tick_rate
00000ecc g     F .text	00000078 rand
00006c6c g     F .text	0000014c __lshift
00010c20 g     O .bss	00000004 _alt_nticks
0000adb0 g     F .text	00000120 read
0000b3d4 g     F .text	0000005c alt_sys_init
0000cf68 g     F .text	00000134 __register_exitproc
00006db8 g     F .text	000001e8 __multiply
0000b948 g     F .text	00000074 altera_avalon_jtag_uart_close
0000d73c g       *ABS*	00000000 __ram_rwdata_start
0000d2b4 g       *ABS*	00000000 __ram_rodata_start
00010c28 g     O .bss	00000028 __malloc_current_mallinfo
00006964 g     F .text	0000017c __d2b
0000b468 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000cd60 g     F .text	000000b8 alt_get_fd
0000c168 g     F .text	0000014c alt_busy_sleep
0000a5e0 g     F .text	000000c8 __fpcmp_parts_d
0000805c g     F .text	00000070 _close_r
0000cef4 g     F .text	00000074 memcmp
0000b518 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00010ee0 g       *ABS*	00000000 __alt_stack_base
0000b560 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00002ee0 g     F .text	0000013c __swsetup_r
000098b0 g     F .text	00000258 __divdf3
00004be8 g     F .text	000000f0 __sfp
000067c8 g     F .text	00000058 __copybits
0000db48 g     O .rwdata	00000408 __malloc_av_
00004a7c g     F .text	00000004 __sinit_lock_release
000094ec g     F .text	000003c4 __muldf3
00007cc8 g     F .text	00000060 __sread
0000cc40 g     F .text	00000120 alt_find_file
0000c2b4 g     F .text	000000b4 alt_dev_llist_insert
0000ad70 g     F .text	00000020 __malloc_lock
0000af90 g     F .text	000000bc sbrk
000047e8 g     F .text	000001fc _fflush_r
00007fa8 g     F .text	000000b4 _calloc_r
00010bf4 g       *ABS*	00000000 __bss_start
00006290 g     F .text	00000098 memset
00000200 g     F .text	000001f4 main
00010c18 g     O .bss	00000004 alt_envp
00010c08 g     O .bss	00000004 __malloc_max_total_mem
0000b4c0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00007f14 g     F .text	0000001c __swbuf
00000eb0 g     F .text	0000001c srand
00007bdc g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
000081dc g     F .text	00000014 fclose
00010d50 g     O .bss	00000190 _atexit0
00003234 g     F .text	000015b4 _dtoa_r
0000598c g     F .text	00000740 _malloc_r
0000f184 g     O .rwdata	00000004 alt_errno
0000567c g     F .text	000000b8 _fwalk
0000731c g     F .text	00000104 putc
00000bf0 g     F .text	00000060 __divsi3
0000d5fc g     O .rodata	00000014 __thenan_df
00004cd8 g     F .text	0000012c _malloc_trim_r
0000d2b4 g       *ABS*	00000000 __CTOR_END__
00007d28 g     F .text	000000bc strcmp
0000d2b4 g       *ABS*	00000000 __flash_rodata_start
0000d2b4 g       *ABS*	00000000 __DTOR_LIST__
00009b90 g     F .text	00000088 __nedf2
0000b3a0 g     F .text	00000034 alt_irq_init
0000af30 g     F .text	00000060 alt_release_fd
0000d610 g     O .rodata	00000100 __clz_tab
00010bfc g     O .bss	00000004 _PathLocale
0000cea8 g     F .text	00000014 atexit
00007f30 g     F .text	00000078 _write_r
000057dc g     F .text	0000001c setlocale
0000f158 g     O .rwdata	00000004 _impure_ptr
00010c10 g     O .bss	00000004 alt_argc
0000c42c g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000064e4 g     F .text	00000080 __ulp
00007afc g     F .text	00000040 __isinfd
00004b34 g     F .text	00000018 __fp_unlock_all
0000f170 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005748 g     F .text	00000010 localeconv
0000c4c0 g     F .text	00000050 alt_ic_isr_register
0000f198 g       *ABS*	00000000 _edata
00010ee0 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000b9bc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000c5ac g     F .text	000000a0 alt_ic_irq_disable
00007c4c g     F .text	0000007c __swrite
0000f168 g     O .rwdata	00000004 __malloc_trim_threshold
0000cb8c g     F .text	00000020 altera_nios2_qsys_irq_init
0000cebc g     F .text	00000038 exit
000055b4 g     F .text	000000c8 _fwalk_reent
00006ae0 g     F .text	0000018c __mdiff
00000c50 g     F .text	00000060 __modsi3
00000934 g     F .text	00000240 TMEM_QuickVerify
00020000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004a74 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000d290 g     F .text	00000020 _exit
00007b3c g     F .text	00000030 __isnand
0000c014 g     F .text	00000154 alt_alarm_start
000083c4 g     F .text	00000098 __muldi3
000057f8 g     F .text	00000194 __smakebuf_r
00000f44 g     F .text	00000074 strlen
0000c9a4 g     F .text	00000188 open
00009ca0 g     F .text	00000088 __gedf2
0000c490 g     F .text	00000030 alt_icache_flush_all
0000f194 g     O .rwdata	00000004 alt_priority_mask
0000c510 g     F .text	0000009c alt_ic_irq_enable
00002ebc g     F .text	00000024 __vfprintf_internal
000093f8 g     F .text	00000080 __subdf3
000063c0 g     F .text	000000c4 __lo0bits
0000f18c g     O .rwdata	00000008 alt_alarm_list
0000c3c8 g     F .text	00000064 _do_ctors
0000a6a8 g     F .text	000000fc close
0000aac8 g     F .text	00000080 alt_load
0000a194 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00004a78 g     F .text	00000004 __sinit_lock_acquire
00006fdc g     F .text	00000100 __multadd
00006328 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18c31404 	addi	r3,r3,3152
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18c31404 	addi	r3,r3,3152
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
     1c0:	00bffd16 	blt	zero,r2,1b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c4:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
     1c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1cc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1d0:	d69c5614 	ori	gp,gp,29016
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d8:	1082fd14 	ori	r2,r2,3060

    movhi r3, %hi(__bss_end)
     1dc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1e0:	18c3b814 	ori	r3,r3,3808

    beq r2, r3, 1f
     1e4:	10c00326 	beq	r2,r3,1f4 <_start+0x40>

0:
    stw zero, (r2)
     1e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f0:	10fffd36 	bltu	r2,r3,1e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f4:	000aac80 	call	aac8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f8:	000ad040 	call	ad04 <alt_main>

000001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1fc:	003fff06 	br	1fc <alt_after_alt_main>

00000200 <main>:




int main()
{
     200:	defff504 	addi	sp,sp,-44
     204:	dfc00a15 	stw	ra,40(sp)
     208:	df000915 	stw	fp,36(sp)
     20c:	df000904 	addi	fp,sp,36
	bool bPass, bLoop;
	int TestIndex ;
	alt_u32 InitValue = 0x01;
     210:	00800044 	movi	r2,1
     214:	e0bffb15 	stw	r2,-20(fp)
	bool bShowMessage = TRUE;
     218:	00800044 	movi	r2,1
     21c:	e0bffa15 	stw	r2,-24(fp)
	alt_u32 TimeStart, TimeElapsed;
	alt_u8 Status,ButtonStatus;
	const alt_u8 ButtonMask = 0x03; // 2 button
     220:	008000c4 	movi	r2,3
     224:	e0bff705 	stb	r2,-36(fp)



	printf("===== SDRAM Test! Size=%dMB (CPU Clock:%d) =====\r\n", SDRAM_SPAN/1024/1024, ALT_CPU_CPU_FREQ);
     228:	01000074 	movhi	r4,1
     22c:	2134ad04 	addi	r4,r4,-11596
     230:	01400804 	movi	r5,32
     234:	01817db4 	movhi	r6,1526
     238:	31b84004 	addi	r6,r6,-7936
     23c:	0000d600 	call	d60 <printf>
     240:	00000006 	br	244 <main+0x44>



	while(1){
        printf("\n==========================================================\n");
     244:	01000074 	movhi	r4,1
     248:	2134ba04 	addi	r4,r4,-11544
     24c:	0000e9c0 	call	e9c <puts>
        printf("Press any KEY to start test [KEY0 for continued test] \n");
     250:	01000074 	movhi	r4,1
     254:	2134c904 	addi	r4,r4,-11484
     258:	0000e9c0 	call	e9c <puts>
        ButtonStatus = ButtonMask;
     25c:	e0bff703 	ldbu	r2,-36(fp)
     260:	e0bff745 	stb	r2,-35(fp)
        while((ButtonStatus & ButtonMask) == ButtonMask){
     264:	00000406 	br	278 <main+0x78>

        	ButtonStatus = IORD(KEY_BASE, 0);
     268:	00810134 	movhi	r2,1028
     26c:	10840c04 	addi	r2,r2,4144
     270:	10800037 	ldwio	r2,0(r2)
     274:	e0bff745 	stb	r2,-35(fp)

	while(1){
        printf("\n==========================================================\n");
        printf("Press any KEY to start test [KEY0 for continued test] \n");
        ButtonStatus = ButtonMask;
        while((ButtonStatus & ButtonMask) == ButtonMask){
     278:	e0fff743 	ldbu	r3,-35(fp)
     27c:	e0bff703 	ldbu	r2,-36(fp)
     280:	1884703a 	and	r2,r3,r2
     284:	10c03fcc 	andi	r3,r2,255
     288:	e0bff703 	ldbu	r2,-36(fp)
     28c:	18bff626 	beq	r3,r2,268 <main+0x68>

        	ButtonStatus = IORD(KEY_BASE, 0);
        }

        if ((ButtonStatus & 0x01) == 0x00){
     290:	e0bff743 	ldbu	r2,-35(fp)
     294:	1080004c 	andi	r2,r2,1
     298:	1004c03a 	cmpne	r2,r2,zero
     29c:	1000031e 	bne	r2,zero,2ac <main+0xac>
            bLoop = TRUE;
     2a0:	00800044 	movi	r2,1
     2a4:	e0bffd15 	stw	r2,-12(fp)
     2a8:	00000106 	br	2b0 <main+0xb0>
        }else{
            bLoop = FALSE;
     2ac:	e03ffd15 	stw	zero,-12(fp)
        }

		//
        bPass = TRUE;
     2b0:	00800044 	movi	r2,1
     2b4:	e0bffe15 	stw	r2,-8(fp)
        TestIndex = 0;
     2b8:	e03ffc15 	stw	zero,-16(fp)

        do{
        	TestIndex++;
     2bc:	e0bffc17 	ldw	r2,-16(fp)
     2c0:	10800044 	addi	r2,r2,1
     2c4:	e0bffc15 	stw	r2,-16(fp)
        	printf("=====> SDRAM Testing, Iteration: %d\n", TestIndex);
     2c8:	01000074 	movhi	r4,1
     2cc:	2134d704 	addi	r4,r4,-11428
     2d0:	e17ffc17 	ldw	r5,-16(fp)
     2d4:	0000d600 	call	d60 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     2d8:	00800074 	movhi	r2,1
     2dc:	10830804 	addi	r2,r2,3104
     2e0:	10800017 	ldw	r2,0(r2)
        	TimeStart = alt_nticks();
     2e4:	e0bff915 	stw	r2,-28(fp)

        	if (bPass)
     2e8:	e0bffe17 	ldw	r2,-8(fp)
     2ec:	1005003a 	cmpeq	r2,r2,zero
     2f0:	1000061e 	bne	r2,zero,30c <main+0x10c>
        		bPass = TMEM_Verify(SDRAM_BASE+0x20000, SDRAM_SPAN-0x20000, InitValue,  bShowMessage);
     2f4:	010000b4 	movhi	r4,2
     2f8:	01407fb4 	movhi	r5,510
     2fc:	e1bffb17 	ldw	r6,-20(fp)
     300:	e1fffa17 	ldw	r7,-24(fp)
     304:	00003f40 	call	3f4 <TMEM_Verify>
     308:	e0bffe15 	stw	r2,-8(fp)
     30c:	00800074 	movhi	r2,1
     310:	10830804 	addi	r2,r2,3104
     314:	10800017 	ldw	r2,0(r2)
     318:	1007883a 	mov	r3,r2

        	TimeElapsed = alt_nticks() - TimeStart;
     31c:	e0bff917 	ldw	r2,-28(fp)
     320:	1885c83a 	sub	r2,r3,r2
     324:	e0bff815 	stw	r2,-32(fp)
        	printf("SDRAM test:%s, %d seconds\r\n", bPass?"Pass":"NG", (int)(TimeElapsed/alt_ticks_per_second()));
     328:	e0bffe17 	ldw	r2,-8(fp)
     32c:	1005003a 	cmpeq	r2,r2,zero
     330:	1000041e 	bne	r2,zero,344 <main+0x144>
     334:	00800074 	movhi	r2,1
     338:	10b4e104 	addi	r2,r2,-11388
     33c:	e0bfff15 	stw	r2,-4(fp)
     340:	00000306 	br	350 <main+0x150>
     344:	00800074 	movhi	r2,1
     348:	10b4e304 	addi	r2,r2,-11380
     34c:	e0bfff15 	stw	r2,-4(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     350:	00800074 	movhi	r2,1
     354:	10830704 	addi	r2,r2,3100
     358:	10800017 	ldw	r2,0(r2)
     35c:	100b883a 	mov	r5,r2
     360:	e13ff817 	ldw	r4,-32(fp)
     364:	0000cb00 	call	cb0 <__udivsi3>
     368:	100d883a 	mov	r6,r2
     36c:	01000074 	movhi	r4,1
     370:	2134e404 	addi	r4,r4,-11376
     374:	e17fff17 	ldw	r5,-4(fp)
     378:	0000d600 	call	d60 <printf>

            usleep(500*1000);
     37c:	01000234 	movhi	r4,8
     380:	21284804 	addi	r4,r4,-24288
     384:	000b1f00 	call	b1f0 <usleep>
            if (bPass && bLoop){  // is abort loop?
     388:	e0bffe17 	ldw	r2,-8(fp)
     38c:	1005003a 	cmpeq	r2,r2,zero
     390:	10000e1e 	bne	r2,zero,3cc <main+0x1cc>
     394:	e0bffd17 	ldw	r2,-12(fp)
     398:	1005003a 	cmpeq	r2,r2,zero
     39c:	10000b1e 	bne	r2,zero,3cc <main+0x1cc>
            	ButtonStatus = IORD(KEY_BASE, 0);
     3a0:	00810134 	movhi	r2,1028
     3a4:	10840c04 	addi	r2,r2,4144
     3a8:	10800037 	ldwio	r2,0(r2)
     3ac:	e0bff745 	stb	r2,-35(fp)
            	if ((ButtonStatus & ButtonMask) != ButtonMask)
     3b0:	e0fff743 	ldbu	r3,-35(fp)
     3b4:	e0bff703 	ldbu	r2,-36(fp)
     3b8:	1884703a 	and	r2,r3,r2
     3bc:	10c03fcc 	andi	r3,r2,255
     3c0:	e0bff703 	ldbu	r2,-36(fp)
     3c4:	18800126 	beq	r3,r2,3cc <main+0x1cc>
            		bLoop = FALSE; // press any key to abort continued test
     3c8:	e03ffd15 	stw	zero,-12(fp)
            }
            usleep(600*1000);
     3cc:	01000274 	movhi	r4,9
     3d0:	2109f004 	addi	r4,r4,10176
     3d4:	000b1f00 	call	b1f0 <usleep>
        }while(bLoop && bPass);
     3d8:	e0bffd17 	ldw	r2,-12(fp)
     3dc:	1005003a 	cmpeq	r2,r2,zero
     3e0:	103f981e 	bne	r2,zero,244 <main+0x44>
     3e4:	e0bffe17 	ldw	r2,-8(fp)
     3e8:	1004c03a 	cmpne	r2,r2,zero
     3ec:	103fb31e 	bne	r2,zero,2bc <main+0xbc>
	} // while(1)
     3f0:	003f9406 	br	244 <main+0x44>

000003f4 <TMEM_Verify>:
#include "terasic_includes.h"
#include "mem_verify.h"



bool TMEM_Verify(alt_u32 BaseAddr, alt_u32 ByteLen, alt_u32 InitValue, bool bShowMessage){
     3f4:	def7e204 	addi	sp,sp,-8312
     3f8:	dfc81d15 	stw	ra,8308(sp)
     3fc:	df081c15 	stw	fp,8304(sp)
     400:	dc081b15 	stw	r16,8300(sp)
     404:	df081b04 	addi	fp,sp,8300
     408:	e13ffa15 	stw	r4,-24(fp)
     40c:	e17ffb15 	stw	r5,-20(fp)
     410:	e1bffc15 	stw	r6,-16(fp)
     414:	e1fffd15 	stw	r7,-12(fp)
    bool bPass = TRUE;
     418:	00800044 	movi	r2,1
     41c:	e0b7ed15 	stw	r2,-8268(fp)
    alt_u32 szData[1025];
    alt_u32 szRead[1025];
    int i, nRemainedLen, nAccessLen;
    alt_u32 *pDes, *pSrc, nItemNum, nPos;

    int nProgressIndex=0;
     420:	e037e515 	stw	zero,-8300(fp)
    alt_u32 szProgress[10];
    
    for(i=0;i<10;i++){
     424:	e037ec15 	stw	zero,-8272(fp)
     428:	00001106 	br	470 <TMEM_Verify+0x7c>
        szProgress[i] = ByteLen/10*(i+1);     
     42c:	e437ec17 	ldw	r16,-8272(fp)
     430:	e13ffb17 	ldw	r4,-20(fp)
     434:	01400284 	movi	r5,10
     438:	0000cb00 	call	cb0 <__udivsi3>
     43c:	1007883a 	mov	r3,r2
     440:	e0b7ec17 	ldw	r2,-8272(fp)
     444:	10800044 	addi	r2,r2,1
     448:	1887383a 	mul	r3,r3,r2
     44c:	8405883a 	add	r2,r16,r16
     450:	1085883a 	add	r2,r2,r2
     454:	e137e504 	addi	r4,fp,-8300
     458:	1105883a 	add	r2,r2,r4
     45c:	10880b04 	addi	r2,r2,8236
     460:	10c00015 	stw	r3,0(r2)
    alt_u32 *pDes, *pSrc, nItemNum, nPos;

    int nProgressIndex=0;
    alt_u32 szProgress[10];
    
    for(i=0;i<10;i++){
     464:	e0b7ec17 	ldw	r2,-8272(fp)
     468:	10800044 	addi	r2,r2,1
     46c:	e0b7ec15 	stw	r2,-8272(fp)
     470:	e0b7ec17 	ldw	r2,-8272(fp)
     474:	10800290 	cmplti	r2,r2,10
     478:	103fec1e 	bne	r2,zero,42c <TMEM_Verify+0x38>
        szProgress[i] = ByteLen/10*(i+1);     
    }
    
    
    
    nItemNum = sizeof(szData)/sizeof(szData[0]);
     47c:	00810044 	movi	r2,1025
     480:	e0b7e715 	stw	r2,-8292(fp)
    for(i=0;i<nItemNum;i++){
     484:	e037ec15 	stw	zero,-8272(fp)
     488:	00001f06 	br	508 <TMEM_Verify+0x114>
        if (i == 0)
     48c:	e0b7ec17 	ldw	r2,-8272(fp)
     490:	1004c03a 	cmpne	r2,r2,zero
     494:	1000091e 	bne	r2,zero,4bc <TMEM_Verify+0xc8>
            szData[i] = InitValue;
     498:	e0b7ec17 	ldw	r2,-8272(fp)
     49c:	1085883a 	add	r2,r2,r2
     4a0:	1085883a 	add	r2,r2,r2
     4a4:	e0f7e504 	addi	r3,fp,-8300
     4a8:	10c5883a 	add	r2,r2,r3
     4ac:	10c00904 	addi	r3,r2,36
     4b0:	e0bffc17 	ldw	r2,-16(fp)
     4b4:	18800015 	stw	r2,0(r3)
     4b8:	00001006 	br	4fc <TMEM_Verify+0x108>
        else     
            szData[i] = szData[i-1] * 13;
     4bc:	e137ec17 	ldw	r4,-8272(fp)
     4c0:	e0b7ec17 	ldw	r2,-8272(fp)
     4c4:	10bfffc4 	addi	r2,r2,-1
     4c8:	1085883a 	add	r2,r2,r2
     4cc:	1085883a 	add	r2,r2,r2
     4d0:	e0f7e504 	addi	r3,fp,-8300
     4d4:	10c5883a 	add	r2,r2,r3
     4d8:	10800904 	addi	r2,r2,36
     4dc:	10800017 	ldw	r2,0(r2)
     4e0:	10c00364 	muli	r3,r2,13
     4e4:	2105883a 	add	r2,r4,r4
     4e8:	1085883a 	add	r2,r2,r2
     4ec:	e137e504 	addi	r4,fp,-8300
     4f0:	1105883a 	add	r2,r2,r4
     4f4:	10800904 	addi	r2,r2,36
     4f8:	10c00015 	stw	r3,0(r2)
    }
    
    
    
    nItemNum = sizeof(szData)/sizeof(szData[0]);
    for(i=0;i<nItemNum;i++){
     4fc:	e0b7ec17 	ldw	r2,-8272(fp)
     500:	10800044 	addi	r2,r2,1
     504:	e0b7ec15 	stw	r2,-8272(fp)
     508:	e0f7ec17 	ldw	r3,-8272(fp)
     50c:	e0b7e717 	ldw	r2,-8292(fp)
     510:	18bfde36 	bltu	r3,r2,48c <TMEM_Verify+0x98>
        if (i == 0)
            szData[i] = InitValue;
        else     
            szData[i] = szData[i-1] * 13;
    }
    szData[nItemNum-1] = 0xAAAAAAAA;
     514:	e0b7e717 	ldw	r2,-8292(fp)
     518:	10bfffc4 	addi	r2,r2,-1
     51c:	1085883a 	add	r2,r2,r2
     520:	1085883a 	add	r2,r2,r2
     524:	e0f7e504 	addi	r3,fp,-8300
     528:	10c5883a 	add	r2,r2,r3
     52c:	10c00904 	addi	r3,r2,36
     530:	00aaaaf4 	movhi	r2,43691
     534:	10aaaa84 	addi	r2,r2,-21846
     538:	18800015 	stw	r2,0(r3)
    szData[nItemNum-2] = 0x55555555;
     53c:	e0b7e717 	ldw	r2,-8292(fp)
     540:	10bfff84 	addi	r2,r2,-2
     544:	1085883a 	add	r2,r2,r2
     548:	1085883a 	add	r2,r2,r2
     54c:	e137e504 	addi	r4,fp,-8300
     550:	1105883a 	add	r2,r2,r4
     554:	10c00904 	addi	r3,r2,36
     558:	00955574 	movhi	r2,21845
     55c:	10955544 	addi	r2,r2,21845
     560:	18800015 	stw	r2,0(r3)
    szData[nItemNum-3] = 0x00000000;
     564:	e0b7e717 	ldw	r2,-8292(fp)
     568:	10bfff44 	addi	r2,r2,-3
     56c:	1085883a 	add	r2,r2,r2
     570:	1085883a 	add	r2,r2,r2
     574:	e0f7e504 	addi	r3,fp,-8300
     578:	10c5883a 	add	r2,r2,r3
     57c:	10800904 	addi	r2,r2,36
     580:	10000015 	stw	zero,0(r2)
    szData[nItemNum-4] = 0xFFFFFFFF;
     584:	e0b7e717 	ldw	r2,-8292(fp)
     588:	10bfff04 	addi	r2,r2,-4
     58c:	1085883a 	add	r2,r2,r2
     590:	1085883a 	add	r2,r2,r2
     594:	e137e504 	addi	r4,fp,-8300
     598:	1105883a 	add	r2,r2,r4
     59c:	10c00904 	addi	r3,r2,36
     5a0:	00bfffc4 	movi	r2,-1
     5a4:	18800015 	stw	r2,0(r3)
    
    if (bShowMessage)
     5a8:	e0bffd17 	ldw	r2,-12(fp)
     5ac:	1005003a 	cmpeq	r2,r2,zero
     5b0:	1000031e 	bne	r2,zero,5c0 <TMEM_Verify+0x1cc>
        printf("write...\n");
     5b4:	01000074 	movhi	r4,1
     5b8:	2134eb04 	addi	r4,r4,-11348
     5bc:	0000e9c0 	call	e9c <puts>
    // write
    pDes = (alt_u32 *)BaseAddr;
     5c0:	e0bffa17 	ldw	r2,-24(fp)
     5c4:	e0b7e915 	stw	r2,-8284(fp)
    nAccessLen = sizeof(szData);
     5c8:	00840104 	movi	r2,4100
     5cc:	e0b7ea15 	stw	r2,-8280(fp)
    nPos = 0;
     5d0:	e037e615 	stw	zero,-8296(fp)
    while(nPos < ByteLen){
     5d4:	00003c06 	br	6c8 <TMEM_Verify+0x2d4>
        nRemainedLen = ByteLen - nPos;
     5d8:	e0fffb17 	ldw	r3,-20(fp)
     5dc:	e0b7e617 	ldw	r2,-8296(fp)
     5e0:	1885c83a 	sub	r2,r3,r2
     5e4:	e0b7eb15 	stw	r2,-8276(fp)
        if (nAccessLen > nRemainedLen)
     5e8:	e0f7ea17 	ldw	r3,-8280(fp)
     5ec:	e0b7eb17 	ldw	r2,-8276(fp)
     5f0:	10c0020e 	bge	r2,r3,5fc <TMEM_Verify+0x208>
            nAccessLen = nRemainedLen;
     5f4:	e0b7eb17 	ldw	r2,-8276(fp)
     5f8:	e0b7ea15 	stw	r2,-8280(fp)
        memcpy(pDes, szData, nAccessLen);
     5fc:	e1b7ea17 	ldw	r6,-8280(fp)
     600:	e0b7e917 	ldw	r2,-8284(fp)
     604:	e0f7ee04 	addi	r3,fp,-8264
     608:	1009883a 	mov	r4,r2
     60c:	180b883a 	mov	r5,r3
     610:	0000cc00 	call	cc0 <memcpy>
        pDes += nAccessLen/4;
     614:	e0b7ea17 	ldw	r2,-8280(fp)
     618:	e0bffe15 	stw	r2,-8(fp)
     61c:	e0fffe17 	ldw	r3,-8(fp)
     620:	1804403a 	cmpge	r2,r3,zero
     624:	1000031e 	bne	r2,zero,634 <TMEM_Verify+0x240>
     628:	e13ffe17 	ldw	r4,-8(fp)
     62c:	210000c4 	addi	r4,r4,3
     630:	e13ffe15 	stw	r4,-8(fp)
     634:	e0fffe17 	ldw	r3,-8(fp)
     638:	1805d0ba 	srai	r2,r3,2
     63c:	1085883a 	add	r2,r2,r2
     640:	1085883a 	add	r2,r2,r2
     644:	1007883a 	mov	r3,r2
     648:	e0b7e917 	ldw	r2,-8284(fp)
     64c:	10c5883a 	add	r2,r2,r3
     650:	e0b7e915 	stw	r2,-8284(fp)
        nPos += nAccessLen;
     654:	e0f7ea17 	ldw	r3,-8280(fp)
     658:	e0b7e617 	ldw	r2,-8296(fp)
     65c:	10c5883a 	add	r2,r2,r3
     660:	e0b7e615 	stw	r2,-8296(fp)
        
        if (bShowMessage){
     664:	e0bffd17 	ldw	r2,-12(fp)
     668:	1005003a 	cmpeq	r2,r2,zero
     66c:	1000161e 	bne	r2,zero,6c8 <TMEM_Verify+0x2d4>
            if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
     670:	e0b7e517 	ldw	r2,-8300(fp)
     674:	10800288 	cmpgei	r2,r2,10
     678:	1000131e 	bne	r2,zero,6c8 <TMEM_Verify+0x2d4>
     67c:	e0b7e517 	ldw	r2,-8300(fp)
     680:	1085883a 	add	r2,r2,r2
     684:	1085883a 	add	r2,r2,r2
     688:	e137e504 	addi	r4,fp,-8300
     68c:	1105883a 	add	r2,r2,r4
     690:	10880b04 	addi	r2,r2,8236
     694:	10c00017 	ldw	r3,0(r2)
     698:	e0b7e617 	ldw	r2,-8296(fp)
     69c:	10c00a36 	bltu	r2,r3,6c8 <TMEM_Verify+0x2d4>
                nProgressIndex++;
     6a0:	e0b7e517 	ldw	r2,-8300(fp)
     6a4:	10800044 	addi	r2,r2,1
     6a8:	e0b7e515 	stw	r2,-8300(fp)
                printf("%02d%% ", nProgressIndex*10);
     6ac:	e0b7e517 	ldw	r2,-8300(fp)
     6b0:	114002a4 	muli	r5,r2,10
     6b4:	01000074 	movhi	r4,1
     6b8:	2134ee04 	addi	r4,r4,-11336
     6bc:	0000d600 	call	d60 <printf>
                usleep(50);
     6c0:	01000c84 	movi	r4,50
     6c4:	000b1f00 	call	b1f0 <usleep>
        printf("write...\n");
    // write
    pDes = (alt_u32 *)BaseAddr;
    nAccessLen = sizeof(szData);
    nPos = 0;
    while(nPos < ByteLen){
     6c8:	e0f7e617 	ldw	r3,-8296(fp)
     6cc:	e0bffb17 	ldw	r2,-20(fp)
     6d0:	18bfc136 	bltu	r3,r2,5d8 <TMEM_Verify+0x1e4>
                usleep(50);
            }
        }            
    } 
    
    alt_dcache_flush_all();
     6d4:	000a8040 	call	a804 <alt_dcache_flush_all>
    
    if (bShowMessage){
     6d8:	e0bffd17 	ldw	r2,-12(fp)
     6dc:	1005003a 	cmpeq	r2,r2,zero
     6e0:	1000061e 	bne	r2,zero,6fc <TMEM_Verify+0x308>
        nProgressIndex = 0;
     6e4:	e037e515 	stw	zero,-8300(fp)
        printf("\nread/verify...\n");
     6e8:	01000074 	movhi	r4,1
     6ec:	2134f004 	addi	r4,r4,-11328
     6f0:	0000e9c0 	call	e9c <puts>
        usleep(50);
     6f4:	01000c84 	movi	r4,50
     6f8:	000b1f00 	call	b1f0 <usleep>
    }        
    
    // read & verify
    pSrc = (alt_u32 *)BaseAddr;
     6fc:	e0bffa17 	ldw	r2,-24(fp)
     700:	e0b7e815 	stw	r2,-8288(fp)
    nAccessLen = sizeof(szRead);
     704:	00840104 	movi	r2,4100
     708:	e0b7ea15 	stw	r2,-8280(fp)
    nPos = 0;
     70c:	e037e615 	stw	zero,-8296(fp)
    while(bPass && nPos < ByteLen){
     710:	00007606 	br	8ec <TMEM_Verify+0x4f8>
        nRemainedLen = ByteLen - nPos;
     714:	e0fffb17 	ldw	r3,-20(fp)
     718:	e0b7e617 	ldw	r2,-8296(fp)
     71c:	1885c83a 	sub	r2,r3,r2
     720:	e0b7eb15 	stw	r2,-8276(fp)
        if (nAccessLen > nRemainedLen)
     724:	e0f7ea17 	ldw	r3,-8280(fp)
     728:	e0b7eb17 	ldw	r2,-8276(fp)
     72c:	10c0020e 	bge	r2,r3,738 <TMEM_Verify+0x344>
            nAccessLen = nRemainedLen;
     730:	e0b7eb17 	ldw	r2,-8276(fp)
     734:	e0b7ea15 	stw	r2,-8280(fp)
       // memset(szRead, 0xAA, nAccessLen); // reset content    
        memcpy(szRead, pSrc, nAccessLen);
     738:	e1b7ea17 	ldw	r6,-8280(fp)
     73c:	e0bbef04 	addi	r2,fp,-4164
     740:	e0f7e817 	ldw	r3,-8288(fp)
     744:	1009883a 	mov	r4,r2
     748:	180b883a 	mov	r5,r3
     74c:	0000cc00 	call	cc0 <memcpy>
        // verify
        nItemNum = nAccessLen / 4;
     750:	e0b7ea17 	ldw	r2,-8280(fp)
     754:	e0bfff15 	stw	r2,-4(fp)
     758:	e0ffff17 	ldw	r3,-4(fp)
     75c:	1804403a 	cmpge	r2,r3,zero
     760:	1000031e 	bne	r2,zero,770 <TMEM_Verify+0x37c>
     764:	e13fff17 	ldw	r4,-4(fp)
     768:	210000c4 	addi	r4,r4,3
     76c:	e13fff15 	stw	r4,-4(fp)
     770:	e0ffff17 	ldw	r3,-4(fp)
     774:	1805d0ba 	srai	r2,r3,2
     778:	e0b7e715 	stw	r2,-8292(fp)
        for(i=0;i<nItemNum && bPass;i++){
     77c:	e037ec15 	stw	zero,-8272(fp)
     780:	00003006 	br	844 <TMEM_Verify+0x450>
            if (szRead[i] != szData[i]){
     784:	e0b7ec17 	ldw	r2,-8272(fp)
     788:	1085883a 	add	r2,r2,r2
     78c:	1085883a 	add	r2,r2,r2
     790:	e137e504 	addi	r4,fp,-8300
     794:	1105883a 	add	r2,r2,r4
     798:	10840a04 	addi	r2,r2,4136
     79c:	10c00017 	ldw	r3,0(r2)
     7a0:	e0b7ec17 	ldw	r2,-8272(fp)
     7a4:	1085883a 	add	r2,r2,r2
     7a8:	1085883a 	add	r2,r2,r2
     7ac:	e137e504 	addi	r4,fp,-8300
     7b0:	1105883a 	add	r2,r2,r4
     7b4:	10800904 	addi	r2,r2,36
     7b8:	10800017 	ldw	r2,0(r2)
     7bc:	18801e26 	beq	r3,r2,838 <TMEM_Verify+0x444>
                if (bShowMessage){
     7c0:	e0bffd17 	ldw	r2,-12(fp)
     7c4:	1005003a 	cmpeq	r2,r2,zero
     7c8:	10001a1e 	bne	r2,zero,834 <TMEM_Verify+0x440>
                   printf("verify ng, read=%08Xh, expected=%08Xh, i=%Xh\n", (int)szRead[i], (int)szData[i], (int)(nPos/4+i));
     7cc:	e0b7ec17 	ldw	r2,-8272(fp)
     7d0:	1085883a 	add	r2,r2,r2
     7d4:	1085883a 	add	r2,r2,r2
     7d8:	e0f7e504 	addi	r3,fp,-8300
     7dc:	10c5883a 	add	r2,r2,r3
     7e0:	10840a04 	addi	r2,r2,4136
     7e4:	10800017 	ldw	r2,0(r2)
     7e8:	100b883a 	mov	r5,r2
     7ec:	e0b7ec17 	ldw	r2,-8272(fp)
     7f0:	1085883a 	add	r2,r2,r2
     7f4:	1085883a 	add	r2,r2,r2
     7f8:	e137e504 	addi	r4,fp,-8300
     7fc:	1105883a 	add	r2,r2,r4
     800:	10800904 	addi	r2,r2,36
     804:	10800017 	ldw	r2,0(r2)
     808:	100d883a 	mov	r6,r2
     80c:	e0b7e617 	ldw	r2,-8296(fp)
     810:	1006d0ba 	srli	r3,r2,2
     814:	e0b7ec17 	ldw	r2,-8272(fp)
     818:	1885883a 	add	r2,r3,r2
     81c:	100f883a 	mov	r7,r2
     820:	01000074 	movhi	r4,1
     824:	2134f404 	addi	r4,r4,-11312
     828:	0000d600 	call	d60 <printf>
                   usleep(50);
     82c:	01000c84 	movi	r4,50
     830:	000b1f00 	call	b1f0 <usleep>
                }   
                bPass = FALSE;
     834:	e037ed15 	stw	zero,-8268(fp)
            nAccessLen = nRemainedLen;
       // memset(szRead, 0xAA, nAccessLen); // reset content    
        memcpy(szRead, pSrc, nAccessLen);
        // verify
        nItemNum = nAccessLen / 4;
        for(i=0;i<nItemNum && bPass;i++){
     838:	e0b7ec17 	ldw	r2,-8272(fp)
     83c:	10800044 	addi	r2,r2,1
     840:	e0b7ec15 	stw	r2,-8272(fp)
     844:	e0f7ec17 	ldw	r3,-8272(fp)
     848:	e0b7e717 	ldw	r2,-8292(fp)
     84c:	1880032e 	bgeu	r3,r2,85c <TMEM_Verify+0x468>
     850:	e0b7ed17 	ldw	r2,-8268(fp)
     854:	1004c03a 	cmpne	r2,r2,zero
     858:	103fca1e 	bne	r2,zero,784 <TMEM_Verify+0x390>
                }   
                bPass = FALSE;
            }    
        }
        //
        pSrc += nItemNum;
     85c:	e0b7e717 	ldw	r2,-8292(fp)
     860:	1085883a 	add	r2,r2,r2
     864:	1085883a 	add	r2,r2,r2
     868:	1007883a 	mov	r3,r2
     86c:	e0b7e817 	ldw	r2,-8288(fp)
     870:	10c5883a 	add	r2,r2,r3
     874:	e0b7e815 	stw	r2,-8288(fp)
        nPos += nAccessLen;
     878:	e0f7ea17 	ldw	r3,-8280(fp)
     87c:	e0b7e617 	ldw	r2,-8296(fp)
     880:	10c5883a 	add	r2,r2,r3
     884:	e0b7e615 	stw	r2,-8296(fp)

        if (bShowMessage){
     888:	e0bffd17 	ldw	r2,-12(fp)
     88c:	1005003a 	cmpeq	r2,r2,zero
     890:	1000161e 	bne	r2,zero,8ec <TMEM_Verify+0x4f8>
            if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
     894:	e0b7e517 	ldw	r2,-8300(fp)
     898:	10800288 	cmpgei	r2,r2,10
     89c:	1000131e 	bne	r2,zero,8ec <TMEM_Verify+0x4f8>
     8a0:	e0b7e517 	ldw	r2,-8300(fp)
     8a4:	1085883a 	add	r2,r2,r2
     8a8:	1085883a 	add	r2,r2,r2
     8ac:	e0f7e504 	addi	r3,fp,-8300
     8b0:	10c5883a 	add	r2,r2,r3
     8b4:	10880b04 	addi	r2,r2,8236
     8b8:	10c00017 	ldw	r3,0(r2)
     8bc:	e0b7e617 	ldw	r2,-8296(fp)
     8c0:	10c00a36 	bltu	r2,r3,8ec <TMEM_Verify+0x4f8>
                nProgressIndex++;
     8c4:	e0b7e517 	ldw	r2,-8300(fp)
     8c8:	10800044 	addi	r2,r2,1
     8cc:	e0b7e515 	stw	r2,-8300(fp)
                printf("%02d%% ", nProgressIndex*10);
     8d0:	e0b7e517 	ldw	r2,-8300(fp)
     8d4:	114002a4 	muli	r5,r2,10
     8d8:	01000074 	movhi	r4,1
     8dc:	2134ee04 	addi	r4,r4,-11336
     8e0:	0000d600 	call	d60 <printf>
                usleep(50);
     8e4:	01000c84 	movi	r4,50
     8e8:	000b1f00 	call	b1f0 <usleep>
    
    // read & verify
    pSrc = (alt_u32 *)BaseAddr;
    nAccessLen = sizeof(szRead);
    nPos = 0;
    while(bPass && nPos < ByteLen){
     8ec:	e0b7ed17 	ldw	r2,-8268(fp)
     8f0:	1005003a 	cmpeq	r2,r2,zero
     8f4:	1000031e 	bne	r2,zero,904 <TMEM_Verify+0x510>
     8f8:	e0f7e617 	ldw	r3,-8296(fp)
     8fc:	e0bffb17 	ldw	r2,-20(fp)
     900:	18bf8436 	bltu	r3,r2,714 <TMEM_Verify+0x320>
                usleep(50);
            }
        }            
    }     
    
    if (bShowMessage)
     904:	e0bffd17 	ldw	r2,-12(fp)
     908:	1005003a 	cmpeq	r2,r2,zero
     90c:	1000021e 	bne	r2,zero,918 <TMEM_Verify+0x524>
        printf("\n");
     910:	01000284 	movi	r4,10
     914:	0000dd80 	call	dd8 <putchar>
   
    
    return bPass;
     918:	e0b7ed17 	ldw	r2,-8268(fp)
}
     91c:	e037883a 	mov	sp,fp
     920:	dfc00217 	ldw	ra,8(sp)
     924:	df000117 	ldw	fp,4(sp)
     928:	dc000017 	ldw	r16,0(sp)
     92c:	dec00304 	addi	sp,sp,12
     930:	f800283a 	ret

00000934 <TMEM_QuickVerify>:

bool TMEM_QuickVerify(alt_u32 BaseAddr, alt_u32 DataSize, alt_u32 DataWidth, alt_u32 AddrWidth){
     934:	defff104 	addi	sp,sp,-60
     938:	dfc00e15 	stw	ra,56(sp)
     93c:	df000d15 	stw	fp,52(sp)
     940:	df000d04 	addi	fp,sp,52
     944:	e13ffc15 	stw	r4,-16(fp)
     948:	e17ffd15 	stw	r5,-12(fp)
     94c:	e1bffe15 	stw	r6,-8(fp)
     950:	e1ffff15 	stw	r7,-4(fp)
    bool bPass = TRUE;
     954:	00800044 	movi	r2,1
     958:	e0bffb15 	stw	r2,-20(fp)
    const alt_u32 TestNum = 1024*512;
     95c:	00800234 	movhi	r2,8
     960:	e0bffa15 	stw	r2,-24(fp)
    const alt_u32 TestPattern = 0xAA;
     964:	00802a84 	movi	r2,170
     968:	e0bff915 	stw	r2,-28(fp)
    alt_u32 mask, Read32, Addr32, TestData32, TestAddr32;
    int i;
    
    //alt_u32 *pMem = (alt_u32 *)BaseAddr;
    // test address line
    mask = 0x01;
     96c:	00800044 	movi	r2,1
     970:	e0bff815 	stw	r2,-32(fp)
    for(i=0;i<AddrWidth && bPass;i++){
     974:	e03ff315 	stw	zero,-52(fp)
     978:	00001a06 	br	9e4 <TMEM_QuickVerify+0xb0>
        //*(pMem + mask) = TestPattern;
        IOWR(BaseAddr, mask, TestPattern);
     97c:	e0bff817 	ldw	r2,-32(fp)
     980:	1085883a 	add	r2,r2,r2
     984:	1085883a 	add	r2,r2,r2
     988:	1007883a 	mov	r3,r2
     98c:	e0bffc17 	ldw	r2,-16(fp)
     990:	1885883a 	add	r2,r3,r2
     994:	e0fff917 	ldw	r3,-28(fp)
     998:	10c00035 	stwio	r3,0(r2)
        //if (*(pMem + mask) != TestPattern)
        Read32 = IORD(BaseAddr, mask);
     99c:	e0bff817 	ldw	r2,-32(fp)
     9a0:	1085883a 	add	r2,r2,r2
     9a4:	1085883a 	add	r2,r2,r2
     9a8:	1007883a 	mov	r3,r2
     9ac:	e0bffc17 	ldw	r2,-16(fp)
     9b0:	1885883a 	add	r2,r3,r2
     9b4:	10800037 	ldwio	r2,0(r2)
     9b8:	e0bff715 	stw	r2,-36(fp)
        if (Read32 != TestPattern)
     9bc:	e0fff717 	ldw	r3,-36(fp)
     9c0:	e0bff917 	ldw	r2,-28(fp)
     9c4:	18800126 	beq	r3,r2,9cc <TMEM_QuickVerify+0x98>
            bPass = FALSE;
     9c8:	e03ffb15 	stw	zero,-20(fp)
        mask <<= 1;    
     9cc:	e0bff817 	ldw	r2,-32(fp)
     9d0:	1085883a 	add	r2,r2,r2
     9d4:	e0bff815 	stw	r2,-32(fp)
    int i;
    
    //alt_u32 *pMem = (alt_u32 *)BaseAddr;
    // test address line
    mask = 0x01;
    for(i=0;i<AddrWidth && bPass;i++){
     9d8:	e0bff317 	ldw	r2,-52(fp)
     9dc:	10800044 	addi	r2,r2,1
     9e0:	e0bff315 	stw	r2,-52(fp)
     9e4:	e0fff317 	ldw	r3,-52(fp)
     9e8:	e0bfff17 	ldw	r2,-4(fp)
     9ec:	1880032e 	bgeu	r3,r2,9fc <TMEM_QuickVerify+0xc8>
     9f0:	e0bffb17 	ldw	r2,-20(fp)
     9f4:	1004c03a 	cmpne	r2,r2,zero
     9f8:	103fe01e 	bne	r2,zero,97c <TMEM_QuickVerify+0x48>
            bPass = FALSE;
        mask <<= 1;    
    }
    
    // test data line
    mask = 0x01;
     9fc:	00800044 	movi	r2,1
     a00:	e0bff815 	stw	r2,-32(fp)
    for(i=0;i<DataWidth && bPass;i++){
     a04:	e03ff315 	stw	zero,-52(fp)
     a08:	00002206 	br	a94 <TMEM_QuickVerify+0x160>
        //*(pMem+i/32) = mask;
        Addr32 = i*13;
     a0c:	e0bff317 	ldw	r2,-52(fp)
     a10:	10800364 	muli	r2,r2,13
     a14:	e0bff615 	stw	r2,-40(fp)
        IOWR(BaseAddr, Addr32, mask);
     a18:	e0bff617 	ldw	r2,-40(fp)
     a1c:	1085883a 	add	r2,r2,r2
     a20:	1085883a 	add	r2,r2,r2
     a24:	1007883a 	mov	r3,r2
     a28:	e0bffc17 	ldw	r2,-16(fp)
     a2c:	1885883a 	add	r2,r3,r2
     a30:	e0fff817 	ldw	r3,-32(fp)
     a34:	10c00035 	stwio	r3,0(r2)
        Read32 = IORD(BaseAddr, Addr32);
     a38:	e0bff617 	ldw	r2,-40(fp)
     a3c:	1085883a 	add	r2,r2,r2
     a40:	1085883a 	add	r2,r2,r2
     a44:	1007883a 	mov	r3,r2
     a48:	e0bffc17 	ldw	r2,-16(fp)
     a4c:	1885883a 	add	r2,r3,r2
     a50:	10800037 	ldwio	r2,0(r2)
     a54:	e0bff715 	stw	r2,-36(fp)
        //if (*(pMem+i/32) != mask)
        if (Read32 != mask)
     a58:	e0fff717 	ldw	r3,-36(fp)
     a5c:	e0bff817 	ldw	r2,-32(fp)
     a60:	18800126 	beq	r3,r2,a68 <TMEM_QuickVerify+0x134>
            bPass = FALSE;
     a64:	e03ffb15 	stw	zero,-20(fp)
        mask <<= 1;
     a68:	e0bff817 	ldw	r2,-32(fp)
     a6c:	1085883a 	add	r2,r2,r2
     a70:	e0bff815 	stw	r2,-32(fp)
        if (mask == 0x00)
     a74:	e0bff817 	ldw	r2,-32(fp)
     a78:	1004c03a 	cmpne	r2,r2,zero
     a7c:	1000021e 	bne	r2,zero,a88 <TMEM_QuickVerify+0x154>
            mask = 0x01;    
     a80:	00800044 	movi	r2,1
     a84:	e0bff815 	stw	r2,-32(fp)
        mask <<= 1;    
    }
    
    // test data line
    mask = 0x01;
    for(i=0;i<DataWidth && bPass;i++){
     a88:	e0bff317 	ldw	r2,-52(fp)
     a8c:	10800044 	addi	r2,r2,1
     a90:	e0bff315 	stw	r2,-52(fp)
     a94:	e0fff317 	ldw	r3,-52(fp)
     a98:	e0bffe17 	ldw	r2,-8(fp)
     a9c:	1880032e 	bgeu	r3,r2,aac <TMEM_QuickVerify+0x178>
     aa0:	e0bffb17 	ldw	r2,-20(fp)
     aa4:	1004c03a 	cmpne	r2,r2,zero
     aa8:	103fd81e 	bne	r2,zero,a0c <TMEM_QuickVerify+0xd8>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     aac:	00800074 	movhi	r2,1
     ab0:	10830804 	addi	r2,r2,3104
     ab4:	10800017 	ldw	r2,0(r2)
     ab8:	1009883a 	mov	r4,r2
        if (mask == 0x00)
            mask = 0x01;    
    }
    
    // random data test
    srand(alt_nticks());
     abc:	0000eb00 	call	eb0 <srand>
    for(i=0;i<TestNum && bPass;i++){
     ac0:	e03ff315 	stw	zero,-52(fp)
     ac4:	00001f06 	br	b44 <TMEM_QuickVerify+0x210>
        TestAddr32 = rand()%(DataSize/4);
     ac8:	0000ecc0 	call	ecc <rand>
     acc:	1009883a 	mov	r4,r2
     ad0:	e0bffd17 	ldw	r2,-12(fp)
     ad4:	100ad0ba 	srli	r5,r2,2
     ad8:	0000cb80 	call	cb8 <__umodsi3>
     adc:	e0bff415 	stw	r2,-48(fp)
        TestData32 = rand();
     ae0:	0000ecc0 	call	ecc <rand>
     ae4:	e0bff515 	stw	r2,-44(fp)
        IOWR(BaseAddr, TestAddr32, TestData32);
     ae8:	e0bff417 	ldw	r2,-48(fp)
     aec:	1085883a 	add	r2,r2,r2
     af0:	1085883a 	add	r2,r2,r2
     af4:	1007883a 	mov	r3,r2
     af8:	e0bffc17 	ldw	r2,-16(fp)
     afc:	1885883a 	add	r2,r3,r2
     b00:	e0fff517 	ldw	r3,-44(fp)
     b04:	10c00035 	stwio	r3,0(r2)
        Read32 = IORD(BaseAddr, TestAddr32);
     b08:	e0bff417 	ldw	r2,-48(fp)
     b0c:	1085883a 	add	r2,r2,r2
     b10:	1085883a 	add	r2,r2,r2
     b14:	1007883a 	mov	r3,r2
     b18:	e0bffc17 	ldw	r2,-16(fp)
     b1c:	1885883a 	add	r2,r3,r2
     b20:	10800037 	ldwio	r2,0(r2)
     b24:	e0bff715 	stw	r2,-36(fp)
        if (Read32 != TestData32)
     b28:	e0fff717 	ldw	r3,-36(fp)
     b2c:	e0bff517 	ldw	r2,-44(fp)
     b30:	18800126 	beq	r3,r2,b38 <TMEM_QuickVerify+0x204>
            bPass = FALSE;        
     b34:	e03ffb15 	stw	zero,-20(fp)
            mask = 0x01;    
    }
    
    // random data test
    srand(alt_nticks());
    for(i=0;i<TestNum && bPass;i++){
     b38:	e0bff317 	ldw	r2,-52(fp)
     b3c:	10800044 	addi	r2,r2,1
     b40:	e0bff315 	stw	r2,-52(fp)
     b44:	e0fff317 	ldw	r3,-52(fp)
     b48:	e0bffa17 	ldw	r2,-24(fp)
     b4c:	1880032e 	bgeu	r3,r2,b5c <TMEM_QuickVerify+0x228>
     b50:	e0bffb17 	ldw	r2,-20(fp)
     b54:	1004c03a 	cmpne	r2,r2,zero
     b58:	103fdb1e 	bne	r2,zero,ac8 <TMEM_QuickVerify+0x194>
        if (Read32 != TestData32)
            bPass = FALSE;        
        
    }
    
    return bPass;
     b5c:	e0bffb17 	ldw	r2,-20(fp)
}
     b60:	e037883a 	mov	sp,fp
     b64:	dfc00117 	ldw	ra,4(sp)
     b68:	df000017 	ldw	fp,0(sp)
     b6c:	dec00204 	addi	sp,sp,8
     b70:	f800283a 	ret

00000b74 <udivmodsi4>:
     b74:	29001b2e 	bgeu	r5,r4,be4 <udivmodsi4+0x70>
     b78:	28001a16 	blt	r5,zero,be4 <udivmodsi4+0x70>
     b7c:	00800044 	movi	r2,1
     b80:	0007883a 	mov	r3,zero
     b84:	01c007c4 	movi	r7,31
     b88:	00000306 	br	b98 <udivmodsi4+0x24>
     b8c:	19c01326 	beq	r3,r7,bdc <udivmodsi4+0x68>
     b90:	18c00044 	addi	r3,r3,1
     b94:	28000416 	blt	r5,zero,ba8 <udivmodsi4+0x34>
     b98:	294b883a 	add	r5,r5,r5
     b9c:	1085883a 	add	r2,r2,r2
     ba0:	293ffa36 	bltu	r5,r4,b8c <udivmodsi4+0x18>
     ba4:	10000d26 	beq	r2,zero,bdc <udivmodsi4+0x68>
     ba8:	0007883a 	mov	r3,zero
     bac:	21400236 	bltu	r4,r5,bb8 <udivmodsi4+0x44>
     bb0:	2149c83a 	sub	r4,r4,r5
     bb4:	1886b03a 	or	r3,r3,r2
     bb8:	1004d07a 	srli	r2,r2,1
     bbc:	280ad07a 	srli	r5,r5,1
     bc0:	103ffa1e 	bne	r2,zero,bac <udivmodsi4+0x38>
     bc4:	30000226 	beq	r6,zero,bd0 <udivmodsi4+0x5c>
     bc8:	2005883a 	mov	r2,r4
     bcc:	f800283a 	ret
     bd0:	1809883a 	mov	r4,r3
     bd4:	2005883a 	mov	r2,r4
     bd8:	f800283a 	ret
     bdc:	0007883a 	mov	r3,zero
     be0:	003ff806 	br	bc4 <udivmodsi4+0x50>
     be4:	00800044 	movi	r2,1
     be8:	0007883a 	mov	r3,zero
     bec:	003fef06 	br	bac <udivmodsi4+0x38>

00000bf0 <__divsi3>:
     bf0:	defffe04 	addi	sp,sp,-8
     bf4:	dc000015 	stw	r16,0(sp)
     bf8:	dfc00115 	stw	ra,4(sp)
     bfc:	0021883a 	mov	r16,zero
     c00:	20000c16 	blt	r4,zero,c34 <__divsi3+0x44>
     c04:	000d883a 	mov	r6,zero
     c08:	28000e16 	blt	r5,zero,c44 <__divsi3+0x54>
     c0c:	0000b740 	call	b74 <udivmodsi4>
     c10:	1007883a 	mov	r3,r2
     c14:	8005003a 	cmpeq	r2,r16,zero
     c18:	1000011e 	bne	r2,zero,c20 <__divsi3+0x30>
     c1c:	00c7c83a 	sub	r3,zero,r3
     c20:	1805883a 	mov	r2,r3
     c24:	dfc00117 	ldw	ra,4(sp)
     c28:	dc000017 	ldw	r16,0(sp)
     c2c:	dec00204 	addi	sp,sp,8
     c30:	f800283a 	ret
     c34:	0109c83a 	sub	r4,zero,r4
     c38:	04000044 	movi	r16,1
     c3c:	000d883a 	mov	r6,zero
     c40:	283ff20e 	bge	r5,zero,c0c <__divsi3+0x1c>
     c44:	014bc83a 	sub	r5,zero,r5
     c48:	8021003a 	cmpeq	r16,r16,zero
     c4c:	003fef06 	br	c0c <__divsi3+0x1c>

00000c50 <__modsi3>:
     c50:	deffff04 	addi	sp,sp,-4
     c54:	dfc00015 	stw	ra,0(sp)
     c58:	01800044 	movi	r6,1
     c5c:	2807883a 	mov	r3,r5
     c60:	20000416 	blt	r4,zero,c74 <__modsi3+0x24>
     c64:	28000c16 	blt	r5,zero,c98 <__modsi3+0x48>
     c68:	dfc00017 	ldw	ra,0(sp)
     c6c:	dec00104 	addi	sp,sp,4
     c70:	0000b741 	jmpi	b74 <udivmodsi4>
     c74:	0109c83a 	sub	r4,zero,r4
     c78:	28000b16 	blt	r5,zero,ca8 <__modsi3+0x58>
     c7c:	180b883a 	mov	r5,r3
     c80:	01800044 	movi	r6,1
     c84:	0000b740 	call	b74 <udivmodsi4>
     c88:	0085c83a 	sub	r2,zero,r2
     c8c:	dfc00017 	ldw	ra,0(sp)
     c90:	dec00104 	addi	sp,sp,4
     c94:	f800283a 	ret
     c98:	014bc83a 	sub	r5,zero,r5
     c9c:	dfc00017 	ldw	ra,0(sp)
     ca0:	dec00104 	addi	sp,sp,4
     ca4:	0000b741 	jmpi	b74 <udivmodsi4>
     ca8:	0147c83a 	sub	r3,zero,r5
     cac:	003ff306 	br	c7c <__modsi3+0x2c>

00000cb0 <__udivsi3>:
     cb0:	000d883a 	mov	r6,zero
     cb4:	0000b741 	jmpi	b74 <udivmodsi4>

00000cb8 <__umodsi3>:
     cb8:	01800044 	movi	r6,1
     cbc:	0000b741 	jmpi	b74 <udivmodsi4>

00000cc0 <memcpy>:
     cc0:	01c003c4 	movi	r7,15
     cc4:	2007883a 	mov	r3,r4
     cc8:	3980032e 	bgeu	r7,r6,cd8 <memcpy+0x18>
     ccc:	2904b03a 	or	r2,r5,r4
     cd0:	108000cc 	andi	r2,r2,3
     cd4:	10000926 	beq	r2,zero,cfc <memcpy+0x3c>
     cd8:	30000626 	beq	r6,zero,cf4 <memcpy+0x34>
     cdc:	30cd883a 	add	r6,r6,r3
     ce0:	28800003 	ldbu	r2,0(r5)
     ce4:	29400044 	addi	r5,r5,1
     ce8:	18800005 	stb	r2,0(r3)
     cec:	18c00044 	addi	r3,r3,1
     cf0:	30fffb1e 	bne	r6,r3,ce0 <memcpy+0x20>
     cf4:	2005883a 	mov	r2,r4
     cf8:	f800283a 	ret
     cfc:	3811883a 	mov	r8,r7
     d00:	200f883a 	mov	r7,r4
     d04:	28c00017 	ldw	r3,0(r5)
     d08:	31bffc04 	addi	r6,r6,-16
     d0c:	38c00015 	stw	r3,0(r7)
     d10:	28800117 	ldw	r2,4(r5)
     d14:	38800115 	stw	r2,4(r7)
     d18:	28c00217 	ldw	r3,8(r5)
     d1c:	38c00215 	stw	r3,8(r7)
     d20:	28800317 	ldw	r2,12(r5)
     d24:	29400404 	addi	r5,r5,16
     d28:	38800315 	stw	r2,12(r7)
     d2c:	39c00404 	addi	r7,r7,16
     d30:	41bff436 	bltu	r8,r6,d04 <memcpy+0x44>
     d34:	008000c4 	movi	r2,3
     d38:	1180072e 	bgeu	r2,r6,d58 <memcpy+0x98>
     d3c:	1007883a 	mov	r3,r2
     d40:	28800017 	ldw	r2,0(r5)
     d44:	31bfff04 	addi	r6,r6,-4
     d48:	29400104 	addi	r5,r5,4
     d4c:	38800015 	stw	r2,0(r7)
     d50:	39c00104 	addi	r7,r7,4
     d54:	19bffa36 	bltu	r3,r6,d40 <memcpy+0x80>
     d58:	3807883a 	mov	r3,r7
     d5c:	003fde06 	br	cd8 <memcpy+0x18>

00000d60 <printf>:
     d60:	defffb04 	addi	sp,sp,-20
     d64:	dfc00115 	stw	ra,4(sp)
     d68:	d9400215 	stw	r5,8(sp)
     d6c:	d9800315 	stw	r6,12(sp)
     d70:	d9c00415 	stw	r7,16(sp)
     d74:	00800074 	movhi	r2,1
     d78:	10bc5604 	addi	r2,r2,-3752
     d7c:	10c00017 	ldw	r3,0(r2)
     d80:	200b883a 	mov	r5,r4
     d84:	d8800204 	addi	r2,sp,8
     d88:	19000217 	ldw	r4,8(r3)
     d8c:	100d883a 	mov	r6,r2
     d90:	d8800015 	stw	r2,0(sp)
     d94:	0002ebc0 	call	2ebc <__vfprintf_internal>
     d98:	dfc00117 	ldw	ra,4(sp)
     d9c:	dec00504 	addi	sp,sp,20
     da0:	f800283a 	ret

00000da4 <_printf_r>:
     da4:	defffc04 	addi	sp,sp,-16
     da8:	dfc00115 	stw	ra,4(sp)
     dac:	d9800215 	stw	r6,8(sp)
     db0:	d9c00315 	stw	r7,12(sp)
     db4:	280d883a 	mov	r6,r5
     db8:	21400217 	ldw	r5,8(r4)
     dbc:	d8c00204 	addi	r3,sp,8
     dc0:	180f883a 	mov	r7,r3
     dc4:	d8c00015 	stw	r3,0(sp)
     dc8:	00010100 	call	1010 <___vfprintf_internal_r>
     dcc:	dfc00117 	ldw	ra,4(sp)
     dd0:	dec00404 	addi	sp,sp,16
     dd4:	f800283a 	ret

00000dd8 <putchar>:
     dd8:	00800074 	movhi	r2,1
     ddc:	10bc5604 	addi	r2,r2,-3752
     de0:	11800017 	ldw	r6,0(r2)
     de4:	200b883a 	mov	r5,r4
     de8:	3009883a 	mov	r4,r6
     dec:	31800217 	ldw	r6,8(r6)
     df0:	00074201 	jmpi	7420 <_putc_r>

00000df4 <_putchar_r>:
     df4:	21800217 	ldw	r6,8(r4)
     df8:	00074201 	jmpi	7420 <_putc_r>

00000dfc <_puts_r>:
     dfc:	defff604 	addi	sp,sp,-40
     e00:	dc400715 	stw	r17,28(sp)
     e04:	2023883a 	mov	r17,r4
     e08:	2809883a 	mov	r4,r5
     e0c:	dfc00915 	stw	ra,36(sp)
     e10:	dcc00815 	stw	r19,32(sp)
     e14:	2827883a 	mov	r19,r5
     e18:	0000f440 	call	f44 <strlen>
     e1c:	89400217 	ldw	r5,8(r17)
     e20:	00c00074 	movhi	r3,1
     e24:	18f50004 	addi	r3,r3,-11264
     e28:	01c00044 	movi	r7,1
     e2c:	12000044 	addi	r8,r2,1
     e30:	d8c00515 	stw	r3,20(sp)
     e34:	d9c00615 	stw	r7,24(sp)
     e38:	d8c00304 	addi	r3,sp,12
     e3c:	01c00084 	movi	r7,2
     e40:	8809883a 	mov	r4,r17
     e44:	d80d883a 	mov	r6,sp
     e48:	d8c00015 	stw	r3,0(sp)
     e4c:	dcc00315 	stw	r19,12(sp)
     e50:	da000215 	stw	r8,8(sp)
     e54:	d9c00115 	stw	r7,4(sp)
     e58:	d8800415 	stw	r2,16(sp)
     e5c:	00051180 	call	5118 <__sfvwrite_r>
     e60:	00ffffc4 	movi	r3,-1
     e64:	10000626 	beq	r2,zero,e80 <_puts_r+0x84>
     e68:	1805883a 	mov	r2,r3
     e6c:	dfc00917 	ldw	ra,36(sp)
     e70:	dcc00817 	ldw	r19,32(sp)
     e74:	dc400717 	ldw	r17,28(sp)
     e78:	dec00a04 	addi	sp,sp,40
     e7c:	f800283a 	ret
     e80:	00c00284 	movi	r3,10
     e84:	1805883a 	mov	r2,r3
     e88:	dfc00917 	ldw	ra,36(sp)
     e8c:	dcc00817 	ldw	r19,32(sp)
     e90:	dc400717 	ldw	r17,28(sp)
     e94:	dec00a04 	addi	sp,sp,40
     e98:	f800283a 	ret

00000e9c <puts>:
     e9c:	00800074 	movhi	r2,1
     ea0:	10bc5604 	addi	r2,r2,-3752
     ea4:	200b883a 	mov	r5,r4
     ea8:	11000017 	ldw	r4,0(r2)
     eac:	0000dfc1 	jmpi	dfc <_puts_r>

00000eb0 <srand>:
     eb0:	00800074 	movhi	r2,1
     eb4:	10bc5604 	addi	r2,r2,-3752
     eb8:	11400017 	ldw	r5,0(r2)
     ebc:	0007883a 	mov	r3,zero
     ec0:	28c02a15 	stw	r3,168(r5)
     ec4:	29002915 	stw	r4,164(r5)
     ec8:	f800283a 	ret

00000ecc <rand>:
     ecc:	defffe04 	addi	sp,sp,-8
     ed0:	00800074 	movhi	r2,1
     ed4:	10bc5604 	addi	r2,r2,-3752
     ed8:	dc000015 	stw	r16,0(sp)
     edc:	14000017 	ldw	r16,0(r2)
     ee0:	dfc00115 	stw	ra,4(sp)
     ee4:	00932574 	movhi	r2,19605
     ee8:	109fcb44 	addi	r2,r2,32557
     eec:	82002917 	ldw	r8,164(r16)
     ef0:	82402a17 	ldw	r9,168(r16)
     ef4:	00d614b4 	movhi	r3,22610
     ef8:	18fd0b44 	addi	r3,r3,-3027
     efc:	4009883a 	mov	r4,r8
     f00:	180f883a 	mov	r7,r3
     f04:	100d883a 	mov	r6,r2
     f08:	480b883a 	mov	r5,r9
     f0c:	00083c40 	call	83c4 <__muldi3>
     f10:	02000044 	movi	r8,1
     f14:	1209883a 	add	r4,r2,r8
     f18:	2095803a 	cmpltu	r10,r4,r2
     f1c:	50d5883a 	add	r10,r10,r3
     f20:	81002915 	stw	r4,164(r16)
     f24:	01200034 	movhi	r4,32768
     f28:	213fffc4 	addi	r4,r4,-1
     f2c:	2284703a 	and	r2,r4,r10
     f30:	82802a15 	stw	r10,168(r16)
     f34:	dfc00117 	ldw	ra,4(sp)
     f38:	dc000017 	ldw	r16,0(sp)
     f3c:	dec00204 	addi	sp,sp,8
     f40:	f800283a 	ret

00000f44 <strlen>:
     f44:	208000cc 	andi	r2,r4,3
     f48:	2011883a 	mov	r8,r4
     f4c:	1000161e 	bne	r2,zero,fa8 <strlen+0x64>
     f50:	20c00017 	ldw	r3,0(r4)
     f54:	017fbff4 	movhi	r5,65279
     f58:	297fbfc4 	addi	r5,r5,-257
     f5c:	01e02074 	movhi	r7,32897
     f60:	39e02004 	addi	r7,r7,-32640
     f64:	1945883a 	add	r2,r3,r5
     f68:	11c4703a 	and	r2,r2,r7
     f6c:	00c6303a 	nor	r3,zero,r3
     f70:	1886703a 	and	r3,r3,r2
     f74:	18000c1e 	bne	r3,zero,fa8 <strlen+0x64>
     f78:	280d883a 	mov	r6,r5
     f7c:	380b883a 	mov	r5,r7
     f80:	21000104 	addi	r4,r4,4
     f84:	20800017 	ldw	r2,0(r4)
     f88:	1187883a 	add	r3,r2,r6
     f8c:	1946703a 	and	r3,r3,r5
     f90:	0084303a 	nor	r2,zero,r2
     f94:	10c4703a 	and	r2,r2,r3
     f98:	103ff926 	beq	r2,zero,f80 <strlen+0x3c>
     f9c:	20800007 	ldb	r2,0(r4)
     fa0:	10000326 	beq	r2,zero,fb0 <strlen+0x6c>
     fa4:	21000044 	addi	r4,r4,1
     fa8:	20800007 	ldb	r2,0(r4)
     fac:	103ffd1e 	bne	r2,zero,fa4 <strlen+0x60>
     fb0:	2205c83a 	sub	r2,r4,r8
     fb4:	f800283a 	ret

00000fb8 <__sprint_r>:
     fb8:	30800217 	ldw	r2,8(r6)
     fbc:	defffe04 	addi	sp,sp,-8
     fc0:	dc000015 	stw	r16,0(sp)
     fc4:	dfc00115 	stw	ra,4(sp)
     fc8:	3021883a 	mov	r16,r6
     fcc:	0007883a 	mov	r3,zero
     fd0:	1000061e 	bne	r2,zero,fec <__sprint_r+0x34>
     fd4:	1805883a 	mov	r2,r3
     fd8:	30000115 	stw	zero,4(r6)
     fdc:	dfc00117 	ldw	ra,4(sp)
     fe0:	dc000017 	ldw	r16,0(sp)
     fe4:	dec00204 	addi	sp,sp,8
     fe8:	f800283a 	ret
     fec:	00051180 	call	5118 <__sfvwrite_r>
     ff0:	1007883a 	mov	r3,r2
     ff4:	1805883a 	mov	r2,r3
     ff8:	80000115 	stw	zero,4(r16)
     ffc:	80000215 	stw	zero,8(r16)
    1000:	dfc00117 	ldw	ra,4(sp)
    1004:	dc000017 	ldw	r16,0(sp)
    1008:	dec00204 	addi	sp,sp,8
    100c:	f800283a 	ret

00001010 <___vfprintf_internal_r>:
    1010:	defea404 	addi	sp,sp,-1392
    1014:	dd815815 	stw	r22,1376(sp)
    1018:	dc015215 	stw	r16,1352(sp)
    101c:	d9c15115 	stw	r7,1348(sp)
    1020:	dfc15b15 	stw	ra,1388(sp)
    1024:	df015a15 	stw	fp,1384(sp)
    1028:	ddc15915 	stw	r23,1380(sp)
    102c:	dd415715 	stw	r21,1372(sp)
    1030:	dd015615 	stw	r20,1368(sp)
    1034:	dcc15515 	stw	r19,1364(sp)
    1038:	dc815415 	stw	r18,1360(sp)
    103c:	dc415315 	stw	r17,1356(sp)
    1040:	282d883a 	mov	r22,r5
    1044:	3021883a 	mov	r16,r6
    1048:	d9014f15 	stw	r4,1340(sp)
    104c:	000573c0 	call	573c <_localeconv_r>
    1050:	10800017 	ldw	r2,0(r2)
    1054:	d9c15117 	ldw	r7,1348(sp)
    1058:	d8814915 	stw	r2,1316(sp)
    105c:	d8814f17 	ldw	r2,1340(sp)
    1060:	10000226 	beq	r2,zero,106c <___vfprintf_internal_r+0x5c>
    1064:	10800e17 	ldw	r2,56(r2)
    1068:	10020d26 	beq	r2,zero,18a0 <___vfprintf_internal_r+0x890>
    106c:	b080030b 	ldhu	r2,12(r22)
    1070:	1080020c 	andi	r2,r2,8
    1074:	10020e26 	beq	r2,zero,18b0 <___vfprintf_internal_r+0x8a0>
    1078:	b0800417 	ldw	r2,16(r22)
    107c:	10020c26 	beq	r2,zero,18b0 <___vfprintf_internal_r+0x8a0>
    1080:	b200030b 	ldhu	r8,12(r22)
    1084:	00800284 	movi	r2,10
    1088:	40c0068c 	andi	r3,r8,26
    108c:	18802f1e 	bne	r3,r2,114c <___vfprintf_internal_r+0x13c>
    1090:	b080038f 	ldh	r2,14(r22)
    1094:	10002d16 	blt	r2,zero,114c <___vfprintf_internal_r+0x13c>
    1098:	b240038b 	ldhu	r9,14(r22)
    109c:	b2800717 	ldw	r10,28(r22)
    10a0:	b2c00917 	ldw	r11,36(r22)
    10a4:	d9014f17 	ldw	r4,1340(sp)
    10a8:	dc402904 	addi	r17,sp,164
    10ac:	d8804004 	addi	r2,sp,256
    10b0:	00c10004 	movi	r3,1024
    10b4:	423fff4c 	andi	r8,r8,65533
    10b8:	800d883a 	mov	r6,r16
    10bc:	880b883a 	mov	r5,r17
    10c0:	da002c0d 	sth	r8,176(sp)
    10c4:	da402c8d 	sth	r9,178(sp)
    10c8:	da803015 	stw	r10,192(sp)
    10cc:	dac03215 	stw	r11,200(sp)
    10d0:	d8802d15 	stw	r2,180(sp)
    10d4:	d8c02e15 	stw	r3,184(sp)
    10d8:	d8802915 	stw	r2,164(sp)
    10dc:	d8c02b15 	stw	r3,172(sp)
    10e0:	d8002f15 	stw	zero,188(sp)
    10e4:	00010100 	call	1010 <___vfprintf_internal_r>
    10e8:	d8814b15 	stw	r2,1324(sp)
    10ec:	10000416 	blt	r2,zero,1100 <___vfprintf_internal_r+0xf0>
    10f0:	d9014f17 	ldw	r4,1340(sp)
    10f4:	880b883a 	mov	r5,r17
    10f8:	00047e80 	call	47e8 <_fflush_r>
    10fc:	1002321e 	bne	r2,zero,19c8 <___vfprintf_internal_r+0x9b8>
    1100:	d8802c0b 	ldhu	r2,176(sp)
    1104:	1080100c 	andi	r2,r2,64
    1108:	10000326 	beq	r2,zero,1118 <___vfprintf_internal_r+0x108>
    110c:	b080030b 	ldhu	r2,12(r22)
    1110:	10801014 	ori	r2,r2,64
    1114:	b080030d 	sth	r2,12(r22)
    1118:	d8814b17 	ldw	r2,1324(sp)
    111c:	dfc15b17 	ldw	ra,1388(sp)
    1120:	df015a17 	ldw	fp,1384(sp)
    1124:	ddc15917 	ldw	r23,1380(sp)
    1128:	dd815817 	ldw	r22,1376(sp)
    112c:	dd415717 	ldw	r21,1372(sp)
    1130:	dd015617 	ldw	r20,1368(sp)
    1134:	dcc15517 	ldw	r19,1364(sp)
    1138:	dc815417 	ldw	r18,1360(sp)
    113c:	dc415317 	ldw	r17,1356(sp)
    1140:	dc015217 	ldw	r16,1352(sp)
    1144:	dec15c04 	addi	sp,sp,1392
    1148:	f800283a 	ret
    114c:	0005883a 	mov	r2,zero
    1150:	0007883a 	mov	r3,zero
    1154:	dd401904 	addi	r21,sp,100
    1158:	d8814215 	stw	r2,1288(sp)
    115c:	802f883a 	mov	r23,r16
    1160:	d8c14315 	stw	r3,1292(sp)
    1164:	d8014b15 	stw	zero,1324(sp)
    1168:	d8014815 	stw	zero,1312(sp)
    116c:	d8014415 	stw	zero,1296(sp)
    1170:	d8014715 	stw	zero,1308(sp)
    1174:	dd400c15 	stw	r21,48(sp)
    1178:	d8000e15 	stw	zero,56(sp)
    117c:	d8000d15 	stw	zero,52(sp)
    1180:	b8800007 	ldb	r2,0(r23)
    1184:	10001926 	beq	r2,zero,11ec <___vfprintf_internal_r+0x1dc>
    1188:	00c00944 	movi	r3,37
    118c:	10c01726 	beq	r2,r3,11ec <___vfprintf_internal_r+0x1dc>
    1190:	b821883a 	mov	r16,r23
    1194:	00000106 	br	119c <___vfprintf_internal_r+0x18c>
    1198:	10c00326 	beq	r2,r3,11a8 <___vfprintf_internal_r+0x198>
    119c:	84000044 	addi	r16,r16,1
    11a0:	80800007 	ldb	r2,0(r16)
    11a4:	103ffc1e 	bne	r2,zero,1198 <___vfprintf_internal_r+0x188>
    11a8:	85e7c83a 	sub	r19,r16,r23
    11ac:	98000e26 	beq	r19,zero,11e8 <___vfprintf_internal_r+0x1d8>
    11b0:	dc800e17 	ldw	r18,56(sp)
    11b4:	dc400d17 	ldw	r17,52(sp)
    11b8:	008001c4 	movi	r2,7
    11bc:	94e5883a 	add	r18,r18,r19
    11c0:	8c400044 	addi	r17,r17,1
    11c4:	adc00015 	stw	r23,0(r21)
    11c8:	dc800e15 	stw	r18,56(sp)
    11cc:	acc00115 	stw	r19,4(r21)
    11d0:	dc400d15 	stw	r17,52(sp)
    11d4:	14428b16 	blt	r2,r17,1c04 <___vfprintf_internal_r+0xbf4>
    11d8:	ad400204 	addi	r21,r21,8
    11dc:	d9014b17 	ldw	r4,1324(sp)
    11e0:	24c9883a 	add	r4,r4,r19
    11e4:	d9014b15 	stw	r4,1324(sp)
    11e8:	802f883a 	mov	r23,r16
    11ec:	b8800007 	ldb	r2,0(r23)
    11f0:	10013c26 	beq	r2,zero,16e4 <___vfprintf_internal_r+0x6d4>
    11f4:	bdc00044 	addi	r23,r23,1
    11f8:	d8000405 	stb	zero,16(sp)
    11fc:	b8c00007 	ldb	r3,0(r23)
    1200:	04ffffc4 	movi	r19,-1
    1204:	d8014c15 	stw	zero,1328(sp)
    1208:	d8014a15 	stw	zero,1320(sp)
    120c:	d8c14d15 	stw	r3,1332(sp)
    1210:	bdc00044 	addi	r23,r23,1
    1214:	d9414d17 	ldw	r5,1332(sp)
    1218:	00801604 	movi	r2,88
    121c:	28fff804 	addi	r3,r5,-32
    1220:	10c06036 	bltu	r2,r3,13a4 <___vfprintf_internal_r+0x394>
    1224:	18c5883a 	add	r2,r3,r3
    1228:	1085883a 	add	r2,r2,r2
    122c:	00c00034 	movhi	r3,0
    1230:	18c49004 	addi	r3,r3,4672
    1234:	10c5883a 	add	r2,r2,r3
    1238:	11000017 	ldw	r4,0(r2)
    123c:	2000683a 	jmp	r4
    1240:	000021b4 	movhi	zero,134
    1244:	000013a4 	muli	zero,zero,78
    1248:	000013a4 	muli	zero,zero,78
    124c:	000021a0 	cmpeqi	zero,zero,134
    1250:	000013a4 	muli	zero,zero,78
    1254:	000013a4 	muli	zero,zero,78
    1258:	000013a4 	muli	zero,zero,78
    125c:	000013a4 	muli	zero,zero,78
    1260:	000013a4 	muli	zero,zero,78
    1264:	000013a4 	muli	zero,zero,78
    1268:	00001f80 	call	1f8 <_start+0x44>
    126c:	00002190 	cmplti	zero,zero,134
    1270:	000013a4 	muli	zero,zero,78
    1274:	00001f98 	cmpnei	zero,zero,126
    1278:	0000222c 	andhi	zero,zero,136
    127c:	000013a4 	muli	zero,zero,78
    1280:	00002218 	cmpnei	zero,zero,136
    1284:	000021e0 	cmpeqi	zero,zero,135
    1288:	000021e0 	cmpeqi	zero,zero,135
    128c:	000021e0 	cmpeqi	zero,zero,135
    1290:	000021e0 	cmpeqi	zero,zero,135
    1294:	000021e0 	cmpeqi	zero,zero,135
    1298:	000021e0 	cmpeqi	zero,zero,135
    129c:	000021e0 	cmpeqi	zero,zero,135
    12a0:	000021e0 	cmpeqi	zero,zero,135
    12a4:	000021e0 	cmpeqi	zero,zero,135
    12a8:	000013a4 	muli	zero,zero,78
    12ac:	000013a4 	muli	zero,zero,78
    12b0:	000013a4 	muli	zero,zero,78
    12b4:	000013a4 	muli	zero,zero,78
    12b8:	000013a4 	muli	zero,zero,78
    12bc:	000013a4 	muli	zero,zero,78
    12c0:	000013a4 	muli	zero,zero,78
    12c4:	000013a4 	muli	zero,zero,78
    12c8:	000013a4 	muli	zero,zero,78
    12cc:	000013a4 	muli	zero,zero,78
    12d0:	000019fc 	xorhi	zero,zero,103
    12d4:	00002068 	cmpgeui	zero,zero,129
    12d8:	000013a4 	muli	zero,zero,78
    12dc:	00002068 	cmpgeui	zero,zero,129
    12e0:	000013a4 	muli	zero,zero,78
    12e4:	000013a4 	muli	zero,zero,78
    12e8:	000013a4 	muli	zero,zero,78
    12ec:	000013a4 	muli	zero,zero,78
    12f0:	000021cc 	andi	zero,zero,135
    12f4:	000013a4 	muli	zero,zero,78
    12f8:	000013a4 	muli	zero,zero,78
    12fc:	00001ab0 	cmpltui	zero,zero,106
    1300:	000013a4 	muli	zero,zero,78
    1304:	000013a4 	muli	zero,zero,78
    1308:	000013a4 	muli	zero,zero,78
    130c:	000013a4 	muli	zero,zero,78
    1310:	000013a4 	muli	zero,zero,78
    1314:	00001afc 	xorhi	zero,zero,107
    1318:	000013a4 	muli	zero,zero,78
    131c:	000013a4 	muli	zero,zero,78
    1320:	0000211c 	xori	zero,zero,132
    1324:	000013a4 	muli	zero,zero,78
    1328:	000013a4 	muli	zero,zero,78
    132c:	000013a4 	muli	zero,zero,78
    1330:	000013a4 	muli	zero,zero,78
    1334:	000013a4 	muli	zero,zero,78
    1338:	000013a4 	muli	zero,zero,78
    133c:	000013a4 	muli	zero,zero,78
    1340:	000013a4 	muli	zero,zero,78
    1344:	000013a4 	muli	zero,zero,78
    1348:	000013a4 	muli	zero,zero,78
    134c:	000020f0 	cmpltui	zero,zero,131
    1350:	00001a08 	cmpgei	zero,zero,104
    1354:	00002068 	cmpgeui	zero,zero,129
    1358:	00002068 	cmpgeui	zero,zero,129
    135c:	00002068 	cmpgeui	zero,zero,129
    1360:	00002054 	movui	zero,129
    1364:	00001a08 	cmpgei	zero,zero,104
    1368:	000013a4 	muli	zero,zero,78
    136c:	000013a4 	muli	zero,zero,78
    1370:	00001fdc 	xori	zero,zero,127
    1374:	000013a4 	muli	zero,zero,78
    1378:	00001fac 	andhi	zero,zero,126
    137c:	00001abc 	xorhi	zero,zero,106
    1380:	0000200c 	andi	zero,zero,128
    1384:	00001ff8 	rdprs	zero,zero,127
    1388:	000013a4 	muli	zero,zero,78
    138c:	00002288 	cmpgei	zero,zero,138
    1390:	000013a4 	muli	zero,zero,78
    1394:	00001b08 	cmpgei	zero,zero,108
    1398:	000013a4 	muli	zero,zero,78
    139c:	000013a4 	muli	zero,zero,78
    13a0:	00002180 	call	218 <main+0x18>
    13a4:	d9014d17 	ldw	r4,1332(sp)
    13a8:	2000ce26 	beq	r4,zero,16e4 <___vfprintf_internal_r+0x6d4>
    13ac:	01400044 	movi	r5,1
    13b0:	d9800f04 	addi	r6,sp,60
    13b4:	d9c14015 	stw	r7,1280(sp)
    13b8:	d9414515 	stw	r5,1300(sp)
    13bc:	d9814115 	stw	r6,1284(sp)
    13c0:	280f883a 	mov	r7,r5
    13c4:	d9000f05 	stb	r4,60(sp)
    13c8:	d8000405 	stb	zero,16(sp)
    13cc:	d8014615 	stw	zero,1304(sp)
    13d0:	d8c14c17 	ldw	r3,1328(sp)
    13d4:	1880008c 	andi	r2,r3,2
    13d8:	1005003a 	cmpeq	r2,r2,zero
    13dc:	d8815015 	stw	r2,1344(sp)
    13e0:	1000031e 	bne	r2,zero,13f0 <___vfprintf_internal_r+0x3e0>
    13e4:	d9014517 	ldw	r4,1300(sp)
    13e8:	21000084 	addi	r4,r4,2
    13ec:	d9014515 	stw	r4,1300(sp)
    13f0:	d9414c17 	ldw	r5,1328(sp)
    13f4:	2940210c 	andi	r5,r5,132
    13f8:	d9414e15 	stw	r5,1336(sp)
    13fc:	28002d1e 	bne	r5,zero,14b4 <___vfprintf_internal_r+0x4a4>
    1400:	d9814a17 	ldw	r6,1320(sp)
    1404:	d8814517 	ldw	r2,1300(sp)
    1408:	30a1c83a 	sub	r16,r6,r2
    140c:	0400290e 	bge	zero,r16,14b4 <___vfprintf_internal_r+0x4a4>
    1410:	00800404 	movi	r2,16
    1414:	1404580e 	bge	r2,r16,2578 <___vfprintf_internal_r+0x1568>
    1418:	dc800e17 	ldw	r18,56(sp)
    141c:	dc400d17 	ldw	r17,52(sp)
    1420:	1027883a 	mov	r19,r2
    1424:	07000074 	movhi	fp,1
    1428:	e7351c84 	addi	fp,fp,-11150
    142c:	050001c4 	movi	r20,7
    1430:	00000306 	br	1440 <___vfprintf_internal_r+0x430>
    1434:	843ffc04 	addi	r16,r16,-16
    1438:	ad400204 	addi	r21,r21,8
    143c:	9c00130e 	bge	r19,r16,148c <___vfprintf_internal_r+0x47c>
    1440:	94800404 	addi	r18,r18,16
    1444:	8c400044 	addi	r17,r17,1
    1448:	af000015 	stw	fp,0(r21)
    144c:	acc00115 	stw	r19,4(r21)
    1450:	dc800e15 	stw	r18,56(sp)
    1454:	dc400d15 	stw	r17,52(sp)
    1458:	a47ff60e 	bge	r20,r17,1434 <___vfprintf_internal_r+0x424>
    145c:	d9014f17 	ldw	r4,1340(sp)
    1460:	b00b883a 	mov	r5,r22
    1464:	d9800c04 	addi	r6,sp,48
    1468:	d9c15115 	stw	r7,1348(sp)
    146c:	0000fb80 	call	fb8 <__sprint_r>
    1470:	d9c15117 	ldw	r7,1348(sp)
    1474:	10009e1e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    1478:	843ffc04 	addi	r16,r16,-16
    147c:	dc800e17 	ldw	r18,56(sp)
    1480:	dc400d17 	ldw	r17,52(sp)
    1484:	dd401904 	addi	r21,sp,100
    1488:	9c3fed16 	blt	r19,r16,1440 <___vfprintf_internal_r+0x430>
    148c:	9425883a 	add	r18,r18,r16
    1490:	8c400044 	addi	r17,r17,1
    1494:	008001c4 	movi	r2,7
    1498:	af000015 	stw	fp,0(r21)
    149c:	ac000115 	stw	r16,4(r21)
    14a0:	dc800e15 	stw	r18,56(sp)
    14a4:	dc400d15 	stw	r17,52(sp)
    14a8:	1441f516 	blt	r2,r17,1c80 <___vfprintf_internal_r+0xc70>
    14ac:	ad400204 	addi	r21,r21,8
    14b0:	00000206 	br	14bc <___vfprintf_internal_r+0x4ac>
    14b4:	dc800e17 	ldw	r18,56(sp)
    14b8:	dc400d17 	ldw	r17,52(sp)
    14bc:	d8800407 	ldb	r2,16(sp)
    14c0:	10000b26 	beq	r2,zero,14f0 <___vfprintf_internal_r+0x4e0>
    14c4:	00800044 	movi	r2,1
    14c8:	94800044 	addi	r18,r18,1
    14cc:	8c400044 	addi	r17,r17,1
    14d0:	a8800115 	stw	r2,4(r21)
    14d4:	d8c00404 	addi	r3,sp,16
    14d8:	008001c4 	movi	r2,7
    14dc:	a8c00015 	stw	r3,0(r21)
    14e0:	dc800e15 	stw	r18,56(sp)
    14e4:	dc400d15 	stw	r17,52(sp)
    14e8:	1441da16 	blt	r2,r17,1c54 <___vfprintf_internal_r+0xc44>
    14ec:	ad400204 	addi	r21,r21,8
    14f0:	d9015017 	ldw	r4,1344(sp)
    14f4:	20000b1e 	bne	r4,zero,1524 <___vfprintf_internal_r+0x514>
    14f8:	d8800444 	addi	r2,sp,17
    14fc:	94800084 	addi	r18,r18,2
    1500:	8c400044 	addi	r17,r17,1
    1504:	a8800015 	stw	r2,0(r21)
    1508:	00c00084 	movi	r3,2
    150c:	008001c4 	movi	r2,7
    1510:	a8c00115 	stw	r3,4(r21)
    1514:	dc800e15 	stw	r18,56(sp)
    1518:	dc400d15 	stw	r17,52(sp)
    151c:	1441c216 	blt	r2,r17,1c28 <___vfprintf_internal_r+0xc18>
    1520:	ad400204 	addi	r21,r21,8
    1524:	d9414e17 	ldw	r5,1336(sp)
    1528:	00802004 	movi	r2,128
    152c:	2880b126 	beq	r5,r2,17f4 <___vfprintf_internal_r+0x7e4>
    1530:	d8c14617 	ldw	r3,1304(sp)
    1534:	19e1c83a 	sub	r16,r3,r7
    1538:	0400260e 	bge	zero,r16,15d4 <___vfprintf_internal_r+0x5c4>
    153c:	00800404 	movi	r2,16
    1540:	1403c90e 	bge	r2,r16,2468 <___vfprintf_internal_r+0x1458>
    1544:	1027883a 	mov	r19,r2
    1548:	07000074 	movhi	fp,1
    154c:	e7351884 	addi	fp,fp,-11166
    1550:	050001c4 	movi	r20,7
    1554:	00000306 	br	1564 <___vfprintf_internal_r+0x554>
    1558:	843ffc04 	addi	r16,r16,-16
    155c:	ad400204 	addi	r21,r21,8
    1560:	9c00130e 	bge	r19,r16,15b0 <___vfprintf_internal_r+0x5a0>
    1564:	94800404 	addi	r18,r18,16
    1568:	8c400044 	addi	r17,r17,1
    156c:	af000015 	stw	fp,0(r21)
    1570:	acc00115 	stw	r19,4(r21)
    1574:	dc800e15 	stw	r18,56(sp)
    1578:	dc400d15 	stw	r17,52(sp)
    157c:	a47ff60e 	bge	r20,r17,1558 <___vfprintf_internal_r+0x548>
    1580:	d9014f17 	ldw	r4,1340(sp)
    1584:	b00b883a 	mov	r5,r22
    1588:	d9800c04 	addi	r6,sp,48
    158c:	d9c15115 	stw	r7,1348(sp)
    1590:	0000fb80 	call	fb8 <__sprint_r>
    1594:	d9c15117 	ldw	r7,1348(sp)
    1598:	1000551e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    159c:	843ffc04 	addi	r16,r16,-16
    15a0:	dc800e17 	ldw	r18,56(sp)
    15a4:	dc400d17 	ldw	r17,52(sp)
    15a8:	dd401904 	addi	r21,sp,100
    15ac:	9c3fed16 	blt	r19,r16,1564 <___vfprintf_internal_r+0x554>
    15b0:	9425883a 	add	r18,r18,r16
    15b4:	8c400044 	addi	r17,r17,1
    15b8:	008001c4 	movi	r2,7
    15bc:	af000015 	stw	fp,0(r21)
    15c0:	ac000115 	stw	r16,4(r21)
    15c4:	dc800e15 	stw	r18,56(sp)
    15c8:	dc400d15 	stw	r17,52(sp)
    15cc:	14418216 	blt	r2,r17,1bd8 <___vfprintf_internal_r+0xbc8>
    15d0:	ad400204 	addi	r21,r21,8
    15d4:	d9014c17 	ldw	r4,1328(sp)
    15d8:	2080400c 	andi	r2,r4,256
    15dc:	10004a1e 	bne	r2,zero,1708 <___vfprintf_internal_r+0x6f8>
    15e0:	d9414117 	ldw	r5,1284(sp)
    15e4:	91e5883a 	add	r18,r18,r7
    15e8:	8c400044 	addi	r17,r17,1
    15ec:	008001c4 	movi	r2,7
    15f0:	a9400015 	stw	r5,0(r21)
    15f4:	a9c00115 	stw	r7,4(r21)
    15f8:	dc800e15 	stw	r18,56(sp)
    15fc:	dc400d15 	stw	r17,52(sp)
    1600:	14416716 	blt	r2,r17,1ba0 <___vfprintf_internal_r+0xb90>
    1604:	a8c00204 	addi	r3,r21,8
    1608:	d9814c17 	ldw	r6,1328(sp)
    160c:	3080010c 	andi	r2,r6,4
    1610:	10002826 	beq	r2,zero,16b4 <___vfprintf_internal_r+0x6a4>
    1614:	d8814a17 	ldw	r2,1320(sp)
    1618:	d9014517 	ldw	r4,1300(sp)
    161c:	1121c83a 	sub	r16,r2,r4
    1620:	0400240e 	bge	zero,r16,16b4 <___vfprintf_internal_r+0x6a4>
    1624:	00800404 	movi	r2,16
    1628:	14044f0e 	bge	r2,r16,2768 <___vfprintf_internal_r+0x1758>
    162c:	dc400d17 	ldw	r17,52(sp)
    1630:	1027883a 	mov	r19,r2
    1634:	07000074 	movhi	fp,1
    1638:	e7351c84 	addi	fp,fp,-11150
    163c:	050001c4 	movi	r20,7
    1640:	00000306 	br	1650 <___vfprintf_internal_r+0x640>
    1644:	843ffc04 	addi	r16,r16,-16
    1648:	18c00204 	addi	r3,r3,8
    164c:	9c00110e 	bge	r19,r16,1694 <___vfprintf_internal_r+0x684>
    1650:	94800404 	addi	r18,r18,16
    1654:	8c400044 	addi	r17,r17,1
    1658:	1f000015 	stw	fp,0(r3)
    165c:	1cc00115 	stw	r19,4(r3)
    1660:	dc800e15 	stw	r18,56(sp)
    1664:	dc400d15 	stw	r17,52(sp)
    1668:	a47ff60e 	bge	r20,r17,1644 <___vfprintf_internal_r+0x634>
    166c:	d9014f17 	ldw	r4,1340(sp)
    1670:	b00b883a 	mov	r5,r22
    1674:	d9800c04 	addi	r6,sp,48
    1678:	0000fb80 	call	fb8 <__sprint_r>
    167c:	10001c1e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    1680:	843ffc04 	addi	r16,r16,-16
    1684:	dc800e17 	ldw	r18,56(sp)
    1688:	dc400d17 	ldw	r17,52(sp)
    168c:	d8c01904 	addi	r3,sp,100
    1690:	9c3fef16 	blt	r19,r16,1650 <___vfprintf_internal_r+0x640>
    1694:	9425883a 	add	r18,r18,r16
    1698:	8c400044 	addi	r17,r17,1
    169c:	008001c4 	movi	r2,7
    16a0:	1f000015 	stw	fp,0(r3)
    16a4:	1c000115 	stw	r16,4(r3)
    16a8:	dc800e15 	stw	r18,56(sp)
    16ac:	dc400d15 	stw	r17,52(sp)
    16b0:	1440cb16 	blt	r2,r17,19e0 <___vfprintf_internal_r+0x9d0>
    16b4:	d8814a17 	ldw	r2,1320(sp)
    16b8:	d9414517 	ldw	r5,1300(sp)
    16bc:	1140010e 	bge	r2,r5,16c4 <___vfprintf_internal_r+0x6b4>
    16c0:	2805883a 	mov	r2,r5
    16c4:	d9814b17 	ldw	r6,1324(sp)
    16c8:	308d883a 	add	r6,r6,r2
    16cc:	d9814b15 	stw	r6,1324(sp)
    16d0:	90013b1e 	bne	r18,zero,1bc0 <___vfprintf_internal_r+0xbb0>
    16d4:	d9c14017 	ldw	r7,1280(sp)
    16d8:	dd401904 	addi	r21,sp,100
    16dc:	d8000d15 	stw	zero,52(sp)
    16e0:	003ea706 	br	1180 <___vfprintf_internal_r+0x170>
    16e4:	d8800e17 	ldw	r2,56(sp)
    16e8:	10053f1e 	bne	r2,zero,2be8 <___vfprintf_internal_r+0x1bd8>
    16ec:	d8000d15 	stw	zero,52(sp)
    16f0:	b080030b 	ldhu	r2,12(r22)
    16f4:	1080100c 	andi	r2,r2,64
    16f8:	103e8726 	beq	r2,zero,1118 <___vfprintf_internal_r+0x108>
    16fc:	00bfffc4 	movi	r2,-1
    1700:	d8814b15 	stw	r2,1324(sp)
    1704:	003e8406 	br	1118 <___vfprintf_internal_r+0x108>
    1708:	d9814d17 	ldw	r6,1332(sp)
    170c:	00801944 	movi	r2,101
    1710:	11806e16 	blt	r2,r6,18cc <___vfprintf_internal_r+0x8bc>
    1714:	d9414717 	ldw	r5,1308(sp)
    1718:	00c00044 	movi	r3,1
    171c:	1943430e 	bge	r3,r5,242c <___vfprintf_internal_r+0x141c>
    1720:	d8814117 	ldw	r2,1284(sp)
    1724:	94800044 	addi	r18,r18,1
    1728:	8c400044 	addi	r17,r17,1
    172c:	a8800015 	stw	r2,0(r21)
    1730:	008001c4 	movi	r2,7
    1734:	a8c00115 	stw	r3,4(r21)
    1738:	dc800e15 	stw	r18,56(sp)
    173c:	dc400d15 	stw	r17,52(sp)
    1740:	1441ca16 	blt	r2,r17,1e6c <___vfprintf_internal_r+0xe5c>
    1744:	a8c00204 	addi	r3,r21,8
    1748:	d9014917 	ldw	r4,1316(sp)
    174c:	00800044 	movi	r2,1
    1750:	94800044 	addi	r18,r18,1
    1754:	8c400044 	addi	r17,r17,1
    1758:	18800115 	stw	r2,4(r3)
    175c:	008001c4 	movi	r2,7
    1760:	19000015 	stw	r4,0(r3)
    1764:	dc800e15 	stw	r18,56(sp)
    1768:	dc400d15 	stw	r17,52(sp)
    176c:	1441b616 	blt	r2,r17,1e48 <___vfprintf_internal_r+0xe38>
    1770:	1cc00204 	addi	r19,r3,8
    1774:	d9014217 	ldw	r4,1288(sp)
    1778:	d9414317 	ldw	r5,1292(sp)
    177c:	000d883a 	mov	r6,zero
    1780:	000f883a 	mov	r7,zero
    1784:	0009b900 	call	9b90 <__nedf2>
    1788:	10017426 	beq	r2,zero,1d5c <___vfprintf_internal_r+0xd4c>
    178c:	d9414717 	ldw	r5,1308(sp)
    1790:	d9814117 	ldw	r6,1284(sp)
    1794:	8c400044 	addi	r17,r17,1
    1798:	2c85883a 	add	r2,r5,r18
    179c:	14bfffc4 	addi	r18,r2,-1
    17a0:	28bfffc4 	addi	r2,r5,-1
    17a4:	30c00044 	addi	r3,r6,1
    17a8:	98800115 	stw	r2,4(r19)
    17ac:	008001c4 	movi	r2,7
    17b0:	98c00015 	stw	r3,0(r19)
    17b4:	dc800e15 	stw	r18,56(sp)
    17b8:	dc400d15 	stw	r17,52(sp)
    17bc:	14418e16 	blt	r2,r17,1df8 <___vfprintf_internal_r+0xde8>
    17c0:	9cc00204 	addi	r19,r19,8
    17c4:	d9414817 	ldw	r5,1312(sp)
    17c8:	d8800804 	addi	r2,sp,32
    17cc:	8c400044 	addi	r17,r17,1
    17d0:	9165883a 	add	r18,r18,r5
    17d4:	98800015 	stw	r2,0(r19)
    17d8:	008001c4 	movi	r2,7
    17dc:	99400115 	stw	r5,4(r19)
    17e0:	dc800e15 	stw	r18,56(sp)
    17e4:	dc400d15 	stw	r17,52(sp)
    17e8:	1440ed16 	blt	r2,r17,1ba0 <___vfprintf_internal_r+0xb90>
    17ec:	98c00204 	addi	r3,r19,8
    17f0:	003f8506 	br	1608 <___vfprintf_internal_r+0x5f8>
    17f4:	d9814a17 	ldw	r6,1320(sp)
    17f8:	d8814517 	ldw	r2,1300(sp)
    17fc:	30a1c83a 	sub	r16,r6,r2
    1800:	043f4b0e 	bge	zero,r16,1530 <___vfprintf_internal_r+0x520>
    1804:	00800404 	movi	r2,16
    1808:	1404340e 	bge	r2,r16,28dc <___vfprintf_internal_r+0x18cc>
    180c:	1027883a 	mov	r19,r2
    1810:	07000074 	movhi	fp,1
    1814:	e7351884 	addi	fp,fp,-11166
    1818:	050001c4 	movi	r20,7
    181c:	00000306 	br	182c <___vfprintf_internal_r+0x81c>
    1820:	843ffc04 	addi	r16,r16,-16
    1824:	ad400204 	addi	r21,r21,8
    1828:	9c00130e 	bge	r19,r16,1878 <___vfprintf_internal_r+0x868>
    182c:	94800404 	addi	r18,r18,16
    1830:	8c400044 	addi	r17,r17,1
    1834:	af000015 	stw	fp,0(r21)
    1838:	acc00115 	stw	r19,4(r21)
    183c:	dc800e15 	stw	r18,56(sp)
    1840:	dc400d15 	stw	r17,52(sp)
    1844:	a47ff60e 	bge	r20,r17,1820 <___vfprintf_internal_r+0x810>
    1848:	d9014f17 	ldw	r4,1340(sp)
    184c:	b00b883a 	mov	r5,r22
    1850:	d9800c04 	addi	r6,sp,48
    1854:	d9c15115 	stw	r7,1348(sp)
    1858:	0000fb80 	call	fb8 <__sprint_r>
    185c:	d9c15117 	ldw	r7,1348(sp)
    1860:	103fa31e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    1864:	843ffc04 	addi	r16,r16,-16
    1868:	dc800e17 	ldw	r18,56(sp)
    186c:	dc400d17 	ldw	r17,52(sp)
    1870:	dd401904 	addi	r21,sp,100
    1874:	9c3fed16 	blt	r19,r16,182c <___vfprintf_internal_r+0x81c>
    1878:	9425883a 	add	r18,r18,r16
    187c:	8c400044 	addi	r17,r17,1
    1880:	008001c4 	movi	r2,7
    1884:	af000015 	stw	fp,0(r21)
    1888:	ac000115 	stw	r16,4(r21)
    188c:	dc800e15 	stw	r18,56(sp)
    1890:	dc400d15 	stw	r17,52(sp)
    1894:	14416116 	blt	r2,r17,1e1c <___vfprintf_internal_r+0xe0c>
    1898:	ad400204 	addi	r21,r21,8
    189c:	003f2406 	br	1530 <___vfprintf_internal_r+0x520>
    18a0:	d9014f17 	ldw	r4,1340(sp)
    18a4:	0004a800 	call	4a80 <__sinit>
    18a8:	d9c15117 	ldw	r7,1348(sp)
    18ac:	003def06 	br	106c <___vfprintf_internal_r+0x5c>
    18b0:	d9014f17 	ldw	r4,1340(sp)
    18b4:	b00b883a 	mov	r5,r22
    18b8:	d9c15115 	stw	r7,1348(sp)
    18bc:	0002ee00 	call	2ee0 <__swsetup_r>
    18c0:	d9c15117 	ldw	r7,1348(sp)
    18c4:	103dee26 	beq	r2,zero,1080 <___vfprintf_internal_r+0x70>
    18c8:	003f8c06 	br	16fc <___vfprintf_internal_r+0x6ec>
    18cc:	d9014217 	ldw	r4,1288(sp)
    18d0:	d9414317 	ldw	r5,1292(sp)
    18d4:	000d883a 	mov	r6,zero
    18d8:	000f883a 	mov	r7,zero
    18dc:	0009b080 	call	9b08 <__eqdf2>
    18e0:	1000f21e 	bne	r2,zero,1cac <___vfprintf_internal_r+0xc9c>
    18e4:	00800074 	movhi	r2,1
    18e8:	10b51804 	addi	r2,r2,-11168
    18ec:	94800044 	addi	r18,r18,1
    18f0:	8c400044 	addi	r17,r17,1
    18f4:	a8800015 	stw	r2,0(r21)
    18f8:	00c00044 	movi	r3,1
    18fc:	008001c4 	movi	r2,7
    1900:	a8c00115 	stw	r3,4(r21)
    1904:	dc800e15 	stw	r18,56(sp)
    1908:	dc400d15 	stw	r17,52(sp)
    190c:	1442fa16 	blt	r2,r17,24f8 <___vfprintf_internal_r+0x14e8>
    1910:	a8c00204 	addi	r3,r21,8
    1914:	d8800517 	ldw	r2,20(sp)
    1918:	d9014717 	ldw	r4,1308(sp)
    191c:	11015c0e 	bge	r2,r4,1e90 <___vfprintf_internal_r+0xe80>
    1920:	dc400d17 	ldw	r17,52(sp)
    1924:	d9814917 	ldw	r6,1316(sp)
    1928:	00800044 	movi	r2,1
    192c:	94800044 	addi	r18,r18,1
    1930:	8c400044 	addi	r17,r17,1
    1934:	18800115 	stw	r2,4(r3)
    1938:	008001c4 	movi	r2,7
    193c:	19800015 	stw	r6,0(r3)
    1940:	dc800e15 	stw	r18,56(sp)
    1944:	dc400d15 	stw	r17,52(sp)
    1948:	14431016 	blt	r2,r17,258c <___vfprintf_internal_r+0x157c>
    194c:	18c00204 	addi	r3,r3,8
    1950:	d8814717 	ldw	r2,1308(sp)
    1954:	143fffc4 	addi	r16,r2,-1
    1958:	043f2b0e 	bge	zero,r16,1608 <___vfprintf_internal_r+0x5f8>
    195c:	00800404 	movi	r2,16
    1960:	1402a20e 	bge	r2,r16,23ec <___vfprintf_internal_r+0x13dc>
    1964:	dc400d17 	ldw	r17,52(sp)
    1968:	1027883a 	mov	r19,r2
    196c:	07000074 	movhi	fp,1
    1970:	e7351884 	addi	fp,fp,-11166
    1974:	050001c4 	movi	r20,7
    1978:	00000306 	br	1988 <___vfprintf_internal_r+0x978>
    197c:	18c00204 	addi	r3,r3,8
    1980:	843ffc04 	addi	r16,r16,-16
    1984:	9c029c0e 	bge	r19,r16,23f8 <___vfprintf_internal_r+0x13e8>
    1988:	94800404 	addi	r18,r18,16
    198c:	8c400044 	addi	r17,r17,1
    1990:	1f000015 	stw	fp,0(r3)
    1994:	1cc00115 	stw	r19,4(r3)
    1998:	dc800e15 	stw	r18,56(sp)
    199c:	dc400d15 	stw	r17,52(sp)
    19a0:	a47ff60e 	bge	r20,r17,197c <___vfprintf_internal_r+0x96c>
    19a4:	d9014f17 	ldw	r4,1340(sp)
    19a8:	b00b883a 	mov	r5,r22
    19ac:	d9800c04 	addi	r6,sp,48
    19b0:	0000fb80 	call	fb8 <__sprint_r>
    19b4:	103f4e1e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    19b8:	dc800e17 	ldw	r18,56(sp)
    19bc:	dc400d17 	ldw	r17,52(sp)
    19c0:	d8c01904 	addi	r3,sp,100
    19c4:	003fee06 	br	1980 <___vfprintf_internal_r+0x970>
    19c8:	d8802c0b 	ldhu	r2,176(sp)
    19cc:	00ffffc4 	movi	r3,-1
    19d0:	d8c14b15 	stw	r3,1324(sp)
    19d4:	1080100c 	andi	r2,r2,64
    19d8:	103dcc1e 	bne	r2,zero,110c <___vfprintf_internal_r+0xfc>
    19dc:	003dce06 	br	1118 <___vfprintf_internal_r+0x108>
    19e0:	d9014f17 	ldw	r4,1340(sp)
    19e4:	b00b883a 	mov	r5,r22
    19e8:	d9800c04 	addi	r6,sp,48
    19ec:	0000fb80 	call	fb8 <__sprint_r>
    19f0:	103f3f1e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    19f4:	dc800e17 	ldw	r18,56(sp)
    19f8:	003f2e06 	br	16b4 <___vfprintf_internal_r+0x6a4>
    19fc:	d9414c17 	ldw	r5,1328(sp)
    1a00:	29400414 	ori	r5,r5,16
    1a04:	d9414c15 	stw	r5,1328(sp)
    1a08:	d9814c17 	ldw	r6,1328(sp)
    1a0c:	3080080c 	andi	r2,r6,32
    1a10:	10014f1e 	bne	r2,zero,1f50 <___vfprintf_internal_r+0xf40>
    1a14:	d8c14c17 	ldw	r3,1328(sp)
    1a18:	1880040c 	andi	r2,r3,16
    1a1c:	1002ea1e 	bne	r2,zero,25c8 <___vfprintf_internal_r+0x15b8>
    1a20:	d9014c17 	ldw	r4,1328(sp)
    1a24:	2080100c 	andi	r2,r4,64
    1a28:	1002e726 	beq	r2,zero,25c8 <___vfprintf_internal_r+0x15b8>
    1a2c:	3880000f 	ldh	r2,0(r7)
    1a30:	39c00104 	addi	r7,r7,4
    1a34:	d9c14015 	stw	r7,1280(sp)
    1a38:	1023d7fa 	srai	r17,r2,31
    1a3c:	1021883a 	mov	r16,r2
    1a40:	88037216 	blt	r17,zero,280c <___vfprintf_internal_r+0x17fc>
    1a44:	01000044 	movi	r4,1
    1a48:	98000416 	blt	r19,zero,1a5c <___vfprintf_internal_r+0xa4c>
    1a4c:	d8c14c17 	ldw	r3,1328(sp)
    1a50:	00bfdfc4 	movi	r2,-129
    1a54:	1886703a 	and	r3,r3,r2
    1a58:	d8c14c15 	stw	r3,1328(sp)
    1a5c:	8444b03a 	or	r2,r16,r17
    1a60:	1002261e 	bne	r2,zero,22fc <___vfprintf_internal_r+0x12ec>
    1a64:	9802251e 	bne	r19,zero,22fc <___vfprintf_internal_r+0x12ec>
    1a68:	20803fcc 	andi	r2,r4,255
    1a6c:	10029b26 	beq	r2,zero,24dc <___vfprintf_internal_r+0x14cc>
    1a70:	d8c01904 	addi	r3,sp,100
    1a74:	dd000f04 	addi	r20,sp,60
    1a78:	d8c14115 	stw	r3,1284(sp)
    1a7c:	d8c14117 	ldw	r3,1284(sp)
    1a80:	dcc14515 	stw	r19,1300(sp)
    1a84:	a0c5c83a 	sub	r2,r20,r3
    1a88:	11c00a04 	addi	r7,r2,40
    1a8c:	99c0010e 	bge	r19,r7,1a94 <___vfprintf_internal_r+0xa84>
    1a90:	d9c14515 	stw	r7,1300(sp)
    1a94:	dcc14615 	stw	r19,1304(sp)
    1a98:	d8800407 	ldb	r2,16(sp)
    1a9c:	103e4c26 	beq	r2,zero,13d0 <___vfprintf_internal_r+0x3c0>
    1aa0:	d8814517 	ldw	r2,1300(sp)
    1aa4:	10800044 	addi	r2,r2,1
    1aa8:	d8814515 	stw	r2,1300(sp)
    1aac:	003e4806 	br	13d0 <___vfprintf_internal_r+0x3c0>
    1ab0:	d9814c17 	ldw	r6,1328(sp)
    1ab4:	31800414 	ori	r6,r6,16
    1ab8:	d9814c15 	stw	r6,1328(sp)
    1abc:	d8c14c17 	ldw	r3,1328(sp)
    1ac0:	1880080c 	andi	r2,r3,32
    1ac4:	1001271e 	bne	r2,zero,1f64 <___vfprintf_internal_r+0xf54>
    1ac8:	d9414c17 	ldw	r5,1328(sp)
    1acc:	2880040c 	andi	r2,r5,16
    1ad0:	1002b61e 	bne	r2,zero,25ac <___vfprintf_internal_r+0x159c>
    1ad4:	d9814c17 	ldw	r6,1328(sp)
    1ad8:	3080100c 	andi	r2,r6,64
    1adc:	1002b326 	beq	r2,zero,25ac <___vfprintf_internal_r+0x159c>
    1ae0:	3c00000b 	ldhu	r16,0(r7)
    1ae4:	0009883a 	mov	r4,zero
    1ae8:	39c00104 	addi	r7,r7,4
    1aec:	0023883a 	mov	r17,zero
    1af0:	d9c14015 	stw	r7,1280(sp)
    1af4:	d8000405 	stb	zero,16(sp)
    1af8:	003fd306 	br	1a48 <___vfprintf_internal_r+0xa38>
    1afc:	d9014c17 	ldw	r4,1328(sp)
    1b00:	21000414 	ori	r4,r4,16
    1b04:	d9014c15 	stw	r4,1328(sp)
    1b08:	d9414c17 	ldw	r5,1328(sp)
    1b0c:	2880080c 	andi	r2,r5,32
    1b10:	1001081e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0xf24>
    1b14:	d8c14c17 	ldw	r3,1328(sp)
    1b18:	1880040c 	andi	r2,r3,16
    1b1c:	1002b01e 	bne	r2,zero,25e0 <___vfprintf_internal_r+0x15d0>
    1b20:	d9014c17 	ldw	r4,1328(sp)
    1b24:	2080100c 	andi	r2,r4,64
    1b28:	1002ad26 	beq	r2,zero,25e0 <___vfprintf_internal_r+0x15d0>
    1b2c:	3c00000b 	ldhu	r16,0(r7)
    1b30:	01000044 	movi	r4,1
    1b34:	39c00104 	addi	r7,r7,4
    1b38:	0023883a 	mov	r17,zero
    1b3c:	d9c14015 	stw	r7,1280(sp)
    1b40:	d8000405 	stb	zero,16(sp)
    1b44:	003fc006 	br	1a48 <___vfprintf_internal_r+0xa38>
    1b48:	d9014f17 	ldw	r4,1340(sp)
    1b4c:	b00b883a 	mov	r5,r22
    1b50:	d9800c04 	addi	r6,sp,48
    1b54:	0000fb80 	call	fb8 <__sprint_r>
    1b58:	103ee51e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    1b5c:	dc800e17 	ldw	r18,56(sp)
    1b60:	d8c01904 	addi	r3,sp,100
    1b64:	d9814c17 	ldw	r6,1328(sp)
    1b68:	3080004c 	andi	r2,r6,1
    1b6c:	1005003a 	cmpeq	r2,r2,zero
    1b70:	103ea51e 	bne	r2,zero,1608 <___vfprintf_internal_r+0x5f8>
    1b74:	00800044 	movi	r2,1
    1b78:	dc400d17 	ldw	r17,52(sp)
    1b7c:	18800115 	stw	r2,4(r3)
    1b80:	d8814917 	ldw	r2,1316(sp)
    1b84:	94800044 	addi	r18,r18,1
    1b88:	8c400044 	addi	r17,r17,1
    1b8c:	18800015 	stw	r2,0(r3)
    1b90:	008001c4 	movi	r2,7
    1b94:	dc800e15 	stw	r18,56(sp)
    1b98:	dc400d15 	stw	r17,52(sp)
    1b9c:	14421e0e 	bge	r2,r17,2418 <___vfprintf_internal_r+0x1408>
    1ba0:	d9014f17 	ldw	r4,1340(sp)
    1ba4:	b00b883a 	mov	r5,r22
    1ba8:	d9800c04 	addi	r6,sp,48
    1bac:	0000fb80 	call	fb8 <__sprint_r>
    1bb0:	103ecf1e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    1bb4:	dc800e17 	ldw	r18,56(sp)
    1bb8:	d8c01904 	addi	r3,sp,100
    1bbc:	003e9206 	br	1608 <___vfprintf_internal_r+0x5f8>
    1bc0:	d9014f17 	ldw	r4,1340(sp)
    1bc4:	b00b883a 	mov	r5,r22
    1bc8:	d9800c04 	addi	r6,sp,48
    1bcc:	0000fb80 	call	fb8 <__sprint_r>
    1bd0:	103ec026 	beq	r2,zero,16d4 <___vfprintf_internal_r+0x6c4>
    1bd4:	003ec606 	br	16f0 <___vfprintf_internal_r+0x6e0>
    1bd8:	d9014f17 	ldw	r4,1340(sp)
    1bdc:	b00b883a 	mov	r5,r22
    1be0:	d9800c04 	addi	r6,sp,48
    1be4:	d9c15115 	stw	r7,1348(sp)
    1be8:	0000fb80 	call	fb8 <__sprint_r>
    1bec:	d9c15117 	ldw	r7,1348(sp)
    1bf0:	103ebf1e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    1bf4:	dc800e17 	ldw	r18,56(sp)
    1bf8:	dc400d17 	ldw	r17,52(sp)
    1bfc:	dd401904 	addi	r21,sp,100
    1c00:	003e7406 	br	15d4 <___vfprintf_internal_r+0x5c4>
    1c04:	d9014f17 	ldw	r4,1340(sp)
    1c08:	b00b883a 	mov	r5,r22
    1c0c:	d9800c04 	addi	r6,sp,48
    1c10:	d9c15115 	stw	r7,1348(sp)
    1c14:	0000fb80 	call	fb8 <__sprint_r>
    1c18:	d9c15117 	ldw	r7,1348(sp)
    1c1c:	103eb41e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    1c20:	dd401904 	addi	r21,sp,100
    1c24:	003d6d06 	br	11dc <___vfprintf_internal_r+0x1cc>
    1c28:	d9014f17 	ldw	r4,1340(sp)
    1c2c:	b00b883a 	mov	r5,r22
    1c30:	d9800c04 	addi	r6,sp,48
    1c34:	d9c15115 	stw	r7,1348(sp)
    1c38:	0000fb80 	call	fb8 <__sprint_r>
    1c3c:	d9c15117 	ldw	r7,1348(sp)
    1c40:	103eab1e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    1c44:	dc800e17 	ldw	r18,56(sp)
    1c48:	dc400d17 	ldw	r17,52(sp)
    1c4c:	dd401904 	addi	r21,sp,100
    1c50:	003e3406 	br	1524 <___vfprintf_internal_r+0x514>
    1c54:	d9014f17 	ldw	r4,1340(sp)
    1c58:	b00b883a 	mov	r5,r22
    1c5c:	d9800c04 	addi	r6,sp,48
    1c60:	d9c15115 	stw	r7,1348(sp)
    1c64:	0000fb80 	call	fb8 <__sprint_r>
    1c68:	d9c15117 	ldw	r7,1348(sp)
    1c6c:	103ea01e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    1c70:	dc800e17 	ldw	r18,56(sp)
    1c74:	dc400d17 	ldw	r17,52(sp)
    1c78:	dd401904 	addi	r21,sp,100
    1c7c:	003e1c06 	br	14f0 <___vfprintf_internal_r+0x4e0>
    1c80:	d9014f17 	ldw	r4,1340(sp)
    1c84:	b00b883a 	mov	r5,r22
    1c88:	d9800c04 	addi	r6,sp,48
    1c8c:	d9c15115 	stw	r7,1348(sp)
    1c90:	0000fb80 	call	fb8 <__sprint_r>
    1c94:	d9c15117 	ldw	r7,1348(sp)
    1c98:	103e951e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    1c9c:	dc800e17 	ldw	r18,56(sp)
    1ca0:	dc400d17 	ldw	r17,52(sp)
    1ca4:	dd401904 	addi	r21,sp,100
    1ca8:	003e0406 	br	14bc <___vfprintf_internal_r+0x4ac>
    1cac:	d9000517 	ldw	r4,20(sp)
    1cb0:	0102520e 	bge	zero,r4,25fc <___vfprintf_internal_r+0x15ec>
    1cb4:	d9814717 	ldw	r6,1308(sp)
    1cb8:	21807a16 	blt	r4,r6,1ea4 <___vfprintf_internal_r+0xe94>
    1cbc:	d8814117 	ldw	r2,1284(sp)
    1cc0:	91a5883a 	add	r18,r18,r6
    1cc4:	8c400044 	addi	r17,r17,1
    1cc8:	a8800015 	stw	r2,0(r21)
    1ccc:	008001c4 	movi	r2,7
    1cd0:	a9800115 	stw	r6,4(r21)
    1cd4:	dc800e15 	stw	r18,56(sp)
    1cd8:	dc400d15 	stw	r17,52(sp)
    1cdc:	1442f616 	blt	r2,r17,28b8 <___vfprintf_internal_r+0x18a8>
    1ce0:	a8c00204 	addi	r3,r21,8
    1ce4:	d9414717 	ldw	r5,1308(sp)
    1ce8:	2161c83a 	sub	r16,r4,r5
    1cec:	043f9d0e 	bge	zero,r16,1b64 <___vfprintf_internal_r+0xb54>
    1cf0:	00800404 	movi	r2,16
    1cf4:	1402130e 	bge	r2,r16,2544 <___vfprintf_internal_r+0x1534>
    1cf8:	dc400d17 	ldw	r17,52(sp)
    1cfc:	1027883a 	mov	r19,r2
    1d00:	07000074 	movhi	fp,1
    1d04:	e7351884 	addi	fp,fp,-11166
    1d08:	050001c4 	movi	r20,7
    1d0c:	00000306 	br	1d1c <___vfprintf_internal_r+0xd0c>
    1d10:	18c00204 	addi	r3,r3,8
    1d14:	843ffc04 	addi	r16,r16,-16
    1d18:	9c020d0e 	bge	r19,r16,2550 <___vfprintf_internal_r+0x1540>
    1d1c:	94800404 	addi	r18,r18,16
    1d20:	8c400044 	addi	r17,r17,1
    1d24:	1f000015 	stw	fp,0(r3)
    1d28:	1cc00115 	stw	r19,4(r3)
    1d2c:	dc800e15 	stw	r18,56(sp)
    1d30:	dc400d15 	stw	r17,52(sp)
    1d34:	a47ff60e 	bge	r20,r17,1d10 <___vfprintf_internal_r+0xd00>
    1d38:	d9014f17 	ldw	r4,1340(sp)
    1d3c:	b00b883a 	mov	r5,r22
    1d40:	d9800c04 	addi	r6,sp,48
    1d44:	0000fb80 	call	fb8 <__sprint_r>
    1d48:	103e691e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    1d4c:	dc800e17 	ldw	r18,56(sp)
    1d50:	dc400d17 	ldw	r17,52(sp)
    1d54:	d8c01904 	addi	r3,sp,100
    1d58:	003fee06 	br	1d14 <___vfprintf_internal_r+0xd04>
    1d5c:	d8814717 	ldw	r2,1308(sp)
    1d60:	143fffc4 	addi	r16,r2,-1
    1d64:	043e970e 	bge	zero,r16,17c4 <___vfprintf_internal_r+0x7b4>
    1d68:	00800404 	movi	r2,16
    1d6c:	1400180e 	bge	r2,r16,1dd0 <___vfprintf_internal_r+0xdc0>
    1d70:	1029883a 	mov	r20,r2
    1d74:	07000074 	movhi	fp,1
    1d78:	e7351884 	addi	fp,fp,-11166
    1d7c:	054001c4 	movi	r21,7
    1d80:	00000306 	br	1d90 <___vfprintf_internal_r+0xd80>
    1d84:	9cc00204 	addi	r19,r19,8
    1d88:	843ffc04 	addi	r16,r16,-16
    1d8c:	a400120e 	bge	r20,r16,1dd8 <___vfprintf_internal_r+0xdc8>
    1d90:	94800404 	addi	r18,r18,16
    1d94:	8c400044 	addi	r17,r17,1
    1d98:	9f000015 	stw	fp,0(r19)
    1d9c:	9d000115 	stw	r20,4(r19)
    1da0:	dc800e15 	stw	r18,56(sp)
    1da4:	dc400d15 	stw	r17,52(sp)
    1da8:	ac7ff60e 	bge	r21,r17,1d84 <___vfprintf_internal_r+0xd74>
    1dac:	d9014f17 	ldw	r4,1340(sp)
    1db0:	b00b883a 	mov	r5,r22
    1db4:	d9800c04 	addi	r6,sp,48
    1db8:	0000fb80 	call	fb8 <__sprint_r>
    1dbc:	103e4c1e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    1dc0:	dc800e17 	ldw	r18,56(sp)
    1dc4:	dc400d17 	ldw	r17,52(sp)
    1dc8:	dcc01904 	addi	r19,sp,100
    1dcc:	003fee06 	br	1d88 <___vfprintf_internal_r+0xd78>
    1dd0:	07000074 	movhi	fp,1
    1dd4:	e7351884 	addi	fp,fp,-11166
    1dd8:	9425883a 	add	r18,r18,r16
    1ddc:	8c400044 	addi	r17,r17,1
    1de0:	008001c4 	movi	r2,7
    1de4:	9f000015 	stw	fp,0(r19)
    1de8:	9c000115 	stw	r16,4(r19)
    1dec:	dc800e15 	stw	r18,56(sp)
    1df0:	dc400d15 	stw	r17,52(sp)
    1df4:	147e720e 	bge	r2,r17,17c0 <___vfprintf_internal_r+0x7b0>
    1df8:	d9014f17 	ldw	r4,1340(sp)
    1dfc:	b00b883a 	mov	r5,r22
    1e00:	d9800c04 	addi	r6,sp,48
    1e04:	0000fb80 	call	fb8 <__sprint_r>
    1e08:	103e391e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    1e0c:	dc800e17 	ldw	r18,56(sp)
    1e10:	dc400d17 	ldw	r17,52(sp)
    1e14:	dcc01904 	addi	r19,sp,100
    1e18:	003e6a06 	br	17c4 <___vfprintf_internal_r+0x7b4>
    1e1c:	d9014f17 	ldw	r4,1340(sp)
    1e20:	b00b883a 	mov	r5,r22
    1e24:	d9800c04 	addi	r6,sp,48
    1e28:	d9c15115 	stw	r7,1348(sp)
    1e2c:	0000fb80 	call	fb8 <__sprint_r>
    1e30:	d9c15117 	ldw	r7,1348(sp)
    1e34:	103e2e1e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    1e38:	dc800e17 	ldw	r18,56(sp)
    1e3c:	dc400d17 	ldw	r17,52(sp)
    1e40:	dd401904 	addi	r21,sp,100
    1e44:	003dba06 	br	1530 <___vfprintf_internal_r+0x520>
    1e48:	d9014f17 	ldw	r4,1340(sp)
    1e4c:	b00b883a 	mov	r5,r22
    1e50:	d9800c04 	addi	r6,sp,48
    1e54:	0000fb80 	call	fb8 <__sprint_r>
    1e58:	103e251e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    1e5c:	dc800e17 	ldw	r18,56(sp)
    1e60:	dc400d17 	ldw	r17,52(sp)
    1e64:	dcc01904 	addi	r19,sp,100
    1e68:	003e4206 	br	1774 <___vfprintf_internal_r+0x764>
    1e6c:	d9014f17 	ldw	r4,1340(sp)
    1e70:	b00b883a 	mov	r5,r22
    1e74:	d9800c04 	addi	r6,sp,48
    1e78:	0000fb80 	call	fb8 <__sprint_r>
    1e7c:	103e1c1e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    1e80:	dc800e17 	ldw	r18,56(sp)
    1e84:	dc400d17 	ldw	r17,52(sp)
    1e88:	d8c01904 	addi	r3,sp,100
    1e8c:	003e2e06 	br	1748 <___vfprintf_internal_r+0x738>
    1e90:	d9414c17 	ldw	r5,1328(sp)
    1e94:	2880004c 	andi	r2,r5,1
    1e98:	1005003a 	cmpeq	r2,r2,zero
    1e9c:	103dda1e 	bne	r2,zero,1608 <___vfprintf_internal_r+0x5f8>
    1ea0:	003e9f06 	br	1920 <___vfprintf_internal_r+0x910>
    1ea4:	d8c14117 	ldw	r3,1284(sp)
    1ea8:	9125883a 	add	r18,r18,r4
    1eac:	8c400044 	addi	r17,r17,1
    1eb0:	008001c4 	movi	r2,7
    1eb4:	a8c00015 	stw	r3,0(r21)
    1eb8:	a9000115 	stw	r4,4(r21)
    1ebc:	dc800e15 	stw	r18,56(sp)
    1ec0:	dc400d15 	stw	r17,52(sp)
    1ec4:	14426616 	blt	r2,r17,2860 <___vfprintf_internal_r+0x1850>
    1ec8:	a8c00204 	addi	r3,r21,8
    1ecc:	d9414917 	ldw	r5,1316(sp)
    1ed0:	00800044 	movi	r2,1
    1ed4:	94800044 	addi	r18,r18,1
    1ed8:	8c400044 	addi	r17,r17,1
    1edc:	18800115 	stw	r2,4(r3)
    1ee0:	008001c4 	movi	r2,7
    1ee4:	19400015 	stw	r5,0(r3)
    1ee8:	dc800e15 	stw	r18,56(sp)
    1eec:	dc400d15 	stw	r17,52(sp)
    1ef0:	2021883a 	mov	r16,r4
    1ef4:	14425016 	blt	r2,r17,2838 <___vfprintf_internal_r+0x1828>
    1ef8:	19400204 	addi	r5,r3,8
    1efc:	d9814717 	ldw	r6,1308(sp)
    1f00:	8c400044 	addi	r17,r17,1
    1f04:	dc400d15 	stw	r17,52(sp)
    1f08:	3107c83a 	sub	r3,r6,r4
    1f0c:	d9014117 	ldw	r4,1284(sp)
    1f10:	90e5883a 	add	r18,r18,r3
    1f14:	28c00115 	stw	r3,4(r5)
    1f18:	8105883a 	add	r2,r16,r4
    1f1c:	28800015 	stw	r2,0(r5)
    1f20:	008001c4 	movi	r2,7
    1f24:	dc800e15 	stw	r18,56(sp)
    1f28:	147f1d16 	blt	r2,r17,1ba0 <___vfprintf_internal_r+0xb90>
    1f2c:	28c00204 	addi	r3,r5,8
    1f30:	003db506 	br	1608 <___vfprintf_internal_r+0x5f8>
    1f34:	3c000017 	ldw	r16,0(r7)
    1f38:	3c400117 	ldw	r17,4(r7)
    1f3c:	39800204 	addi	r6,r7,8
    1f40:	01000044 	movi	r4,1
    1f44:	d9814015 	stw	r6,1280(sp)
    1f48:	d8000405 	stb	zero,16(sp)
    1f4c:	003ebe06 	br	1a48 <___vfprintf_internal_r+0xa38>
    1f50:	3c000017 	ldw	r16,0(r7)
    1f54:	3c400117 	ldw	r17,4(r7)
    1f58:	38800204 	addi	r2,r7,8
    1f5c:	d8814015 	stw	r2,1280(sp)
    1f60:	003eb706 	br	1a40 <___vfprintf_internal_r+0xa30>
    1f64:	3c000017 	ldw	r16,0(r7)
    1f68:	3c400117 	ldw	r17,4(r7)
    1f6c:	39000204 	addi	r4,r7,8
    1f70:	d9014015 	stw	r4,1280(sp)
    1f74:	0009883a 	mov	r4,zero
    1f78:	d8000405 	stb	zero,16(sp)
    1f7c:	003eb206 	br	1a48 <___vfprintf_internal_r+0xa38>
    1f80:	38c00017 	ldw	r3,0(r7)
    1f84:	39c00104 	addi	r7,r7,4
    1f88:	d8c14a15 	stw	r3,1320(sp)
    1f8c:	1800d10e 	bge	r3,zero,22d4 <___vfprintf_internal_r+0x12c4>
    1f90:	00c7c83a 	sub	r3,zero,r3
    1f94:	d8c14a15 	stw	r3,1320(sp)
    1f98:	d9014c17 	ldw	r4,1328(sp)
    1f9c:	b8c00007 	ldb	r3,0(r23)
    1fa0:	21000114 	ori	r4,r4,4
    1fa4:	d9014c15 	stw	r4,1328(sp)
    1fa8:	003c9806 	br	120c <___vfprintf_internal_r+0x1fc>
    1fac:	d9814c17 	ldw	r6,1328(sp)
    1fb0:	3080080c 	andi	r2,r6,32
    1fb4:	1001f026 	beq	r2,zero,2778 <___vfprintf_internal_r+0x1768>
    1fb8:	d9014b17 	ldw	r4,1324(sp)
    1fbc:	38800017 	ldw	r2,0(r7)
    1fc0:	39c00104 	addi	r7,r7,4
    1fc4:	d9c14015 	stw	r7,1280(sp)
    1fc8:	2007d7fa 	srai	r3,r4,31
    1fcc:	d9c14017 	ldw	r7,1280(sp)
    1fd0:	11000015 	stw	r4,0(r2)
    1fd4:	10c00115 	stw	r3,4(r2)
    1fd8:	003c6906 	br	1180 <___vfprintf_internal_r+0x170>
    1fdc:	b8c00007 	ldb	r3,0(r23)
    1fe0:	00801b04 	movi	r2,108
    1fe4:	18824f26 	beq	r3,r2,2924 <___vfprintf_internal_r+0x1914>
    1fe8:	d9414c17 	ldw	r5,1328(sp)
    1fec:	29400414 	ori	r5,r5,16
    1ff0:	d9414c15 	stw	r5,1328(sp)
    1ff4:	003c8506 	br	120c <___vfprintf_internal_r+0x1fc>
    1ff8:	d9814c17 	ldw	r6,1328(sp)
    1ffc:	b8c00007 	ldb	r3,0(r23)
    2000:	31800814 	ori	r6,r6,32
    2004:	d9814c15 	stw	r6,1328(sp)
    2008:	003c8006 	br	120c <___vfprintf_internal_r+0x1fc>
    200c:	d8814c17 	ldw	r2,1328(sp)
    2010:	3c000017 	ldw	r16,0(r7)
    2014:	00c01e04 	movi	r3,120
    2018:	10800094 	ori	r2,r2,2
    201c:	d8814c15 	stw	r2,1328(sp)
    2020:	39c00104 	addi	r7,r7,4
    2024:	01400074 	movhi	r5,1
    2028:	29750104 	addi	r5,r5,-11260
    202c:	00800c04 	movi	r2,48
    2030:	0023883a 	mov	r17,zero
    2034:	01000084 	movi	r4,2
    2038:	d9c14015 	stw	r7,1280(sp)
    203c:	d8c14d15 	stw	r3,1332(sp)
    2040:	d9414415 	stw	r5,1296(sp)
    2044:	d8800445 	stb	r2,17(sp)
    2048:	d8c00485 	stb	r3,18(sp)
    204c:	d8000405 	stb	zero,16(sp)
    2050:	003e7d06 	br	1a48 <___vfprintf_internal_r+0xa38>
    2054:	d8814c17 	ldw	r2,1328(sp)
    2058:	b8c00007 	ldb	r3,0(r23)
    205c:	10801014 	ori	r2,r2,64
    2060:	d8814c15 	stw	r2,1328(sp)
    2064:	003c6906 	br	120c <___vfprintf_internal_r+0x1fc>
    2068:	d9414c17 	ldw	r5,1328(sp)
    206c:	2880020c 	andi	r2,r5,8
    2070:	1001df26 	beq	r2,zero,27f0 <___vfprintf_internal_r+0x17e0>
    2074:	39800017 	ldw	r6,0(r7)
    2078:	38800204 	addi	r2,r7,8
    207c:	d8814015 	stw	r2,1280(sp)
    2080:	d9814215 	stw	r6,1288(sp)
    2084:	39c00117 	ldw	r7,4(r7)
    2088:	d9c14315 	stw	r7,1292(sp)
    208c:	d9014217 	ldw	r4,1288(sp)
    2090:	d9414317 	ldw	r5,1292(sp)
    2094:	0007afc0 	call	7afc <__isinfd>
    2098:	10021726 	beq	r2,zero,28f8 <___vfprintf_internal_r+0x18e8>
    209c:	d9014217 	ldw	r4,1288(sp)
    20a0:	d9414317 	ldw	r5,1292(sp)
    20a4:	000d883a 	mov	r6,zero
    20a8:	000f883a 	mov	r7,zero
    20ac:	0009d280 	call	9d28 <__ltdf2>
    20b0:	1002ca16 	blt	r2,zero,2bdc <___vfprintf_internal_r+0x1bcc>
    20b4:	d9414d17 	ldw	r5,1332(sp)
    20b8:	008011c4 	movi	r2,71
    20bc:	11420a16 	blt	r2,r5,28e8 <___vfprintf_internal_r+0x18d8>
    20c0:	01800074 	movhi	r6,1
    20c4:	31b50604 	addi	r6,r6,-11240
    20c8:	d9814115 	stw	r6,1284(sp)
    20cc:	d9014c17 	ldw	r4,1328(sp)
    20d0:	00c000c4 	movi	r3,3
    20d4:	00bfdfc4 	movi	r2,-129
    20d8:	2088703a 	and	r4,r4,r2
    20dc:	180f883a 	mov	r7,r3
    20e0:	d8c14515 	stw	r3,1300(sp)
    20e4:	d9014c15 	stw	r4,1328(sp)
    20e8:	d8014615 	stw	zero,1304(sp)
    20ec:	003e6a06 	br	1a98 <___vfprintf_internal_r+0xa88>
    20f0:	38800017 	ldw	r2,0(r7)
    20f4:	00c00044 	movi	r3,1
    20f8:	39c00104 	addi	r7,r7,4
    20fc:	d9c14015 	stw	r7,1280(sp)
    2100:	d9000f04 	addi	r4,sp,60
    2104:	180f883a 	mov	r7,r3
    2108:	d8c14515 	stw	r3,1300(sp)
    210c:	d9014115 	stw	r4,1284(sp)
    2110:	d8800f05 	stb	r2,60(sp)
    2114:	d8000405 	stb	zero,16(sp)
    2118:	003cac06 	br	13cc <___vfprintf_internal_r+0x3bc>
    211c:	01400074 	movhi	r5,1
    2120:	29750c04 	addi	r5,r5,-11216
    2124:	d9414415 	stw	r5,1296(sp)
    2128:	d9814c17 	ldw	r6,1328(sp)
    212c:	3080080c 	andi	r2,r6,32
    2130:	1000f926 	beq	r2,zero,2518 <___vfprintf_internal_r+0x1508>
    2134:	3c000017 	ldw	r16,0(r7)
    2138:	3c400117 	ldw	r17,4(r7)
    213c:	38800204 	addi	r2,r7,8
    2140:	d8814015 	stw	r2,1280(sp)
    2144:	d9414c17 	ldw	r5,1328(sp)
    2148:	2880004c 	andi	r2,r5,1
    214c:	1005003a 	cmpeq	r2,r2,zero
    2150:	1000b31e 	bne	r2,zero,2420 <___vfprintf_internal_r+0x1410>
    2154:	8444b03a 	or	r2,r16,r17
    2158:	1000b126 	beq	r2,zero,2420 <___vfprintf_internal_r+0x1410>
    215c:	d9814d17 	ldw	r6,1332(sp)
    2160:	29400094 	ori	r5,r5,2
    2164:	00800c04 	movi	r2,48
    2168:	01000084 	movi	r4,2
    216c:	d9414c15 	stw	r5,1328(sp)
    2170:	d8800445 	stb	r2,17(sp)
    2174:	d9800485 	stb	r6,18(sp)
    2178:	d8000405 	stb	zero,16(sp)
    217c:	003e3206 	br	1a48 <___vfprintf_internal_r+0xa38>
    2180:	01800074 	movhi	r6,1
    2184:	31b50104 	addi	r6,r6,-11260
    2188:	d9814415 	stw	r6,1296(sp)
    218c:	003fe606 	br	2128 <___vfprintf_internal_r+0x1118>
    2190:	00800ac4 	movi	r2,43
    2194:	d8800405 	stb	r2,16(sp)
    2198:	b8c00007 	ldb	r3,0(r23)
    219c:	003c1b06 	br	120c <___vfprintf_internal_r+0x1fc>
    21a0:	d8814c17 	ldw	r2,1328(sp)
    21a4:	b8c00007 	ldb	r3,0(r23)
    21a8:	10800054 	ori	r2,r2,1
    21ac:	d8814c15 	stw	r2,1328(sp)
    21b0:	003c1606 	br	120c <___vfprintf_internal_r+0x1fc>
    21b4:	d8800407 	ldb	r2,16(sp)
    21b8:	1000461e 	bne	r2,zero,22d4 <___vfprintf_internal_r+0x12c4>
    21bc:	00800804 	movi	r2,32
    21c0:	d8800405 	stb	r2,16(sp)
    21c4:	b8c00007 	ldb	r3,0(r23)
    21c8:	003c1006 	br	120c <___vfprintf_internal_r+0x1fc>
    21cc:	d9814c17 	ldw	r6,1328(sp)
    21d0:	b8c00007 	ldb	r3,0(r23)
    21d4:	31800214 	ori	r6,r6,8
    21d8:	d9814c15 	stw	r6,1328(sp)
    21dc:	003c0b06 	br	120c <___vfprintf_internal_r+0x1fc>
    21e0:	0007883a 	mov	r3,zero
    21e4:	01000244 	movi	r4,9
    21e8:	188002a4 	muli	r2,r3,10
    21ec:	b8c00007 	ldb	r3,0(r23)
    21f0:	d9814d17 	ldw	r6,1332(sp)
    21f4:	bdc00044 	addi	r23,r23,1
    21f8:	d8c14d15 	stw	r3,1332(sp)
    21fc:	d9414d17 	ldw	r5,1332(sp)
    2200:	3085883a 	add	r2,r6,r2
    2204:	10fff404 	addi	r3,r2,-48
    2208:	28bff404 	addi	r2,r5,-48
    220c:	20bff62e 	bgeu	r4,r2,21e8 <___vfprintf_internal_r+0x11d8>
    2210:	d8c14a15 	stw	r3,1320(sp)
    2214:	003bff06 	br	1214 <___vfprintf_internal_r+0x204>
    2218:	d9414c17 	ldw	r5,1328(sp)
    221c:	b8c00007 	ldb	r3,0(r23)
    2220:	29402014 	ori	r5,r5,128
    2224:	d9414c15 	stw	r5,1328(sp)
    2228:	003bf806 	br	120c <___vfprintf_internal_r+0x1fc>
    222c:	b8c00007 	ldb	r3,0(r23)
    2230:	00800a84 	movi	r2,42
    2234:	bdc00044 	addi	r23,r23,1
    2238:	18831526 	beq	r3,r2,2e90 <___vfprintf_internal_r+0x1e80>
    223c:	d8c14d15 	stw	r3,1332(sp)
    2240:	18bff404 	addi	r2,r3,-48
    2244:	00c00244 	movi	r3,9
    2248:	18827836 	bltu	r3,r2,2c2c <___vfprintf_internal_r+0x1c1c>
    224c:	000d883a 	mov	r6,zero
    2250:	308002a4 	muli	r2,r6,10
    2254:	b9800007 	ldb	r6,0(r23)
    2258:	d9414d17 	ldw	r5,1332(sp)
    225c:	bdc00044 	addi	r23,r23,1
    2260:	d9814d15 	stw	r6,1332(sp)
    2264:	d9014d17 	ldw	r4,1332(sp)
    2268:	1145883a 	add	r2,r2,r5
    226c:	11bff404 	addi	r6,r2,-48
    2270:	20bff404 	addi	r2,r4,-48
    2274:	18bff62e 	bgeu	r3,r2,2250 <___vfprintf_internal_r+0x1240>
    2278:	3027883a 	mov	r19,r6
    227c:	303be50e 	bge	r6,zero,1214 <___vfprintf_internal_r+0x204>
    2280:	04ffffc4 	movi	r19,-1
    2284:	003be306 	br	1214 <___vfprintf_internal_r+0x204>
    2288:	d8000405 	stb	zero,16(sp)
    228c:	39800017 	ldw	r6,0(r7)
    2290:	39c00104 	addi	r7,r7,4
    2294:	d9c14015 	stw	r7,1280(sp)
    2298:	d9814115 	stw	r6,1284(sp)
    229c:	3001c926 	beq	r6,zero,29c4 <___vfprintf_internal_r+0x19b4>
    22a0:	98000e16 	blt	r19,zero,22dc <___vfprintf_internal_r+0x12cc>
    22a4:	d9014117 	ldw	r4,1284(sp)
    22a8:	000b883a 	mov	r5,zero
    22ac:	980d883a 	mov	r6,r19
    22b0:	00060cc0 	call	60cc <memchr>
    22b4:	10025926 	beq	r2,zero,2c1c <___vfprintf_internal_r+0x1c0c>
    22b8:	d8c14117 	ldw	r3,1284(sp)
    22bc:	10cfc83a 	sub	r7,r2,r3
    22c0:	99c19e16 	blt	r19,r7,293c <___vfprintf_internal_r+0x192c>
    22c4:	d9c14515 	stw	r7,1300(sp)
    22c8:	38000916 	blt	r7,zero,22f0 <___vfprintf_internal_r+0x12e0>
    22cc:	d8014615 	stw	zero,1304(sp)
    22d0:	003df106 	br	1a98 <___vfprintf_internal_r+0xa88>
    22d4:	b8c00007 	ldb	r3,0(r23)
    22d8:	003bcc06 	br	120c <___vfprintf_internal_r+0x1fc>
    22dc:	d9014117 	ldw	r4,1284(sp)
    22e0:	0000f440 	call	f44 <strlen>
    22e4:	d8814515 	stw	r2,1300(sp)
    22e8:	100f883a 	mov	r7,r2
    22ec:	103ff70e 	bge	r2,zero,22cc <___vfprintf_internal_r+0x12bc>
    22f0:	d8014515 	stw	zero,1300(sp)
    22f4:	d8014615 	stw	zero,1304(sp)
    22f8:	003de706 	br	1a98 <___vfprintf_internal_r+0xa88>
    22fc:	20c03fcc 	andi	r3,r4,255
    2300:	00800044 	movi	r2,1
    2304:	18802d26 	beq	r3,r2,23bc <___vfprintf_internal_r+0x13ac>
    2308:	18800e36 	bltu	r3,r2,2344 <___vfprintf_internal_r+0x1334>
    230c:	00800084 	movi	r2,2
    2310:	1880fa26 	beq	r3,r2,26fc <___vfprintf_internal_r+0x16ec>
    2314:	01000074 	movhi	r4,1
    2318:	21351104 	addi	r4,r4,-11196
    231c:	0000f440 	call	f44 <strlen>
    2320:	100f883a 	mov	r7,r2
    2324:	dcc14515 	stw	r19,1300(sp)
    2328:	9880010e 	bge	r19,r2,2330 <___vfprintf_internal_r+0x1320>
    232c:	d8814515 	stw	r2,1300(sp)
    2330:	00800074 	movhi	r2,1
    2334:	10b51104 	addi	r2,r2,-11196
    2338:	dcc14615 	stw	r19,1304(sp)
    233c:	d8814115 	stw	r2,1284(sp)
    2340:	003dd506 	br	1a98 <___vfprintf_internal_r+0xa88>
    2344:	d9401904 	addi	r5,sp,100
    2348:	dd000f04 	addi	r20,sp,60
    234c:	d9414115 	stw	r5,1284(sp)
    2350:	880a977a 	slli	r5,r17,29
    2354:	d9814117 	ldw	r6,1284(sp)
    2358:	8004d0fa 	srli	r2,r16,3
    235c:	8806d0fa 	srli	r3,r17,3
    2360:	810001cc 	andi	r4,r16,7
    2364:	2884b03a 	or	r2,r5,r2
    2368:	31bfffc4 	addi	r6,r6,-1
    236c:	21000c04 	addi	r4,r4,48
    2370:	d9814115 	stw	r6,1284(sp)
    2374:	10cab03a 	or	r5,r2,r3
    2378:	31000005 	stb	r4,0(r6)
    237c:	1021883a 	mov	r16,r2
    2380:	1823883a 	mov	r17,r3
    2384:	283ff21e 	bne	r5,zero,2350 <___vfprintf_internal_r+0x1340>
    2388:	d8c14c17 	ldw	r3,1328(sp)
    238c:	1880004c 	andi	r2,r3,1
    2390:	1005003a 	cmpeq	r2,r2,zero
    2394:	103db91e 	bne	r2,zero,1a7c <___vfprintf_internal_r+0xa6c>
    2398:	20803fcc 	andi	r2,r4,255
    239c:	1080201c 	xori	r2,r2,128
    23a0:	10bfe004 	addi	r2,r2,-128
    23a4:	00c00c04 	movi	r3,48
    23a8:	10fdb426 	beq	r2,r3,1a7c <___vfprintf_internal_r+0xa6c>
    23ac:	31bfffc4 	addi	r6,r6,-1
    23b0:	d9814115 	stw	r6,1284(sp)
    23b4:	30c00005 	stb	r3,0(r6)
    23b8:	003db006 	br	1a7c <___vfprintf_internal_r+0xa6c>
    23bc:	88800068 	cmpgeui	r2,r17,1
    23c0:	10002c1e 	bne	r2,zero,2474 <___vfprintf_internal_r+0x1464>
    23c4:	8800021e 	bne	r17,zero,23d0 <___vfprintf_internal_r+0x13c0>
    23c8:	00800244 	movi	r2,9
    23cc:	14002936 	bltu	r2,r16,2474 <___vfprintf_internal_r+0x1464>
    23d0:	d90018c4 	addi	r4,sp,99
    23d4:	dd000f04 	addi	r20,sp,60
    23d8:	d9014115 	stw	r4,1284(sp)
    23dc:	d9014117 	ldw	r4,1284(sp)
    23e0:	80800c04 	addi	r2,r16,48
    23e4:	20800005 	stb	r2,0(r4)
    23e8:	003da406 	br	1a7c <___vfprintf_internal_r+0xa6c>
    23ec:	dc400d17 	ldw	r17,52(sp)
    23f0:	07000074 	movhi	fp,1
    23f4:	e7351884 	addi	fp,fp,-11166
    23f8:	9425883a 	add	r18,r18,r16
    23fc:	8c400044 	addi	r17,r17,1
    2400:	008001c4 	movi	r2,7
    2404:	1f000015 	stw	fp,0(r3)
    2408:	1c000115 	stw	r16,4(r3)
    240c:	dc800e15 	stw	r18,56(sp)
    2410:	dc400d15 	stw	r17,52(sp)
    2414:	147de216 	blt	r2,r17,1ba0 <___vfprintf_internal_r+0xb90>
    2418:	18c00204 	addi	r3,r3,8
    241c:	003c7a06 	br	1608 <___vfprintf_internal_r+0x5f8>
    2420:	01000084 	movi	r4,2
    2424:	d8000405 	stb	zero,16(sp)
    2428:	003d8706 	br	1a48 <___vfprintf_internal_r+0xa38>
    242c:	d9814c17 	ldw	r6,1328(sp)
    2430:	30c4703a 	and	r2,r6,r3
    2434:	1005003a 	cmpeq	r2,r2,zero
    2438:	103cb926 	beq	r2,zero,1720 <___vfprintf_internal_r+0x710>
    243c:	d9014117 	ldw	r4,1284(sp)
    2440:	94800044 	addi	r18,r18,1
    2444:	8c400044 	addi	r17,r17,1
    2448:	008001c4 	movi	r2,7
    244c:	a9000015 	stw	r4,0(r21)
    2450:	a8c00115 	stw	r3,4(r21)
    2454:	dc800e15 	stw	r18,56(sp)
    2458:	dc400d15 	stw	r17,52(sp)
    245c:	147e6616 	blt	r2,r17,1df8 <___vfprintf_internal_r+0xde8>
    2460:	acc00204 	addi	r19,r21,8
    2464:	003cd706 	br	17c4 <___vfprintf_internal_r+0x7b4>
    2468:	07000074 	movhi	fp,1
    246c:	e7351884 	addi	fp,fp,-11166
    2470:	003c4f06 	br	15b0 <___vfprintf_internal_r+0x5a0>
    2474:	dd000f04 	addi	r20,sp,60
    2478:	dc801904 	addi	r18,sp,100
    247c:	8009883a 	mov	r4,r16
    2480:	880b883a 	mov	r5,r17
    2484:	01800284 	movi	r6,10
    2488:	000f883a 	mov	r7,zero
    248c:	0008a380 	call	8a38 <__umoddi3>
    2490:	12000c04 	addi	r8,r2,48
    2494:	94bfffc4 	addi	r18,r18,-1
    2498:	8009883a 	mov	r4,r16
    249c:	880b883a 	mov	r5,r17
    24a0:	01800284 	movi	r6,10
    24a4:	000f883a 	mov	r7,zero
    24a8:	92000005 	stb	r8,0(r18)
    24ac:	000845c0 	call	845c <__udivdi3>
    24b0:	1009883a 	mov	r4,r2
    24b4:	1021883a 	mov	r16,r2
    24b8:	18800068 	cmpgeui	r2,r3,1
    24bc:	1823883a 	mov	r17,r3
    24c0:	103fee1e 	bne	r2,zero,247c <___vfprintf_internal_r+0x146c>
    24c4:	1800021e 	bne	r3,zero,24d0 <___vfprintf_internal_r+0x14c0>
    24c8:	00800244 	movi	r2,9
    24cc:	113feb36 	bltu	r2,r4,247c <___vfprintf_internal_r+0x146c>
    24d0:	94bfffc4 	addi	r18,r18,-1
    24d4:	dc814115 	stw	r18,1284(sp)
    24d8:	003fc006 	br	23dc <___vfprintf_internal_r+0x13cc>
    24dc:	d9014c17 	ldw	r4,1328(sp)
    24e0:	2080004c 	andi	r2,r4,1
    24e4:	10009a1e 	bne	r2,zero,2750 <___vfprintf_internal_r+0x1740>
    24e8:	d9401904 	addi	r5,sp,100
    24ec:	dd000f04 	addi	r20,sp,60
    24f0:	d9414115 	stw	r5,1284(sp)
    24f4:	003d6106 	br	1a7c <___vfprintf_internal_r+0xa6c>
    24f8:	d9014f17 	ldw	r4,1340(sp)
    24fc:	b00b883a 	mov	r5,r22
    2500:	d9800c04 	addi	r6,sp,48
    2504:	0000fb80 	call	fb8 <__sprint_r>
    2508:	103c791e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    250c:	dc800e17 	ldw	r18,56(sp)
    2510:	d8c01904 	addi	r3,sp,100
    2514:	003cff06 	br	1914 <___vfprintf_internal_r+0x904>
    2518:	d8c14c17 	ldw	r3,1328(sp)
    251c:	1880040c 	andi	r2,r3,16
    2520:	1000711e 	bne	r2,zero,26e8 <___vfprintf_internal_r+0x16d8>
    2524:	d9014c17 	ldw	r4,1328(sp)
    2528:	2080100c 	andi	r2,r4,64
    252c:	10006e26 	beq	r2,zero,26e8 <___vfprintf_internal_r+0x16d8>
    2530:	3c00000b 	ldhu	r16,0(r7)
    2534:	0023883a 	mov	r17,zero
    2538:	39c00104 	addi	r7,r7,4
    253c:	d9c14015 	stw	r7,1280(sp)
    2540:	003f0006 	br	2144 <___vfprintf_internal_r+0x1134>
    2544:	dc400d17 	ldw	r17,52(sp)
    2548:	07000074 	movhi	fp,1
    254c:	e7351884 	addi	fp,fp,-11166
    2550:	9425883a 	add	r18,r18,r16
    2554:	8c400044 	addi	r17,r17,1
    2558:	008001c4 	movi	r2,7
    255c:	1f000015 	stw	fp,0(r3)
    2560:	1c000115 	stw	r16,4(r3)
    2564:	dc800e15 	stw	r18,56(sp)
    2568:	dc400d15 	stw	r17,52(sp)
    256c:	147d7616 	blt	r2,r17,1b48 <___vfprintf_internal_r+0xb38>
    2570:	18c00204 	addi	r3,r3,8
    2574:	003d7b06 	br	1b64 <___vfprintf_internal_r+0xb54>
    2578:	dc800e17 	ldw	r18,56(sp)
    257c:	dc400d17 	ldw	r17,52(sp)
    2580:	07000074 	movhi	fp,1
    2584:	e7351c84 	addi	fp,fp,-11150
    2588:	003bc006 	br	148c <___vfprintf_internal_r+0x47c>
    258c:	d9014f17 	ldw	r4,1340(sp)
    2590:	b00b883a 	mov	r5,r22
    2594:	d9800c04 	addi	r6,sp,48
    2598:	0000fb80 	call	fb8 <__sprint_r>
    259c:	103c541e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    25a0:	dc800e17 	ldw	r18,56(sp)
    25a4:	d8c01904 	addi	r3,sp,100
    25a8:	003ce906 	br	1950 <___vfprintf_internal_r+0x940>
    25ac:	3c000017 	ldw	r16,0(r7)
    25b0:	0009883a 	mov	r4,zero
    25b4:	39c00104 	addi	r7,r7,4
    25b8:	0023883a 	mov	r17,zero
    25bc:	d9c14015 	stw	r7,1280(sp)
    25c0:	d8000405 	stb	zero,16(sp)
    25c4:	003d2006 	br	1a48 <___vfprintf_internal_r+0xa38>
    25c8:	38800017 	ldw	r2,0(r7)
    25cc:	39c00104 	addi	r7,r7,4
    25d0:	d9c14015 	stw	r7,1280(sp)
    25d4:	1023d7fa 	srai	r17,r2,31
    25d8:	1021883a 	mov	r16,r2
    25dc:	003d1806 	br	1a40 <___vfprintf_internal_r+0xa30>
    25e0:	3c000017 	ldw	r16,0(r7)
    25e4:	01000044 	movi	r4,1
    25e8:	39c00104 	addi	r7,r7,4
    25ec:	0023883a 	mov	r17,zero
    25f0:	d9c14015 	stw	r7,1280(sp)
    25f4:	d8000405 	stb	zero,16(sp)
    25f8:	003d1306 	br	1a48 <___vfprintf_internal_r+0xa38>
    25fc:	00800074 	movhi	r2,1
    2600:	10b51804 	addi	r2,r2,-11168
    2604:	94800044 	addi	r18,r18,1
    2608:	8c400044 	addi	r17,r17,1
    260c:	a8800015 	stw	r2,0(r21)
    2610:	00c00044 	movi	r3,1
    2614:	008001c4 	movi	r2,7
    2618:	a8c00115 	stw	r3,4(r21)
    261c:	dc800e15 	stw	r18,56(sp)
    2620:	dc400d15 	stw	r17,52(sp)
    2624:	1440ca16 	blt	r2,r17,2950 <___vfprintf_internal_r+0x1940>
    2628:	a8c00204 	addi	r3,r21,8
    262c:	2000061e 	bne	r4,zero,2648 <___vfprintf_internal_r+0x1638>
    2630:	d9414717 	ldw	r5,1308(sp)
    2634:	2800041e 	bne	r5,zero,2648 <___vfprintf_internal_r+0x1638>
    2638:	d9814c17 	ldw	r6,1328(sp)
    263c:	3080004c 	andi	r2,r6,1
    2640:	1005003a 	cmpeq	r2,r2,zero
    2644:	103bf01e 	bne	r2,zero,1608 <___vfprintf_internal_r+0x5f8>
    2648:	00800044 	movi	r2,1
    264c:	dc400d17 	ldw	r17,52(sp)
    2650:	18800115 	stw	r2,4(r3)
    2654:	d8814917 	ldw	r2,1316(sp)
    2658:	94800044 	addi	r18,r18,1
    265c:	8c400044 	addi	r17,r17,1
    2660:	18800015 	stw	r2,0(r3)
    2664:	008001c4 	movi	r2,7
    2668:	dc800e15 	stw	r18,56(sp)
    266c:	dc400d15 	stw	r17,52(sp)
    2670:	1440ca16 	blt	r2,r17,299c <___vfprintf_internal_r+0x198c>
    2674:	18c00204 	addi	r3,r3,8
    2678:	0121c83a 	sub	r16,zero,r4
    267c:	0400500e 	bge	zero,r16,27c0 <___vfprintf_internal_r+0x17b0>
    2680:	00800404 	movi	r2,16
    2684:	1400800e 	bge	r2,r16,2888 <___vfprintf_internal_r+0x1878>
    2688:	1027883a 	mov	r19,r2
    268c:	07000074 	movhi	fp,1
    2690:	e7351884 	addi	fp,fp,-11166
    2694:	050001c4 	movi	r20,7
    2698:	00000306 	br	26a8 <___vfprintf_internal_r+0x1698>
    269c:	18c00204 	addi	r3,r3,8
    26a0:	843ffc04 	addi	r16,r16,-16
    26a4:	9c007a0e 	bge	r19,r16,2890 <___vfprintf_internal_r+0x1880>
    26a8:	94800404 	addi	r18,r18,16
    26ac:	8c400044 	addi	r17,r17,1
    26b0:	1f000015 	stw	fp,0(r3)
    26b4:	1cc00115 	stw	r19,4(r3)
    26b8:	dc800e15 	stw	r18,56(sp)
    26bc:	dc400d15 	stw	r17,52(sp)
    26c0:	a47ff60e 	bge	r20,r17,269c <___vfprintf_internal_r+0x168c>
    26c4:	d9014f17 	ldw	r4,1340(sp)
    26c8:	b00b883a 	mov	r5,r22
    26cc:	d9800c04 	addi	r6,sp,48
    26d0:	0000fb80 	call	fb8 <__sprint_r>
    26d4:	103c061e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    26d8:	dc800e17 	ldw	r18,56(sp)
    26dc:	dc400d17 	ldw	r17,52(sp)
    26e0:	d8c01904 	addi	r3,sp,100
    26e4:	003fee06 	br	26a0 <___vfprintf_internal_r+0x1690>
    26e8:	3c000017 	ldw	r16,0(r7)
    26ec:	0023883a 	mov	r17,zero
    26f0:	39c00104 	addi	r7,r7,4
    26f4:	d9c14015 	stw	r7,1280(sp)
    26f8:	003e9206 	br	2144 <___vfprintf_internal_r+0x1134>
    26fc:	d9401904 	addi	r5,sp,100
    2700:	dd000f04 	addi	r20,sp,60
    2704:	d9414115 	stw	r5,1284(sp)
    2708:	d9814417 	ldw	r6,1296(sp)
    270c:	880a973a 	slli	r5,r17,28
    2710:	8004d13a 	srli	r2,r16,4
    2714:	810003cc 	andi	r4,r16,15
    2718:	3109883a 	add	r4,r6,r4
    271c:	2884b03a 	or	r2,r5,r2
    2720:	21400003 	ldbu	r5,0(r4)
    2724:	d9014117 	ldw	r4,1284(sp)
    2728:	8806d13a 	srli	r3,r17,4
    272c:	1021883a 	mov	r16,r2
    2730:	213fffc4 	addi	r4,r4,-1
    2734:	d9014115 	stw	r4,1284(sp)
    2738:	d9814117 	ldw	r6,1284(sp)
    273c:	10c8b03a 	or	r4,r2,r3
    2740:	1823883a 	mov	r17,r3
    2744:	31400005 	stb	r5,0(r6)
    2748:	203fef1e 	bne	r4,zero,2708 <___vfprintf_internal_r+0x16f8>
    274c:	003ccb06 	br	1a7c <___vfprintf_internal_r+0xa6c>
    2750:	00800c04 	movi	r2,48
    2754:	d98018c4 	addi	r6,sp,99
    2758:	dd000f04 	addi	r20,sp,60
    275c:	d88018c5 	stb	r2,99(sp)
    2760:	d9814115 	stw	r6,1284(sp)
    2764:	003cc506 	br	1a7c <___vfprintf_internal_r+0xa6c>
    2768:	dc400d17 	ldw	r17,52(sp)
    276c:	07000074 	movhi	fp,1
    2770:	e7351c84 	addi	fp,fp,-11150
    2774:	003bc706 	br	1694 <___vfprintf_internal_r+0x684>
    2778:	d9414c17 	ldw	r5,1328(sp)
    277c:	2880040c 	andi	r2,r5,16
    2780:	10007c26 	beq	r2,zero,2974 <___vfprintf_internal_r+0x1964>
    2784:	38800017 	ldw	r2,0(r7)
    2788:	39c00104 	addi	r7,r7,4
    278c:	d9c14015 	stw	r7,1280(sp)
    2790:	d9814b17 	ldw	r6,1324(sp)
    2794:	d9c14017 	ldw	r7,1280(sp)
    2798:	11800015 	stw	r6,0(r2)
    279c:	003a7806 	br	1180 <___vfprintf_internal_r+0x170>
    27a0:	d9014f17 	ldw	r4,1340(sp)
    27a4:	b00b883a 	mov	r5,r22
    27a8:	d9800c04 	addi	r6,sp,48
    27ac:	0000fb80 	call	fb8 <__sprint_r>
    27b0:	103bcf1e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    27b4:	dc800e17 	ldw	r18,56(sp)
    27b8:	dc400d17 	ldw	r17,52(sp)
    27bc:	d8c01904 	addi	r3,sp,100
    27c0:	d9014717 	ldw	r4,1308(sp)
    27c4:	d9414117 	ldw	r5,1284(sp)
    27c8:	8c400044 	addi	r17,r17,1
    27cc:	9125883a 	add	r18,r18,r4
    27d0:	008001c4 	movi	r2,7
    27d4:	19400015 	stw	r5,0(r3)
    27d8:	19000115 	stw	r4,4(r3)
    27dc:	dc800e15 	stw	r18,56(sp)
    27e0:	dc400d15 	stw	r17,52(sp)
    27e4:	147cee16 	blt	r2,r17,1ba0 <___vfprintf_internal_r+0xb90>
    27e8:	18c00204 	addi	r3,r3,8
    27ec:	003b8606 	br	1608 <___vfprintf_internal_r+0x5f8>
    27f0:	38c00017 	ldw	r3,0(r7)
    27f4:	39000204 	addi	r4,r7,8
    27f8:	d9014015 	stw	r4,1280(sp)
    27fc:	d8c14215 	stw	r3,1288(sp)
    2800:	39c00117 	ldw	r7,4(r7)
    2804:	d9c14315 	stw	r7,1292(sp)
    2808:	003e2006 	br	208c <___vfprintf_internal_r+0x107c>
    280c:	0005883a 	mov	r2,zero
    2810:	1409c83a 	sub	r4,r2,r16
    2814:	1105803a 	cmpltu	r2,r2,r4
    2818:	044bc83a 	sub	r5,zero,r17
    281c:	2885c83a 	sub	r2,r5,r2
    2820:	2021883a 	mov	r16,r4
    2824:	1023883a 	mov	r17,r2
    2828:	01000044 	movi	r4,1
    282c:	00800b44 	movi	r2,45
    2830:	d8800405 	stb	r2,16(sp)
    2834:	003c8406 	br	1a48 <___vfprintf_internal_r+0xa38>
    2838:	d9014f17 	ldw	r4,1340(sp)
    283c:	b00b883a 	mov	r5,r22
    2840:	d9800c04 	addi	r6,sp,48
    2844:	0000fb80 	call	fb8 <__sprint_r>
    2848:	103ba91e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    284c:	dc800e17 	ldw	r18,56(sp)
    2850:	dc400d17 	ldw	r17,52(sp)
    2854:	d9000517 	ldw	r4,20(sp)
    2858:	d9401904 	addi	r5,sp,100
    285c:	003da706 	br	1efc <___vfprintf_internal_r+0xeec>
    2860:	d9014f17 	ldw	r4,1340(sp)
    2864:	b00b883a 	mov	r5,r22
    2868:	d9800c04 	addi	r6,sp,48
    286c:	0000fb80 	call	fb8 <__sprint_r>
    2870:	103b9f1e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    2874:	dc800e17 	ldw	r18,56(sp)
    2878:	dc400d17 	ldw	r17,52(sp)
    287c:	d9000517 	ldw	r4,20(sp)
    2880:	d8c01904 	addi	r3,sp,100
    2884:	003d9106 	br	1ecc <___vfprintf_internal_r+0xebc>
    2888:	07000074 	movhi	fp,1
    288c:	e7351884 	addi	fp,fp,-11166
    2890:	9425883a 	add	r18,r18,r16
    2894:	8c400044 	addi	r17,r17,1
    2898:	008001c4 	movi	r2,7
    289c:	1f000015 	stw	fp,0(r3)
    28a0:	1c000115 	stw	r16,4(r3)
    28a4:	dc800e15 	stw	r18,56(sp)
    28a8:	dc400d15 	stw	r17,52(sp)
    28ac:	147fbc16 	blt	r2,r17,27a0 <___vfprintf_internal_r+0x1790>
    28b0:	18c00204 	addi	r3,r3,8
    28b4:	003fc206 	br	27c0 <___vfprintf_internal_r+0x17b0>
    28b8:	d9014f17 	ldw	r4,1340(sp)
    28bc:	b00b883a 	mov	r5,r22
    28c0:	d9800c04 	addi	r6,sp,48
    28c4:	0000fb80 	call	fb8 <__sprint_r>
    28c8:	103b891e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    28cc:	dc800e17 	ldw	r18,56(sp)
    28d0:	d9000517 	ldw	r4,20(sp)
    28d4:	d8c01904 	addi	r3,sp,100
    28d8:	003d0206 	br	1ce4 <___vfprintf_internal_r+0xcd4>
    28dc:	07000074 	movhi	fp,1
    28e0:	e7351884 	addi	fp,fp,-11166
    28e4:	003be406 	br	1878 <___vfprintf_internal_r+0x868>
    28e8:	00800074 	movhi	r2,1
    28ec:	10b50704 	addi	r2,r2,-11236
    28f0:	d8814115 	stw	r2,1284(sp)
    28f4:	003df506 	br	20cc <___vfprintf_internal_r+0x10bc>
    28f8:	d9014217 	ldw	r4,1288(sp)
    28fc:	d9414317 	ldw	r5,1292(sp)
    2900:	0007b3c0 	call	7b3c <__isnand>
    2904:	10003926 	beq	r2,zero,29ec <___vfprintf_internal_r+0x19dc>
    2908:	d9414d17 	ldw	r5,1332(sp)
    290c:	008011c4 	movi	r2,71
    2910:	1140ce16 	blt	r2,r5,2c4c <___vfprintf_internal_r+0x1c3c>
    2914:	01800074 	movhi	r6,1
    2918:	31b50804 	addi	r6,r6,-11232
    291c:	d9814115 	stw	r6,1284(sp)
    2920:	003dea06 	br	20cc <___vfprintf_internal_r+0x10bc>
    2924:	d9014c17 	ldw	r4,1328(sp)
    2928:	bdc00044 	addi	r23,r23,1
    292c:	b8c00007 	ldb	r3,0(r23)
    2930:	21000814 	ori	r4,r4,32
    2934:	d9014c15 	stw	r4,1328(sp)
    2938:	003a3406 	br	120c <___vfprintf_internal_r+0x1fc>
    293c:	dcc14515 	stw	r19,1300(sp)
    2940:	98011016 	blt	r19,zero,2d84 <___vfprintf_internal_r+0x1d74>
    2944:	980f883a 	mov	r7,r19
    2948:	d8014615 	stw	zero,1304(sp)
    294c:	003c5206 	br	1a98 <___vfprintf_internal_r+0xa88>
    2950:	d9014f17 	ldw	r4,1340(sp)
    2954:	b00b883a 	mov	r5,r22
    2958:	d9800c04 	addi	r6,sp,48
    295c:	0000fb80 	call	fb8 <__sprint_r>
    2960:	103b631e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    2964:	dc800e17 	ldw	r18,56(sp)
    2968:	d9000517 	ldw	r4,20(sp)
    296c:	d8c01904 	addi	r3,sp,100
    2970:	003f2e06 	br	262c <___vfprintf_internal_r+0x161c>
    2974:	d8c14c17 	ldw	r3,1328(sp)
    2978:	1880100c 	andi	r2,r3,64
    297c:	1000a026 	beq	r2,zero,2c00 <___vfprintf_internal_r+0x1bf0>
    2980:	38800017 	ldw	r2,0(r7)
    2984:	39c00104 	addi	r7,r7,4
    2988:	d9c14015 	stw	r7,1280(sp)
    298c:	d9014b17 	ldw	r4,1324(sp)
    2990:	d9c14017 	ldw	r7,1280(sp)
    2994:	1100000d 	sth	r4,0(r2)
    2998:	0039f906 	br	1180 <___vfprintf_internal_r+0x170>
    299c:	d9014f17 	ldw	r4,1340(sp)
    29a0:	b00b883a 	mov	r5,r22
    29a4:	d9800c04 	addi	r6,sp,48
    29a8:	0000fb80 	call	fb8 <__sprint_r>
    29ac:	103b501e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    29b0:	dc800e17 	ldw	r18,56(sp)
    29b4:	dc400d17 	ldw	r17,52(sp)
    29b8:	d9000517 	ldw	r4,20(sp)
    29bc:	d8c01904 	addi	r3,sp,100
    29c0:	003f2d06 	br	2678 <___vfprintf_internal_r+0x1668>
    29c4:	00800184 	movi	r2,6
    29c8:	14c09a36 	bltu	r2,r19,2c34 <___vfprintf_internal_r+0x1c24>
    29cc:	dcc14515 	stw	r19,1300(sp)
    29d0:	9800010e 	bge	r19,zero,29d8 <___vfprintf_internal_r+0x19c8>
    29d4:	d8014515 	stw	zero,1300(sp)
    29d8:	00800074 	movhi	r2,1
    29dc:	10b50a04 	addi	r2,r2,-11224
    29e0:	980f883a 	mov	r7,r19
    29e4:	d8814115 	stw	r2,1284(sp)
    29e8:	003a7806 	br	13cc <___vfprintf_internal_r+0x3bc>
    29ec:	00bfffc4 	movi	r2,-1
    29f0:	9880e226 	beq	r19,r2,2d7c <___vfprintf_internal_r+0x1d6c>
    29f4:	d9414d17 	ldw	r5,1332(sp)
    29f8:	008019c4 	movi	r2,103
    29fc:	2880dc26 	beq	r5,r2,2d70 <___vfprintf_internal_r+0x1d60>
    2a00:	008011c4 	movi	r2,71
    2a04:	2880da26 	beq	r5,r2,2d70 <___vfprintf_internal_r+0x1d60>
    2a08:	d9414c17 	ldw	r5,1328(sp)
    2a0c:	d9014317 	ldw	r4,1292(sp)
    2a10:	d9814217 	ldw	r6,1288(sp)
    2a14:	29404014 	ori	r5,r5,256
    2a18:	d9414c15 	stw	r5,1328(sp)
    2a1c:	2000cc16 	blt	r4,zero,2d50 <___vfprintf_internal_r+0x1d40>
    2a20:	3021883a 	mov	r16,r6
    2a24:	2023883a 	mov	r17,r4
    2a28:	0039883a 	mov	fp,zero
    2a2c:	d9414d17 	ldw	r5,1332(sp)
    2a30:	00801984 	movi	r2,102
    2a34:	2880b726 	beq	r5,r2,2d14 <___vfprintf_internal_r+0x1d04>
    2a38:	00801184 	movi	r2,70
    2a3c:	2880b526 	beq	r5,r2,2d14 <___vfprintf_internal_r+0x1d04>
    2a40:	00801944 	movi	r2,101
    2a44:	2880c826 	beq	r5,r2,2d68 <___vfprintf_internal_r+0x1d58>
    2a48:	00801144 	movi	r2,69
    2a4c:	2880c626 	beq	r5,r2,2d68 <___vfprintf_internal_r+0x1d58>
    2a50:	9829883a 	mov	r20,r19
    2a54:	d9014f17 	ldw	r4,1340(sp)
    2a58:	d8800504 	addi	r2,sp,20
    2a5c:	880d883a 	mov	r6,r17
    2a60:	d8800115 	stw	r2,4(sp)
    2a64:	d8c00604 	addi	r3,sp,24
    2a68:	d8800704 	addi	r2,sp,28
    2a6c:	800b883a 	mov	r5,r16
    2a70:	01c00084 	movi	r7,2
    2a74:	d8c00215 	stw	r3,8(sp)
    2a78:	d8800315 	stw	r2,12(sp)
    2a7c:	dd000015 	stw	r20,0(sp)
    2a80:	00032340 	call	3234 <_dtoa_r>
    2a84:	d9814d17 	ldw	r6,1332(sp)
    2a88:	d8814115 	stw	r2,1284(sp)
    2a8c:	008019c4 	movi	r2,103
    2a90:	30809526 	beq	r6,r2,2ce8 <___vfprintf_internal_r+0x1cd8>
    2a94:	d8c14d17 	ldw	r3,1332(sp)
    2a98:	008011c4 	movi	r2,71
    2a9c:	18809226 	beq	r3,r2,2ce8 <___vfprintf_internal_r+0x1cd8>
    2aa0:	d9414117 	ldw	r5,1284(sp)
    2aa4:	d9814d17 	ldw	r6,1332(sp)
    2aa8:	00801984 	movi	r2,102
    2aac:	2d25883a 	add	r18,r5,r20
    2ab0:	30808626 	beq	r6,r2,2ccc <___vfprintf_internal_r+0x1cbc>
    2ab4:	00801184 	movi	r2,70
    2ab8:	30808426 	beq	r6,r2,2ccc <___vfprintf_internal_r+0x1cbc>
    2abc:	000d883a 	mov	r6,zero
    2ac0:	000f883a 	mov	r7,zero
    2ac4:	880b883a 	mov	r5,r17
    2ac8:	8009883a 	mov	r4,r16
    2acc:	0009b080 	call	9b08 <__eqdf2>
    2ad0:	1000751e 	bne	r2,zero,2ca8 <___vfprintf_internal_r+0x1c98>
    2ad4:	9005883a 	mov	r2,r18
    2ad8:	dc800715 	stw	r18,28(sp)
    2adc:	d9014117 	ldw	r4,1284(sp)
    2ae0:	d9414d17 	ldw	r5,1332(sp)
    2ae4:	00c019c4 	movi	r3,103
    2ae8:	1125c83a 	sub	r18,r2,r4
    2aec:	28c06826 	beq	r5,r3,2c90 <___vfprintf_internal_r+0x1c80>
    2af0:	008011c4 	movi	r2,71
    2af4:	28806626 	beq	r5,r2,2c90 <___vfprintf_internal_r+0x1c80>
    2af8:	d9000517 	ldw	r4,20(sp)
    2afc:	d8c14d17 	ldw	r3,1332(sp)
    2b00:	00801944 	movi	r2,101
    2b04:	10c05516 	blt	r2,r3,2c5c <___vfprintf_internal_r+0x1c4c>
    2b08:	213fffc4 	addi	r4,r4,-1
    2b0c:	d9000515 	stw	r4,20(sp)
    2b10:	d8c00805 	stb	r3,32(sp)
    2b14:	2021883a 	mov	r16,r4
    2b18:	2000c116 	blt	r4,zero,2e20 <___vfprintf_internal_r+0x1e10>
    2b1c:	00800ac4 	movi	r2,43
    2b20:	d8800845 	stb	r2,33(sp)
    2b24:	00800244 	movi	r2,9
    2b28:	1400af0e 	bge	r2,r16,2de8 <___vfprintf_internal_r+0x1dd8>
    2b2c:	1027883a 	mov	r19,r2
    2b30:	dc400b84 	addi	r17,sp,46
    2b34:	8009883a 	mov	r4,r16
    2b38:	01400284 	movi	r5,10
    2b3c:	0000c500 	call	c50 <__modsi3>
    2b40:	10800c04 	addi	r2,r2,48
    2b44:	8c7fffc4 	addi	r17,r17,-1
    2b48:	8009883a 	mov	r4,r16
    2b4c:	01400284 	movi	r5,10
    2b50:	88800005 	stb	r2,0(r17)
    2b54:	0000bf00 	call	bf0 <__divsi3>
    2b58:	1021883a 	mov	r16,r2
    2b5c:	98bff516 	blt	r19,r2,2b34 <___vfprintf_internal_r+0x1b24>
    2b60:	10c00c04 	addi	r3,r2,48
    2b64:	d88009c4 	addi	r2,sp,39
    2b68:	108001c4 	addi	r2,r2,7
    2b6c:	897fffc4 	addi	r5,r17,-1
    2b70:	88ffffc5 	stb	r3,-1(r17)
    2b74:	2880a72e 	bgeu	r5,r2,2e14 <___vfprintf_internal_r+0x1e04>
    2b78:	1009883a 	mov	r4,r2
    2b7c:	d9800804 	addi	r6,sp,32
    2b80:	d8c00884 	addi	r3,sp,34
    2b84:	28800003 	ldbu	r2,0(r5)
    2b88:	29400044 	addi	r5,r5,1
    2b8c:	18800005 	stb	r2,0(r3)
    2b90:	18c00044 	addi	r3,r3,1
    2b94:	293ffb36 	bltu	r5,r4,2b84 <___vfprintf_internal_r+0x1b74>
    2b98:	1987c83a 	sub	r3,r3,r6
    2b9c:	00800044 	movi	r2,1
    2ba0:	d8c14815 	stw	r3,1312(sp)
    2ba4:	90cf883a 	add	r7,r18,r3
    2ba8:	1480960e 	bge	r2,r18,2e04 <___vfprintf_internal_r+0x1df4>
    2bac:	39c00044 	addi	r7,r7,1
    2bb0:	d9c14515 	stw	r7,1300(sp)
    2bb4:	38003416 	blt	r7,zero,2c88 <___vfprintf_internal_r+0x1c78>
    2bb8:	e0803fcc 	andi	r2,fp,255
    2bbc:	1080201c 	xori	r2,r2,128
    2bc0:	10bfe004 	addi	r2,r2,-128
    2bc4:	10004e26 	beq	r2,zero,2d00 <___vfprintf_internal_r+0x1cf0>
    2bc8:	00800b44 	movi	r2,45
    2bcc:	dc814715 	stw	r18,1308(sp)
    2bd0:	d8014615 	stw	zero,1304(sp)
    2bd4:	d8800405 	stb	r2,16(sp)
    2bd8:	003bb106 	br	1aa0 <___vfprintf_internal_r+0xa90>
    2bdc:	00800b44 	movi	r2,45
    2be0:	d8800405 	stb	r2,16(sp)
    2be4:	003d3306 	br	20b4 <___vfprintf_internal_r+0x10a4>
    2be8:	d9014f17 	ldw	r4,1340(sp)
    2bec:	b00b883a 	mov	r5,r22
    2bf0:	d9800c04 	addi	r6,sp,48
    2bf4:	0000fb80 	call	fb8 <__sprint_r>
    2bf8:	103abd1e 	bne	r2,zero,16f0 <___vfprintf_internal_r+0x6e0>
    2bfc:	003abb06 	br	16ec <___vfprintf_internal_r+0x6dc>
    2c00:	38800017 	ldw	r2,0(r7)
    2c04:	39c00104 	addi	r7,r7,4
    2c08:	d9c14015 	stw	r7,1280(sp)
    2c0c:	d9414b17 	ldw	r5,1324(sp)
    2c10:	d9c14017 	ldw	r7,1280(sp)
    2c14:	11400015 	stw	r5,0(r2)
    2c18:	00395906 	br	1180 <___vfprintf_internal_r+0x170>
    2c1c:	980f883a 	mov	r7,r19
    2c20:	dcc14515 	stw	r19,1300(sp)
    2c24:	d8014615 	stw	zero,1304(sp)
    2c28:	003b9b06 	br	1a98 <___vfprintf_internal_r+0xa88>
    2c2c:	0027883a 	mov	r19,zero
    2c30:	00397806 	br	1214 <___vfprintf_internal_r+0x204>
    2c34:	00c00074 	movhi	r3,1
    2c38:	18f50a04 	addi	r3,r3,-11224
    2c3c:	100f883a 	mov	r7,r2
    2c40:	d8814515 	stw	r2,1300(sp)
    2c44:	d8c14115 	stw	r3,1284(sp)
    2c48:	0039e006 	br	13cc <___vfprintf_internal_r+0x3bc>
    2c4c:	00800074 	movhi	r2,1
    2c50:	10b50904 	addi	r2,r2,-11228
    2c54:	d8814115 	stw	r2,1284(sp)
    2c58:	003d1c06 	br	20cc <___vfprintf_internal_r+0x10bc>
    2c5c:	d9414d17 	ldw	r5,1332(sp)
    2c60:	00801984 	movi	r2,102
    2c64:	28804926 	beq	r5,r2,2d8c <___vfprintf_internal_r+0x1d7c>
    2c68:	200f883a 	mov	r7,r4
    2c6c:	24805716 	blt	r4,r18,2dcc <___vfprintf_internal_r+0x1dbc>
    2c70:	d9414c17 	ldw	r5,1328(sp)
    2c74:	2880004c 	andi	r2,r5,1
    2c78:	10000126 	beq	r2,zero,2c80 <___vfprintf_internal_r+0x1c70>
    2c7c:	21c00044 	addi	r7,r4,1
    2c80:	d9c14515 	stw	r7,1300(sp)
    2c84:	383fcc0e 	bge	r7,zero,2bb8 <___vfprintf_internal_r+0x1ba8>
    2c88:	d8014515 	stw	zero,1300(sp)
    2c8c:	003fca06 	br	2bb8 <___vfprintf_internal_r+0x1ba8>
    2c90:	d9000517 	ldw	r4,20(sp)
    2c94:	00bfff04 	movi	r2,-4
    2c98:	1100480e 	bge	r2,r4,2dbc <___vfprintf_internal_r+0x1dac>
    2c9c:	99004716 	blt	r19,r4,2dbc <___vfprintf_internal_r+0x1dac>
    2ca0:	d8c14d15 	stw	r3,1332(sp)
    2ca4:	003ff006 	br	2c68 <___vfprintf_internal_r+0x1c58>
    2ca8:	d8800717 	ldw	r2,28(sp)
    2cac:	14bf8b2e 	bgeu	r2,r18,2adc <___vfprintf_internal_r+0x1acc>
    2cb0:	9007883a 	mov	r3,r18
    2cb4:	01000c04 	movi	r4,48
    2cb8:	11000005 	stb	r4,0(r2)
    2cbc:	10800044 	addi	r2,r2,1
    2cc0:	d8800715 	stw	r2,28(sp)
    2cc4:	18bffc1e 	bne	r3,r2,2cb8 <___vfprintf_internal_r+0x1ca8>
    2cc8:	003f8406 	br	2adc <___vfprintf_internal_r+0x1acc>
    2ccc:	d8814117 	ldw	r2,1284(sp)
    2cd0:	10c00007 	ldb	r3,0(r2)
    2cd4:	00800c04 	movi	r2,48
    2cd8:	18805b26 	beq	r3,r2,2e48 <___vfprintf_internal_r+0x1e38>
    2cdc:	d9000517 	ldw	r4,20(sp)
    2ce0:	9125883a 	add	r18,r18,r4
    2ce4:	003f7506 	br	2abc <___vfprintf_internal_r+0x1aac>
    2ce8:	d9014c17 	ldw	r4,1328(sp)
    2cec:	2080004c 	andi	r2,r4,1
    2cf0:	1005003a 	cmpeq	r2,r2,zero
    2cf4:	103f6a26 	beq	r2,zero,2aa0 <___vfprintf_internal_r+0x1a90>
    2cf8:	d8800717 	ldw	r2,28(sp)
    2cfc:	003f7706 	br	2adc <___vfprintf_internal_r+0x1acc>
    2d00:	d9c14515 	stw	r7,1300(sp)
    2d04:	38004d16 	blt	r7,zero,2e3c <___vfprintf_internal_r+0x1e2c>
    2d08:	dc814715 	stw	r18,1308(sp)
    2d0c:	d8014615 	stw	zero,1304(sp)
    2d10:	003b6106 	br	1a98 <___vfprintf_internal_r+0xa88>
    2d14:	d9014f17 	ldw	r4,1340(sp)
    2d18:	d8800504 	addi	r2,sp,20
    2d1c:	d8800115 	stw	r2,4(sp)
    2d20:	d8c00604 	addi	r3,sp,24
    2d24:	d8800704 	addi	r2,sp,28
    2d28:	800b883a 	mov	r5,r16
    2d2c:	880d883a 	mov	r6,r17
    2d30:	01c000c4 	movi	r7,3
    2d34:	d8c00215 	stw	r3,8(sp)
    2d38:	d8800315 	stw	r2,12(sp)
    2d3c:	dcc00015 	stw	r19,0(sp)
    2d40:	9829883a 	mov	r20,r19
    2d44:	00032340 	call	3234 <_dtoa_r>
    2d48:	d8814115 	stw	r2,1284(sp)
    2d4c:	003f5106 	br	2a94 <___vfprintf_internal_r+0x1a84>
    2d50:	d8c14217 	ldw	r3,1288(sp)
    2d54:	d9014317 	ldw	r4,1292(sp)
    2d58:	07000b44 	movi	fp,45
    2d5c:	1821883a 	mov	r16,r3
    2d60:	2460003c 	xorhi	r17,r4,32768
    2d64:	003f3106 	br	2a2c <___vfprintf_internal_r+0x1a1c>
    2d68:	9d000044 	addi	r20,r19,1
    2d6c:	003f3906 	br	2a54 <___vfprintf_internal_r+0x1a44>
    2d70:	983f251e 	bne	r19,zero,2a08 <___vfprintf_internal_r+0x19f8>
    2d74:	04c00044 	movi	r19,1
    2d78:	003f2306 	br	2a08 <___vfprintf_internal_r+0x19f8>
    2d7c:	04c00184 	movi	r19,6
    2d80:	003f2106 	br	2a08 <___vfprintf_internal_r+0x19f8>
    2d84:	d8014515 	stw	zero,1300(sp)
    2d88:	003eee06 	br	2944 <___vfprintf_internal_r+0x1934>
    2d8c:	200f883a 	mov	r7,r4
    2d90:	0100370e 	bge	zero,r4,2e70 <___vfprintf_internal_r+0x1e60>
    2d94:	9800031e 	bne	r19,zero,2da4 <___vfprintf_internal_r+0x1d94>
    2d98:	d9814c17 	ldw	r6,1328(sp)
    2d9c:	3080004c 	andi	r2,r6,1
    2da0:	103fb726 	beq	r2,zero,2c80 <___vfprintf_internal_r+0x1c70>
    2da4:	20800044 	addi	r2,r4,1
    2da8:	98a7883a 	add	r19,r19,r2
    2dac:	dcc14515 	stw	r19,1300(sp)
    2db0:	980f883a 	mov	r7,r19
    2db4:	983f800e 	bge	r19,zero,2bb8 <___vfprintf_internal_r+0x1ba8>
    2db8:	003fb306 	br	2c88 <___vfprintf_internal_r+0x1c78>
    2dbc:	d9814d17 	ldw	r6,1332(sp)
    2dc0:	31bfff84 	addi	r6,r6,-2
    2dc4:	d9814d15 	stw	r6,1332(sp)
    2dc8:	003f4c06 	br	2afc <___vfprintf_internal_r+0x1aec>
    2dcc:	0100180e 	bge	zero,r4,2e30 <___vfprintf_internal_r+0x1e20>
    2dd0:	00800044 	movi	r2,1
    2dd4:	1485883a 	add	r2,r2,r18
    2dd8:	d8814515 	stw	r2,1300(sp)
    2ddc:	100f883a 	mov	r7,r2
    2de0:	103f750e 	bge	r2,zero,2bb8 <___vfprintf_internal_r+0x1ba8>
    2de4:	003fa806 	br	2c88 <___vfprintf_internal_r+0x1c78>
    2de8:	80c00c04 	addi	r3,r16,48
    2dec:	00800c04 	movi	r2,48
    2df0:	d8c008c5 	stb	r3,35(sp)
    2df4:	d9800804 	addi	r6,sp,32
    2df8:	d8c00904 	addi	r3,sp,36
    2dfc:	d8800885 	stb	r2,34(sp)
    2e00:	003f6506 	br	2b98 <___vfprintf_internal_r+0x1b88>
    2e04:	d9014c17 	ldw	r4,1328(sp)
    2e08:	2084703a 	and	r2,r4,r2
    2e0c:	103f9c26 	beq	r2,zero,2c80 <___vfprintf_internal_r+0x1c70>
    2e10:	003f6606 	br	2bac <___vfprintf_internal_r+0x1b9c>
    2e14:	d9800804 	addi	r6,sp,32
    2e18:	d8c00884 	addi	r3,sp,34
    2e1c:	003f5e06 	br	2b98 <___vfprintf_internal_r+0x1b88>
    2e20:	00800b44 	movi	r2,45
    2e24:	0121c83a 	sub	r16,zero,r4
    2e28:	d8800845 	stb	r2,33(sp)
    2e2c:	003f3d06 	br	2b24 <___vfprintf_internal_r+0x1b14>
    2e30:	00800084 	movi	r2,2
    2e34:	1105c83a 	sub	r2,r2,r4
    2e38:	003fe606 	br	2dd4 <___vfprintf_internal_r+0x1dc4>
    2e3c:	d8014515 	stw	zero,1300(sp)
    2e40:	dc814715 	stw	r18,1308(sp)
    2e44:	003fb106 	br	2d0c <___vfprintf_internal_r+0x1cfc>
    2e48:	000d883a 	mov	r6,zero
    2e4c:	000f883a 	mov	r7,zero
    2e50:	8009883a 	mov	r4,r16
    2e54:	880b883a 	mov	r5,r17
    2e58:	0009b900 	call	9b90 <__nedf2>
    2e5c:	103f9f26 	beq	r2,zero,2cdc <___vfprintf_internal_r+0x1ccc>
    2e60:	00800044 	movi	r2,1
    2e64:	1509c83a 	sub	r4,r2,r20
    2e68:	d9000515 	stw	r4,20(sp)
    2e6c:	003f9b06 	br	2cdc <___vfprintf_internal_r+0x1ccc>
    2e70:	98000d1e 	bne	r19,zero,2ea8 <___vfprintf_internal_r+0x1e98>
    2e74:	d8c14c17 	ldw	r3,1328(sp)
    2e78:	1880004c 	andi	r2,r3,1
    2e7c:	10000a1e 	bne	r2,zero,2ea8 <___vfprintf_internal_r+0x1e98>
    2e80:	01000044 	movi	r4,1
    2e84:	200f883a 	mov	r7,r4
    2e88:	d9014515 	stw	r4,1300(sp)
    2e8c:	003f4a06 	br	2bb8 <___vfprintf_internal_r+0x1ba8>
    2e90:	3cc00017 	ldw	r19,0(r7)
    2e94:	39c00104 	addi	r7,r7,4
    2e98:	983d0e0e 	bge	r19,zero,22d4 <___vfprintf_internal_r+0x12c4>
    2e9c:	b8c00007 	ldb	r3,0(r23)
    2ea0:	04ffffc4 	movi	r19,-1
    2ea4:	0038d906 	br	120c <___vfprintf_internal_r+0x1fc>
    2ea8:	9cc00084 	addi	r19,r19,2
    2eac:	dcc14515 	stw	r19,1300(sp)
    2eb0:	980f883a 	mov	r7,r19
    2eb4:	983f400e 	bge	r19,zero,2bb8 <___vfprintf_internal_r+0x1ba8>
    2eb8:	003f7306 	br	2c88 <___vfprintf_internal_r+0x1c78>

00002ebc <__vfprintf_internal>:
    2ebc:	00800074 	movhi	r2,1
    2ec0:	10bc5604 	addi	r2,r2,-3752
    2ec4:	2013883a 	mov	r9,r4
    2ec8:	11000017 	ldw	r4,0(r2)
    2ecc:	2805883a 	mov	r2,r5
    2ed0:	300f883a 	mov	r7,r6
    2ed4:	480b883a 	mov	r5,r9
    2ed8:	100d883a 	mov	r6,r2
    2edc:	00010101 	jmpi	1010 <___vfprintf_internal_r>

00002ee0 <__swsetup_r>:
    2ee0:	00800074 	movhi	r2,1
    2ee4:	10bc5604 	addi	r2,r2,-3752
    2ee8:	10c00017 	ldw	r3,0(r2)
    2eec:	defffd04 	addi	sp,sp,-12
    2ef0:	dc400115 	stw	r17,4(sp)
    2ef4:	dc000015 	stw	r16,0(sp)
    2ef8:	dfc00215 	stw	ra,8(sp)
    2efc:	2023883a 	mov	r17,r4
    2f00:	2821883a 	mov	r16,r5
    2f04:	18000226 	beq	r3,zero,2f10 <__swsetup_r+0x30>
    2f08:	18800e17 	ldw	r2,56(r3)
    2f0c:	10001f26 	beq	r2,zero,2f8c <__swsetup_r+0xac>
    2f10:	8100030b 	ldhu	r4,12(r16)
    2f14:	2080020c 	andi	r2,r4,8
    2f18:	10002826 	beq	r2,zero,2fbc <__swsetup_r+0xdc>
    2f1c:	81400417 	ldw	r5,16(r16)
    2f20:	28001d26 	beq	r5,zero,2f98 <__swsetup_r+0xb8>
    2f24:	2080004c 	andi	r2,r4,1
    2f28:	1005003a 	cmpeq	r2,r2,zero
    2f2c:	10000b26 	beq	r2,zero,2f5c <__swsetup_r+0x7c>
    2f30:	2080008c 	andi	r2,r4,2
    2f34:	10001226 	beq	r2,zero,2f80 <__swsetup_r+0xa0>
    2f38:	0005883a 	mov	r2,zero
    2f3c:	80800215 	stw	r2,8(r16)
    2f40:	28000b26 	beq	r5,zero,2f70 <__swsetup_r+0x90>
    2f44:	0005883a 	mov	r2,zero
    2f48:	dfc00217 	ldw	ra,8(sp)
    2f4c:	dc400117 	ldw	r17,4(sp)
    2f50:	dc000017 	ldw	r16,0(sp)
    2f54:	dec00304 	addi	sp,sp,12
    2f58:	f800283a 	ret
    2f5c:	80800517 	ldw	r2,20(r16)
    2f60:	80000215 	stw	zero,8(r16)
    2f64:	0085c83a 	sub	r2,zero,r2
    2f68:	80800615 	stw	r2,24(r16)
    2f6c:	283ff51e 	bne	r5,zero,2f44 <__swsetup_r+0x64>
    2f70:	2080200c 	andi	r2,r4,128
    2f74:	103ff326 	beq	r2,zero,2f44 <__swsetup_r+0x64>
    2f78:	00bfffc4 	movi	r2,-1
    2f7c:	003ff206 	br	2f48 <__swsetup_r+0x68>
    2f80:	80800517 	ldw	r2,20(r16)
    2f84:	80800215 	stw	r2,8(r16)
    2f88:	003fed06 	br	2f40 <__swsetup_r+0x60>
    2f8c:	1809883a 	mov	r4,r3
    2f90:	0004a800 	call	4a80 <__sinit>
    2f94:	003fde06 	br	2f10 <__swsetup_r+0x30>
    2f98:	20c0a00c 	andi	r3,r4,640
    2f9c:	00808004 	movi	r2,512
    2fa0:	18bfe026 	beq	r3,r2,2f24 <__swsetup_r+0x44>
    2fa4:	8809883a 	mov	r4,r17
    2fa8:	800b883a 	mov	r5,r16
    2fac:	00057f80 	call	57f8 <__smakebuf_r>
    2fb0:	8100030b 	ldhu	r4,12(r16)
    2fb4:	81400417 	ldw	r5,16(r16)
    2fb8:	003fda06 	br	2f24 <__swsetup_r+0x44>
    2fbc:	2080040c 	andi	r2,r4,16
    2fc0:	103fed26 	beq	r2,zero,2f78 <__swsetup_r+0x98>
    2fc4:	2080010c 	andi	r2,r4,4
    2fc8:	10001226 	beq	r2,zero,3014 <__swsetup_r+0x134>
    2fcc:	81400c17 	ldw	r5,48(r16)
    2fd0:	28000526 	beq	r5,zero,2fe8 <__swsetup_r+0x108>
    2fd4:	80801004 	addi	r2,r16,64
    2fd8:	28800226 	beq	r5,r2,2fe4 <__swsetup_r+0x104>
    2fdc:	8809883a 	mov	r4,r17
    2fe0:	0004e040 	call	4e04 <_free_r>
    2fe4:	80000c15 	stw	zero,48(r16)
    2fe8:	8080030b 	ldhu	r2,12(r16)
    2fec:	81400417 	ldw	r5,16(r16)
    2ff0:	80000115 	stw	zero,4(r16)
    2ff4:	10bff6cc 	andi	r2,r2,65499
    2ff8:	8080030d 	sth	r2,12(r16)
    2ffc:	81400015 	stw	r5,0(r16)
    3000:	8080030b 	ldhu	r2,12(r16)
    3004:	10800214 	ori	r2,r2,8
    3008:	113fffcc 	andi	r4,r2,65535
    300c:	8080030d 	sth	r2,12(r16)
    3010:	003fc306 	br	2f20 <__swsetup_r+0x40>
    3014:	81400417 	ldw	r5,16(r16)
    3018:	003ff906 	br	3000 <__swsetup_r+0x120>

0000301c <quorem>:
    301c:	28c00417 	ldw	r3,16(r5)
    3020:	20800417 	ldw	r2,16(r4)
    3024:	defff604 	addi	sp,sp,-40
    3028:	ddc00715 	stw	r23,28(sp)
    302c:	dd400515 	stw	r21,20(sp)
    3030:	dfc00915 	stw	ra,36(sp)
    3034:	df000815 	stw	fp,32(sp)
    3038:	dd800615 	stw	r22,24(sp)
    303c:	dd000415 	stw	r20,16(sp)
    3040:	dcc00315 	stw	r19,12(sp)
    3044:	dc800215 	stw	r18,8(sp)
    3048:	dc400115 	stw	r17,4(sp)
    304c:	dc000015 	stw	r16,0(sp)
    3050:	202f883a 	mov	r23,r4
    3054:	282b883a 	mov	r21,r5
    3058:	10c07416 	blt	r2,r3,322c <quorem+0x210>
    305c:	1c7fffc4 	addi	r17,r3,-1
    3060:	8c45883a 	add	r2,r17,r17
    3064:	1085883a 	add	r2,r2,r2
    3068:	2c000504 	addi	r16,r5,20
    306c:	24c00504 	addi	r19,r4,20
    3070:	14ed883a 	add	r22,r2,r19
    3074:	80a5883a 	add	r18,r16,r2
    3078:	b7000017 	ldw	fp,0(r22)
    307c:	91400017 	ldw	r5,0(r18)
    3080:	e009883a 	mov	r4,fp
    3084:	29400044 	addi	r5,r5,1
    3088:	0000cb00 	call	cb0 <__udivsi3>
    308c:	1029883a 	mov	r20,r2
    3090:	10003c1e 	bne	r2,zero,3184 <quorem+0x168>
    3094:	a80b883a 	mov	r5,r21
    3098:	b809883a 	mov	r4,r23
    309c:	00064840 	call	6484 <__mcmp>
    30a0:	10002b16 	blt	r2,zero,3150 <quorem+0x134>
    30a4:	a5000044 	addi	r20,r20,1
    30a8:	980f883a 	mov	r7,r19
    30ac:	0011883a 	mov	r8,zero
    30b0:	0009883a 	mov	r4,zero
    30b4:	81400017 	ldw	r5,0(r16)
    30b8:	38c00017 	ldw	r3,0(r7)
    30bc:	84000104 	addi	r16,r16,4
    30c0:	28bfffcc 	andi	r2,r5,65535
    30c4:	2085883a 	add	r2,r4,r2
    30c8:	11bfffcc 	andi	r6,r2,65535
    30cc:	193fffcc 	andi	r4,r3,65535
    30d0:	1004d43a 	srli	r2,r2,16
    30d4:	280ad43a 	srli	r5,r5,16
    30d8:	2189c83a 	sub	r4,r4,r6
    30dc:	2209883a 	add	r4,r4,r8
    30e0:	1806d43a 	srli	r3,r3,16
    30e4:	288b883a 	add	r5,r5,r2
    30e8:	200dd43a 	srai	r6,r4,16
    30ec:	28bfffcc 	andi	r2,r5,65535
    30f0:	1887c83a 	sub	r3,r3,r2
    30f4:	1987883a 	add	r3,r3,r6
    30f8:	3900000d 	sth	r4,0(r7)
    30fc:	38c0008d 	sth	r3,2(r7)
    3100:	2808d43a 	srli	r4,r5,16
    3104:	39c00104 	addi	r7,r7,4
    3108:	1811d43a 	srai	r8,r3,16
    310c:	943fe92e 	bgeu	r18,r16,30b4 <quorem+0x98>
    3110:	8c45883a 	add	r2,r17,r17
    3114:	1085883a 	add	r2,r2,r2
    3118:	9885883a 	add	r2,r19,r2
    311c:	10c00017 	ldw	r3,0(r2)
    3120:	18000b1e 	bne	r3,zero,3150 <quorem+0x134>
    3124:	113fff04 	addi	r4,r2,-4
    3128:	9900082e 	bgeu	r19,r4,314c <quorem+0x130>
    312c:	10bfff17 	ldw	r2,-4(r2)
    3130:	10000326 	beq	r2,zero,3140 <quorem+0x124>
    3134:	00000506 	br	314c <quorem+0x130>
    3138:	20800017 	ldw	r2,0(r4)
    313c:	1000031e 	bne	r2,zero,314c <quorem+0x130>
    3140:	213fff04 	addi	r4,r4,-4
    3144:	8c7fffc4 	addi	r17,r17,-1
    3148:	993ffb36 	bltu	r19,r4,3138 <quorem+0x11c>
    314c:	bc400415 	stw	r17,16(r23)
    3150:	a005883a 	mov	r2,r20
    3154:	dfc00917 	ldw	ra,36(sp)
    3158:	df000817 	ldw	fp,32(sp)
    315c:	ddc00717 	ldw	r23,28(sp)
    3160:	dd800617 	ldw	r22,24(sp)
    3164:	dd400517 	ldw	r21,20(sp)
    3168:	dd000417 	ldw	r20,16(sp)
    316c:	dcc00317 	ldw	r19,12(sp)
    3170:	dc800217 	ldw	r18,8(sp)
    3174:	dc400117 	ldw	r17,4(sp)
    3178:	dc000017 	ldw	r16,0(sp)
    317c:	dec00a04 	addi	sp,sp,40
    3180:	f800283a 	ret
    3184:	980f883a 	mov	r7,r19
    3188:	8011883a 	mov	r8,r16
    318c:	0013883a 	mov	r9,zero
    3190:	000d883a 	mov	r6,zero
    3194:	40c00017 	ldw	r3,0(r8)
    3198:	39000017 	ldw	r4,0(r7)
    319c:	42000104 	addi	r8,r8,4
    31a0:	18bfffcc 	andi	r2,r3,65535
    31a4:	a085383a 	mul	r2,r20,r2
    31a8:	1806d43a 	srli	r3,r3,16
    31ac:	217fffcc 	andi	r5,r4,65535
    31b0:	3085883a 	add	r2,r6,r2
    31b4:	11bfffcc 	andi	r6,r2,65535
    31b8:	a0c7383a 	mul	r3,r20,r3
    31bc:	1004d43a 	srli	r2,r2,16
    31c0:	298bc83a 	sub	r5,r5,r6
    31c4:	2a4b883a 	add	r5,r5,r9
    31c8:	2008d43a 	srli	r4,r4,16
    31cc:	1887883a 	add	r3,r3,r2
    31d0:	280dd43a 	srai	r6,r5,16
    31d4:	18bfffcc 	andi	r2,r3,65535
    31d8:	2089c83a 	sub	r4,r4,r2
    31dc:	2189883a 	add	r4,r4,r6
    31e0:	3900008d 	sth	r4,2(r7)
    31e4:	3940000d 	sth	r5,0(r7)
    31e8:	180cd43a 	srli	r6,r3,16
    31ec:	39c00104 	addi	r7,r7,4
    31f0:	2013d43a 	srai	r9,r4,16
    31f4:	923fe72e 	bgeu	r18,r8,3194 <quorem+0x178>
    31f8:	e03fa61e 	bne	fp,zero,3094 <quorem+0x78>
    31fc:	b0ffff04 	addi	r3,r22,-4
    3200:	98c0082e 	bgeu	r19,r3,3224 <quorem+0x208>
    3204:	b0bfff17 	ldw	r2,-4(r22)
    3208:	10000326 	beq	r2,zero,3218 <quorem+0x1fc>
    320c:	00000506 	br	3224 <quorem+0x208>
    3210:	18800017 	ldw	r2,0(r3)
    3214:	1000031e 	bne	r2,zero,3224 <quorem+0x208>
    3218:	18ffff04 	addi	r3,r3,-4
    321c:	8c7fffc4 	addi	r17,r17,-1
    3220:	98fffb36 	bltu	r19,r3,3210 <quorem+0x1f4>
    3224:	bc400415 	stw	r17,16(r23)
    3228:	003f9a06 	br	3094 <quorem+0x78>
    322c:	0005883a 	mov	r2,zero
    3230:	003fc806 	br	3154 <quorem+0x138>

00003234 <_dtoa_r>:
    3234:	22001017 	ldw	r8,64(r4)
    3238:	deffda04 	addi	sp,sp,-152
    323c:	dd402115 	stw	r21,132(sp)
    3240:	dd002015 	stw	r20,128(sp)
    3244:	dc801e15 	stw	r18,120(sp)
    3248:	dc401d15 	stw	r17,116(sp)
    324c:	dfc02515 	stw	ra,148(sp)
    3250:	df002415 	stw	fp,144(sp)
    3254:	ddc02315 	stw	r23,140(sp)
    3258:	dd802215 	stw	r22,136(sp)
    325c:	dcc01f15 	stw	r19,124(sp)
    3260:	dc001c15 	stw	r16,112(sp)
    3264:	d9001615 	stw	r4,88(sp)
    3268:	3023883a 	mov	r17,r6
    326c:	2829883a 	mov	r20,r5
    3270:	d9c01715 	stw	r7,92(sp)
    3274:	dc802817 	ldw	r18,160(sp)
    3278:	302b883a 	mov	r21,r6
    327c:	40000a26 	beq	r8,zero,32a8 <_dtoa_r+0x74>
    3280:	20801117 	ldw	r2,68(r4)
    3284:	400b883a 	mov	r5,r8
    3288:	40800115 	stw	r2,4(r8)
    328c:	20c01117 	ldw	r3,68(r4)
    3290:	00800044 	movi	r2,1
    3294:	10c4983a 	sll	r2,r2,r3
    3298:	40800215 	stw	r2,8(r8)
    329c:	00063280 	call	6328 <_Bfree>
    32a0:	d8c01617 	ldw	r3,88(sp)
    32a4:	18001015 	stw	zero,64(r3)
    32a8:	8800a316 	blt	r17,zero,3538 <_dtoa_r+0x304>
    32ac:	90000015 	stw	zero,0(r18)
    32b0:	a8dffc2c 	andhi	r3,r21,32752
    32b4:	009ffc34 	movhi	r2,32752
    32b8:	18809126 	beq	r3,r2,3500 <_dtoa_r+0x2cc>
    32bc:	000d883a 	mov	r6,zero
    32c0:	000f883a 	mov	r7,zero
    32c4:	a009883a 	mov	r4,r20
    32c8:	a80b883a 	mov	r5,r21
    32cc:	dd001215 	stw	r20,72(sp)
    32d0:	dd401315 	stw	r21,76(sp)
    32d4:	0009b900 	call	9b90 <__nedf2>
    32d8:	1000171e 	bne	r2,zero,3338 <_dtoa_r+0x104>
    32dc:	d9802717 	ldw	r6,156(sp)
    32e0:	00800044 	movi	r2,1
    32e4:	30800015 	stw	r2,0(r6)
    32e8:	d8802917 	ldw	r2,164(sp)
    32ec:	10029b26 	beq	r2,zero,3d5c <_dtoa_r+0xb28>
    32f0:	d9002917 	ldw	r4,164(sp)
    32f4:	00800074 	movhi	r2,1
    32f8:	10b51844 	addi	r2,r2,-11167
    32fc:	10ffffc4 	addi	r3,r2,-1
    3300:	20800015 	stw	r2,0(r4)
    3304:	1805883a 	mov	r2,r3
    3308:	dfc02517 	ldw	ra,148(sp)
    330c:	df002417 	ldw	fp,144(sp)
    3310:	ddc02317 	ldw	r23,140(sp)
    3314:	dd802217 	ldw	r22,136(sp)
    3318:	dd402117 	ldw	r21,132(sp)
    331c:	dd002017 	ldw	r20,128(sp)
    3320:	dcc01f17 	ldw	r19,124(sp)
    3324:	dc801e17 	ldw	r18,120(sp)
    3328:	dc401d17 	ldw	r17,116(sp)
    332c:	dc001c17 	ldw	r16,112(sp)
    3330:	dec02604 	addi	sp,sp,152
    3334:	f800283a 	ret
    3338:	d9001617 	ldw	r4,88(sp)
    333c:	d9401217 	ldw	r5,72(sp)
    3340:	d8800104 	addi	r2,sp,4
    3344:	a80d883a 	mov	r6,r21
    3348:	d9c00204 	addi	r7,sp,8
    334c:	d8800015 	stw	r2,0(sp)
    3350:	00069640 	call	6964 <__d2b>
    3354:	d8800715 	stw	r2,28(sp)
    3358:	a804d53a 	srli	r2,r21,20
    335c:	1101ffcc 	andi	r4,r2,2047
    3360:	20008626 	beq	r4,zero,357c <_dtoa_r+0x348>
    3364:	d8c01217 	ldw	r3,72(sp)
    3368:	00800434 	movhi	r2,16
    336c:	10bfffc4 	addi	r2,r2,-1
    3370:	ddc00117 	ldw	r23,4(sp)
    3374:	a884703a 	and	r2,r21,r2
    3378:	1811883a 	mov	r8,r3
    337c:	124ffc34 	orhi	r9,r2,16368
    3380:	25bf0044 	addi	r22,r4,-1023
    3384:	d8000815 	stw	zero,32(sp)
    3388:	0005883a 	mov	r2,zero
    338c:	00cffe34 	movhi	r3,16376
    3390:	480b883a 	mov	r5,r9
    3394:	4009883a 	mov	r4,r8
    3398:	180f883a 	mov	r7,r3
    339c:	100d883a 	mov	r6,r2
    33a0:	00093f80 	call	93f8 <__subdf3>
    33a4:	0218dbf4 	movhi	r8,25455
    33a8:	4210d844 	addi	r8,r8,17249
    33ac:	024ff4f4 	movhi	r9,16339
    33b0:	4a61e9c4 	addi	r9,r9,-30809
    33b4:	480f883a 	mov	r7,r9
    33b8:	400d883a 	mov	r6,r8
    33bc:	180b883a 	mov	r5,r3
    33c0:	1009883a 	mov	r4,r2
    33c4:	00094ec0 	call	94ec <__muldf3>
    33c8:	0222d874 	movhi	r8,35681
    33cc:	42322cc4 	addi	r8,r8,-14157
    33d0:	024ff1f4 	movhi	r9,16327
    33d4:	4a628a04 	addi	r9,r9,-30168
    33d8:	480f883a 	mov	r7,r9
    33dc:	400d883a 	mov	r6,r8
    33e0:	180b883a 	mov	r5,r3
    33e4:	1009883a 	mov	r4,r2
    33e8:	00094780 	call	9478 <__adddf3>
    33ec:	b009883a 	mov	r4,r22
    33f0:	1021883a 	mov	r16,r2
    33f4:	1823883a 	mov	r17,r3
    33f8:	0009db00 	call	9db0 <__floatsidf>
    33fc:	021427f4 	movhi	r8,20639
    3400:	421e7ec4 	addi	r8,r8,31227
    3404:	024ff4f4 	movhi	r9,16339
    3408:	4a5104c4 	addi	r9,r9,17427
    340c:	480f883a 	mov	r7,r9
    3410:	400d883a 	mov	r6,r8
    3414:	180b883a 	mov	r5,r3
    3418:	1009883a 	mov	r4,r2
    341c:	00094ec0 	call	94ec <__muldf3>
    3420:	180f883a 	mov	r7,r3
    3424:	880b883a 	mov	r5,r17
    3428:	100d883a 	mov	r6,r2
    342c:	8009883a 	mov	r4,r16
    3430:	00094780 	call	9478 <__adddf3>
    3434:	1009883a 	mov	r4,r2
    3438:	180b883a 	mov	r5,r3
    343c:	1021883a 	mov	r16,r2
    3440:	1823883a 	mov	r17,r3
    3444:	0009ea80 	call	9ea8 <__fixdfsi>
    3448:	000d883a 	mov	r6,zero
    344c:	000f883a 	mov	r7,zero
    3450:	8009883a 	mov	r4,r16
    3454:	880b883a 	mov	r5,r17
    3458:	d8800d15 	stw	r2,52(sp)
    345c:	0009d280 	call	9d28 <__ltdf2>
    3460:	10031716 	blt	r2,zero,40c0 <_dtoa_r+0xe8c>
    3464:	d8c00d17 	ldw	r3,52(sp)
    3468:	00800584 	movi	r2,22
    346c:	10c1482e 	bgeu	r2,r3,3990 <_dtoa_r+0x75c>
    3470:	01000044 	movi	r4,1
    3474:	d9000c15 	stw	r4,48(sp)
    3478:	bd85c83a 	sub	r2,r23,r22
    347c:	11bfffc4 	addi	r6,r2,-1
    3480:	30030b16 	blt	r6,zero,40b0 <_dtoa_r+0xe7c>
    3484:	d9800a15 	stw	r6,40(sp)
    3488:	d8001115 	stw	zero,68(sp)
    348c:	d8c00d17 	ldw	r3,52(sp)
    3490:	1802ff16 	blt	r3,zero,4090 <_dtoa_r+0xe5c>
    3494:	d9000a17 	ldw	r4,40(sp)
    3498:	d8c00915 	stw	r3,36(sp)
    349c:	d8001015 	stw	zero,64(sp)
    34a0:	20c9883a 	add	r4,r4,r3
    34a4:	d9000a15 	stw	r4,40(sp)
    34a8:	d9001717 	ldw	r4,92(sp)
    34ac:	00800244 	movi	r2,9
    34b0:	11004636 	bltu	r2,r4,35cc <_dtoa_r+0x398>
    34b4:	00800144 	movi	r2,5
    34b8:	11020416 	blt	r2,r4,3ccc <_dtoa_r+0xa98>
    34bc:	04400044 	movi	r17,1
    34c0:	d8c01717 	ldw	r3,92(sp)
    34c4:	00800144 	movi	r2,5
    34c8:	10c1ed36 	bltu	r2,r3,3c80 <_dtoa_r+0xa4c>
    34cc:	18c5883a 	add	r2,r3,r3
    34d0:	1085883a 	add	r2,r2,r2
    34d4:	00c00034 	movhi	r3,0
    34d8:	18cd3a04 	addi	r3,r3,13544
    34dc:	10c5883a 	add	r2,r2,r3
    34e0:	11000017 	ldw	r4,0(r2)
    34e4:	2000683a 	jmp	r4
    34e8:	000035d4 	movui	zero,215
    34ec:	000035d4 	movui	zero,215
    34f0:	00003fd4 	movui	zero,255
    34f4:	00003fac 	andhi	zero,zero,254
    34f8:	00003ff0 	cmpltui	zero,zero,255
    34fc:	00003ffc 	xorhi	zero,zero,255
    3500:	d9002717 	ldw	r4,156(sp)
    3504:	0089c3c4 	movi	r2,9999
    3508:	20800015 	stw	r2,0(r4)
    350c:	a0001026 	beq	r20,zero,3550 <_dtoa_r+0x31c>
    3510:	00c00074 	movhi	r3,1
    3514:	18f52404 	addi	r3,r3,-11120
    3518:	d9802917 	ldw	r6,164(sp)
    351c:	303f7926 	beq	r6,zero,3304 <_dtoa_r+0xd0>
    3520:	188000c7 	ldb	r2,3(r3)
    3524:	190000c4 	addi	r4,r3,3
    3528:	1000101e 	bne	r2,zero,356c <_dtoa_r+0x338>
    352c:	d8802917 	ldw	r2,164(sp)
    3530:	11000015 	stw	r4,0(r2)
    3534:	003f7306 	br	3304 <_dtoa_r+0xd0>
    3538:	00a00034 	movhi	r2,32768
    353c:	10bfffc4 	addi	r2,r2,-1
    3540:	00c00044 	movi	r3,1
    3544:	88aa703a 	and	r21,r17,r2
    3548:	90c00015 	stw	r3,0(r18)
    354c:	003f5806 	br	32b0 <_dtoa_r+0x7c>
    3550:	00800434 	movhi	r2,16
    3554:	10bfffc4 	addi	r2,r2,-1
    3558:	a884703a 	and	r2,r21,r2
    355c:	103fec1e 	bne	r2,zero,3510 <_dtoa_r+0x2dc>
    3560:	00c00074 	movhi	r3,1
    3564:	18f52104 	addi	r3,r3,-11132
    3568:	003feb06 	br	3518 <_dtoa_r+0x2e4>
    356c:	d8802917 	ldw	r2,164(sp)
    3570:	19000204 	addi	r4,r3,8
    3574:	11000015 	stw	r4,0(r2)
    3578:	003f6206 	br	3304 <_dtoa_r+0xd0>
    357c:	ddc00117 	ldw	r23,4(sp)
    3580:	d8800217 	ldw	r2,8(sp)
    3584:	01000804 	movi	r4,32
    3588:	b8c10c84 	addi	r3,r23,1074
    358c:	18a3883a 	add	r17,r3,r2
    3590:	2441b80e 	bge	r4,r17,3c74 <_dtoa_r+0xa40>
    3594:	00c01004 	movi	r3,64
    3598:	1c47c83a 	sub	r3,r3,r17
    359c:	88bff804 	addi	r2,r17,-32
    35a0:	a8c6983a 	sll	r3,r21,r3
    35a4:	a084d83a 	srl	r2,r20,r2
    35a8:	1888b03a 	or	r4,r3,r2
    35ac:	0009f800 	call	9f80 <__floatunsidf>
    35b0:	1011883a 	mov	r8,r2
    35b4:	00bf8434 	movhi	r2,65040
    35b8:	01000044 	movi	r4,1
    35bc:	10d3883a 	add	r9,r2,r3
    35c0:	8dbef344 	addi	r22,r17,-1075
    35c4:	d9000815 	stw	r4,32(sp)
    35c8:	003f6f06 	br	3388 <_dtoa_r+0x154>
    35cc:	d8001715 	stw	zero,92(sp)
    35d0:	04400044 	movi	r17,1
    35d4:	00bfffc4 	movi	r2,-1
    35d8:	00c00044 	movi	r3,1
    35dc:	d8800e15 	stw	r2,56(sp)
    35e0:	d8002615 	stw	zero,152(sp)
    35e4:	d8800f15 	stw	r2,60(sp)
    35e8:	d8c00b15 	stw	r3,44(sp)
    35ec:	1021883a 	mov	r16,r2
    35f0:	d8801617 	ldw	r2,88(sp)
    35f4:	10001115 	stw	zero,68(r2)
    35f8:	d8801617 	ldw	r2,88(sp)
    35fc:	11401117 	ldw	r5,68(r2)
    3600:	1009883a 	mov	r4,r2
    3604:	00068a80 	call	68a8 <_Balloc>
    3608:	d8c01617 	ldw	r3,88(sp)
    360c:	d8800515 	stw	r2,20(sp)
    3610:	18801015 	stw	r2,64(r3)
    3614:	00800384 	movi	r2,14
    3618:	14006836 	bltu	r2,r16,37bc <_dtoa_r+0x588>
    361c:	8805003a 	cmpeq	r2,r17,zero
    3620:	1000661e 	bne	r2,zero,37bc <_dtoa_r+0x588>
    3624:	d9000d17 	ldw	r4,52(sp)
    3628:	0102300e 	bge	zero,r4,3eec <_dtoa_r+0xcb8>
    362c:	208003cc 	andi	r2,r4,15
    3630:	100490fa 	slli	r2,r2,3
    3634:	2025d13a 	srai	r18,r4,4
    3638:	00c00074 	movhi	r3,1
    363c:	18f53604 	addi	r3,r3,-11048
    3640:	10c5883a 	add	r2,r2,r3
    3644:	90c0040c 	andi	r3,r18,16
    3648:	14000017 	ldw	r16,0(r2)
    364c:	14400117 	ldw	r17,4(r2)
    3650:	18036a1e 	bne	r3,zero,43fc <_dtoa_r+0x11c8>
    3654:	05800084 	movi	r22,2
    3658:	90001026 	beq	r18,zero,369c <_dtoa_r+0x468>
    365c:	04c00074 	movhi	r19,1
    3660:	9cf56804 	addi	r19,r19,-10848
    3664:	9080004c 	andi	r2,r18,1
    3668:	1005003a 	cmpeq	r2,r2,zero
    366c:	1000081e 	bne	r2,zero,3690 <_dtoa_r+0x45c>
    3670:	99800017 	ldw	r6,0(r19)
    3674:	99c00117 	ldw	r7,4(r19)
    3678:	880b883a 	mov	r5,r17
    367c:	8009883a 	mov	r4,r16
    3680:	00094ec0 	call	94ec <__muldf3>
    3684:	1021883a 	mov	r16,r2
    3688:	b5800044 	addi	r22,r22,1
    368c:	1823883a 	mov	r17,r3
    3690:	9025d07a 	srai	r18,r18,1
    3694:	9cc00204 	addi	r19,r19,8
    3698:	903ff21e 	bne	r18,zero,3664 <_dtoa_r+0x430>
    369c:	a80b883a 	mov	r5,r21
    36a0:	a009883a 	mov	r4,r20
    36a4:	880f883a 	mov	r7,r17
    36a8:	800d883a 	mov	r6,r16
    36ac:	00098b00 	call	98b0 <__divdf3>
    36b0:	1029883a 	mov	r20,r2
    36b4:	182b883a 	mov	r21,r3
    36b8:	d8c00c17 	ldw	r3,48(sp)
    36bc:	1805003a 	cmpeq	r2,r3,zero
    36c0:	1000081e 	bne	r2,zero,36e4 <_dtoa_r+0x4b0>
    36c4:	0005883a 	mov	r2,zero
    36c8:	00cffc34 	movhi	r3,16368
    36cc:	180f883a 	mov	r7,r3
    36d0:	a009883a 	mov	r4,r20
    36d4:	a80b883a 	mov	r5,r21
    36d8:	100d883a 	mov	r6,r2
    36dc:	0009d280 	call	9d28 <__ltdf2>
    36e0:	1003fe16 	blt	r2,zero,46dc <_dtoa_r+0x14a8>
    36e4:	b009883a 	mov	r4,r22
    36e8:	0009db00 	call	9db0 <__floatsidf>
    36ec:	180b883a 	mov	r5,r3
    36f0:	1009883a 	mov	r4,r2
    36f4:	a00d883a 	mov	r6,r20
    36f8:	a80f883a 	mov	r7,r21
    36fc:	00094ec0 	call	94ec <__muldf3>
    3700:	0011883a 	mov	r8,zero
    3704:	02500734 	movhi	r9,16412
    3708:	1009883a 	mov	r4,r2
    370c:	180b883a 	mov	r5,r3
    3710:	480f883a 	mov	r7,r9
    3714:	400d883a 	mov	r6,r8
    3718:	00094780 	call	9478 <__adddf3>
    371c:	d9000f17 	ldw	r4,60(sp)
    3720:	102d883a 	mov	r22,r2
    3724:	00bf3034 	movhi	r2,64704
    3728:	18b9883a 	add	fp,r3,r2
    372c:	e02f883a 	mov	r23,fp
    3730:	20028f1e 	bne	r4,zero,4170 <_dtoa_r+0xf3c>
    3734:	0005883a 	mov	r2,zero
    3738:	00d00534 	movhi	r3,16404
    373c:	a009883a 	mov	r4,r20
    3740:	a80b883a 	mov	r5,r21
    3744:	180f883a 	mov	r7,r3
    3748:	100d883a 	mov	r6,r2
    374c:	00093f80 	call	93f8 <__subdf3>
    3750:	1009883a 	mov	r4,r2
    3754:	e00f883a 	mov	r7,fp
    3758:	180b883a 	mov	r5,r3
    375c:	b00d883a 	mov	r6,r22
    3760:	1025883a 	mov	r18,r2
    3764:	1827883a 	mov	r19,r3
    3768:	0009c180 	call	9c18 <__gtdf2>
    376c:	00834f16 	blt	zero,r2,44ac <_dtoa_r+0x1278>
    3770:	e0e0003c 	xorhi	r3,fp,32768
    3774:	9009883a 	mov	r4,r18
    3778:	980b883a 	mov	r5,r19
    377c:	180f883a 	mov	r7,r3
    3780:	b00d883a 	mov	r6,r22
    3784:	0009d280 	call	9d28 <__ltdf2>
    3788:	1000080e 	bge	r2,zero,37ac <_dtoa_r+0x578>
    378c:	0027883a 	mov	r19,zero
    3790:	0025883a 	mov	r18,zero
    3794:	d8802617 	ldw	r2,152(sp)
    3798:	df000517 	ldw	fp,20(sp)
    379c:	d8000615 	stw	zero,24(sp)
    37a0:	0084303a 	nor	r2,zero,r2
    37a4:	d8800d15 	stw	r2,52(sp)
    37a8:	00019b06 	br	3e18 <_dtoa_r+0xbe4>
    37ac:	d9801217 	ldw	r6,72(sp)
    37b0:	d8801317 	ldw	r2,76(sp)
    37b4:	3029883a 	mov	r20,r6
    37b8:	102b883a 	mov	r21,r2
    37bc:	d8c00217 	ldw	r3,8(sp)
    37c0:	18008516 	blt	r3,zero,39d8 <_dtoa_r+0x7a4>
    37c4:	d9000d17 	ldw	r4,52(sp)
    37c8:	00800384 	movi	r2,14
    37cc:	11008216 	blt	r2,r4,39d8 <_dtoa_r+0x7a4>
    37d0:	200490fa 	slli	r2,r4,3
    37d4:	d9802617 	ldw	r6,152(sp)
    37d8:	00c00074 	movhi	r3,1
    37dc:	18f53604 	addi	r3,r3,-11048
    37e0:	10c5883a 	add	r2,r2,r3
    37e4:	14800017 	ldw	r18,0(r2)
    37e8:	14c00117 	ldw	r19,4(r2)
    37ec:	30031e16 	blt	r6,zero,4468 <_dtoa_r+0x1234>
    37f0:	d9000517 	ldw	r4,20(sp)
    37f4:	d8c00f17 	ldw	r3,60(sp)
    37f8:	a823883a 	mov	r17,r21
    37fc:	a021883a 	mov	r16,r20
    3800:	192b883a 	add	r21,r3,r4
    3804:	2039883a 	mov	fp,r4
    3808:	00000f06 	br	3848 <_dtoa_r+0x614>
    380c:	0005883a 	mov	r2,zero
    3810:	00d00934 	movhi	r3,16420
    3814:	5009883a 	mov	r4,r10
    3818:	580b883a 	mov	r5,r11
    381c:	180f883a 	mov	r7,r3
    3820:	100d883a 	mov	r6,r2
    3824:	00094ec0 	call	94ec <__muldf3>
    3828:	180b883a 	mov	r5,r3
    382c:	000d883a 	mov	r6,zero
    3830:	000f883a 	mov	r7,zero
    3834:	1009883a 	mov	r4,r2
    3838:	1021883a 	mov	r16,r2
    383c:	1823883a 	mov	r17,r3
    3840:	0009b900 	call	9b90 <__nedf2>
    3844:	10004526 	beq	r2,zero,395c <_dtoa_r+0x728>
    3848:	900d883a 	mov	r6,r18
    384c:	980f883a 	mov	r7,r19
    3850:	8009883a 	mov	r4,r16
    3854:	880b883a 	mov	r5,r17
    3858:	00098b00 	call	98b0 <__divdf3>
    385c:	180b883a 	mov	r5,r3
    3860:	1009883a 	mov	r4,r2
    3864:	0009ea80 	call	9ea8 <__fixdfsi>
    3868:	1009883a 	mov	r4,r2
    386c:	1029883a 	mov	r20,r2
    3870:	0009db00 	call	9db0 <__floatsidf>
    3874:	180f883a 	mov	r7,r3
    3878:	9009883a 	mov	r4,r18
    387c:	980b883a 	mov	r5,r19
    3880:	100d883a 	mov	r6,r2
    3884:	00094ec0 	call	94ec <__muldf3>
    3888:	180f883a 	mov	r7,r3
    388c:	880b883a 	mov	r5,r17
    3890:	8009883a 	mov	r4,r16
    3894:	100d883a 	mov	r6,r2
    3898:	00093f80 	call	93f8 <__subdf3>
    389c:	1015883a 	mov	r10,r2
    38a0:	a0800c04 	addi	r2,r20,48
    38a4:	e0800005 	stb	r2,0(fp)
    38a8:	e7000044 	addi	fp,fp,1
    38ac:	1817883a 	mov	r11,r3
    38b0:	e57fd61e 	bne	fp,r21,380c <_dtoa_r+0x5d8>
    38b4:	500d883a 	mov	r6,r10
    38b8:	180f883a 	mov	r7,r3
    38bc:	5009883a 	mov	r4,r10
    38c0:	180b883a 	mov	r5,r3
    38c4:	00094780 	call	9478 <__adddf3>
    38c8:	100d883a 	mov	r6,r2
    38cc:	9009883a 	mov	r4,r18
    38d0:	980b883a 	mov	r5,r19
    38d4:	180f883a 	mov	r7,r3
    38d8:	1021883a 	mov	r16,r2
    38dc:	1823883a 	mov	r17,r3
    38e0:	0009d280 	call	9d28 <__ltdf2>
    38e4:	10000816 	blt	r2,zero,3908 <_dtoa_r+0x6d4>
    38e8:	980b883a 	mov	r5,r19
    38ec:	800d883a 	mov	r6,r16
    38f0:	880f883a 	mov	r7,r17
    38f4:	9009883a 	mov	r4,r18
    38f8:	0009b080 	call	9b08 <__eqdf2>
    38fc:	1000171e 	bne	r2,zero,395c <_dtoa_r+0x728>
    3900:	a080004c 	andi	r2,r20,1
    3904:	10001526 	beq	r2,zero,395c <_dtoa_r+0x728>
    3908:	d8800d17 	ldw	r2,52(sp)
    390c:	d8800415 	stw	r2,16(sp)
    3910:	e009883a 	mov	r4,fp
    3914:	213fffc4 	addi	r4,r4,-1
    3918:	20c00007 	ldb	r3,0(r4)
    391c:	00800e44 	movi	r2,57
    3920:	1880081e 	bne	r3,r2,3944 <_dtoa_r+0x710>
    3924:	d8800517 	ldw	r2,20(sp)
    3928:	113ffa1e 	bne	r2,r4,3914 <_dtoa_r+0x6e0>
    392c:	d8c00417 	ldw	r3,16(sp)
    3930:	d9800517 	ldw	r6,20(sp)
    3934:	00800c04 	movi	r2,48
    3938:	18c00044 	addi	r3,r3,1
    393c:	d8c00415 	stw	r3,16(sp)
    3940:	30800005 	stb	r2,0(r6)
    3944:	20800003 	ldbu	r2,0(r4)
    3948:	d8c00417 	ldw	r3,16(sp)
    394c:	27000044 	addi	fp,r4,1
    3950:	10800044 	addi	r2,r2,1
    3954:	d8c00d15 	stw	r3,52(sp)
    3958:	20800005 	stb	r2,0(r4)
    395c:	d9001617 	ldw	r4,88(sp)
    3960:	d9400717 	ldw	r5,28(sp)
    3964:	00063280 	call	6328 <_Bfree>
    3968:	e0000005 	stb	zero,0(fp)
    396c:	d9800d17 	ldw	r6,52(sp)
    3970:	d8c02717 	ldw	r3,156(sp)
    3974:	d9002917 	ldw	r4,164(sp)
    3978:	30800044 	addi	r2,r6,1
    397c:	18800015 	stw	r2,0(r3)
    3980:	20029c26 	beq	r4,zero,43f4 <_dtoa_r+0x11c0>
    3984:	d8c00517 	ldw	r3,20(sp)
    3988:	27000015 	stw	fp,0(r4)
    398c:	003e5d06 	br	3304 <_dtoa_r+0xd0>
    3990:	d9800d17 	ldw	r6,52(sp)
    3994:	00c00074 	movhi	r3,1
    3998:	18f53604 	addi	r3,r3,-11048
    399c:	d9001217 	ldw	r4,72(sp)
    39a0:	300490fa 	slli	r2,r6,3
    39a4:	d9401317 	ldw	r5,76(sp)
    39a8:	10c5883a 	add	r2,r2,r3
    39ac:	12000017 	ldw	r8,0(r2)
    39b0:	12400117 	ldw	r9,4(r2)
    39b4:	400d883a 	mov	r6,r8
    39b8:	480f883a 	mov	r7,r9
    39bc:	0009d280 	call	9d28 <__ltdf2>
    39c0:	1000030e 	bge	r2,zero,39d0 <_dtoa_r+0x79c>
    39c4:	d8800d17 	ldw	r2,52(sp)
    39c8:	10bfffc4 	addi	r2,r2,-1
    39cc:	d8800d15 	stw	r2,52(sp)
    39d0:	d8000c15 	stw	zero,48(sp)
    39d4:	003ea806 	br	3478 <_dtoa_r+0x244>
    39d8:	d9000b17 	ldw	r4,44(sp)
    39dc:	202cc03a 	cmpne	r22,r4,zero
    39e0:	b000c71e 	bne	r22,zero,3d00 <_dtoa_r+0xacc>
    39e4:	dc001117 	ldw	r16,68(sp)
    39e8:	dc801017 	ldw	r18,64(sp)
    39ec:	0027883a 	mov	r19,zero
    39f0:	04000b0e 	bge	zero,r16,3a20 <_dtoa_r+0x7ec>
    39f4:	d8c00a17 	ldw	r3,40(sp)
    39f8:	00c0090e 	bge	zero,r3,3a20 <_dtoa_r+0x7ec>
    39fc:	8005883a 	mov	r2,r16
    3a00:	1c011316 	blt	r3,r16,3e50 <_dtoa_r+0xc1c>
    3a04:	d9000a17 	ldw	r4,40(sp)
    3a08:	d9801117 	ldw	r6,68(sp)
    3a0c:	80a1c83a 	sub	r16,r16,r2
    3a10:	2089c83a 	sub	r4,r4,r2
    3a14:	308dc83a 	sub	r6,r6,r2
    3a18:	d9000a15 	stw	r4,40(sp)
    3a1c:	d9801115 	stw	r6,68(sp)
    3a20:	d8801017 	ldw	r2,64(sp)
    3a24:	0080150e 	bge	zero,r2,3a7c <_dtoa_r+0x848>
    3a28:	d8c00b17 	ldw	r3,44(sp)
    3a2c:	1805003a 	cmpeq	r2,r3,zero
    3a30:	1001c91e 	bne	r2,zero,4158 <_dtoa_r+0xf24>
    3a34:	04800e0e 	bge	zero,r18,3a70 <_dtoa_r+0x83c>
    3a38:	d9001617 	ldw	r4,88(sp)
    3a3c:	980b883a 	mov	r5,r19
    3a40:	900d883a 	mov	r6,r18
    3a44:	00070dc0 	call	70dc <__pow5mult>
    3a48:	d9001617 	ldw	r4,88(sp)
    3a4c:	d9800717 	ldw	r6,28(sp)
    3a50:	100b883a 	mov	r5,r2
    3a54:	1027883a 	mov	r19,r2
    3a58:	0006db80 	call	6db8 <__multiply>
    3a5c:	d9001617 	ldw	r4,88(sp)
    3a60:	d9400717 	ldw	r5,28(sp)
    3a64:	1023883a 	mov	r17,r2
    3a68:	00063280 	call	6328 <_Bfree>
    3a6c:	dc400715 	stw	r17,28(sp)
    3a70:	d9001017 	ldw	r4,64(sp)
    3a74:	248dc83a 	sub	r6,r4,r18
    3a78:	30010e1e 	bne	r6,zero,3eb4 <_dtoa_r+0xc80>
    3a7c:	d9001617 	ldw	r4,88(sp)
    3a80:	04400044 	movi	r17,1
    3a84:	880b883a 	mov	r5,r17
    3a88:	0006fa00 	call	6fa0 <__i2b>
    3a8c:	d9800917 	ldw	r6,36(sp)
    3a90:	1025883a 	mov	r18,r2
    3a94:	0180040e 	bge	zero,r6,3aa8 <_dtoa_r+0x874>
    3a98:	d9001617 	ldw	r4,88(sp)
    3a9c:	100b883a 	mov	r5,r2
    3aa0:	00070dc0 	call	70dc <__pow5mult>
    3aa4:	1025883a 	mov	r18,r2
    3aa8:	d8801717 	ldw	r2,92(sp)
    3aac:	8880f30e 	bge	r17,r2,3e7c <_dtoa_r+0xc48>
    3ab0:	0023883a 	mov	r17,zero
    3ab4:	d9800917 	ldw	r6,36(sp)
    3ab8:	30019e1e 	bne	r6,zero,4134 <_dtoa_r+0xf00>
    3abc:	00c00044 	movi	r3,1
    3ac0:	d9000a17 	ldw	r4,40(sp)
    3ac4:	20c5883a 	add	r2,r4,r3
    3ac8:	10c007cc 	andi	r3,r2,31
    3acc:	1800841e 	bne	r3,zero,3ce0 <_dtoa_r+0xaac>
    3ad0:	00800704 	movi	r2,28
    3ad4:	d9000a17 	ldw	r4,40(sp)
    3ad8:	d9801117 	ldw	r6,68(sp)
    3adc:	80a1883a 	add	r16,r16,r2
    3ae0:	2089883a 	add	r4,r4,r2
    3ae4:	308d883a 	add	r6,r6,r2
    3ae8:	d9000a15 	stw	r4,40(sp)
    3aec:	d9801115 	stw	r6,68(sp)
    3af0:	d8801117 	ldw	r2,68(sp)
    3af4:	0080050e 	bge	zero,r2,3b0c <_dtoa_r+0x8d8>
    3af8:	d9400717 	ldw	r5,28(sp)
    3afc:	d9001617 	ldw	r4,88(sp)
    3b00:	100d883a 	mov	r6,r2
    3b04:	0006c6c0 	call	6c6c <__lshift>
    3b08:	d8800715 	stw	r2,28(sp)
    3b0c:	d8c00a17 	ldw	r3,40(sp)
    3b10:	00c0050e 	bge	zero,r3,3b28 <_dtoa_r+0x8f4>
    3b14:	d9001617 	ldw	r4,88(sp)
    3b18:	900b883a 	mov	r5,r18
    3b1c:	180d883a 	mov	r6,r3
    3b20:	0006c6c0 	call	6c6c <__lshift>
    3b24:	1025883a 	mov	r18,r2
    3b28:	d9000c17 	ldw	r4,48(sp)
    3b2c:	2005003a 	cmpeq	r2,r4,zero
    3b30:	10016f26 	beq	r2,zero,40f0 <_dtoa_r+0xebc>
    3b34:	d9000f17 	ldw	r4,60(sp)
    3b38:	0102170e 	bge	zero,r4,4398 <_dtoa_r+0x1164>
    3b3c:	d9800b17 	ldw	r6,44(sp)
    3b40:	3005003a 	cmpeq	r2,r6,zero
    3b44:	1000881e 	bne	r2,zero,3d68 <_dtoa_r+0xb34>
    3b48:	0400050e 	bge	zero,r16,3b60 <_dtoa_r+0x92c>
    3b4c:	d9001617 	ldw	r4,88(sp)
    3b50:	980b883a 	mov	r5,r19
    3b54:	800d883a 	mov	r6,r16
    3b58:	0006c6c0 	call	6c6c <__lshift>
    3b5c:	1027883a 	mov	r19,r2
    3b60:	8804c03a 	cmpne	r2,r17,zero
    3b64:	1002541e 	bne	r2,zero,44b8 <_dtoa_r+0x1284>
    3b68:	980b883a 	mov	r5,r19
    3b6c:	dd800517 	ldw	r22,20(sp)
    3b70:	dcc00615 	stw	r19,24(sp)
    3b74:	a700004c 	andi	fp,r20,1
    3b78:	2827883a 	mov	r19,r5
    3b7c:	d9000717 	ldw	r4,28(sp)
    3b80:	900b883a 	mov	r5,r18
    3b84:	000301c0 	call	301c <quorem>
    3b88:	d9000717 	ldw	r4,28(sp)
    3b8c:	d9400617 	ldw	r5,24(sp)
    3b90:	1023883a 	mov	r17,r2
    3b94:	8dc00c04 	addi	r23,r17,48
    3b98:	00064840 	call	6484 <__mcmp>
    3b9c:	d9001617 	ldw	r4,88(sp)
    3ba0:	900b883a 	mov	r5,r18
    3ba4:	980d883a 	mov	r6,r19
    3ba8:	1029883a 	mov	r20,r2
    3bac:	0006ae00 	call	6ae0 <__mdiff>
    3bb0:	102b883a 	mov	r21,r2
    3bb4:	10800317 	ldw	r2,12(r2)
    3bb8:	1001281e 	bne	r2,zero,405c <_dtoa_r+0xe28>
    3bbc:	d9000717 	ldw	r4,28(sp)
    3bc0:	a80b883a 	mov	r5,r21
    3bc4:	00064840 	call	6484 <__mcmp>
    3bc8:	d9001617 	ldw	r4,88(sp)
    3bcc:	1021883a 	mov	r16,r2
    3bd0:	a80b883a 	mov	r5,r21
    3bd4:	00063280 	call	6328 <_Bfree>
    3bd8:	8000041e 	bne	r16,zero,3bec <_dtoa_r+0x9b8>
    3bdc:	d8801717 	ldw	r2,92(sp)
    3be0:	1000021e 	bne	r2,zero,3bec <_dtoa_r+0x9b8>
    3be4:	e004c03a 	cmpne	r2,fp,zero
    3be8:	10011726 	beq	r2,zero,4048 <_dtoa_r+0xe14>
    3bec:	a0010616 	blt	r20,zero,4008 <_dtoa_r+0xdd4>
    3bf0:	a000041e 	bne	r20,zero,3c04 <_dtoa_r+0x9d0>
    3bf4:	d8c01717 	ldw	r3,92(sp)
    3bf8:	1800021e 	bne	r3,zero,3c04 <_dtoa_r+0x9d0>
    3bfc:	e004c03a 	cmpne	r2,fp,zero
    3c00:	10010126 	beq	r2,zero,4008 <_dtoa_r+0xdd4>
    3c04:	04023d16 	blt	zero,r16,44fc <_dtoa_r+0x12c8>
    3c08:	b5c00005 	stb	r23,0(r22)
    3c0c:	d9800517 	ldw	r6,20(sp)
    3c10:	d9000f17 	ldw	r4,60(sp)
    3c14:	b5800044 	addi	r22,r22,1
    3c18:	3105883a 	add	r2,r6,r4
    3c1c:	b0806526 	beq	r22,r2,3db4 <_dtoa_r+0xb80>
    3c20:	d9400717 	ldw	r5,28(sp)
    3c24:	d9001617 	ldw	r4,88(sp)
    3c28:	01800284 	movi	r6,10
    3c2c:	000f883a 	mov	r7,zero
    3c30:	0006fdc0 	call	6fdc <__multadd>
    3c34:	d8800715 	stw	r2,28(sp)
    3c38:	d8800617 	ldw	r2,24(sp)
    3c3c:	14c10c26 	beq	r2,r19,4070 <_dtoa_r+0xe3c>
    3c40:	d9400617 	ldw	r5,24(sp)
    3c44:	d9001617 	ldw	r4,88(sp)
    3c48:	01800284 	movi	r6,10
    3c4c:	000f883a 	mov	r7,zero
    3c50:	0006fdc0 	call	6fdc <__multadd>
    3c54:	d9001617 	ldw	r4,88(sp)
    3c58:	980b883a 	mov	r5,r19
    3c5c:	01800284 	movi	r6,10
    3c60:	000f883a 	mov	r7,zero
    3c64:	d8800615 	stw	r2,24(sp)
    3c68:	0006fdc0 	call	6fdc <__multadd>
    3c6c:	1027883a 	mov	r19,r2
    3c70:	003fc206 	br	3b7c <_dtoa_r+0x948>
    3c74:	2445c83a 	sub	r2,r4,r17
    3c78:	a088983a 	sll	r4,r20,r2
    3c7c:	003e4b06 	br	35ac <_dtoa_r+0x378>
    3c80:	01bfffc4 	movi	r6,-1
    3c84:	00800044 	movi	r2,1
    3c88:	d9800e15 	stw	r6,56(sp)
    3c8c:	d9800f15 	stw	r6,60(sp)
    3c90:	d8800b15 	stw	r2,44(sp)
    3c94:	d8c01617 	ldw	r3,88(sp)
    3c98:	008005c4 	movi	r2,23
    3c9c:	18001115 	stw	zero,68(r3)
    3ca0:	1580082e 	bgeu	r2,r22,3cc4 <_dtoa_r+0xa90>
    3ca4:	00c00104 	movi	r3,4
    3ca8:	0009883a 	mov	r4,zero
    3cac:	18c7883a 	add	r3,r3,r3
    3cb0:	18800504 	addi	r2,r3,20
    3cb4:	21000044 	addi	r4,r4,1
    3cb8:	b0bffc2e 	bgeu	r22,r2,3cac <_dtoa_r+0xa78>
    3cbc:	d9801617 	ldw	r6,88(sp)
    3cc0:	31001115 	stw	r4,68(r6)
    3cc4:	dc000f17 	ldw	r16,60(sp)
    3cc8:	003e4b06 	br	35f8 <_dtoa_r+0x3c4>
    3ccc:	d9801717 	ldw	r6,92(sp)
    3cd0:	0023883a 	mov	r17,zero
    3cd4:	31bfff04 	addi	r6,r6,-4
    3cd8:	d9801715 	stw	r6,92(sp)
    3cdc:	003df806 	br	34c0 <_dtoa_r+0x28c>
    3ce0:	00800804 	movi	r2,32
    3ce4:	10c9c83a 	sub	r4,r2,r3
    3ce8:	00c00104 	movi	r3,4
    3cec:	19005a16 	blt	r3,r4,3e58 <_dtoa_r+0xc24>
    3cf0:	008000c4 	movi	r2,3
    3cf4:	113f7e16 	blt	r2,r4,3af0 <_dtoa_r+0x8bc>
    3cf8:	20800704 	addi	r2,r4,28
    3cfc:	003f7506 	br	3ad4 <_dtoa_r+0x8a0>
    3d00:	d9801717 	ldw	r6,92(sp)
    3d04:	00800044 	movi	r2,1
    3d08:	1180a10e 	bge	r2,r6,3f90 <_dtoa_r+0xd5c>
    3d0c:	d9800f17 	ldw	r6,60(sp)
    3d10:	d8c01017 	ldw	r3,64(sp)
    3d14:	30bfffc4 	addi	r2,r6,-1
    3d18:	1881c616 	blt	r3,r2,4434 <_dtoa_r+0x1200>
    3d1c:	18a5c83a 	sub	r18,r3,r2
    3d20:	d8800f17 	ldw	r2,60(sp)
    3d24:	10026216 	blt	r2,zero,46b0 <_dtoa_r+0x147c>
    3d28:	dc001117 	ldw	r16,68(sp)
    3d2c:	1007883a 	mov	r3,r2
    3d30:	d9800a17 	ldw	r6,40(sp)
    3d34:	d8801117 	ldw	r2,68(sp)
    3d38:	d9001617 	ldw	r4,88(sp)
    3d3c:	30cd883a 	add	r6,r6,r3
    3d40:	10c5883a 	add	r2,r2,r3
    3d44:	01400044 	movi	r5,1
    3d48:	d9800a15 	stw	r6,40(sp)
    3d4c:	d8801115 	stw	r2,68(sp)
    3d50:	0006fa00 	call	6fa0 <__i2b>
    3d54:	1027883a 	mov	r19,r2
    3d58:	003f2506 	br	39f0 <_dtoa_r+0x7bc>
    3d5c:	00c00074 	movhi	r3,1
    3d60:	18f51804 	addi	r3,r3,-11168
    3d64:	003d6706 	br	3304 <_dtoa_r+0xd0>
    3d68:	dd800517 	ldw	r22,20(sp)
    3d6c:	04000044 	movi	r16,1
    3d70:	00000706 	br	3d90 <_dtoa_r+0xb5c>
    3d74:	d9400717 	ldw	r5,28(sp)
    3d78:	d9001617 	ldw	r4,88(sp)
    3d7c:	01800284 	movi	r6,10
    3d80:	000f883a 	mov	r7,zero
    3d84:	0006fdc0 	call	6fdc <__multadd>
    3d88:	d8800715 	stw	r2,28(sp)
    3d8c:	84000044 	addi	r16,r16,1
    3d90:	d9000717 	ldw	r4,28(sp)
    3d94:	900b883a 	mov	r5,r18
    3d98:	000301c0 	call	301c <quorem>
    3d9c:	15c00c04 	addi	r23,r2,48
    3da0:	b5c00005 	stb	r23,0(r22)
    3da4:	d8c00f17 	ldw	r3,60(sp)
    3da8:	b5800044 	addi	r22,r22,1
    3dac:	80fff116 	blt	r16,r3,3d74 <_dtoa_r+0xb40>
    3db0:	d8000615 	stw	zero,24(sp)
    3db4:	d9400717 	ldw	r5,28(sp)
    3db8:	d9001617 	ldw	r4,88(sp)
    3dbc:	01800044 	movi	r6,1
    3dc0:	0006c6c0 	call	6c6c <__lshift>
    3dc4:	1009883a 	mov	r4,r2
    3dc8:	900b883a 	mov	r5,r18
    3dcc:	d8800715 	stw	r2,28(sp)
    3dd0:	00064840 	call	6484 <__mcmp>
    3dd4:	00803c0e 	bge	zero,r2,3ec8 <_dtoa_r+0xc94>
    3dd8:	b009883a 	mov	r4,r22
    3ddc:	213fffc4 	addi	r4,r4,-1
    3de0:	21400003 	ldbu	r5,0(r4)
    3de4:	00800e44 	movi	r2,57
    3de8:	28c03fcc 	andi	r3,r5,255
    3dec:	18c0201c 	xori	r3,r3,128
    3df0:	18ffe004 	addi	r3,r3,-128
    3df4:	1881981e 	bne	r3,r2,4458 <_dtoa_r+0x1224>
    3df8:	d9800517 	ldw	r6,20(sp)
    3dfc:	21bff71e 	bne	r4,r6,3ddc <_dtoa_r+0xba8>
    3e00:	d8800d17 	ldw	r2,52(sp)
    3e04:	37000044 	addi	fp,r6,1
    3e08:	10800044 	addi	r2,r2,1
    3e0c:	d8800d15 	stw	r2,52(sp)
    3e10:	00800c44 	movi	r2,49
    3e14:	30800005 	stb	r2,0(r6)
    3e18:	d9001617 	ldw	r4,88(sp)
    3e1c:	900b883a 	mov	r5,r18
    3e20:	00063280 	call	6328 <_Bfree>
    3e24:	983ecd26 	beq	r19,zero,395c <_dtoa_r+0x728>
    3e28:	d8c00617 	ldw	r3,24(sp)
    3e2c:	18000426 	beq	r3,zero,3e40 <_dtoa_r+0xc0c>
    3e30:	1cc00326 	beq	r3,r19,3e40 <_dtoa_r+0xc0c>
    3e34:	d9001617 	ldw	r4,88(sp)
    3e38:	180b883a 	mov	r5,r3
    3e3c:	00063280 	call	6328 <_Bfree>
    3e40:	d9001617 	ldw	r4,88(sp)
    3e44:	980b883a 	mov	r5,r19
    3e48:	00063280 	call	6328 <_Bfree>
    3e4c:	003ec306 	br	395c <_dtoa_r+0x728>
    3e50:	1805883a 	mov	r2,r3
    3e54:	003eeb06 	br	3a04 <_dtoa_r+0x7d0>
    3e58:	d9800a17 	ldw	r6,40(sp)
    3e5c:	d8c01117 	ldw	r3,68(sp)
    3e60:	20bfff04 	addi	r2,r4,-4
    3e64:	308d883a 	add	r6,r6,r2
    3e68:	1887883a 	add	r3,r3,r2
    3e6c:	80a1883a 	add	r16,r16,r2
    3e70:	d9800a15 	stw	r6,40(sp)
    3e74:	d8c01115 	stw	r3,68(sp)
    3e78:	003f1d06 	br	3af0 <_dtoa_r+0x8bc>
    3e7c:	a03f0c1e 	bne	r20,zero,3ab0 <_dtoa_r+0x87c>
    3e80:	00800434 	movhi	r2,16
    3e84:	10bfffc4 	addi	r2,r2,-1
    3e88:	a884703a 	and	r2,r21,r2
    3e8c:	103f081e 	bne	r2,zero,3ab0 <_dtoa_r+0x87c>
    3e90:	a89ffc2c 	andhi	r2,r21,32752
    3e94:	103f0626 	beq	r2,zero,3ab0 <_dtoa_r+0x87c>
    3e98:	d8c01117 	ldw	r3,68(sp)
    3e9c:	d9000a17 	ldw	r4,40(sp)
    3ea0:	18c00044 	addi	r3,r3,1
    3ea4:	21000044 	addi	r4,r4,1
    3ea8:	d8c01115 	stw	r3,68(sp)
    3eac:	d9000a15 	stw	r4,40(sp)
    3eb0:	003f0006 	br	3ab4 <_dtoa_r+0x880>
    3eb4:	d9400717 	ldw	r5,28(sp)
    3eb8:	d9001617 	ldw	r4,88(sp)
    3ebc:	00070dc0 	call	70dc <__pow5mult>
    3ec0:	d8800715 	stw	r2,28(sp)
    3ec4:	003eed06 	br	3a7c <_dtoa_r+0x848>
    3ec8:	1000021e 	bne	r2,zero,3ed4 <_dtoa_r+0xca0>
    3ecc:	b880004c 	andi	r2,r23,1
    3ed0:	103fc11e 	bne	r2,zero,3dd8 <_dtoa_r+0xba4>
    3ed4:	b5bfffc4 	addi	r22,r22,-1
    3ed8:	b0c00007 	ldb	r3,0(r22)
    3edc:	00800c04 	movi	r2,48
    3ee0:	18bffc26 	beq	r3,r2,3ed4 <_dtoa_r+0xca0>
    3ee4:	b7000044 	addi	fp,r22,1
    3ee8:	003fcb06 	br	3e18 <_dtoa_r+0xbe4>
    3eec:	d9800d17 	ldw	r6,52(sp)
    3ef0:	018fc83a 	sub	r7,zero,r6
    3ef4:	3801f726 	beq	r7,zero,46d4 <_dtoa_r+0x14a0>
    3ef8:	398003cc 	andi	r6,r7,15
    3efc:	300c90fa 	slli	r6,r6,3
    3f00:	01400074 	movhi	r5,1
    3f04:	29753604 	addi	r5,r5,-11048
    3f08:	d9001217 	ldw	r4,72(sp)
    3f0c:	314d883a 	add	r6,r6,r5
    3f10:	30c00117 	ldw	r3,4(r6)
    3f14:	30800017 	ldw	r2,0(r6)
    3f18:	d9401317 	ldw	r5,76(sp)
    3f1c:	3821d13a 	srai	r16,r7,4
    3f20:	100d883a 	mov	r6,r2
    3f24:	180f883a 	mov	r7,r3
    3f28:	00094ec0 	call	94ec <__muldf3>
    3f2c:	1011883a 	mov	r8,r2
    3f30:	1813883a 	mov	r9,r3
    3f34:	1029883a 	mov	r20,r2
    3f38:	182b883a 	mov	r21,r3
    3f3c:	8001e526 	beq	r16,zero,46d4 <_dtoa_r+0x14a0>
    3f40:	05800084 	movi	r22,2
    3f44:	04400074 	movhi	r17,1
    3f48:	8c756804 	addi	r17,r17,-10848
    3f4c:	8080004c 	andi	r2,r16,1
    3f50:	1005003a 	cmpeq	r2,r2,zero
    3f54:	1000081e 	bne	r2,zero,3f78 <_dtoa_r+0xd44>
    3f58:	89800017 	ldw	r6,0(r17)
    3f5c:	89c00117 	ldw	r7,4(r17)
    3f60:	480b883a 	mov	r5,r9
    3f64:	4009883a 	mov	r4,r8
    3f68:	00094ec0 	call	94ec <__muldf3>
    3f6c:	1011883a 	mov	r8,r2
    3f70:	b5800044 	addi	r22,r22,1
    3f74:	1813883a 	mov	r9,r3
    3f78:	8021d07a 	srai	r16,r16,1
    3f7c:	8c400204 	addi	r17,r17,8
    3f80:	803ff21e 	bne	r16,zero,3f4c <_dtoa_r+0xd18>
    3f84:	4029883a 	mov	r20,r8
    3f88:	482b883a 	mov	r21,r9
    3f8c:	003dca06 	br	36b8 <_dtoa_r+0x484>
    3f90:	d9000817 	ldw	r4,32(sp)
    3f94:	2005003a 	cmpeq	r2,r4,zero
    3f98:	1001f61e 	bne	r2,zero,4774 <_dtoa_r+0x1540>
    3f9c:	dc001117 	ldw	r16,68(sp)
    3fa0:	dc801017 	ldw	r18,64(sp)
    3fa4:	18c10cc4 	addi	r3,r3,1075
    3fa8:	003f6106 	br	3d30 <_dtoa_r+0xafc>
    3fac:	d8000b15 	stw	zero,44(sp)
    3fb0:	d9802617 	ldw	r6,152(sp)
    3fb4:	d8c00d17 	ldw	r3,52(sp)
    3fb8:	30800044 	addi	r2,r6,1
    3fbc:	18ad883a 	add	r22,r3,r2
    3fc0:	b13fffc4 	addi	r4,r22,-1
    3fc4:	d9000e15 	stw	r4,56(sp)
    3fc8:	0581f60e 	bge	zero,r22,47a4 <_dtoa_r+0x1570>
    3fcc:	dd800f15 	stw	r22,60(sp)
    3fd0:	003f3006 	br	3c94 <_dtoa_r+0xa60>
    3fd4:	d8000b15 	stw	zero,44(sp)
    3fd8:	d9002617 	ldw	r4,152(sp)
    3fdc:	0101eb0e 	bge	zero,r4,478c <_dtoa_r+0x1558>
    3fe0:	202d883a 	mov	r22,r4
    3fe4:	d9000e15 	stw	r4,56(sp)
    3fe8:	d9000f15 	stw	r4,60(sp)
    3fec:	003f2906 	br	3c94 <_dtoa_r+0xa60>
    3ff0:	01800044 	movi	r6,1
    3ff4:	d9800b15 	stw	r6,44(sp)
    3ff8:	003ff706 	br	3fd8 <_dtoa_r+0xda4>
    3ffc:	01000044 	movi	r4,1
    4000:	d9000b15 	stw	r4,44(sp)
    4004:	003fea06 	br	3fb0 <_dtoa_r+0xd7c>
    4008:	04000c0e 	bge	zero,r16,403c <_dtoa_r+0xe08>
    400c:	d9400717 	ldw	r5,28(sp)
    4010:	d9001617 	ldw	r4,88(sp)
    4014:	01800044 	movi	r6,1
    4018:	0006c6c0 	call	6c6c <__lshift>
    401c:	1009883a 	mov	r4,r2
    4020:	900b883a 	mov	r5,r18
    4024:	d8800715 	stw	r2,28(sp)
    4028:	00064840 	call	6484 <__mcmp>
    402c:	0081e00e 	bge	zero,r2,47b0 <_dtoa_r+0x157c>
    4030:	bdc00044 	addi	r23,r23,1
    4034:	00800e84 	movi	r2,58
    4038:	b881a226 	beq	r23,r2,46c4 <_dtoa_r+0x1490>
    403c:	b7000044 	addi	fp,r22,1
    4040:	b5c00005 	stb	r23,0(r22)
    4044:	003f7406 	br	3e18 <_dtoa_r+0xbe4>
    4048:	00800e44 	movi	r2,57
    404c:	b8819d26 	beq	r23,r2,46c4 <_dtoa_r+0x1490>
    4050:	053ffa0e 	bge	zero,r20,403c <_dtoa_r+0xe08>
    4054:	8dc00c44 	addi	r23,r17,49
    4058:	003ff806 	br	403c <_dtoa_r+0xe08>
    405c:	d9001617 	ldw	r4,88(sp)
    4060:	a80b883a 	mov	r5,r21
    4064:	04000044 	movi	r16,1
    4068:	00063280 	call	6328 <_Bfree>
    406c:	003edf06 	br	3bec <_dtoa_r+0x9b8>
    4070:	d9001617 	ldw	r4,88(sp)
    4074:	980b883a 	mov	r5,r19
    4078:	01800284 	movi	r6,10
    407c:	000f883a 	mov	r7,zero
    4080:	0006fdc0 	call	6fdc <__multadd>
    4084:	1027883a 	mov	r19,r2
    4088:	d8800615 	stw	r2,24(sp)
    408c:	003ebb06 	br	3b7c <_dtoa_r+0x948>
    4090:	d9801117 	ldw	r6,68(sp)
    4094:	d8800d17 	ldw	r2,52(sp)
    4098:	d8000915 	stw	zero,36(sp)
    409c:	308dc83a 	sub	r6,r6,r2
    40a0:	0087c83a 	sub	r3,zero,r2
    40a4:	d9801115 	stw	r6,68(sp)
    40a8:	d8c01015 	stw	r3,64(sp)
    40ac:	003cfe06 	br	34a8 <_dtoa_r+0x274>
    40b0:	018dc83a 	sub	r6,zero,r6
    40b4:	d9801115 	stw	r6,68(sp)
    40b8:	d8000a15 	stw	zero,40(sp)
    40bc:	003cf306 	br	348c <_dtoa_r+0x258>
    40c0:	d9000d17 	ldw	r4,52(sp)
    40c4:	0009db00 	call	9db0 <__floatsidf>
    40c8:	880b883a 	mov	r5,r17
    40cc:	8009883a 	mov	r4,r16
    40d0:	180f883a 	mov	r7,r3
    40d4:	100d883a 	mov	r6,r2
    40d8:	0009b900 	call	9b90 <__nedf2>
    40dc:	103ce126 	beq	r2,zero,3464 <_dtoa_r+0x230>
    40e0:	d9800d17 	ldw	r6,52(sp)
    40e4:	31bfffc4 	addi	r6,r6,-1
    40e8:	d9800d15 	stw	r6,52(sp)
    40ec:	003cdd06 	br	3464 <_dtoa_r+0x230>
    40f0:	d9000717 	ldw	r4,28(sp)
    40f4:	900b883a 	mov	r5,r18
    40f8:	00064840 	call	6484 <__mcmp>
    40fc:	103e8d0e 	bge	r2,zero,3b34 <_dtoa_r+0x900>
    4100:	d9400717 	ldw	r5,28(sp)
    4104:	d9001617 	ldw	r4,88(sp)
    4108:	01800284 	movi	r6,10
    410c:	000f883a 	mov	r7,zero
    4110:	0006fdc0 	call	6fdc <__multadd>
    4114:	d9800d17 	ldw	r6,52(sp)
    4118:	d8800715 	stw	r2,28(sp)
    411c:	31bfffc4 	addi	r6,r6,-1
    4120:	d9800d15 	stw	r6,52(sp)
    4124:	b001a71e 	bne	r22,zero,47c4 <_dtoa_r+0x1590>
    4128:	d8800e17 	ldw	r2,56(sp)
    412c:	d8800f15 	stw	r2,60(sp)
    4130:	003e8006 	br	3b34 <_dtoa_r+0x900>
    4134:	90800417 	ldw	r2,16(r18)
    4138:	1085883a 	add	r2,r2,r2
    413c:	1085883a 	add	r2,r2,r2
    4140:	1485883a 	add	r2,r2,r18
    4144:	11000417 	ldw	r4,16(r2)
    4148:	00063500 	call	6350 <__hi0bits>
    414c:	00c00804 	movi	r3,32
    4150:	1887c83a 	sub	r3,r3,r2
    4154:	003e5a06 	br	3ac0 <_dtoa_r+0x88c>
    4158:	d9400717 	ldw	r5,28(sp)
    415c:	d9801017 	ldw	r6,64(sp)
    4160:	d9001617 	ldw	r4,88(sp)
    4164:	00070dc0 	call	70dc <__pow5mult>
    4168:	d8800715 	stw	r2,28(sp)
    416c:	003e4306 	br	3a7c <_dtoa_r+0x848>
    4170:	d9800f17 	ldw	r6,60(sp)
    4174:	d8800d17 	ldw	r2,52(sp)
    4178:	d9800315 	stw	r6,12(sp)
    417c:	d8800415 	stw	r2,16(sp)
    4180:	d8c00b17 	ldw	r3,44(sp)
    4184:	1805003a 	cmpeq	r2,r3,zero
    4188:	1000e21e 	bne	r2,zero,4514 <_dtoa_r+0x12e0>
    418c:	d9000317 	ldw	r4,12(sp)
    4190:	0005883a 	mov	r2,zero
    4194:	00cff834 	movhi	r3,16352
    4198:	200c90fa 	slli	r6,r4,3
    419c:	01000074 	movhi	r4,1
    41a0:	21353604 	addi	r4,r4,-11048
    41a4:	180b883a 	mov	r5,r3
    41a8:	310d883a 	add	r6,r6,r4
    41ac:	327fff17 	ldw	r9,-4(r6)
    41b0:	323ffe17 	ldw	r8,-8(r6)
    41b4:	1009883a 	mov	r4,r2
    41b8:	480f883a 	mov	r7,r9
    41bc:	400d883a 	mov	r6,r8
    41c0:	00098b00 	call	98b0 <__divdf3>
    41c4:	180b883a 	mov	r5,r3
    41c8:	b00d883a 	mov	r6,r22
    41cc:	b80f883a 	mov	r7,r23
    41d0:	1009883a 	mov	r4,r2
    41d4:	00093f80 	call	93f8 <__subdf3>
    41d8:	a80b883a 	mov	r5,r21
    41dc:	a009883a 	mov	r4,r20
    41e0:	d8c01915 	stw	r3,100(sp)
    41e4:	d8801815 	stw	r2,96(sp)
    41e8:	0009ea80 	call	9ea8 <__fixdfsi>
    41ec:	1009883a 	mov	r4,r2
    41f0:	1027883a 	mov	r19,r2
    41f4:	0009db00 	call	9db0 <__floatsidf>
    41f8:	a80b883a 	mov	r5,r21
    41fc:	a009883a 	mov	r4,r20
    4200:	180f883a 	mov	r7,r3
    4204:	100d883a 	mov	r6,r2
    4208:	00093f80 	call	93f8 <__subdf3>
    420c:	d9801817 	ldw	r6,96(sp)
    4210:	1823883a 	mov	r17,r3
    4214:	d8801415 	stw	r2,80(sp)
    4218:	302d883a 	mov	r22,r6
    421c:	d9800517 	ldw	r6,20(sp)
    4220:	9cc00c04 	addi	r19,r19,48
    4224:	dc401515 	stw	r17,84(sp)
    4228:	d8c01917 	ldw	r3,100(sp)
    422c:	34c00005 	stb	r19,0(r6)
    4230:	d8800517 	ldw	r2,20(sp)
    4234:	d9401917 	ldw	r5,100(sp)
    4238:	d9801417 	ldw	r6,80(sp)
    423c:	b009883a 	mov	r4,r22
    4240:	880f883a 	mov	r7,r17
    4244:	182f883a 	mov	r23,r3
    4248:	17000044 	addi	fp,r2,1
    424c:	0009c180 	call	9c18 <__gtdf2>
    4250:	00804e16 	blt	zero,r2,438c <_dtoa_r+0x1158>
    4254:	d9801417 	ldw	r6,80(sp)
    4258:	0005883a 	mov	r2,zero
    425c:	00cffc34 	movhi	r3,16368
    4260:	180b883a 	mov	r5,r3
    4264:	880f883a 	mov	r7,r17
    4268:	1009883a 	mov	r4,r2
    426c:	00093f80 	call	93f8 <__subdf3>
    4270:	d9401917 	ldw	r5,100(sp)
    4274:	180f883a 	mov	r7,r3
    4278:	b009883a 	mov	r4,r22
    427c:	100d883a 	mov	r6,r2
    4280:	0009c180 	call	9c18 <__gtdf2>
    4284:	00bda216 	blt	zero,r2,3910 <_dtoa_r+0x6dc>
    4288:	d8c00317 	ldw	r3,12(sp)
    428c:	00800044 	movi	r2,1
    4290:	10c01216 	blt	r2,r3,42dc <_dtoa_r+0x10a8>
    4294:	003d4506 	br	37ac <_dtoa_r+0x578>
    4298:	d9801417 	ldw	r6,80(sp)
    429c:	0005883a 	mov	r2,zero
    42a0:	00cffc34 	movhi	r3,16368
    42a4:	180b883a 	mov	r5,r3
    42a8:	880f883a 	mov	r7,r17
    42ac:	1009883a 	mov	r4,r2
    42b0:	00093f80 	call	93f8 <__subdf3>
    42b4:	d9c01b17 	ldw	r7,108(sp)
    42b8:	180b883a 	mov	r5,r3
    42bc:	1009883a 	mov	r4,r2
    42c0:	b00d883a 	mov	r6,r22
    42c4:	0009d280 	call	9d28 <__ltdf2>
    42c8:	103d9116 	blt	r2,zero,3910 <_dtoa_r+0x6dc>
    42cc:	d9800517 	ldw	r6,20(sp)
    42d0:	d9000317 	ldw	r4,12(sp)
    42d4:	3105883a 	add	r2,r6,r4
    42d8:	e0bd3426 	beq	fp,r2,37ac <_dtoa_r+0x578>
    42dc:	04500934 	movhi	r17,16420
    42e0:	0021883a 	mov	r16,zero
    42e4:	b80b883a 	mov	r5,r23
    42e8:	b009883a 	mov	r4,r22
    42ec:	800d883a 	mov	r6,r16
    42f0:	880f883a 	mov	r7,r17
    42f4:	00094ec0 	call	94ec <__muldf3>
    42f8:	d9401517 	ldw	r5,84(sp)
    42fc:	d9001417 	ldw	r4,80(sp)
    4300:	880f883a 	mov	r7,r17
    4304:	000d883a 	mov	r6,zero
    4308:	d8801a15 	stw	r2,104(sp)
    430c:	d8c01b15 	stw	r3,108(sp)
    4310:	00094ec0 	call	94ec <__muldf3>
    4314:	180b883a 	mov	r5,r3
    4318:	1009883a 	mov	r4,r2
    431c:	1823883a 	mov	r17,r3
    4320:	1021883a 	mov	r16,r2
    4324:	0009ea80 	call	9ea8 <__fixdfsi>
    4328:	1009883a 	mov	r4,r2
    432c:	102b883a 	mov	r21,r2
    4330:	0009db00 	call	9db0 <__floatsidf>
    4334:	880b883a 	mov	r5,r17
    4338:	8009883a 	mov	r4,r16
    433c:	180f883a 	mov	r7,r3
    4340:	100d883a 	mov	r6,r2
    4344:	00093f80 	call	93f8 <__subdf3>
    4348:	1021883a 	mov	r16,r2
    434c:	d9001b17 	ldw	r4,108(sp)
    4350:	1823883a 	mov	r17,r3
    4354:	dc001415 	stw	r16,80(sp)
    4358:	ad400c04 	addi	r21,r21,48
    435c:	dc401515 	stw	r17,84(sp)
    4360:	d8801a17 	ldw	r2,104(sp)
    4364:	e5400005 	stb	r21,0(fp)
    4368:	202f883a 	mov	r23,r4
    436c:	d9c01b17 	ldw	r7,108(sp)
    4370:	d9001417 	ldw	r4,80(sp)
    4374:	880b883a 	mov	r5,r17
    4378:	100d883a 	mov	r6,r2
    437c:	102d883a 	mov	r22,r2
    4380:	e7000044 	addi	fp,fp,1
    4384:	0009d280 	call	9d28 <__ltdf2>
    4388:	103fc30e 	bge	r2,zero,4298 <_dtoa_r+0x1064>
    438c:	d9000417 	ldw	r4,16(sp)
    4390:	d9000d15 	stw	r4,52(sp)
    4394:	003d7106 	br	395c <_dtoa_r+0x728>
    4398:	d9801717 	ldw	r6,92(sp)
    439c:	00800084 	movi	r2,2
    43a0:	11bde60e 	bge	r2,r6,3b3c <_dtoa_r+0x908>
    43a4:	203cfb1e 	bne	r4,zero,3794 <_dtoa_r+0x560>
    43a8:	d9001617 	ldw	r4,88(sp)
    43ac:	900b883a 	mov	r5,r18
    43b0:	01800144 	movi	r6,5
    43b4:	000f883a 	mov	r7,zero
    43b8:	0006fdc0 	call	6fdc <__multadd>
    43bc:	d9000717 	ldw	r4,28(sp)
    43c0:	100b883a 	mov	r5,r2
    43c4:	1025883a 	mov	r18,r2
    43c8:	00064840 	call	6484 <__mcmp>
    43cc:	00bcf10e 	bge	zero,r2,3794 <_dtoa_r+0x560>
    43d0:	d8c00d17 	ldw	r3,52(sp)
    43d4:	d9000517 	ldw	r4,20(sp)
    43d8:	d8000615 	stw	zero,24(sp)
    43dc:	18c00044 	addi	r3,r3,1
    43e0:	d8c00d15 	stw	r3,52(sp)
    43e4:	00800c44 	movi	r2,49
    43e8:	27000044 	addi	fp,r4,1
    43ec:	20800005 	stb	r2,0(r4)
    43f0:	003e8906 	br	3e18 <_dtoa_r+0xbe4>
    43f4:	d8c00517 	ldw	r3,20(sp)
    43f8:	003bc206 	br	3304 <_dtoa_r+0xd0>
    43fc:	01800074 	movhi	r6,1
    4400:	31b56804 	addi	r6,r6,-10848
    4404:	30c00917 	ldw	r3,36(r6)
    4408:	30800817 	ldw	r2,32(r6)
    440c:	d9001217 	ldw	r4,72(sp)
    4410:	d9401317 	ldw	r5,76(sp)
    4414:	180f883a 	mov	r7,r3
    4418:	100d883a 	mov	r6,r2
    441c:	00098b00 	call	98b0 <__divdf3>
    4420:	948003cc 	andi	r18,r18,15
    4424:	058000c4 	movi	r22,3
    4428:	1029883a 	mov	r20,r2
    442c:	182b883a 	mov	r21,r3
    4430:	003c8906 	br	3658 <_dtoa_r+0x424>
    4434:	d9001017 	ldw	r4,64(sp)
    4438:	d9800917 	ldw	r6,36(sp)
    443c:	0025883a 	mov	r18,zero
    4440:	1105c83a 	sub	r2,r2,r4
    4444:	2089883a 	add	r4,r4,r2
    4448:	308d883a 	add	r6,r6,r2
    444c:	d9001015 	stw	r4,64(sp)
    4450:	d9800915 	stw	r6,36(sp)
    4454:	003e3206 	br	3d20 <_dtoa_r+0xaec>
    4458:	28800044 	addi	r2,r5,1
    445c:	27000044 	addi	fp,r4,1
    4460:	20800005 	stb	r2,0(r4)
    4464:	003e6c06 	br	3e18 <_dtoa_r+0xbe4>
    4468:	d8800f17 	ldw	r2,60(sp)
    446c:	00bce016 	blt	zero,r2,37f0 <_dtoa_r+0x5bc>
    4470:	d9800f17 	ldw	r6,60(sp)
    4474:	303cc51e 	bne	r6,zero,378c <_dtoa_r+0x558>
    4478:	0005883a 	mov	r2,zero
    447c:	00d00534 	movhi	r3,16404
    4480:	980b883a 	mov	r5,r19
    4484:	180f883a 	mov	r7,r3
    4488:	9009883a 	mov	r4,r18
    448c:	100d883a 	mov	r6,r2
    4490:	00094ec0 	call	94ec <__muldf3>
    4494:	180b883a 	mov	r5,r3
    4498:	a80f883a 	mov	r7,r21
    449c:	1009883a 	mov	r4,r2
    44a0:	a00d883a 	mov	r6,r20
    44a4:	0009ca00 	call	9ca0 <__gedf2>
    44a8:	103cb80e 	bge	r2,zero,378c <_dtoa_r+0x558>
    44ac:	0027883a 	mov	r19,zero
    44b0:	0025883a 	mov	r18,zero
    44b4:	003fc606 	br	43d0 <_dtoa_r+0x119c>
    44b8:	99400117 	ldw	r5,4(r19)
    44bc:	d9001617 	ldw	r4,88(sp)
    44c0:	00068a80 	call	68a8 <_Balloc>
    44c4:	99800417 	ldw	r6,16(r19)
    44c8:	11000304 	addi	r4,r2,12
    44cc:	99400304 	addi	r5,r19,12
    44d0:	318d883a 	add	r6,r6,r6
    44d4:	318d883a 	add	r6,r6,r6
    44d8:	31800204 	addi	r6,r6,8
    44dc:	1023883a 	mov	r17,r2
    44e0:	0000cc00 	call	cc0 <memcpy>
    44e4:	d9001617 	ldw	r4,88(sp)
    44e8:	880b883a 	mov	r5,r17
    44ec:	01800044 	movi	r6,1
    44f0:	0006c6c0 	call	6c6c <__lshift>
    44f4:	100b883a 	mov	r5,r2
    44f8:	003d9c06 	br	3b6c <_dtoa_r+0x938>
    44fc:	00800e44 	movi	r2,57
    4500:	b8807026 	beq	r23,r2,46c4 <_dtoa_r+0x1490>
    4504:	b8800044 	addi	r2,r23,1
    4508:	b7000044 	addi	fp,r22,1
    450c:	b0800005 	stb	r2,0(r22)
    4510:	003e4106 	br	3e18 <_dtoa_r+0xbe4>
    4514:	d8800317 	ldw	r2,12(sp)
    4518:	01800074 	movhi	r6,1
    451c:	31b53604 	addi	r6,r6,-11048
    4520:	b009883a 	mov	r4,r22
    4524:	100e90fa 	slli	r7,r2,3
    4528:	b80b883a 	mov	r5,r23
    452c:	398f883a 	add	r7,r7,r6
    4530:	38bffe17 	ldw	r2,-8(r7)
    4534:	d9800517 	ldw	r6,20(sp)
    4538:	38ffff17 	ldw	r3,-4(r7)
    453c:	37000044 	addi	fp,r6,1
    4540:	180f883a 	mov	r7,r3
    4544:	100d883a 	mov	r6,r2
    4548:	00094ec0 	call	94ec <__muldf3>
    454c:	a80b883a 	mov	r5,r21
    4550:	a009883a 	mov	r4,r20
    4554:	182f883a 	mov	r23,r3
    4558:	102d883a 	mov	r22,r2
    455c:	0009ea80 	call	9ea8 <__fixdfsi>
    4560:	1009883a 	mov	r4,r2
    4564:	1027883a 	mov	r19,r2
    4568:	0009db00 	call	9db0 <__floatsidf>
    456c:	a80b883a 	mov	r5,r21
    4570:	a009883a 	mov	r4,r20
    4574:	180f883a 	mov	r7,r3
    4578:	100d883a 	mov	r6,r2
    457c:	00093f80 	call	93f8 <__subdf3>
    4580:	180b883a 	mov	r5,r3
    4584:	d8c00517 	ldw	r3,20(sp)
    4588:	9cc00c04 	addi	r19,r19,48
    458c:	1009883a 	mov	r4,r2
    4590:	1cc00005 	stb	r19,0(r3)
    4594:	2021883a 	mov	r16,r4
    4598:	d9000317 	ldw	r4,12(sp)
    459c:	00800044 	movi	r2,1
    45a0:	2823883a 	mov	r17,r5
    45a4:	20802226 	beq	r4,r2,4630 <_dtoa_r+0x13fc>
    45a8:	1029883a 	mov	r20,r2
    45ac:	0005883a 	mov	r2,zero
    45b0:	00d00934 	movhi	r3,16420
    45b4:	180f883a 	mov	r7,r3
    45b8:	100d883a 	mov	r6,r2
    45bc:	880b883a 	mov	r5,r17
    45c0:	8009883a 	mov	r4,r16
    45c4:	00094ec0 	call	94ec <__muldf3>
    45c8:	180b883a 	mov	r5,r3
    45cc:	1009883a 	mov	r4,r2
    45d0:	1823883a 	mov	r17,r3
    45d4:	1021883a 	mov	r16,r2
    45d8:	0009ea80 	call	9ea8 <__fixdfsi>
    45dc:	1009883a 	mov	r4,r2
    45e0:	102b883a 	mov	r21,r2
    45e4:	0009db00 	call	9db0 <__floatsidf>
    45e8:	880b883a 	mov	r5,r17
    45ec:	8009883a 	mov	r4,r16
    45f0:	180f883a 	mov	r7,r3
    45f4:	100d883a 	mov	r6,r2
    45f8:	00093f80 	call	93f8 <__subdf3>
    45fc:	180b883a 	mov	r5,r3
    4600:	d8c00517 	ldw	r3,20(sp)
    4604:	1009883a 	mov	r4,r2
    4608:	ad400c04 	addi	r21,r21,48
    460c:	1d05883a 	add	r2,r3,r20
    4610:	15400005 	stb	r21,0(r2)
    4614:	2021883a 	mov	r16,r4
    4618:	d9000317 	ldw	r4,12(sp)
    461c:	a5000044 	addi	r20,r20,1
    4620:	2823883a 	mov	r17,r5
    4624:	a13fe11e 	bne	r20,r4,45ac <_dtoa_r+0x1378>
    4628:	e505883a 	add	r2,fp,r20
    462c:	173fffc4 	addi	fp,r2,-1
    4630:	0025883a 	mov	r18,zero
    4634:	04cff834 	movhi	r19,16352
    4638:	b009883a 	mov	r4,r22
    463c:	b80b883a 	mov	r5,r23
    4640:	900d883a 	mov	r6,r18
    4644:	980f883a 	mov	r7,r19
    4648:	00094780 	call	9478 <__adddf3>
    464c:	180b883a 	mov	r5,r3
    4650:	1009883a 	mov	r4,r2
    4654:	800d883a 	mov	r6,r16
    4658:	880f883a 	mov	r7,r17
    465c:	0009d280 	call	9d28 <__ltdf2>
    4660:	103cab16 	blt	r2,zero,3910 <_dtoa_r+0x6dc>
    4664:	0009883a 	mov	r4,zero
    4668:	980b883a 	mov	r5,r19
    466c:	b80f883a 	mov	r7,r23
    4670:	b00d883a 	mov	r6,r22
    4674:	00093f80 	call	93f8 <__subdf3>
    4678:	180b883a 	mov	r5,r3
    467c:	880f883a 	mov	r7,r17
    4680:	1009883a 	mov	r4,r2
    4684:	800d883a 	mov	r6,r16
    4688:	0009c180 	call	9c18 <__gtdf2>
    468c:	00bc470e 	bge	zero,r2,37ac <_dtoa_r+0x578>
    4690:	00c00c04 	movi	r3,48
    4694:	e73fffc4 	addi	fp,fp,-1
    4698:	e0800007 	ldb	r2,0(fp)
    469c:	10fffd26 	beq	r2,r3,4694 <_dtoa_r+0x1460>
    46a0:	d9800417 	ldw	r6,16(sp)
    46a4:	e7000044 	addi	fp,fp,1
    46a8:	d9800d15 	stw	r6,52(sp)
    46ac:	003cab06 	br	395c <_dtoa_r+0x728>
    46b0:	d8c00f17 	ldw	r3,60(sp)
    46b4:	d9001117 	ldw	r4,68(sp)
    46b8:	20e1c83a 	sub	r16,r4,r3
    46bc:	0007883a 	mov	r3,zero
    46c0:	003d9b06 	br	3d30 <_dtoa_r+0xafc>
    46c4:	00800e44 	movi	r2,57
    46c8:	b0800005 	stb	r2,0(r22)
    46cc:	b5800044 	addi	r22,r22,1
    46d0:	003dc106 	br	3dd8 <_dtoa_r+0xba4>
    46d4:	05800084 	movi	r22,2
    46d8:	003bf706 	br	36b8 <_dtoa_r+0x484>
    46dc:	d9000f17 	ldw	r4,60(sp)
    46e0:	013c000e 	bge	zero,r4,36e4 <_dtoa_r+0x4b0>
    46e4:	d9800e17 	ldw	r6,56(sp)
    46e8:	01bc300e 	bge	zero,r6,37ac <_dtoa_r+0x578>
    46ec:	0005883a 	mov	r2,zero
    46f0:	00d00934 	movhi	r3,16420
    46f4:	a80b883a 	mov	r5,r21
    46f8:	180f883a 	mov	r7,r3
    46fc:	a009883a 	mov	r4,r20
    4700:	100d883a 	mov	r6,r2
    4704:	00094ec0 	call	94ec <__muldf3>
    4708:	b1000044 	addi	r4,r22,1
    470c:	1021883a 	mov	r16,r2
    4710:	1823883a 	mov	r17,r3
    4714:	0009db00 	call	9db0 <__floatsidf>
    4718:	880b883a 	mov	r5,r17
    471c:	8009883a 	mov	r4,r16
    4720:	180f883a 	mov	r7,r3
    4724:	100d883a 	mov	r6,r2
    4728:	00094ec0 	call	94ec <__muldf3>
    472c:	0011883a 	mov	r8,zero
    4730:	02500734 	movhi	r9,16412
    4734:	180b883a 	mov	r5,r3
    4738:	480f883a 	mov	r7,r9
    473c:	1009883a 	mov	r4,r2
    4740:	400d883a 	mov	r6,r8
    4744:	00094780 	call	9478 <__adddf3>
    4748:	102d883a 	mov	r22,r2
    474c:	00bf3034 	movhi	r2,64704
    4750:	10ef883a 	add	r23,r2,r3
    4754:	d8800d17 	ldw	r2,52(sp)
    4758:	d8c00e17 	ldw	r3,56(sp)
    475c:	8029883a 	mov	r20,r16
    4760:	10bfffc4 	addi	r2,r2,-1
    4764:	882b883a 	mov	r21,r17
    4768:	d8800415 	stw	r2,16(sp)
    476c:	d8c00315 	stw	r3,12(sp)
    4770:	003e8306 	br	4180 <_dtoa_r+0xf4c>
    4774:	d8800117 	ldw	r2,4(sp)
    4778:	dc001117 	ldw	r16,68(sp)
    477c:	dc801017 	ldw	r18,64(sp)
    4780:	00c00d84 	movi	r3,54
    4784:	1887c83a 	sub	r3,r3,r2
    4788:	003d6906 	br	3d30 <_dtoa_r+0xafc>
    478c:	01800044 	movi	r6,1
    4790:	3021883a 	mov	r16,r6
    4794:	d9800f15 	stw	r6,60(sp)
    4798:	d9802615 	stw	r6,152(sp)
    479c:	d9800e15 	stw	r6,56(sp)
    47a0:	003b9306 	br	35f0 <_dtoa_r+0x3bc>
    47a4:	b021883a 	mov	r16,r22
    47a8:	dd800f15 	stw	r22,60(sp)
    47ac:	003b9006 	br	35f0 <_dtoa_r+0x3bc>
    47b0:	103e221e 	bne	r2,zero,403c <_dtoa_r+0xe08>
    47b4:	b880004c 	andi	r2,r23,1
    47b8:	1005003a 	cmpeq	r2,r2,zero
    47bc:	103e1f1e 	bne	r2,zero,403c <_dtoa_r+0xe08>
    47c0:	003e1b06 	br	4030 <_dtoa_r+0xdfc>
    47c4:	d9001617 	ldw	r4,88(sp)
    47c8:	980b883a 	mov	r5,r19
    47cc:	01800284 	movi	r6,10
    47d0:	000f883a 	mov	r7,zero
    47d4:	0006fdc0 	call	6fdc <__multadd>
    47d8:	d8c00e17 	ldw	r3,56(sp)
    47dc:	1027883a 	mov	r19,r2
    47e0:	d8c00f15 	stw	r3,60(sp)
    47e4:	003cd306 	br	3b34 <_dtoa_r+0x900>

000047e8 <_fflush_r>:
    47e8:	defffb04 	addi	sp,sp,-20
    47ec:	dcc00315 	stw	r19,12(sp)
    47f0:	dc800215 	stw	r18,8(sp)
    47f4:	dfc00415 	stw	ra,16(sp)
    47f8:	dc400115 	stw	r17,4(sp)
    47fc:	dc000015 	stw	r16,0(sp)
    4800:	2027883a 	mov	r19,r4
    4804:	2825883a 	mov	r18,r5
    4808:	20000226 	beq	r4,zero,4814 <_fflush_r+0x2c>
    480c:	20800e17 	ldw	r2,56(r4)
    4810:	10005626 	beq	r2,zero,496c <_fflush_r+0x184>
    4814:	9100030b 	ldhu	r4,12(r18)
    4818:	20ffffcc 	andi	r3,r4,65535
    481c:	18e0001c 	xori	r3,r3,32768
    4820:	18e00004 	addi	r3,r3,-32768
    4824:	1880020c 	andi	r2,r3,8
    4828:	1000261e 	bne	r2,zero,48c4 <_fflush_r+0xdc>
    482c:	90c00117 	ldw	r3,4(r18)
    4830:	20820014 	ori	r2,r4,2048
    4834:	9080030d 	sth	r2,12(r18)
    4838:	1009883a 	mov	r4,r2
    483c:	00c0400e 	bge	zero,r3,4940 <_fflush_r+0x158>
    4840:	92000a17 	ldw	r8,40(r18)
    4844:	40004026 	beq	r8,zero,4948 <_fflush_r+0x160>
    4848:	2084000c 	andi	r2,r4,4096
    484c:	10005326 	beq	r2,zero,499c <_fflush_r+0x1b4>
    4850:	94001417 	ldw	r16,80(r18)
    4854:	9080030b 	ldhu	r2,12(r18)
    4858:	1080010c 	andi	r2,r2,4
    485c:	1000481e 	bne	r2,zero,4980 <_fflush_r+0x198>
    4860:	91400717 	ldw	r5,28(r18)
    4864:	9809883a 	mov	r4,r19
    4868:	800d883a 	mov	r6,r16
    486c:	000f883a 	mov	r7,zero
    4870:	403ee83a 	callr	r8
    4874:	8080261e 	bne	r16,r2,4910 <_fflush_r+0x128>
    4878:	9080030b 	ldhu	r2,12(r18)
    487c:	91000417 	ldw	r4,16(r18)
    4880:	90000115 	stw	zero,4(r18)
    4884:	10bdffcc 	andi	r2,r2,63487
    4888:	10ffffcc 	andi	r3,r2,65535
    488c:	18c4000c 	andi	r3,r3,4096
    4890:	9080030d 	sth	r2,12(r18)
    4894:	91000015 	stw	r4,0(r18)
    4898:	18002b26 	beq	r3,zero,4948 <_fflush_r+0x160>
    489c:	0007883a 	mov	r3,zero
    48a0:	1805883a 	mov	r2,r3
    48a4:	94001415 	stw	r16,80(r18)
    48a8:	dfc00417 	ldw	ra,16(sp)
    48ac:	dcc00317 	ldw	r19,12(sp)
    48b0:	dc800217 	ldw	r18,8(sp)
    48b4:	dc400117 	ldw	r17,4(sp)
    48b8:	dc000017 	ldw	r16,0(sp)
    48bc:	dec00504 	addi	sp,sp,20
    48c0:	f800283a 	ret
    48c4:	94400417 	ldw	r17,16(r18)
    48c8:	88001f26 	beq	r17,zero,4948 <_fflush_r+0x160>
    48cc:	90800017 	ldw	r2,0(r18)
    48d0:	18c000cc 	andi	r3,r3,3
    48d4:	94400015 	stw	r17,0(r18)
    48d8:	1461c83a 	sub	r16,r2,r17
    48dc:	18002526 	beq	r3,zero,4974 <_fflush_r+0x18c>
    48e0:	0005883a 	mov	r2,zero
    48e4:	90800215 	stw	r2,8(r18)
    48e8:	0400170e 	bge	zero,r16,4948 <_fflush_r+0x160>
    48ec:	90c00917 	ldw	r3,36(r18)
    48f0:	91400717 	ldw	r5,28(r18)
    48f4:	880d883a 	mov	r6,r17
    48f8:	800f883a 	mov	r7,r16
    48fc:	9809883a 	mov	r4,r19
    4900:	183ee83a 	callr	r3
    4904:	88a3883a 	add	r17,r17,r2
    4908:	80a1c83a 	sub	r16,r16,r2
    490c:	00bff616 	blt	zero,r2,48e8 <_fflush_r+0x100>
    4910:	9080030b 	ldhu	r2,12(r18)
    4914:	00ffffc4 	movi	r3,-1
    4918:	10801014 	ori	r2,r2,64
    491c:	9080030d 	sth	r2,12(r18)
    4920:	1805883a 	mov	r2,r3
    4924:	dfc00417 	ldw	ra,16(sp)
    4928:	dcc00317 	ldw	r19,12(sp)
    492c:	dc800217 	ldw	r18,8(sp)
    4930:	dc400117 	ldw	r17,4(sp)
    4934:	dc000017 	ldw	r16,0(sp)
    4938:	dec00504 	addi	sp,sp,20
    493c:	f800283a 	ret
    4940:	90800f17 	ldw	r2,60(r18)
    4944:	00bfbe16 	blt	zero,r2,4840 <_fflush_r+0x58>
    4948:	0007883a 	mov	r3,zero
    494c:	1805883a 	mov	r2,r3
    4950:	dfc00417 	ldw	ra,16(sp)
    4954:	dcc00317 	ldw	r19,12(sp)
    4958:	dc800217 	ldw	r18,8(sp)
    495c:	dc400117 	ldw	r17,4(sp)
    4960:	dc000017 	ldw	r16,0(sp)
    4964:	dec00504 	addi	sp,sp,20
    4968:	f800283a 	ret
    496c:	0004a800 	call	4a80 <__sinit>
    4970:	003fa806 	br	4814 <_fflush_r+0x2c>
    4974:	90800517 	ldw	r2,20(r18)
    4978:	90800215 	stw	r2,8(r18)
    497c:	003fda06 	br	48e8 <_fflush_r+0x100>
    4980:	90800117 	ldw	r2,4(r18)
    4984:	90c00c17 	ldw	r3,48(r18)
    4988:	80a1c83a 	sub	r16,r16,r2
    498c:	183fb426 	beq	r3,zero,4860 <_fflush_r+0x78>
    4990:	90800f17 	ldw	r2,60(r18)
    4994:	80a1c83a 	sub	r16,r16,r2
    4998:	003fb106 	br	4860 <_fflush_r+0x78>
    499c:	91400717 	ldw	r5,28(r18)
    49a0:	9809883a 	mov	r4,r19
    49a4:	000d883a 	mov	r6,zero
    49a8:	01c00044 	movi	r7,1
    49ac:	403ee83a 	callr	r8
    49b0:	1021883a 	mov	r16,r2
    49b4:	00bfffc4 	movi	r2,-1
    49b8:	80800226 	beq	r16,r2,49c4 <_fflush_r+0x1dc>
    49bc:	92000a17 	ldw	r8,40(r18)
    49c0:	003fa406 	br	4854 <_fflush_r+0x6c>
    49c4:	98c00017 	ldw	r3,0(r19)
    49c8:	00800744 	movi	r2,29
    49cc:	18bfde26 	beq	r3,r2,4948 <_fflush_r+0x160>
    49d0:	9080030b 	ldhu	r2,12(r18)
    49d4:	8007883a 	mov	r3,r16
    49d8:	10801014 	ori	r2,r2,64
    49dc:	9080030d 	sth	r2,12(r18)
    49e0:	003fcf06 	br	4920 <_fflush_r+0x138>

000049e4 <fflush>:
    49e4:	01400034 	movhi	r5,0
    49e8:	2951fa04 	addi	r5,r5,18408
    49ec:	2007883a 	mov	r3,r4
    49f0:	20000526 	beq	r4,zero,4a08 <fflush+0x24>
    49f4:	00800074 	movhi	r2,1
    49f8:	10bc5604 	addi	r2,r2,-3752
    49fc:	11000017 	ldw	r4,0(r2)
    4a00:	180b883a 	mov	r5,r3
    4a04:	00047e81 	jmpi	47e8 <_fflush_r>
    4a08:	00800074 	movhi	r2,1
    4a0c:	10bc5704 	addi	r2,r2,-3748
    4a10:	11000017 	ldw	r4,0(r2)
    4a14:	00055b41 	jmpi	55b4 <_fwalk_reent>

00004a18 <std>:
    4a18:	00800034 	movhi	r2,0
    4a1c:	109ef704 	addi	r2,r2,31708
    4a20:	20800b15 	stw	r2,44(r4)
    4a24:	00800034 	movhi	r2,0
    4a28:	109f3204 	addi	r2,r2,31944
    4a2c:	20800815 	stw	r2,32(r4)
    4a30:	00c00034 	movhi	r3,0
    4a34:	18df1304 	addi	r3,r3,31820
    4a38:	00800034 	movhi	r2,0
    4a3c:	109ef904 	addi	r2,r2,31716
    4a40:	2140030d 	sth	r5,12(r4)
    4a44:	2180038d 	sth	r6,14(r4)
    4a48:	20c00915 	stw	r3,36(r4)
    4a4c:	20800a15 	stw	r2,40(r4)
    4a50:	20000015 	stw	zero,0(r4)
    4a54:	20000115 	stw	zero,4(r4)
    4a58:	20000215 	stw	zero,8(r4)
    4a5c:	20000415 	stw	zero,16(r4)
    4a60:	20000515 	stw	zero,20(r4)
    4a64:	20000615 	stw	zero,24(r4)
    4a68:	21000715 	stw	r4,28(r4)
    4a6c:	f800283a 	ret

00004a70 <__sfp_lock_acquire>:
    4a70:	f800283a 	ret

00004a74 <__sfp_lock_release>:
    4a74:	f800283a 	ret

00004a78 <__sinit_lock_acquire>:
    4a78:	f800283a 	ret

00004a7c <__sinit_lock_release>:
    4a7c:	f800283a 	ret

00004a80 <__sinit>:
    4a80:	20800e17 	ldw	r2,56(r4)
    4a84:	defffd04 	addi	sp,sp,-12
    4a88:	dc400115 	stw	r17,4(sp)
    4a8c:	dc000015 	stw	r16,0(sp)
    4a90:	dfc00215 	stw	ra,8(sp)
    4a94:	04400044 	movi	r17,1
    4a98:	01400104 	movi	r5,4
    4a9c:	000d883a 	mov	r6,zero
    4aa0:	2021883a 	mov	r16,r4
    4aa4:	2200bb04 	addi	r8,r4,748
    4aa8:	200f883a 	mov	r7,r4
    4aac:	10000526 	beq	r2,zero,4ac4 <__sinit+0x44>
    4ab0:	dfc00217 	ldw	ra,8(sp)
    4ab4:	dc400117 	ldw	r17,4(sp)
    4ab8:	dc000017 	ldw	r16,0(sp)
    4abc:	dec00304 	addi	sp,sp,12
    4ac0:	f800283a 	ret
    4ac4:	21000117 	ldw	r4,4(r4)
    4ac8:	00800034 	movhi	r2,0
    4acc:	1092d904 	addi	r2,r2,19300
    4ad0:	00c000c4 	movi	r3,3
    4ad4:	80800f15 	stw	r2,60(r16)
    4ad8:	80c0b915 	stw	r3,740(r16)
    4adc:	8200ba15 	stw	r8,744(r16)
    4ae0:	84400e15 	stw	r17,56(r16)
    4ae4:	8000b815 	stw	zero,736(r16)
    4ae8:	0004a180 	call	4a18 <std>
    4aec:	81000217 	ldw	r4,8(r16)
    4af0:	880d883a 	mov	r6,r17
    4af4:	800f883a 	mov	r7,r16
    4af8:	01400284 	movi	r5,10
    4afc:	0004a180 	call	4a18 <std>
    4b00:	81000317 	ldw	r4,12(r16)
    4b04:	800f883a 	mov	r7,r16
    4b08:	01400484 	movi	r5,18
    4b0c:	01800084 	movi	r6,2
    4b10:	dfc00217 	ldw	ra,8(sp)
    4b14:	dc400117 	ldw	r17,4(sp)
    4b18:	dc000017 	ldw	r16,0(sp)
    4b1c:	dec00304 	addi	sp,sp,12
    4b20:	0004a181 	jmpi	4a18 <std>

00004b24 <__fp_lock>:
    4b24:	0005883a 	mov	r2,zero
    4b28:	f800283a 	ret

00004b2c <__fp_unlock>:
    4b2c:	0005883a 	mov	r2,zero
    4b30:	f800283a 	ret

00004b34 <__fp_unlock_all>:
    4b34:	00800074 	movhi	r2,1
    4b38:	10bc5604 	addi	r2,r2,-3752
    4b3c:	11000017 	ldw	r4,0(r2)
    4b40:	01400034 	movhi	r5,0
    4b44:	2952cb04 	addi	r5,r5,19244
    4b48:	000567c1 	jmpi	567c <_fwalk>

00004b4c <__fp_lock_all>:
    4b4c:	00800074 	movhi	r2,1
    4b50:	10bc5604 	addi	r2,r2,-3752
    4b54:	11000017 	ldw	r4,0(r2)
    4b58:	01400034 	movhi	r5,0
    4b5c:	2952c904 	addi	r5,r5,19236
    4b60:	000567c1 	jmpi	567c <_fwalk>

00004b64 <_cleanup_r>:
    4b64:	01400074 	movhi	r5,1
    4b68:	29607704 	addi	r5,r5,-32292
    4b6c:	000567c1 	jmpi	567c <_fwalk>

00004b70 <_cleanup>:
    4b70:	00800074 	movhi	r2,1
    4b74:	10bc5704 	addi	r2,r2,-3748
    4b78:	11000017 	ldw	r4,0(r2)
    4b7c:	0004b641 	jmpi	4b64 <_cleanup_r>

00004b80 <__sfmoreglue>:
    4b80:	defffc04 	addi	sp,sp,-16
    4b84:	dc400115 	stw	r17,4(sp)
    4b88:	2c401724 	muli	r17,r5,92
    4b8c:	dc800215 	stw	r18,8(sp)
    4b90:	2825883a 	mov	r18,r5
    4b94:	89400304 	addi	r5,r17,12
    4b98:	dc000015 	stw	r16,0(sp)
    4b9c:	dfc00315 	stw	ra,12(sp)
    4ba0:	000598c0 	call	598c <_malloc_r>
    4ba4:	0021883a 	mov	r16,zero
    4ba8:	880d883a 	mov	r6,r17
    4bac:	000b883a 	mov	r5,zero
    4bb0:	10000626 	beq	r2,zero,4bcc <__sfmoreglue+0x4c>
    4bb4:	11000304 	addi	r4,r2,12
    4bb8:	14800115 	stw	r18,4(r2)
    4bbc:	10000015 	stw	zero,0(r2)
    4bc0:	11000215 	stw	r4,8(r2)
    4bc4:	1021883a 	mov	r16,r2
    4bc8:	00062900 	call	6290 <memset>
    4bcc:	8005883a 	mov	r2,r16
    4bd0:	dfc00317 	ldw	ra,12(sp)
    4bd4:	dc800217 	ldw	r18,8(sp)
    4bd8:	dc400117 	ldw	r17,4(sp)
    4bdc:	dc000017 	ldw	r16,0(sp)
    4be0:	dec00404 	addi	sp,sp,16
    4be4:	f800283a 	ret

00004be8 <__sfp>:
    4be8:	defffd04 	addi	sp,sp,-12
    4bec:	00800074 	movhi	r2,1
    4bf0:	10bc5704 	addi	r2,r2,-3748
    4bf4:	dc000015 	stw	r16,0(sp)
    4bf8:	14000017 	ldw	r16,0(r2)
    4bfc:	dc400115 	stw	r17,4(sp)
    4c00:	dfc00215 	stw	ra,8(sp)
    4c04:	80800e17 	ldw	r2,56(r16)
    4c08:	2023883a 	mov	r17,r4
    4c0c:	10002626 	beq	r2,zero,4ca8 <__sfp+0xc0>
    4c10:	8400b804 	addi	r16,r16,736
    4c14:	80800117 	ldw	r2,4(r16)
    4c18:	81000217 	ldw	r4,8(r16)
    4c1c:	10ffffc4 	addi	r3,r2,-1
    4c20:	18000916 	blt	r3,zero,4c48 <__sfp+0x60>
    4c24:	2080030f 	ldh	r2,12(r4)
    4c28:	10000b26 	beq	r2,zero,4c58 <__sfp+0x70>
    4c2c:	017fffc4 	movi	r5,-1
    4c30:	00000206 	br	4c3c <__sfp+0x54>
    4c34:	2080030f 	ldh	r2,12(r4)
    4c38:	10000726 	beq	r2,zero,4c58 <__sfp+0x70>
    4c3c:	18ffffc4 	addi	r3,r3,-1
    4c40:	21001704 	addi	r4,r4,92
    4c44:	197ffb1e 	bne	r3,r5,4c34 <__sfp+0x4c>
    4c48:	80800017 	ldw	r2,0(r16)
    4c4c:	10001926 	beq	r2,zero,4cb4 <__sfp+0xcc>
    4c50:	1021883a 	mov	r16,r2
    4c54:	003fef06 	br	4c14 <__sfp+0x2c>
    4c58:	00bfffc4 	movi	r2,-1
    4c5c:	00c00044 	movi	r3,1
    4c60:	2080038d 	sth	r2,14(r4)
    4c64:	20c0030d 	sth	r3,12(r4)
    4c68:	20000015 	stw	zero,0(r4)
    4c6c:	20000215 	stw	zero,8(r4)
    4c70:	20000115 	stw	zero,4(r4)
    4c74:	20000415 	stw	zero,16(r4)
    4c78:	20000515 	stw	zero,20(r4)
    4c7c:	20000615 	stw	zero,24(r4)
    4c80:	20000c15 	stw	zero,48(r4)
    4c84:	20000d15 	stw	zero,52(r4)
    4c88:	20001115 	stw	zero,68(r4)
    4c8c:	20001215 	stw	zero,72(r4)
    4c90:	2005883a 	mov	r2,r4
    4c94:	dfc00217 	ldw	ra,8(sp)
    4c98:	dc400117 	ldw	r17,4(sp)
    4c9c:	dc000017 	ldw	r16,0(sp)
    4ca0:	dec00304 	addi	sp,sp,12
    4ca4:	f800283a 	ret
    4ca8:	8009883a 	mov	r4,r16
    4cac:	0004a800 	call	4a80 <__sinit>
    4cb0:	003fd706 	br	4c10 <__sfp+0x28>
    4cb4:	8809883a 	mov	r4,r17
    4cb8:	01400104 	movi	r5,4
    4cbc:	0004b800 	call	4b80 <__sfmoreglue>
    4cc0:	80800015 	stw	r2,0(r16)
    4cc4:	103fe21e 	bne	r2,zero,4c50 <__sfp+0x68>
    4cc8:	00800304 	movi	r2,12
    4ccc:	0009883a 	mov	r4,zero
    4cd0:	88800015 	stw	r2,0(r17)
    4cd4:	003fee06 	br	4c90 <__sfp+0xa8>

00004cd8 <_malloc_trim_r>:
    4cd8:	defffb04 	addi	sp,sp,-20
    4cdc:	dcc00315 	stw	r19,12(sp)
    4ce0:	04c00074 	movhi	r19,1
    4ce4:	9cf6d204 	addi	r19,r19,-9400
    4ce8:	dc800215 	stw	r18,8(sp)
    4cec:	dc400115 	stw	r17,4(sp)
    4cf0:	dc000015 	stw	r16,0(sp)
    4cf4:	2823883a 	mov	r17,r5
    4cf8:	2025883a 	mov	r18,r4
    4cfc:	dfc00415 	stw	ra,16(sp)
    4d00:	000ad700 	call	ad70 <__malloc_lock>
    4d04:	98800217 	ldw	r2,8(r19)
    4d08:	9009883a 	mov	r4,r18
    4d0c:	000b883a 	mov	r5,zero
    4d10:	10c00117 	ldw	r3,4(r2)
    4d14:	00bfff04 	movi	r2,-4
    4d18:	18a0703a 	and	r16,r3,r2
    4d1c:	8463c83a 	sub	r17,r16,r17
    4d20:	8c43fbc4 	addi	r17,r17,4079
    4d24:	8822d33a 	srli	r17,r17,12
    4d28:	0083ffc4 	movi	r2,4095
    4d2c:	8c7fffc4 	addi	r17,r17,-1
    4d30:	8822933a 	slli	r17,r17,12
    4d34:	1440060e 	bge	r2,r17,4d50 <_malloc_trim_r+0x78>
    4d38:	0007b6c0 	call	7b6c <_sbrk_r>
    4d3c:	98c00217 	ldw	r3,8(r19)
    4d40:	9009883a 	mov	r4,r18
    4d44:	044bc83a 	sub	r5,zero,r17
    4d48:	80c7883a 	add	r3,r16,r3
    4d4c:	10c00926 	beq	r2,r3,4d74 <_malloc_trim_r+0x9c>
    4d50:	000ad900 	call	ad90 <__malloc_unlock>
    4d54:	0005883a 	mov	r2,zero
    4d58:	dfc00417 	ldw	ra,16(sp)
    4d5c:	dcc00317 	ldw	r19,12(sp)
    4d60:	dc800217 	ldw	r18,8(sp)
    4d64:	dc400117 	ldw	r17,4(sp)
    4d68:	dc000017 	ldw	r16,0(sp)
    4d6c:	dec00504 	addi	sp,sp,20
    4d70:	f800283a 	ret
    4d74:	9009883a 	mov	r4,r18
    4d78:	0007b6c0 	call	7b6c <_sbrk_r>
    4d7c:	844dc83a 	sub	r6,r16,r17
    4d80:	00ffffc4 	movi	r3,-1
    4d84:	9009883a 	mov	r4,r18
    4d88:	000b883a 	mov	r5,zero
    4d8c:	01c00074 	movhi	r7,1
    4d90:	39c30a04 	addi	r7,r7,3112
    4d94:	31800054 	ori	r6,r6,1
    4d98:	10c00926 	beq	r2,r3,4dc0 <_malloc_trim_r+0xe8>
    4d9c:	38800017 	ldw	r2,0(r7)
    4da0:	98c00217 	ldw	r3,8(r19)
    4da4:	9009883a 	mov	r4,r18
    4da8:	1445c83a 	sub	r2,r2,r17
    4dac:	38800015 	stw	r2,0(r7)
    4db0:	19800115 	stw	r6,4(r3)
    4db4:	000ad900 	call	ad90 <__malloc_unlock>
    4db8:	00800044 	movi	r2,1
    4dbc:	003fe606 	br	4d58 <_malloc_trim_r+0x80>
    4dc0:	0007b6c0 	call	7b6c <_sbrk_r>
    4dc4:	99800217 	ldw	r6,8(r19)
    4dc8:	100f883a 	mov	r7,r2
    4dcc:	9009883a 	mov	r4,r18
    4dd0:	1187c83a 	sub	r3,r2,r6
    4dd4:	008003c4 	movi	r2,15
    4dd8:	19400054 	ori	r5,r3,1
    4ddc:	10ffdc0e 	bge	r2,r3,4d50 <_malloc_trim_r+0x78>
    4de0:	00800074 	movhi	r2,1
    4de4:	10bc5b04 	addi	r2,r2,-3732
    4de8:	10c00017 	ldw	r3,0(r2)
    4dec:	00800074 	movhi	r2,1
    4df0:	10830a04 	addi	r2,r2,3112
    4df4:	31400115 	stw	r5,4(r6)
    4df8:	38c7c83a 	sub	r3,r7,r3
    4dfc:	10c00015 	stw	r3,0(r2)
    4e00:	003fd306 	br	4d50 <_malloc_trim_r+0x78>

00004e04 <_free_r>:
    4e04:	defffd04 	addi	sp,sp,-12
    4e08:	dc400115 	stw	r17,4(sp)
    4e0c:	dc000015 	stw	r16,0(sp)
    4e10:	dfc00215 	stw	ra,8(sp)
    4e14:	2821883a 	mov	r16,r5
    4e18:	2023883a 	mov	r17,r4
    4e1c:	28005a26 	beq	r5,zero,4f88 <_free_r+0x184>
    4e20:	000ad700 	call	ad70 <__malloc_lock>
    4e24:	823ffe04 	addi	r8,r16,-8
    4e28:	41400117 	ldw	r5,4(r8)
    4e2c:	00bfff84 	movi	r2,-2
    4e30:	02800074 	movhi	r10,1
    4e34:	52b6d204 	addi	r10,r10,-9400
    4e38:	288e703a 	and	r7,r5,r2
    4e3c:	41cd883a 	add	r6,r8,r7
    4e40:	30c00117 	ldw	r3,4(r6)
    4e44:	51000217 	ldw	r4,8(r10)
    4e48:	00bfff04 	movi	r2,-4
    4e4c:	1892703a 	and	r9,r3,r2
    4e50:	5017883a 	mov	r11,r10
    4e54:	31006726 	beq	r6,r4,4ff4 <_free_r+0x1f0>
    4e58:	2880004c 	andi	r2,r5,1
    4e5c:	1005003a 	cmpeq	r2,r2,zero
    4e60:	32400115 	stw	r9,4(r6)
    4e64:	10001a1e 	bne	r2,zero,4ed0 <_free_r+0xcc>
    4e68:	000b883a 	mov	r5,zero
    4e6c:	3247883a 	add	r3,r6,r9
    4e70:	18800117 	ldw	r2,4(r3)
    4e74:	1080004c 	andi	r2,r2,1
    4e78:	1000231e 	bne	r2,zero,4f08 <_free_r+0x104>
    4e7c:	280ac03a 	cmpne	r5,r5,zero
    4e80:	3a4f883a 	add	r7,r7,r9
    4e84:	2800451e 	bne	r5,zero,4f9c <_free_r+0x198>
    4e88:	31000217 	ldw	r4,8(r6)
    4e8c:	00800074 	movhi	r2,1
    4e90:	10b6d404 	addi	r2,r2,-9392
    4e94:	20807b26 	beq	r4,r2,5084 <_free_r+0x280>
    4e98:	30800317 	ldw	r2,12(r6)
    4e9c:	3a07883a 	add	r3,r7,r8
    4ea0:	19c00015 	stw	r7,0(r3)
    4ea4:	11000215 	stw	r4,8(r2)
    4ea8:	20800315 	stw	r2,12(r4)
    4eac:	38800054 	ori	r2,r7,1
    4eb0:	40800115 	stw	r2,4(r8)
    4eb4:	28001a26 	beq	r5,zero,4f20 <_free_r+0x11c>
    4eb8:	8809883a 	mov	r4,r17
    4ebc:	dfc00217 	ldw	ra,8(sp)
    4ec0:	dc400117 	ldw	r17,4(sp)
    4ec4:	dc000017 	ldw	r16,0(sp)
    4ec8:	dec00304 	addi	sp,sp,12
    4ecc:	000ad901 	jmpi	ad90 <__malloc_unlock>
    4ed0:	80bffe17 	ldw	r2,-8(r16)
    4ed4:	50c00204 	addi	r3,r10,8
    4ed8:	4091c83a 	sub	r8,r8,r2
    4edc:	41000217 	ldw	r4,8(r8)
    4ee0:	388f883a 	add	r7,r7,r2
    4ee4:	20c06126 	beq	r4,r3,506c <_free_r+0x268>
    4ee8:	40800317 	ldw	r2,12(r8)
    4eec:	3247883a 	add	r3,r6,r9
    4ef0:	000b883a 	mov	r5,zero
    4ef4:	11000215 	stw	r4,8(r2)
    4ef8:	20800315 	stw	r2,12(r4)
    4efc:	18800117 	ldw	r2,4(r3)
    4f00:	1080004c 	andi	r2,r2,1
    4f04:	103fdd26 	beq	r2,zero,4e7c <_free_r+0x78>
    4f08:	38800054 	ori	r2,r7,1
    4f0c:	3a07883a 	add	r3,r7,r8
    4f10:	280ac03a 	cmpne	r5,r5,zero
    4f14:	40800115 	stw	r2,4(r8)
    4f18:	19c00015 	stw	r7,0(r3)
    4f1c:	283fe61e 	bne	r5,zero,4eb8 <_free_r+0xb4>
    4f20:	00807fc4 	movi	r2,511
    4f24:	11c01f2e 	bgeu	r2,r7,4fa4 <_free_r+0x1a0>
    4f28:	3806d27a 	srli	r3,r7,9
    4f2c:	1800481e 	bne	r3,zero,5050 <_free_r+0x24c>
    4f30:	3804d0fa 	srli	r2,r7,3
    4f34:	100690fa 	slli	r3,r2,3
    4f38:	1acd883a 	add	r6,r3,r11
    4f3c:	31400217 	ldw	r5,8(r6)
    4f40:	31405926 	beq	r6,r5,50a8 <_free_r+0x2a4>
    4f44:	28800117 	ldw	r2,4(r5)
    4f48:	00ffff04 	movi	r3,-4
    4f4c:	10c4703a 	and	r2,r2,r3
    4f50:	3880022e 	bgeu	r7,r2,4f5c <_free_r+0x158>
    4f54:	29400217 	ldw	r5,8(r5)
    4f58:	317ffa1e 	bne	r6,r5,4f44 <_free_r+0x140>
    4f5c:	29800317 	ldw	r6,12(r5)
    4f60:	41800315 	stw	r6,12(r8)
    4f64:	41400215 	stw	r5,8(r8)
    4f68:	8809883a 	mov	r4,r17
    4f6c:	2a000315 	stw	r8,12(r5)
    4f70:	32000215 	stw	r8,8(r6)
    4f74:	dfc00217 	ldw	ra,8(sp)
    4f78:	dc400117 	ldw	r17,4(sp)
    4f7c:	dc000017 	ldw	r16,0(sp)
    4f80:	dec00304 	addi	sp,sp,12
    4f84:	000ad901 	jmpi	ad90 <__malloc_unlock>
    4f88:	dfc00217 	ldw	ra,8(sp)
    4f8c:	dc400117 	ldw	r17,4(sp)
    4f90:	dc000017 	ldw	r16,0(sp)
    4f94:	dec00304 	addi	sp,sp,12
    4f98:	f800283a 	ret
    4f9c:	31000217 	ldw	r4,8(r6)
    4fa0:	003fbd06 	br	4e98 <_free_r+0x94>
    4fa4:	3806d0fa 	srli	r3,r7,3
    4fa8:	00800044 	movi	r2,1
    4fac:	51400117 	ldw	r5,4(r10)
    4fb0:	180890fa 	slli	r4,r3,3
    4fb4:	1807d0ba 	srai	r3,r3,2
    4fb8:	22c9883a 	add	r4,r4,r11
    4fbc:	21800217 	ldw	r6,8(r4)
    4fc0:	10c4983a 	sll	r2,r2,r3
    4fc4:	41000315 	stw	r4,12(r8)
    4fc8:	41800215 	stw	r6,8(r8)
    4fcc:	288ab03a 	or	r5,r5,r2
    4fd0:	22000215 	stw	r8,8(r4)
    4fd4:	8809883a 	mov	r4,r17
    4fd8:	51400115 	stw	r5,4(r10)
    4fdc:	32000315 	stw	r8,12(r6)
    4fe0:	dfc00217 	ldw	ra,8(sp)
    4fe4:	dc400117 	ldw	r17,4(sp)
    4fe8:	dc000017 	ldw	r16,0(sp)
    4fec:	dec00304 	addi	sp,sp,12
    4ff0:	000ad901 	jmpi	ad90 <__malloc_unlock>
    4ff4:	2880004c 	andi	r2,r5,1
    4ff8:	3a4d883a 	add	r6,r7,r9
    4ffc:	1000071e 	bne	r2,zero,501c <_free_r+0x218>
    5000:	80bffe17 	ldw	r2,-8(r16)
    5004:	4091c83a 	sub	r8,r8,r2
    5008:	41000317 	ldw	r4,12(r8)
    500c:	40c00217 	ldw	r3,8(r8)
    5010:	308d883a 	add	r6,r6,r2
    5014:	20c00215 	stw	r3,8(r4)
    5018:	19000315 	stw	r4,12(r3)
    501c:	00800074 	movhi	r2,1
    5020:	10bc5a04 	addi	r2,r2,-3736
    5024:	11000017 	ldw	r4,0(r2)
    5028:	30c00054 	ori	r3,r6,1
    502c:	52000215 	stw	r8,8(r10)
    5030:	40c00115 	stw	r3,4(r8)
    5034:	313fa036 	bltu	r6,r4,4eb8 <_free_r+0xb4>
    5038:	00800074 	movhi	r2,1
    503c:	10830004 	addi	r2,r2,3072
    5040:	11400017 	ldw	r5,0(r2)
    5044:	8809883a 	mov	r4,r17
    5048:	0004cd80 	call	4cd8 <_malloc_trim_r>
    504c:	003f9a06 	br	4eb8 <_free_r+0xb4>
    5050:	00800104 	movi	r2,4
    5054:	10c0072e 	bgeu	r2,r3,5074 <_free_r+0x270>
    5058:	00800504 	movi	r2,20
    505c:	10c01936 	bltu	r2,r3,50c4 <_free_r+0x2c0>
    5060:	188016c4 	addi	r2,r3,91
    5064:	100690fa 	slli	r3,r2,3
    5068:	003fb306 	br	4f38 <_free_r+0x134>
    506c:	01400044 	movi	r5,1
    5070:	003f7e06 	br	4e6c <_free_r+0x68>
    5074:	3804d1ba 	srli	r2,r7,6
    5078:	10800e04 	addi	r2,r2,56
    507c:	100690fa 	slli	r3,r2,3
    5080:	003fad06 	br	4f38 <_free_r+0x134>
    5084:	22000315 	stw	r8,12(r4)
    5088:	22000215 	stw	r8,8(r4)
    508c:	3a05883a 	add	r2,r7,r8
    5090:	38c00054 	ori	r3,r7,1
    5094:	11c00015 	stw	r7,0(r2)
    5098:	41000215 	stw	r4,8(r8)
    509c:	40c00115 	stw	r3,4(r8)
    50a0:	41000315 	stw	r4,12(r8)
    50a4:	003f8406 	br	4eb8 <_free_r+0xb4>
    50a8:	1005d0ba 	srai	r2,r2,2
    50ac:	00c00044 	movi	r3,1
    50b0:	51000117 	ldw	r4,4(r10)
    50b4:	1886983a 	sll	r3,r3,r2
    50b8:	20c8b03a 	or	r4,r4,r3
    50bc:	51000115 	stw	r4,4(r10)
    50c0:	003fa706 	br	4f60 <_free_r+0x15c>
    50c4:	00801504 	movi	r2,84
    50c8:	10c00436 	bltu	r2,r3,50dc <_free_r+0x2d8>
    50cc:	3804d33a 	srli	r2,r7,12
    50d0:	10801b84 	addi	r2,r2,110
    50d4:	100690fa 	slli	r3,r2,3
    50d8:	003f9706 	br	4f38 <_free_r+0x134>
    50dc:	00805504 	movi	r2,340
    50e0:	10c00436 	bltu	r2,r3,50f4 <_free_r+0x2f0>
    50e4:	3804d3fa 	srli	r2,r7,15
    50e8:	10801dc4 	addi	r2,r2,119
    50ec:	100690fa 	slli	r3,r2,3
    50f0:	003f9106 	br	4f38 <_free_r+0x134>
    50f4:	00815504 	movi	r2,1364
    50f8:	10c0032e 	bgeu	r2,r3,5108 <_free_r+0x304>
    50fc:	00801f84 	movi	r2,126
    5100:	00c0fc04 	movi	r3,1008
    5104:	003f8c06 	br	4f38 <_free_r+0x134>
    5108:	3804d4ba 	srli	r2,r7,18
    510c:	10801f04 	addi	r2,r2,124
    5110:	100690fa 	slli	r3,r2,3
    5114:	003f8806 	br	4f38 <_free_r+0x134>

00005118 <__sfvwrite_r>:
    5118:	30800217 	ldw	r2,8(r6)
    511c:	defff504 	addi	sp,sp,-44
    5120:	df000915 	stw	fp,36(sp)
    5124:	dd800715 	stw	r22,28(sp)
    5128:	dc800315 	stw	r18,12(sp)
    512c:	dfc00a15 	stw	ra,40(sp)
    5130:	ddc00815 	stw	r23,32(sp)
    5134:	dd400615 	stw	r21,24(sp)
    5138:	dd000515 	stw	r20,20(sp)
    513c:	dcc00415 	stw	r19,16(sp)
    5140:	dc400215 	stw	r17,8(sp)
    5144:	dc000115 	stw	r16,4(sp)
    5148:	302d883a 	mov	r22,r6
    514c:	2039883a 	mov	fp,r4
    5150:	2825883a 	mov	r18,r5
    5154:	10001c26 	beq	r2,zero,51c8 <__sfvwrite_r+0xb0>
    5158:	29c0030b 	ldhu	r7,12(r5)
    515c:	3880020c 	andi	r2,r7,8
    5160:	10002726 	beq	r2,zero,5200 <__sfvwrite_r+0xe8>
    5164:	28800417 	ldw	r2,16(r5)
    5168:	10002526 	beq	r2,zero,5200 <__sfvwrite_r+0xe8>
    516c:	3880008c 	andi	r2,r7,2
    5170:	b5400017 	ldw	r21,0(r22)
    5174:	10002826 	beq	r2,zero,5218 <__sfvwrite_r+0x100>
    5178:	0021883a 	mov	r16,zero
    517c:	0023883a 	mov	r17,zero
    5180:	880d883a 	mov	r6,r17
    5184:	e009883a 	mov	r4,fp
    5188:	00810004 	movi	r2,1024
    518c:	80006e26 	beq	r16,zero,5348 <__sfvwrite_r+0x230>
    5190:	800f883a 	mov	r7,r16
    5194:	91400717 	ldw	r5,28(r18)
    5198:	1400012e 	bgeu	r2,r16,51a0 <__sfvwrite_r+0x88>
    519c:	100f883a 	mov	r7,r2
    51a0:	90c00917 	ldw	r3,36(r18)
    51a4:	183ee83a 	callr	r3
    51a8:	1007883a 	mov	r3,r2
    51ac:	80a1c83a 	sub	r16,r16,r2
    51b0:	88a3883a 	add	r17,r17,r2
    51b4:	00806d0e 	bge	zero,r2,536c <__sfvwrite_r+0x254>
    51b8:	b0800217 	ldw	r2,8(r22)
    51bc:	10c5c83a 	sub	r2,r2,r3
    51c0:	b0800215 	stw	r2,8(r22)
    51c4:	103fee1e 	bne	r2,zero,5180 <__sfvwrite_r+0x68>
    51c8:	0009883a 	mov	r4,zero
    51cc:	2005883a 	mov	r2,r4
    51d0:	dfc00a17 	ldw	ra,40(sp)
    51d4:	df000917 	ldw	fp,36(sp)
    51d8:	ddc00817 	ldw	r23,32(sp)
    51dc:	dd800717 	ldw	r22,28(sp)
    51e0:	dd400617 	ldw	r21,24(sp)
    51e4:	dd000517 	ldw	r20,20(sp)
    51e8:	dcc00417 	ldw	r19,16(sp)
    51ec:	dc800317 	ldw	r18,12(sp)
    51f0:	dc400217 	ldw	r17,8(sp)
    51f4:	dc000117 	ldw	r16,4(sp)
    51f8:	dec00b04 	addi	sp,sp,44
    51fc:	f800283a 	ret
    5200:	0002ee00 	call	2ee0 <__swsetup_r>
    5204:	1000e41e 	bne	r2,zero,5598 <__sfvwrite_r+0x480>
    5208:	91c0030b 	ldhu	r7,12(r18)
    520c:	b5400017 	ldw	r21,0(r22)
    5210:	3880008c 	andi	r2,r7,2
    5214:	103fd81e 	bne	r2,zero,5178 <__sfvwrite_r+0x60>
    5218:	3880004c 	andi	r2,r7,1
    521c:	1005003a 	cmpeq	r2,r2,zero
    5220:	10005726 	beq	r2,zero,5380 <__sfvwrite_r+0x268>
    5224:	0029883a 	mov	r20,zero
    5228:	002f883a 	mov	r23,zero
    522c:	a0004226 	beq	r20,zero,5338 <__sfvwrite_r+0x220>
    5230:	3880800c 	andi	r2,r7,512
    5234:	94000217 	ldw	r16,8(r18)
    5238:	10008b26 	beq	r2,zero,5468 <__sfvwrite_r+0x350>
    523c:	800d883a 	mov	r6,r16
    5240:	a400a536 	bltu	r20,r16,54d8 <__sfvwrite_r+0x3c0>
    5244:	3881200c 	andi	r2,r7,1152
    5248:	10002726 	beq	r2,zero,52e8 <__sfvwrite_r+0x1d0>
    524c:	90800517 	ldw	r2,20(r18)
    5250:	92000417 	ldw	r8,16(r18)
    5254:	91400017 	ldw	r5,0(r18)
    5258:	1087883a 	add	r3,r2,r2
    525c:	1887883a 	add	r3,r3,r2
    5260:	1808d7fa 	srli	r4,r3,31
    5264:	2a21c83a 	sub	r16,r5,r8
    5268:	80800044 	addi	r2,r16,1
    526c:	20c9883a 	add	r4,r4,r3
    5270:	2027d07a 	srai	r19,r4,1
    5274:	a085883a 	add	r2,r20,r2
    5278:	980d883a 	mov	r6,r19
    527c:	9880022e 	bgeu	r19,r2,5288 <__sfvwrite_r+0x170>
    5280:	1027883a 	mov	r19,r2
    5284:	100d883a 	mov	r6,r2
    5288:	3881000c 	andi	r2,r7,1024
    528c:	1000b826 	beq	r2,zero,5570 <__sfvwrite_r+0x458>
    5290:	300b883a 	mov	r5,r6
    5294:	e009883a 	mov	r4,fp
    5298:	000598c0 	call	598c <_malloc_r>
    529c:	10003126 	beq	r2,zero,5364 <__sfvwrite_r+0x24c>
    52a0:	91400417 	ldw	r5,16(r18)
    52a4:	1009883a 	mov	r4,r2
    52a8:	800d883a 	mov	r6,r16
    52ac:	1023883a 	mov	r17,r2
    52b0:	0000cc00 	call	cc0 <memcpy>
    52b4:	90c0030b 	ldhu	r3,12(r18)
    52b8:	00beffc4 	movi	r2,-1025
    52bc:	1886703a 	and	r3,r3,r2
    52c0:	18c02014 	ori	r3,r3,128
    52c4:	90c0030d 	sth	r3,12(r18)
    52c8:	9c07c83a 	sub	r3,r19,r16
    52cc:	8c05883a 	add	r2,r17,r16
    52d0:	a00d883a 	mov	r6,r20
    52d4:	a021883a 	mov	r16,r20
    52d8:	90800015 	stw	r2,0(r18)
    52dc:	90c00215 	stw	r3,8(r18)
    52e0:	94400415 	stw	r17,16(r18)
    52e4:	94c00515 	stw	r19,20(r18)
    52e8:	91000017 	ldw	r4,0(r18)
    52ec:	b80b883a 	mov	r5,r23
    52f0:	a023883a 	mov	r17,r20
    52f4:	00061b00 	call	61b0 <memmove>
    52f8:	90c00217 	ldw	r3,8(r18)
    52fc:	90800017 	ldw	r2,0(r18)
    5300:	a027883a 	mov	r19,r20
    5304:	1c07c83a 	sub	r3,r3,r16
    5308:	1405883a 	add	r2,r2,r16
    530c:	90c00215 	stw	r3,8(r18)
    5310:	a021883a 	mov	r16,r20
    5314:	90800015 	stw	r2,0(r18)
    5318:	b0800217 	ldw	r2,8(r22)
    531c:	1405c83a 	sub	r2,r2,r16
    5320:	b0800215 	stw	r2,8(r22)
    5324:	103fa826 	beq	r2,zero,51c8 <__sfvwrite_r+0xb0>
    5328:	a469c83a 	sub	r20,r20,r17
    532c:	91c0030b 	ldhu	r7,12(r18)
    5330:	bcef883a 	add	r23,r23,r19
    5334:	a03fbe1e 	bne	r20,zero,5230 <__sfvwrite_r+0x118>
    5338:	adc00017 	ldw	r23,0(r21)
    533c:	ad000117 	ldw	r20,4(r21)
    5340:	ad400204 	addi	r21,r21,8
    5344:	003fb906 	br	522c <__sfvwrite_r+0x114>
    5348:	ac400017 	ldw	r17,0(r21)
    534c:	ac000117 	ldw	r16,4(r21)
    5350:	ad400204 	addi	r21,r21,8
    5354:	003f8a06 	br	5180 <__sfvwrite_r+0x68>
    5358:	91400417 	ldw	r5,16(r18)
    535c:	e009883a 	mov	r4,fp
    5360:	0004e040 	call	4e04 <_free_r>
    5364:	00800304 	movi	r2,12
    5368:	e0800015 	stw	r2,0(fp)
    536c:	9080030b 	ldhu	r2,12(r18)
    5370:	013fffc4 	movi	r4,-1
    5374:	10801014 	ori	r2,r2,64
    5378:	9080030d 	sth	r2,12(r18)
    537c:	003f9306 	br	51cc <__sfvwrite_r+0xb4>
    5380:	0027883a 	mov	r19,zero
    5384:	002f883a 	mov	r23,zero
    5388:	d8000015 	stw	zero,0(sp)
    538c:	0029883a 	mov	r20,zero
    5390:	98001e26 	beq	r19,zero,540c <__sfvwrite_r+0x2f4>
    5394:	d8c00017 	ldw	r3,0(sp)
    5398:	1804c03a 	cmpne	r2,r3,zero
    539c:	10005e26 	beq	r2,zero,5518 <__sfvwrite_r+0x400>
    53a0:	9821883a 	mov	r16,r19
    53a4:	a4c0012e 	bgeu	r20,r19,53ac <__sfvwrite_r+0x294>
    53a8:	a021883a 	mov	r16,r20
    53ac:	91000017 	ldw	r4,0(r18)
    53b0:	90800417 	ldw	r2,16(r18)
    53b4:	91800217 	ldw	r6,8(r18)
    53b8:	91c00517 	ldw	r7,20(r18)
    53bc:	1100022e 	bgeu	r2,r4,53c8 <__sfvwrite_r+0x2b0>
    53c0:	31e3883a 	add	r17,r6,r7
    53c4:	8c001616 	blt	r17,r16,5420 <__sfvwrite_r+0x308>
    53c8:	81c03816 	blt	r16,r7,54ac <__sfvwrite_r+0x394>
    53cc:	90c00917 	ldw	r3,36(r18)
    53d0:	91400717 	ldw	r5,28(r18)
    53d4:	e009883a 	mov	r4,fp
    53d8:	b80d883a 	mov	r6,r23
    53dc:	183ee83a 	callr	r3
    53e0:	1023883a 	mov	r17,r2
    53e4:	00bfe10e 	bge	zero,r2,536c <__sfvwrite_r+0x254>
    53e8:	a469c83a 	sub	r20,r20,r17
    53ec:	a0001826 	beq	r20,zero,5450 <__sfvwrite_r+0x338>
    53f0:	b0800217 	ldw	r2,8(r22)
    53f4:	1445c83a 	sub	r2,r2,r17
    53f8:	b0800215 	stw	r2,8(r22)
    53fc:	103f7226 	beq	r2,zero,51c8 <__sfvwrite_r+0xb0>
    5400:	9c67c83a 	sub	r19,r19,r17
    5404:	bc6f883a 	add	r23,r23,r17
    5408:	983fe21e 	bne	r19,zero,5394 <__sfvwrite_r+0x27c>
    540c:	adc00017 	ldw	r23,0(r21)
    5410:	acc00117 	ldw	r19,4(r21)
    5414:	ad400204 	addi	r21,r21,8
    5418:	d8000015 	stw	zero,0(sp)
    541c:	003fdc06 	br	5390 <__sfvwrite_r+0x278>
    5420:	b80b883a 	mov	r5,r23
    5424:	880d883a 	mov	r6,r17
    5428:	00061b00 	call	61b0 <memmove>
    542c:	90c00017 	ldw	r3,0(r18)
    5430:	e009883a 	mov	r4,fp
    5434:	900b883a 	mov	r5,r18
    5438:	1c47883a 	add	r3,r3,r17
    543c:	90c00015 	stw	r3,0(r18)
    5440:	00047e80 	call	47e8 <_fflush_r>
    5444:	103fc91e 	bne	r2,zero,536c <__sfvwrite_r+0x254>
    5448:	a469c83a 	sub	r20,r20,r17
    544c:	a03fe81e 	bne	r20,zero,53f0 <__sfvwrite_r+0x2d8>
    5450:	e009883a 	mov	r4,fp
    5454:	900b883a 	mov	r5,r18
    5458:	00047e80 	call	47e8 <_fflush_r>
    545c:	103fc31e 	bne	r2,zero,536c <__sfvwrite_r+0x254>
    5460:	d8000015 	stw	zero,0(sp)
    5464:	003fe206 	br	53f0 <__sfvwrite_r+0x2d8>
    5468:	91000017 	ldw	r4,0(r18)
    546c:	90800417 	ldw	r2,16(r18)
    5470:	1100022e 	bgeu	r2,r4,547c <__sfvwrite_r+0x364>
    5474:	8023883a 	mov	r17,r16
    5478:	85003136 	bltu	r16,r20,5540 <__sfvwrite_r+0x428>
    547c:	91c00517 	ldw	r7,20(r18)
    5480:	a1c01836 	bltu	r20,r7,54e4 <__sfvwrite_r+0x3cc>
    5484:	90c00917 	ldw	r3,36(r18)
    5488:	91400717 	ldw	r5,28(r18)
    548c:	e009883a 	mov	r4,fp
    5490:	b80d883a 	mov	r6,r23
    5494:	183ee83a 	callr	r3
    5498:	1021883a 	mov	r16,r2
    549c:	00bfb30e 	bge	zero,r2,536c <__sfvwrite_r+0x254>
    54a0:	1023883a 	mov	r17,r2
    54a4:	1027883a 	mov	r19,r2
    54a8:	003f9b06 	br	5318 <__sfvwrite_r+0x200>
    54ac:	b80b883a 	mov	r5,r23
    54b0:	800d883a 	mov	r6,r16
    54b4:	00061b00 	call	61b0 <memmove>
    54b8:	90c00217 	ldw	r3,8(r18)
    54bc:	90800017 	ldw	r2,0(r18)
    54c0:	8023883a 	mov	r17,r16
    54c4:	1c07c83a 	sub	r3,r3,r16
    54c8:	1405883a 	add	r2,r2,r16
    54cc:	90c00215 	stw	r3,8(r18)
    54d0:	90800015 	stw	r2,0(r18)
    54d4:	003fc406 	br	53e8 <__sfvwrite_r+0x2d0>
    54d8:	a00d883a 	mov	r6,r20
    54dc:	a021883a 	mov	r16,r20
    54e0:	003f8106 	br	52e8 <__sfvwrite_r+0x1d0>
    54e4:	b80b883a 	mov	r5,r23
    54e8:	a00d883a 	mov	r6,r20
    54ec:	00061b00 	call	61b0 <memmove>
    54f0:	90c00217 	ldw	r3,8(r18)
    54f4:	90800017 	ldw	r2,0(r18)
    54f8:	a021883a 	mov	r16,r20
    54fc:	1d07c83a 	sub	r3,r3,r20
    5500:	1505883a 	add	r2,r2,r20
    5504:	a023883a 	mov	r17,r20
    5508:	a027883a 	mov	r19,r20
    550c:	90c00215 	stw	r3,8(r18)
    5510:	90800015 	stw	r2,0(r18)
    5514:	003f8006 	br	5318 <__sfvwrite_r+0x200>
    5518:	b809883a 	mov	r4,r23
    551c:	01400284 	movi	r5,10
    5520:	980d883a 	mov	r6,r19
    5524:	00060cc0 	call	60cc <memchr>
    5528:	10001726 	beq	r2,zero,5588 <__sfvwrite_r+0x470>
    552c:	15c5c83a 	sub	r2,r2,r23
    5530:	15000044 	addi	r20,r2,1
    5534:	00800044 	movi	r2,1
    5538:	d8800015 	stw	r2,0(sp)
    553c:	003f9806 	br	53a0 <__sfvwrite_r+0x288>
    5540:	b80b883a 	mov	r5,r23
    5544:	800d883a 	mov	r6,r16
    5548:	00061b00 	call	61b0 <memmove>
    554c:	90c00017 	ldw	r3,0(r18)
    5550:	e009883a 	mov	r4,fp
    5554:	900b883a 	mov	r5,r18
    5558:	1c07883a 	add	r3,r3,r16
    555c:	90c00015 	stw	r3,0(r18)
    5560:	8027883a 	mov	r19,r16
    5564:	00047e80 	call	47e8 <_fflush_r>
    5568:	103f6b26 	beq	r2,zero,5318 <__sfvwrite_r+0x200>
    556c:	003f7f06 	br	536c <__sfvwrite_r+0x254>
    5570:	400b883a 	mov	r5,r8
    5574:	e009883a 	mov	r4,fp
    5578:	00075080 	call	7508 <_realloc_r>
    557c:	103f7626 	beq	r2,zero,5358 <__sfvwrite_r+0x240>
    5580:	1023883a 	mov	r17,r2
    5584:	003f5006 	br	52c8 <__sfvwrite_r+0x1b0>
    5588:	00c00044 	movi	r3,1
    558c:	9d000044 	addi	r20,r19,1
    5590:	d8c00015 	stw	r3,0(sp)
    5594:	003f8206 	br	53a0 <__sfvwrite_r+0x288>
    5598:	9080030b 	ldhu	r2,12(r18)
    559c:	00c00244 	movi	r3,9
    55a0:	013fffc4 	movi	r4,-1
    55a4:	10801014 	ori	r2,r2,64
    55a8:	9080030d 	sth	r2,12(r18)
    55ac:	e0c00015 	stw	r3,0(fp)
    55b0:	003f0606 	br	51cc <__sfvwrite_r+0xb4>

000055b4 <_fwalk_reent>:
    55b4:	defff704 	addi	sp,sp,-36
    55b8:	dcc00315 	stw	r19,12(sp)
    55bc:	24c0b804 	addi	r19,r4,736
    55c0:	dd800615 	stw	r22,24(sp)
    55c4:	dd400515 	stw	r21,20(sp)
    55c8:	dfc00815 	stw	ra,32(sp)
    55cc:	ddc00715 	stw	r23,28(sp)
    55d0:	dd000415 	stw	r20,16(sp)
    55d4:	dc800215 	stw	r18,8(sp)
    55d8:	dc400115 	stw	r17,4(sp)
    55dc:	dc000015 	stw	r16,0(sp)
    55e0:	202b883a 	mov	r21,r4
    55e4:	282d883a 	mov	r22,r5
    55e8:	0004a700 	call	4a70 <__sfp_lock_acquire>
    55ec:	98002126 	beq	r19,zero,5674 <_fwalk_reent+0xc0>
    55f0:	002f883a 	mov	r23,zero
    55f4:	9c800117 	ldw	r18,4(r19)
    55f8:	9c000217 	ldw	r16,8(r19)
    55fc:	90bfffc4 	addi	r2,r18,-1
    5600:	10000d16 	blt	r2,zero,5638 <_fwalk_reent+0x84>
    5604:	0023883a 	mov	r17,zero
    5608:	053fffc4 	movi	r20,-1
    560c:	8080030f 	ldh	r2,12(r16)
    5610:	8c400044 	addi	r17,r17,1
    5614:	10000626 	beq	r2,zero,5630 <_fwalk_reent+0x7c>
    5618:	8080038f 	ldh	r2,14(r16)
    561c:	800b883a 	mov	r5,r16
    5620:	a809883a 	mov	r4,r21
    5624:	15000226 	beq	r2,r20,5630 <_fwalk_reent+0x7c>
    5628:	b03ee83a 	callr	r22
    562c:	b8aeb03a 	or	r23,r23,r2
    5630:	84001704 	addi	r16,r16,92
    5634:	947ff51e 	bne	r18,r17,560c <_fwalk_reent+0x58>
    5638:	9cc00017 	ldw	r19,0(r19)
    563c:	983fed1e 	bne	r19,zero,55f4 <_fwalk_reent+0x40>
    5640:	0004a740 	call	4a74 <__sfp_lock_release>
    5644:	b805883a 	mov	r2,r23
    5648:	dfc00817 	ldw	ra,32(sp)
    564c:	ddc00717 	ldw	r23,28(sp)
    5650:	dd800617 	ldw	r22,24(sp)
    5654:	dd400517 	ldw	r21,20(sp)
    5658:	dd000417 	ldw	r20,16(sp)
    565c:	dcc00317 	ldw	r19,12(sp)
    5660:	dc800217 	ldw	r18,8(sp)
    5664:	dc400117 	ldw	r17,4(sp)
    5668:	dc000017 	ldw	r16,0(sp)
    566c:	dec00904 	addi	sp,sp,36
    5670:	f800283a 	ret
    5674:	002f883a 	mov	r23,zero
    5678:	003ff106 	br	5640 <_fwalk_reent+0x8c>

0000567c <_fwalk>:
    567c:	defff804 	addi	sp,sp,-32
    5680:	dcc00315 	stw	r19,12(sp)
    5684:	24c0b804 	addi	r19,r4,736
    5688:	dd400515 	stw	r21,20(sp)
    568c:	dfc00715 	stw	ra,28(sp)
    5690:	dd800615 	stw	r22,24(sp)
    5694:	dd000415 	stw	r20,16(sp)
    5698:	dc800215 	stw	r18,8(sp)
    569c:	dc400115 	stw	r17,4(sp)
    56a0:	dc000015 	stw	r16,0(sp)
    56a4:	282b883a 	mov	r21,r5
    56a8:	0004a700 	call	4a70 <__sfp_lock_acquire>
    56ac:	98001f26 	beq	r19,zero,572c <_fwalk+0xb0>
    56b0:	002d883a 	mov	r22,zero
    56b4:	9c800117 	ldw	r18,4(r19)
    56b8:	9c000217 	ldw	r16,8(r19)
    56bc:	90bfffc4 	addi	r2,r18,-1
    56c0:	10000c16 	blt	r2,zero,56f4 <_fwalk+0x78>
    56c4:	0023883a 	mov	r17,zero
    56c8:	053fffc4 	movi	r20,-1
    56cc:	8080030f 	ldh	r2,12(r16)
    56d0:	8c400044 	addi	r17,r17,1
    56d4:	10000526 	beq	r2,zero,56ec <_fwalk+0x70>
    56d8:	8080038f 	ldh	r2,14(r16)
    56dc:	8009883a 	mov	r4,r16
    56e0:	15000226 	beq	r2,r20,56ec <_fwalk+0x70>
    56e4:	a83ee83a 	callr	r21
    56e8:	b0acb03a 	or	r22,r22,r2
    56ec:	84001704 	addi	r16,r16,92
    56f0:	947ff61e 	bne	r18,r17,56cc <_fwalk+0x50>
    56f4:	9cc00017 	ldw	r19,0(r19)
    56f8:	983fee1e 	bne	r19,zero,56b4 <_fwalk+0x38>
    56fc:	0004a740 	call	4a74 <__sfp_lock_release>
    5700:	b005883a 	mov	r2,r22
    5704:	dfc00717 	ldw	ra,28(sp)
    5708:	dd800617 	ldw	r22,24(sp)
    570c:	dd400517 	ldw	r21,20(sp)
    5710:	dd000417 	ldw	r20,16(sp)
    5714:	dcc00317 	ldw	r19,12(sp)
    5718:	dc800217 	ldw	r18,8(sp)
    571c:	dc400117 	ldw	r17,4(sp)
    5720:	dc000017 	ldw	r16,0(sp)
    5724:	dec00804 	addi	sp,sp,32
    5728:	f800283a 	ret
    572c:	002d883a 	mov	r22,zero
    5730:	003ff206 	br	56fc <_fwalk+0x80>

00005734 <__locale_charset>:
    5734:	d0a00317 	ldw	r2,-32756(gp)
    5738:	f800283a 	ret

0000573c <_localeconv_r>:
    573c:	00800074 	movhi	r2,1
    5740:	10b52a04 	addi	r2,r2,-11096
    5744:	f800283a 	ret

00005748 <localeconv>:
    5748:	00800074 	movhi	r2,1
    574c:	10bc5604 	addi	r2,r2,-3752
    5750:	11000017 	ldw	r4,0(r2)
    5754:	000573c1 	jmpi	573c <_localeconv_r>

00005758 <_setlocale_r>:
    5758:	defffc04 	addi	sp,sp,-16
    575c:	00c00074 	movhi	r3,1
    5760:	18f52504 	addi	r3,r3,-11116
    5764:	dc800215 	stw	r18,8(sp)
    5768:	dc400115 	stw	r17,4(sp)
    576c:	dc000015 	stw	r16,0(sp)
    5770:	2023883a 	mov	r17,r4
    5774:	2825883a 	mov	r18,r5
    5778:	dfc00315 	stw	ra,12(sp)
    577c:	3021883a 	mov	r16,r6
    5780:	3009883a 	mov	r4,r6
    5784:	180b883a 	mov	r5,r3
    5788:	30000926 	beq	r6,zero,57b0 <_setlocale_r+0x58>
    578c:	0007d280 	call	7d28 <strcmp>
    5790:	8009883a 	mov	r4,r16
    5794:	01400074 	movhi	r5,1
    5798:	29751004 	addi	r5,r5,-11200
    579c:	10000b1e 	bne	r2,zero,57cc <_setlocale_r+0x74>
    57a0:	8c000d15 	stw	r16,52(r17)
    57a4:	8c800c15 	stw	r18,48(r17)
    57a8:	00c00074 	movhi	r3,1
    57ac:	18f52504 	addi	r3,r3,-11116
    57b0:	1805883a 	mov	r2,r3
    57b4:	dfc00317 	ldw	ra,12(sp)
    57b8:	dc800217 	ldw	r18,8(sp)
    57bc:	dc400117 	ldw	r17,4(sp)
    57c0:	dc000017 	ldw	r16,0(sp)
    57c4:	dec00404 	addi	sp,sp,16
    57c8:	f800283a 	ret
    57cc:	0007d280 	call	7d28 <strcmp>
    57d0:	0007883a 	mov	r3,zero
    57d4:	103ff226 	beq	r2,zero,57a0 <_setlocale_r+0x48>
    57d8:	003ff506 	br	57b0 <_setlocale_r+0x58>

000057dc <setlocale>:
    57dc:	01800074 	movhi	r6,1
    57e0:	31bc5604 	addi	r6,r6,-3752
    57e4:	2007883a 	mov	r3,r4
    57e8:	31000017 	ldw	r4,0(r6)
    57ec:	280d883a 	mov	r6,r5
    57f0:	180b883a 	mov	r5,r3
    57f4:	00057581 	jmpi	5758 <_setlocale_r>

000057f8 <__smakebuf_r>:
    57f8:	2880030b 	ldhu	r2,12(r5)
    57fc:	deffed04 	addi	sp,sp,-76
    5800:	dc401015 	stw	r17,64(sp)
    5804:	1080008c 	andi	r2,r2,2
    5808:	dc000f15 	stw	r16,60(sp)
    580c:	dfc01215 	stw	ra,72(sp)
    5810:	dc801115 	stw	r18,68(sp)
    5814:	2821883a 	mov	r16,r5
    5818:	2023883a 	mov	r17,r4
    581c:	10000b26 	beq	r2,zero,584c <__smakebuf_r+0x54>
    5820:	28c010c4 	addi	r3,r5,67
    5824:	00800044 	movi	r2,1
    5828:	28800515 	stw	r2,20(r5)
    582c:	28c00415 	stw	r3,16(r5)
    5830:	28c00015 	stw	r3,0(r5)
    5834:	dfc01217 	ldw	ra,72(sp)
    5838:	dc801117 	ldw	r18,68(sp)
    583c:	dc401017 	ldw	r17,64(sp)
    5840:	dc000f17 	ldw	r16,60(sp)
    5844:	dec01304 	addi	sp,sp,76
    5848:	f800283a 	ret
    584c:	2940038f 	ldh	r5,14(r5)
    5850:	28002116 	blt	r5,zero,58d8 <__smakebuf_r+0xe0>
    5854:	d80d883a 	mov	r6,sp
    5858:	00081f00 	call	81f0 <_fstat_r>
    585c:	10001e16 	blt	r2,zero,58d8 <__smakebuf_r+0xe0>
    5860:	d8800117 	ldw	r2,4(sp)
    5864:	00e00014 	movui	r3,32768
    5868:	113c000c 	andi	r4,r2,61440
    586c:	20c03126 	beq	r4,r3,5934 <__smakebuf_r+0x13c>
    5870:	8080030b 	ldhu	r2,12(r16)
    5874:	00c80004 	movi	r3,8192
    5878:	10820014 	ori	r2,r2,2048
    587c:	8080030d 	sth	r2,12(r16)
    5880:	20c01e26 	beq	r4,r3,58fc <__smakebuf_r+0x104>
    5884:	04810004 	movi	r18,1024
    5888:	8809883a 	mov	r4,r17
    588c:	900b883a 	mov	r5,r18
    5890:	000598c0 	call	598c <_malloc_r>
    5894:	1009883a 	mov	r4,r2
    5898:	10003126 	beq	r2,zero,5960 <__smakebuf_r+0x168>
    589c:	80c0030b 	ldhu	r3,12(r16)
    58a0:	00800034 	movhi	r2,0
    58a4:	1092d904 	addi	r2,r2,19300
    58a8:	88800f15 	stw	r2,60(r17)
    58ac:	18c02014 	ori	r3,r3,128
    58b0:	84800515 	stw	r18,20(r16)
    58b4:	80c0030d 	sth	r3,12(r16)
    58b8:	81000415 	stw	r4,16(r16)
    58bc:	81000015 	stw	r4,0(r16)
    58c0:	dfc01217 	ldw	ra,72(sp)
    58c4:	dc801117 	ldw	r18,68(sp)
    58c8:	dc401017 	ldw	r17,64(sp)
    58cc:	dc000f17 	ldw	r16,60(sp)
    58d0:	dec01304 	addi	sp,sp,76
    58d4:	f800283a 	ret
    58d8:	80c0030b 	ldhu	r3,12(r16)
    58dc:	1880200c 	andi	r2,r3,128
    58e0:	10000426 	beq	r2,zero,58f4 <__smakebuf_r+0xfc>
    58e4:	04801004 	movi	r18,64
    58e8:	18820014 	ori	r2,r3,2048
    58ec:	8080030d 	sth	r2,12(r16)
    58f0:	003fe506 	br	5888 <__smakebuf_r+0x90>
    58f4:	04810004 	movi	r18,1024
    58f8:	003ffb06 	br	58e8 <__smakebuf_r+0xf0>
    58fc:	8140038f 	ldh	r5,14(r16)
    5900:	8809883a 	mov	r4,r17
    5904:	00082640 	call	8264 <_isatty_r>
    5908:	103fde26 	beq	r2,zero,5884 <__smakebuf_r+0x8c>
    590c:	8080030b 	ldhu	r2,12(r16)
    5910:	80c010c4 	addi	r3,r16,67
    5914:	04810004 	movi	r18,1024
    5918:	10800054 	ori	r2,r2,1
    591c:	8080030d 	sth	r2,12(r16)
    5920:	00800044 	movi	r2,1
    5924:	80c00415 	stw	r3,16(r16)
    5928:	80800515 	stw	r2,20(r16)
    592c:	80c00015 	stw	r3,0(r16)
    5930:	003fd506 	br	5888 <__smakebuf_r+0x90>
    5934:	80c00a17 	ldw	r3,40(r16)
    5938:	00800034 	movhi	r2,0
    593c:	109ef904 	addi	r2,r2,31716
    5940:	18bfcb1e 	bne	r3,r2,5870 <__smakebuf_r+0x78>
    5944:	8080030b 	ldhu	r2,12(r16)
    5948:	00c10004 	movi	r3,1024
    594c:	1825883a 	mov	r18,r3
    5950:	10c4b03a 	or	r2,r2,r3
    5954:	8080030d 	sth	r2,12(r16)
    5958:	80c01315 	stw	r3,76(r16)
    595c:	003fca06 	br	5888 <__smakebuf_r+0x90>
    5960:	8100030b 	ldhu	r4,12(r16)
    5964:	2080800c 	andi	r2,r4,512
    5968:	103fb21e 	bne	r2,zero,5834 <__smakebuf_r+0x3c>
    596c:	80c010c4 	addi	r3,r16,67
    5970:	21000094 	ori	r4,r4,2
    5974:	00800044 	movi	r2,1
    5978:	80800515 	stw	r2,20(r16)
    597c:	8100030d 	sth	r4,12(r16)
    5980:	80c00415 	stw	r3,16(r16)
    5984:	80c00015 	stw	r3,0(r16)
    5988:	003faa06 	br	5834 <__smakebuf_r+0x3c>

0000598c <_malloc_r>:
    598c:	defff604 	addi	sp,sp,-40
    5990:	28c002c4 	addi	r3,r5,11
    5994:	00800584 	movi	r2,22
    5998:	dc800215 	stw	r18,8(sp)
    599c:	dfc00915 	stw	ra,36(sp)
    59a0:	df000815 	stw	fp,32(sp)
    59a4:	ddc00715 	stw	r23,28(sp)
    59a8:	dd800615 	stw	r22,24(sp)
    59ac:	dd400515 	stw	r21,20(sp)
    59b0:	dd000415 	stw	r20,16(sp)
    59b4:	dcc00315 	stw	r19,12(sp)
    59b8:	dc400115 	stw	r17,4(sp)
    59bc:	dc000015 	stw	r16,0(sp)
    59c0:	2025883a 	mov	r18,r4
    59c4:	10c01236 	bltu	r2,r3,5a10 <_malloc_r+0x84>
    59c8:	04400404 	movi	r17,16
    59cc:	8940142e 	bgeu	r17,r5,5a20 <_malloc_r+0x94>
    59d0:	00800304 	movi	r2,12
    59d4:	0007883a 	mov	r3,zero
    59d8:	90800015 	stw	r2,0(r18)
    59dc:	1805883a 	mov	r2,r3
    59e0:	dfc00917 	ldw	ra,36(sp)
    59e4:	df000817 	ldw	fp,32(sp)
    59e8:	ddc00717 	ldw	r23,28(sp)
    59ec:	dd800617 	ldw	r22,24(sp)
    59f0:	dd400517 	ldw	r21,20(sp)
    59f4:	dd000417 	ldw	r20,16(sp)
    59f8:	dcc00317 	ldw	r19,12(sp)
    59fc:	dc800217 	ldw	r18,8(sp)
    5a00:	dc400117 	ldw	r17,4(sp)
    5a04:	dc000017 	ldw	r16,0(sp)
    5a08:	dec00a04 	addi	sp,sp,40
    5a0c:	f800283a 	ret
    5a10:	00bffe04 	movi	r2,-8
    5a14:	18a2703a 	and	r17,r3,r2
    5a18:	883fed16 	blt	r17,zero,59d0 <_malloc_r+0x44>
    5a1c:	897fec36 	bltu	r17,r5,59d0 <_malloc_r+0x44>
    5a20:	9009883a 	mov	r4,r18
    5a24:	000ad700 	call	ad70 <__malloc_lock>
    5a28:	00807dc4 	movi	r2,503
    5a2c:	14402b2e 	bgeu	r2,r17,5adc <_malloc_r+0x150>
    5a30:	8806d27a 	srli	r3,r17,9
    5a34:	18003f1e 	bne	r3,zero,5b34 <_malloc_r+0x1a8>
    5a38:	880cd0fa 	srli	r6,r17,3
    5a3c:	300490fa 	slli	r2,r6,3
    5a40:	02c00074 	movhi	r11,1
    5a44:	5af6d204 	addi	r11,r11,-9400
    5a48:	12cb883a 	add	r5,r2,r11
    5a4c:	2c000317 	ldw	r16,12(r5)
    5a50:	580f883a 	mov	r7,r11
    5a54:	2c00041e 	bne	r5,r16,5a68 <_malloc_r+0xdc>
    5a58:	00000a06 	br	5a84 <_malloc_r+0xf8>
    5a5c:	1800860e 	bge	r3,zero,5c78 <_malloc_r+0x2ec>
    5a60:	84000317 	ldw	r16,12(r16)
    5a64:	2c000726 	beq	r5,r16,5a84 <_malloc_r+0xf8>
    5a68:	80800117 	ldw	r2,4(r16)
    5a6c:	00ffff04 	movi	r3,-4
    5a70:	10c8703a 	and	r4,r2,r3
    5a74:	2447c83a 	sub	r3,r4,r17
    5a78:	008003c4 	movi	r2,15
    5a7c:	10fff70e 	bge	r2,r3,5a5c <_malloc_r+0xd0>
    5a80:	31bfffc4 	addi	r6,r6,-1
    5a84:	32400044 	addi	r9,r6,1
    5a88:	02800074 	movhi	r10,1
    5a8c:	52b6d404 	addi	r10,r10,-9392
    5a90:	54000217 	ldw	r16,8(r10)
    5a94:	8280a026 	beq	r16,r10,5d18 <_malloc_r+0x38c>
    5a98:	80800117 	ldw	r2,4(r16)
    5a9c:	00ffff04 	movi	r3,-4
    5aa0:	10ca703a 	and	r5,r2,r3
    5aa4:	2c4dc83a 	sub	r6,r5,r17
    5aa8:	008003c4 	movi	r2,15
    5aac:	11808316 	blt	r2,r6,5cbc <_malloc_r+0x330>
    5ab0:	52800315 	stw	r10,12(r10)
    5ab4:	52800215 	stw	r10,8(r10)
    5ab8:	30002916 	blt	r6,zero,5b60 <_malloc_r+0x1d4>
    5abc:	8147883a 	add	r3,r16,r5
    5ac0:	18800117 	ldw	r2,4(r3)
    5ac4:	9009883a 	mov	r4,r18
    5ac8:	10800054 	ori	r2,r2,1
    5acc:	18800115 	stw	r2,4(r3)
    5ad0:	000ad900 	call	ad90 <__malloc_unlock>
    5ad4:	80c00204 	addi	r3,r16,8
    5ad8:	003fc006 	br	59dc <_malloc_r+0x50>
    5adc:	02c00074 	movhi	r11,1
    5ae0:	5af6d204 	addi	r11,r11,-9400
    5ae4:	8ac5883a 	add	r2,r17,r11
    5ae8:	14000317 	ldw	r16,12(r2)
    5aec:	580f883a 	mov	r7,r11
    5af0:	8806d0fa 	srli	r3,r17,3
    5af4:	14006c26 	beq	r2,r16,5ca8 <_malloc_r+0x31c>
    5af8:	80c00117 	ldw	r3,4(r16)
    5afc:	00bfff04 	movi	r2,-4
    5b00:	81800317 	ldw	r6,12(r16)
    5b04:	1886703a 	and	r3,r3,r2
    5b08:	80c7883a 	add	r3,r16,r3
    5b0c:	18800117 	ldw	r2,4(r3)
    5b10:	81400217 	ldw	r5,8(r16)
    5b14:	9009883a 	mov	r4,r18
    5b18:	10800054 	ori	r2,r2,1
    5b1c:	18800115 	stw	r2,4(r3)
    5b20:	31400215 	stw	r5,8(r6)
    5b24:	29800315 	stw	r6,12(r5)
    5b28:	000ad900 	call	ad90 <__malloc_unlock>
    5b2c:	80c00204 	addi	r3,r16,8
    5b30:	003faa06 	br	59dc <_malloc_r+0x50>
    5b34:	00800104 	movi	r2,4
    5b38:	10c0052e 	bgeu	r2,r3,5b50 <_malloc_r+0x1c4>
    5b3c:	00800504 	movi	r2,20
    5b40:	10c07836 	bltu	r2,r3,5d24 <_malloc_r+0x398>
    5b44:	198016c4 	addi	r6,r3,91
    5b48:	300490fa 	slli	r2,r6,3
    5b4c:	003fbc06 	br	5a40 <_malloc_r+0xb4>
    5b50:	8804d1ba 	srli	r2,r17,6
    5b54:	11800e04 	addi	r6,r2,56
    5b58:	300490fa 	slli	r2,r6,3
    5b5c:	003fb806 	br	5a40 <_malloc_r+0xb4>
    5b60:	00807fc4 	movi	r2,511
    5b64:	1140bb36 	bltu	r2,r5,5e54 <_malloc_r+0x4c8>
    5b68:	2806d0fa 	srli	r3,r5,3
    5b6c:	573ffe04 	addi	fp,r10,-8
    5b70:	00800044 	movi	r2,1
    5b74:	180890fa 	slli	r4,r3,3
    5b78:	1807d0ba 	srai	r3,r3,2
    5b7c:	e1c00117 	ldw	r7,4(fp)
    5b80:	5909883a 	add	r4,r11,r4
    5b84:	21400217 	ldw	r5,8(r4)
    5b88:	10c4983a 	sll	r2,r2,r3
    5b8c:	81000315 	stw	r4,12(r16)
    5b90:	81400215 	stw	r5,8(r16)
    5b94:	388eb03a 	or	r7,r7,r2
    5b98:	2c000315 	stw	r16,12(r5)
    5b9c:	24000215 	stw	r16,8(r4)
    5ba0:	e1c00115 	stw	r7,4(fp)
    5ba4:	4807883a 	mov	r3,r9
    5ba8:	4800cd16 	blt	r9,zero,5ee0 <_malloc_r+0x554>
    5bac:	1807d0ba 	srai	r3,r3,2
    5bb0:	00800044 	movi	r2,1
    5bb4:	10c8983a 	sll	r4,r2,r3
    5bb8:	39004436 	bltu	r7,r4,5ccc <_malloc_r+0x340>
    5bbc:	21c4703a 	and	r2,r4,r7
    5bc0:	10000a1e 	bne	r2,zero,5bec <_malloc_r+0x260>
    5bc4:	2109883a 	add	r4,r4,r4
    5bc8:	00bfff04 	movi	r2,-4
    5bcc:	4884703a 	and	r2,r9,r2
    5bd0:	3906703a 	and	r3,r7,r4
    5bd4:	12400104 	addi	r9,r2,4
    5bd8:	1800041e 	bne	r3,zero,5bec <_malloc_r+0x260>
    5bdc:	2109883a 	add	r4,r4,r4
    5be0:	3904703a 	and	r2,r7,r4
    5be4:	4a400104 	addi	r9,r9,4
    5be8:	103ffc26 	beq	r2,zero,5bdc <_malloc_r+0x250>
    5bec:	480490fa 	slli	r2,r9,3
    5bf0:	4819883a 	mov	r12,r9
    5bf4:	023fff04 	movi	r8,-4
    5bf8:	589b883a 	add	r13,r11,r2
    5bfc:	6807883a 	mov	r3,r13
    5c00:	014003c4 	movi	r5,15
    5c04:	1c000317 	ldw	r16,12(r3)
    5c08:	1c00041e 	bne	r3,r16,5c1c <_malloc_r+0x290>
    5c0c:	0000a706 	br	5eac <_malloc_r+0x520>
    5c10:	3000ab0e 	bge	r6,zero,5ec0 <_malloc_r+0x534>
    5c14:	84000317 	ldw	r16,12(r16)
    5c18:	1c00a426 	beq	r3,r16,5eac <_malloc_r+0x520>
    5c1c:	80800117 	ldw	r2,4(r16)
    5c20:	1204703a 	and	r2,r2,r8
    5c24:	144dc83a 	sub	r6,r2,r17
    5c28:	29bff90e 	bge	r5,r6,5c10 <_malloc_r+0x284>
    5c2c:	81000317 	ldw	r4,12(r16)
    5c30:	80c00217 	ldw	r3,8(r16)
    5c34:	89400054 	ori	r5,r17,1
    5c38:	8445883a 	add	r2,r16,r17
    5c3c:	20c00215 	stw	r3,8(r4)
    5c40:	19000315 	stw	r4,12(r3)
    5c44:	81400115 	stw	r5,4(r16)
    5c48:	1187883a 	add	r3,r2,r6
    5c4c:	31000054 	ori	r4,r6,1
    5c50:	50800315 	stw	r2,12(r10)
    5c54:	50800215 	stw	r2,8(r10)
    5c58:	19800015 	stw	r6,0(r3)
    5c5c:	11000115 	stw	r4,4(r2)
    5c60:	12800215 	stw	r10,8(r2)
    5c64:	12800315 	stw	r10,12(r2)
    5c68:	9009883a 	mov	r4,r18
    5c6c:	000ad900 	call	ad90 <__malloc_unlock>
    5c70:	80c00204 	addi	r3,r16,8
    5c74:	003f5906 	br	59dc <_malloc_r+0x50>
    5c78:	8109883a 	add	r4,r16,r4
    5c7c:	20800117 	ldw	r2,4(r4)
    5c80:	80c00217 	ldw	r3,8(r16)
    5c84:	81400317 	ldw	r5,12(r16)
    5c88:	10800054 	ori	r2,r2,1
    5c8c:	20800115 	stw	r2,4(r4)
    5c90:	28c00215 	stw	r3,8(r5)
    5c94:	19400315 	stw	r5,12(r3)
    5c98:	9009883a 	mov	r4,r18
    5c9c:	000ad900 	call	ad90 <__malloc_unlock>
    5ca0:	80c00204 	addi	r3,r16,8
    5ca4:	003f4d06 	br	59dc <_malloc_r+0x50>
    5ca8:	80800204 	addi	r2,r16,8
    5cac:	14000317 	ldw	r16,12(r2)
    5cb0:	143f911e 	bne	r2,r16,5af8 <_malloc_r+0x16c>
    5cb4:	1a400084 	addi	r9,r3,2
    5cb8:	003f7306 	br	5a88 <_malloc_r+0xfc>
    5cbc:	88c00054 	ori	r3,r17,1
    5cc0:	8445883a 	add	r2,r16,r17
    5cc4:	80c00115 	stw	r3,4(r16)
    5cc8:	003fdf06 	br	5c48 <_malloc_r+0x2bc>
    5ccc:	e4000217 	ldw	r16,8(fp)
    5cd0:	00bfff04 	movi	r2,-4
    5cd4:	80c00117 	ldw	r3,4(r16)
    5cd8:	802d883a 	mov	r22,r16
    5cdc:	18aa703a 	and	r21,r3,r2
    5ce0:	ac401636 	bltu	r21,r17,5d3c <_malloc_r+0x3b0>
    5ce4:	ac49c83a 	sub	r4,r21,r17
    5ce8:	008003c4 	movi	r2,15
    5cec:	1100130e 	bge	r2,r4,5d3c <_malloc_r+0x3b0>
    5cf0:	88800054 	ori	r2,r17,1
    5cf4:	8447883a 	add	r3,r16,r17
    5cf8:	80800115 	stw	r2,4(r16)
    5cfc:	20800054 	ori	r2,r4,1
    5d00:	18800115 	stw	r2,4(r3)
    5d04:	e0c00215 	stw	r3,8(fp)
    5d08:	9009883a 	mov	r4,r18
    5d0c:	000ad900 	call	ad90 <__malloc_unlock>
    5d10:	80c00204 	addi	r3,r16,8
    5d14:	003f3106 	br	59dc <_malloc_r+0x50>
    5d18:	39c00117 	ldw	r7,4(r7)
    5d1c:	573ffe04 	addi	fp,r10,-8
    5d20:	003fa006 	br	5ba4 <_malloc_r+0x218>
    5d24:	00801504 	movi	r2,84
    5d28:	10c06736 	bltu	r2,r3,5ec8 <_malloc_r+0x53c>
    5d2c:	8804d33a 	srli	r2,r17,12
    5d30:	11801b84 	addi	r6,r2,110
    5d34:	300490fa 	slli	r2,r6,3
    5d38:	003f4106 	br	5a40 <_malloc_r+0xb4>
    5d3c:	d0a6aa17 	ldw	r2,-25944(gp)
    5d40:	d0e00517 	ldw	r3,-32748(gp)
    5d44:	053fffc4 	movi	r20,-1
    5d48:	10800404 	addi	r2,r2,16
    5d4c:	88a7883a 	add	r19,r17,r2
    5d50:	1d000326 	beq	r3,r20,5d60 <_malloc_r+0x3d4>
    5d54:	98c3ffc4 	addi	r3,r19,4095
    5d58:	00bc0004 	movi	r2,-4096
    5d5c:	18a6703a 	and	r19,r3,r2
    5d60:	9009883a 	mov	r4,r18
    5d64:	980b883a 	mov	r5,r19
    5d68:	0007b6c0 	call	7b6c <_sbrk_r>
    5d6c:	1009883a 	mov	r4,r2
    5d70:	15000426 	beq	r2,r20,5d84 <_malloc_r+0x3f8>
    5d74:	854b883a 	add	r5,r16,r21
    5d78:	1029883a 	mov	r20,r2
    5d7c:	11405a2e 	bgeu	r2,r5,5ee8 <_malloc_r+0x55c>
    5d80:	87000c26 	beq	r16,fp,5db4 <_malloc_r+0x428>
    5d84:	e4000217 	ldw	r16,8(fp)
    5d88:	80c00117 	ldw	r3,4(r16)
    5d8c:	00bfff04 	movi	r2,-4
    5d90:	1884703a 	and	r2,r3,r2
    5d94:	14400336 	bltu	r2,r17,5da4 <_malloc_r+0x418>
    5d98:	1449c83a 	sub	r4,r2,r17
    5d9c:	008003c4 	movi	r2,15
    5da0:	113fd316 	blt	r2,r4,5cf0 <_malloc_r+0x364>
    5da4:	9009883a 	mov	r4,r18
    5da8:	000ad900 	call	ad90 <__malloc_unlock>
    5dac:	0007883a 	mov	r3,zero
    5db0:	003f0a06 	br	59dc <_malloc_r+0x50>
    5db4:	05c00074 	movhi	r23,1
    5db8:	bdc30a04 	addi	r23,r23,3112
    5dbc:	b8800017 	ldw	r2,0(r23)
    5dc0:	988d883a 	add	r6,r19,r2
    5dc4:	b9800015 	stw	r6,0(r23)
    5dc8:	d0e00517 	ldw	r3,-32748(gp)
    5dcc:	00bfffc4 	movi	r2,-1
    5dd0:	18808e26 	beq	r3,r2,600c <_malloc_r+0x680>
    5dd4:	2145c83a 	sub	r2,r4,r5
    5dd8:	3085883a 	add	r2,r6,r2
    5ddc:	b8800015 	stw	r2,0(r23)
    5de0:	20c001cc 	andi	r3,r4,7
    5de4:	18005f1e 	bne	r3,zero,5f64 <_malloc_r+0x5d8>
    5de8:	000b883a 	mov	r5,zero
    5dec:	a4c5883a 	add	r2,r20,r19
    5df0:	1083ffcc 	andi	r2,r2,4095
    5df4:	00c40004 	movi	r3,4096
    5df8:	1887c83a 	sub	r3,r3,r2
    5dfc:	28e7883a 	add	r19,r5,r3
    5e00:	9009883a 	mov	r4,r18
    5e04:	980b883a 	mov	r5,r19
    5e08:	0007b6c0 	call	7b6c <_sbrk_r>
    5e0c:	1007883a 	mov	r3,r2
    5e10:	00bfffc4 	movi	r2,-1
    5e14:	18807a26 	beq	r3,r2,6000 <_malloc_r+0x674>
    5e18:	1d05c83a 	sub	r2,r3,r20
    5e1c:	9885883a 	add	r2,r19,r2
    5e20:	10c00054 	ori	r3,r2,1
    5e24:	b8800017 	ldw	r2,0(r23)
    5e28:	a021883a 	mov	r16,r20
    5e2c:	a0c00115 	stw	r3,4(r20)
    5e30:	9885883a 	add	r2,r19,r2
    5e34:	b8800015 	stw	r2,0(r23)
    5e38:	e5000215 	stw	r20,8(fp)
    5e3c:	b7003626 	beq	r22,fp,5f18 <_malloc_r+0x58c>
    5e40:	018003c4 	movi	r6,15
    5e44:	35404b36 	bltu	r6,r21,5f74 <_malloc_r+0x5e8>
    5e48:	00800044 	movi	r2,1
    5e4c:	a0800115 	stw	r2,4(r20)
    5e50:	003fcd06 	br	5d88 <_malloc_r+0x3fc>
    5e54:	2808d27a 	srli	r4,r5,9
    5e58:	2000371e 	bne	r4,zero,5f38 <_malloc_r+0x5ac>
    5e5c:	2808d0fa 	srli	r4,r5,3
    5e60:	200690fa 	slli	r3,r4,3
    5e64:	1ad1883a 	add	r8,r3,r11
    5e68:	41800217 	ldw	r6,8(r8)
    5e6c:	41805b26 	beq	r8,r6,5fdc <_malloc_r+0x650>
    5e70:	30800117 	ldw	r2,4(r6)
    5e74:	00ffff04 	movi	r3,-4
    5e78:	10c4703a 	and	r2,r2,r3
    5e7c:	2880022e 	bgeu	r5,r2,5e88 <_malloc_r+0x4fc>
    5e80:	31800217 	ldw	r6,8(r6)
    5e84:	41bffa1e 	bne	r8,r6,5e70 <_malloc_r+0x4e4>
    5e88:	32000317 	ldw	r8,12(r6)
    5e8c:	39c00117 	ldw	r7,4(r7)
    5e90:	82000315 	stw	r8,12(r16)
    5e94:	81800215 	stw	r6,8(r16)
    5e98:	07000074 	movhi	fp,1
    5e9c:	e736d204 	addi	fp,fp,-9400
    5ea0:	34000315 	stw	r16,12(r6)
    5ea4:	44000215 	stw	r16,8(r8)
    5ea8:	003f3e06 	br	5ba4 <_malloc_r+0x218>
    5eac:	63000044 	addi	r12,r12,1
    5eb0:	608000cc 	andi	r2,r12,3
    5eb4:	10005d26 	beq	r2,zero,602c <_malloc_r+0x6a0>
    5eb8:	18c00204 	addi	r3,r3,8
    5ebc:	003f5106 	br	5c04 <_malloc_r+0x278>
    5ec0:	8089883a 	add	r4,r16,r2
    5ec4:	003f6d06 	br	5c7c <_malloc_r+0x2f0>
    5ec8:	00805504 	movi	r2,340
    5ecc:	10c02036 	bltu	r2,r3,5f50 <_malloc_r+0x5c4>
    5ed0:	8804d3fa 	srli	r2,r17,15
    5ed4:	11801dc4 	addi	r6,r2,119
    5ed8:	300490fa 	slli	r2,r6,3
    5edc:	003ed806 	br	5a40 <_malloc_r+0xb4>
    5ee0:	48c000c4 	addi	r3,r9,3
    5ee4:	003f3106 	br	5bac <_malloc_r+0x220>
    5ee8:	05c00074 	movhi	r23,1
    5eec:	bdc30a04 	addi	r23,r23,3112
    5ef0:	b8800017 	ldw	r2,0(r23)
    5ef4:	988d883a 	add	r6,r19,r2
    5ef8:	b9800015 	stw	r6,0(r23)
    5efc:	293fb21e 	bne	r5,r4,5dc8 <_malloc_r+0x43c>
    5f00:	2083ffcc 	andi	r2,r4,4095
    5f04:	103fb01e 	bne	r2,zero,5dc8 <_malloc_r+0x43c>
    5f08:	e4000217 	ldw	r16,8(fp)
    5f0c:	9d45883a 	add	r2,r19,r21
    5f10:	10800054 	ori	r2,r2,1
    5f14:	80800115 	stw	r2,4(r16)
    5f18:	b8c00017 	ldw	r3,0(r23)
    5f1c:	d0a6ab17 	ldw	r2,-25940(gp)
    5f20:	10c0012e 	bgeu	r2,r3,5f28 <_malloc_r+0x59c>
    5f24:	d0e6ab15 	stw	r3,-25940(gp)
    5f28:	d0a6ac17 	ldw	r2,-25936(gp)
    5f2c:	10ff962e 	bgeu	r2,r3,5d88 <_malloc_r+0x3fc>
    5f30:	d0e6ac15 	stw	r3,-25936(gp)
    5f34:	003f9406 	br	5d88 <_malloc_r+0x3fc>
    5f38:	00800104 	movi	r2,4
    5f3c:	11001e36 	bltu	r2,r4,5fb8 <_malloc_r+0x62c>
    5f40:	2804d1ba 	srli	r2,r5,6
    5f44:	11000e04 	addi	r4,r2,56
    5f48:	200690fa 	slli	r3,r4,3
    5f4c:	003fc506 	br	5e64 <_malloc_r+0x4d8>
    5f50:	00815504 	movi	r2,1364
    5f54:	10c01d2e 	bgeu	r2,r3,5fcc <_malloc_r+0x640>
    5f58:	01801f84 	movi	r6,126
    5f5c:	0080fc04 	movi	r2,1008
    5f60:	003eb706 	br	5a40 <_malloc_r+0xb4>
    5f64:	00800204 	movi	r2,8
    5f68:	10cbc83a 	sub	r5,r2,r3
    5f6c:	2169883a 	add	r20,r4,r5
    5f70:	003f9e06 	br	5dec <_malloc_r+0x460>
    5f74:	00bffe04 	movi	r2,-8
    5f78:	a93ffd04 	addi	r4,r21,-12
    5f7c:	2088703a 	and	r4,r4,r2
    5f80:	b10b883a 	add	r5,r22,r4
    5f84:	00c00144 	movi	r3,5
    5f88:	28c00215 	stw	r3,8(r5)
    5f8c:	28c00115 	stw	r3,4(r5)
    5f90:	b0800117 	ldw	r2,4(r22)
    5f94:	1080004c 	andi	r2,r2,1
    5f98:	2084b03a 	or	r2,r4,r2
    5f9c:	b0800115 	stw	r2,4(r22)
    5fa0:	313fdd2e 	bgeu	r6,r4,5f18 <_malloc_r+0x58c>
    5fa4:	b1400204 	addi	r5,r22,8
    5fa8:	9009883a 	mov	r4,r18
    5fac:	0004e040 	call	4e04 <_free_r>
    5fb0:	e4000217 	ldw	r16,8(fp)
    5fb4:	003fd806 	br	5f18 <_malloc_r+0x58c>
    5fb8:	00800504 	movi	r2,20
    5fbc:	11001536 	bltu	r2,r4,6014 <_malloc_r+0x688>
    5fc0:	210016c4 	addi	r4,r4,91
    5fc4:	200690fa 	slli	r3,r4,3
    5fc8:	003fa606 	br	5e64 <_malloc_r+0x4d8>
    5fcc:	8804d4ba 	srli	r2,r17,18
    5fd0:	11801f04 	addi	r6,r2,124
    5fd4:	300490fa 	slli	r2,r6,3
    5fd8:	003e9906 	br	5a40 <_malloc_r+0xb4>
    5fdc:	2009d0ba 	srai	r4,r4,2
    5fe0:	01400074 	movhi	r5,1
    5fe4:	2976d204 	addi	r5,r5,-9400
    5fe8:	00c00044 	movi	r3,1
    5fec:	28800117 	ldw	r2,4(r5)
    5ff0:	1906983a 	sll	r3,r3,r4
    5ff4:	10c4b03a 	or	r2,r2,r3
    5ff8:	28800115 	stw	r2,4(r5)
    5ffc:	003fa306 	br	5e8c <_malloc_r+0x500>
    6000:	0027883a 	mov	r19,zero
    6004:	00c00044 	movi	r3,1
    6008:	003f8606 	br	5e24 <_malloc_r+0x498>
    600c:	d1200515 	stw	r4,-32748(gp)
    6010:	003f7306 	br	5de0 <_malloc_r+0x454>
    6014:	00801504 	movi	r2,84
    6018:	11001936 	bltu	r2,r4,6080 <_malloc_r+0x6f4>
    601c:	2804d33a 	srli	r2,r5,12
    6020:	11001b84 	addi	r4,r2,110
    6024:	200690fa 	slli	r3,r4,3
    6028:	003f8e06 	br	5e64 <_malloc_r+0x4d8>
    602c:	480b883a 	mov	r5,r9
    6030:	6807883a 	mov	r3,r13
    6034:	288000cc 	andi	r2,r5,3
    6038:	18fffe04 	addi	r3,r3,-8
    603c:	297fffc4 	addi	r5,r5,-1
    6040:	10001526 	beq	r2,zero,6098 <_malloc_r+0x70c>
    6044:	18800217 	ldw	r2,8(r3)
    6048:	10fffa26 	beq	r2,r3,6034 <_malloc_r+0x6a8>
    604c:	2109883a 	add	r4,r4,r4
    6050:	393f1e36 	bltu	r7,r4,5ccc <_malloc_r+0x340>
    6054:	203f1d26 	beq	r4,zero,5ccc <_malloc_r+0x340>
    6058:	21c4703a 	and	r2,r4,r7
    605c:	10000226 	beq	r2,zero,6068 <_malloc_r+0x6dc>
    6060:	6013883a 	mov	r9,r12
    6064:	003ee106 	br	5bec <_malloc_r+0x260>
    6068:	2109883a 	add	r4,r4,r4
    606c:	3904703a 	and	r2,r7,r4
    6070:	63000104 	addi	r12,r12,4
    6074:	103ffc26 	beq	r2,zero,6068 <_malloc_r+0x6dc>
    6078:	6013883a 	mov	r9,r12
    607c:	003edb06 	br	5bec <_malloc_r+0x260>
    6080:	00805504 	movi	r2,340
    6084:	11000836 	bltu	r2,r4,60a8 <_malloc_r+0x71c>
    6088:	2804d3fa 	srli	r2,r5,15
    608c:	11001dc4 	addi	r4,r2,119
    6090:	200690fa 	slli	r3,r4,3
    6094:	003f7306 	br	5e64 <_malloc_r+0x4d8>
    6098:	0104303a 	nor	r2,zero,r4
    609c:	388e703a 	and	r7,r7,r2
    60a0:	e1c00115 	stw	r7,4(fp)
    60a4:	003fe906 	br	604c <_malloc_r+0x6c0>
    60a8:	00815504 	movi	r2,1364
    60ac:	1100032e 	bgeu	r2,r4,60bc <_malloc_r+0x730>
    60b0:	01001f84 	movi	r4,126
    60b4:	00c0fc04 	movi	r3,1008
    60b8:	003f6a06 	br	5e64 <_malloc_r+0x4d8>
    60bc:	2804d4ba 	srli	r2,r5,18
    60c0:	11001f04 	addi	r4,r2,124
    60c4:	200690fa 	slli	r3,r4,3
    60c8:	003f6606 	br	5e64 <_malloc_r+0x4d8>

000060cc <memchr>:
    60cc:	008000c4 	movi	r2,3
    60d0:	29403fcc 	andi	r5,r5,255
    60d4:	2007883a 	mov	r3,r4
    60d8:	1180022e 	bgeu	r2,r6,60e4 <memchr+0x18>
    60dc:	2084703a 	and	r2,r4,r2
    60e0:	10000b26 	beq	r2,zero,6110 <memchr+0x44>
    60e4:	313fffc4 	addi	r4,r6,-1
    60e8:	3000051e 	bne	r6,zero,6100 <memchr+0x34>
    60ec:	00002c06 	br	61a0 <memchr+0xd4>
    60f0:	213fffc4 	addi	r4,r4,-1
    60f4:	00bfffc4 	movi	r2,-1
    60f8:	18c00044 	addi	r3,r3,1
    60fc:	20802826 	beq	r4,r2,61a0 <memchr+0xd4>
    6100:	18800003 	ldbu	r2,0(r3)
    6104:	28bffa1e 	bne	r5,r2,60f0 <memchr+0x24>
    6108:	1805883a 	mov	r2,r3
    610c:	f800283a 	ret
    6110:	0011883a 	mov	r8,zero
    6114:	0007883a 	mov	r3,zero
    6118:	01c00104 	movi	r7,4
    611c:	4004923a 	slli	r2,r8,8
    6120:	18c00044 	addi	r3,r3,1
    6124:	1151883a 	add	r8,r2,r5
    6128:	19fffc1e 	bne	r3,r7,611c <memchr+0x50>
    612c:	02bfbff4 	movhi	r10,65279
    6130:	52bfbfc4 	addi	r10,r10,-257
    6134:	02602074 	movhi	r9,32897
    6138:	4a602004 	addi	r9,r9,-32640
    613c:	02c000c4 	movi	r11,3
    6140:	20800017 	ldw	r2,0(r4)
    6144:	31bfff04 	addi	r6,r6,-4
    6148:	200f883a 	mov	r7,r4
    614c:	1204f03a 	xor	r2,r2,r8
    6150:	1287883a 	add	r3,r2,r10
    6154:	1a46703a 	and	r3,r3,r9
    6158:	0084303a 	nor	r2,zero,r2
    615c:	10c4703a 	and	r2,r2,r3
    6160:	10000b26 	beq	r2,zero,6190 <memchr+0xc4>
    6164:	20800003 	ldbu	r2,0(r4)
    6168:	28800f26 	beq	r5,r2,61a8 <memchr+0xdc>
    616c:	20800043 	ldbu	r2,1(r4)
    6170:	21c00044 	addi	r7,r4,1
    6174:	28800c26 	beq	r5,r2,61a8 <memchr+0xdc>
    6178:	20800083 	ldbu	r2,2(r4)
    617c:	21c00084 	addi	r7,r4,2
    6180:	28800926 	beq	r5,r2,61a8 <memchr+0xdc>
    6184:	208000c3 	ldbu	r2,3(r4)
    6188:	21c000c4 	addi	r7,r4,3
    618c:	28800626 	beq	r5,r2,61a8 <memchr+0xdc>
    6190:	21000104 	addi	r4,r4,4
    6194:	59bfea36 	bltu	r11,r6,6140 <memchr+0x74>
    6198:	2007883a 	mov	r3,r4
    619c:	003fd106 	br	60e4 <memchr+0x18>
    61a0:	0005883a 	mov	r2,zero
    61a4:	f800283a 	ret
    61a8:	3805883a 	mov	r2,r7
    61ac:	f800283a 	ret

000061b0 <memmove>:
    61b0:	2807883a 	mov	r3,r5
    61b4:	2011883a 	mov	r8,r4
    61b8:	29000c2e 	bgeu	r5,r4,61ec <memmove+0x3c>
    61bc:	298f883a 	add	r7,r5,r6
    61c0:	21c00a2e 	bgeu	r4,r7,61ec <memmove+0x3c>
    61c4:	30000726 	beq	r6,zero,61e4 <memmove+0x34>
    61c8:	2187883a 	add	r3,r4,r6
    61cc:	198dc83a 	sub	r6,r3,r6
    61d0:	39ffffc4 	addi	r7,r7,-1
    61d4:	38800003 	ldbu	r2,0(r7)
    61d8:	18ffffc4 	addi	r3,r3,-1
    61dc:	18800005 	stb	r2,0(r3)
    61e0:	19bffb1e 	bne	r3,r6,61d0 <memmove+0x20>
    61e4:	2005883a 	mov	r2,r4
    61e8:	f800283a 	ret
    61ec:	01c003c4 	movi	r7,15
    61f0:	39800a36 	bltu	r7,r6,621c <memmove+0x6c>
    61f4:	303ffb26 	beq	r6,zero,61e4 <memmove+0x34>
    61f8:	400f883a 	mov	r7,r8
    61fc:	320d883a 	add	r6,r6,r8
    6200:	28800003 	ldbu	r2,0(r5)
    6204:	29400044 	addi	r5,r5,1
    6208:	38800005 	stb	r2,0(r7)
    620c:	39c00044 	addi	r7,r7,1
    6210:	39bffb1e 	bne	r7,r6,6200 <memmove+0x50>
    6214:	2005883a 	mov	r2,r4
    6218:	f800283a 	ret
    621c:	1904b03a 	or	r2,r3,r4
    6220:	108000cc 	andi	r2,r2,3
    6224:	103ff31e 	bne	r2,zero,61f4 <memmove+0x44>
    6228:	3811883a 	mov	r8,r7
    622c:	180b883a 	mov	r5,r3
    6230:	200f883a 	mov	r7,r4
    6234:	28c00017 	ldw	r3,0(r5)
    6238:	31bffc04 	addi	r6,r6,-16
    623c:	38c00015 	stw	r3,0(r7)
    6240:	28800117 	ldw	r2,4(r5)
    6244:	38800115 	stw	r2,4(r7)
    6248:	28c00217 	ldw	r3,8(r5)
    624c:	38c00215 	stw	r3,8(r7)
    6250:	28800317 	ldw	r2,12(r5)
    6254:	29400404 	addi	r5,r5,16
    6258:	38800315 	stw	r2,12(r7)
    625c:	39c00404 	addi	r7,r7,16
    6260:	41bff436 	bltu	r8,r6,6234 <memmove+0x84>
    6264:	008000c4 	movi	r2,3
    6268:	1180072e 	bgeu	r2,r6,6288 <memmove+0xd8>
    626c:	1007883a 	mov	r3,r2
    6270:	28800017 	ldw	r2,0(r5)
    6274:	31bfff04 	addi	r6,r6,-4
    6278:	29400104 	addi	r5,r5,4
    627c:	38800015 	stw	r2,0(r7)
    6280:	39c00104 	addi	r7,r7,4
    6284:	19bffa36 	bltu	r3,r6,6270 <memmove+0xc0>
    6288:	3811883a 	mov	r8,r7
    628c:	003fd906 	br	61f4 <memmove+0x44>

00006290 <memset>:
    6290:	008000c4 	movi	r2,3
    6294:	29403fcc 	andi	r5,r5,255
    6298:	2007883a 	mov	r3,r4
    629c:	1180022e 	bgeu	r2,r6,62a8 <memset+0x18>
    62a0:	2084703a 	and	r2,r4,r2
    62a4:	10000826 	beq	r2,zero,62c8 <memset+0x38>
    62a8:	30000526 	beq	r6,zero,62c0 <memset+0x30>
    62ac:	2805883a 	mov	r2,r5
    62b0:	30cd883a 	add	r6,r6,r3
    62b4:	18800005 	stb	r2,0(r3)
    62b8:	18c00044 	addi	r3,r3,1
    62bc:	19bffd1e 	bne	r3,r6,62b4 <memset+0x24>
    62c0:	2005883a 	mov	r2,r4
    62c4:	f800283a 	ret
    62c8:	2804923a 	slli	r2,r5,8
    62cc:	020003c4 	movi	r8,15
    62d0:	200f883a 	mov	r7,r4
    62d4:	2884b03a 	or	r2,r5,r2
    62d8:	1006943a 	slli	r3,r2,16
    62dc:	10c6b03a 	or	r3,r2,r3
    62e0:	41800a2e 	bgeu	r8,r6,630c <memset+0x7c>
    62e4:	4005883a 	mov	r2,r8
    62e8:	31bffc04 	addi	r6,r6,-16
    62ec:	38c00015 	stw	r3,0(r7)
    62f0:	38c00115 	stw	r3,4(r7)
    62f4:	38c00215 	stw	r3,8(r7)
    62f8:	38c00315 	stw	r3,12(r7)
    62fc:	39c00404 	addi	r7,r7,16
    6300:	11bff936 	bltu	r2,r6,62e8 <memset+0x58>
    6304:	008000c4 	movi	r2,3
    6308:	1180052e 	bgeu	r2,r6,6320 <memset+0x90>
    630c:	31bfff04 	addi	r6,r6,-4
    6310:	008000c4 	movi	r2,3
    6314:	38c00015 	stw	r3,0(r7)
    6318:	39c00104 	addi	r7,r7,4
    631c:	11bffb36 	bltu	r2,r6,630c <memset+0x7c>
    6320:	3807883a 	mov	r3,r7
    6324:	003fe006 	br	62a8 <memset+0x18>

00006328 <_Bfree>:
    6328:	28000826 	beq	r5,zero,634c <_Bfree+0x24>
    632c:	28800117 	ldw	r2,4(r5)
    6330:	21001317 	ldw	r4,76(r4)
    6334:	1085883a 	add	r2,r2,r2
    6338:	1085883a 	add	r2,r2,r2
    633c:	1105883a 	add	r2,r2,r4
    6340:	10c00017 	ldw	r3,0(r2)
    6344:	28c00015 	stw	r3,0(r5)
    6348:	11400015 	stw	r5,0(r2)
    634c:	f800283a 	ret

00006350 <__hi0bits>:
    6350:	20bfffec 	andhi	r2,r4,65535
    6354:	10001426 	beq	r2,zero,63a8 <__hi0bits+0x58>
    6358:	0007883a 	mov	r3,zero
    635c:	20bfc02c 	andhi	r2,r4,65280
    6360:	1000021e 	bne	r2,zero,636c <__hi0bits+0x1c>
    6364:	2008923a 	slli	r4,r4,8
    6368:	18c00204 	addi	r3,r3,8
    636c:	20bc002c 	andhi	r2,r4,61440
    6370:	1000021e 	bne	r2,zero,637c <__hi0bits+0x2c>
    6374:	2008913a 	slli	r4,r4,4
    6378:	18c00104 	addi	r3,r3,4
    637c:	20b0002c 	andhi	r2,r4,49152
    6380:	1000031e 	bne	r2,zero,6390 <__hi0bits+0x40>
    6384:	2105883a 	add	r2,r4,r4
    6388:	18c00084 	addi	r3,r3,2
    638c:	1089883a 	add	r4,r2,r2
    6390:	20000316 	blt	r4,zero,63a0 <__hi0bits+0x50>
    6394:	2090002c 	andhi	r2,r4,16384
    6398:	10000626 	beq	r2,zero,63b4 <__hi0bits+0x64>
    639c:	18c00044 	addi	r3,r3,1
    63a0:	1805883a 	mov	r2,r3
    63a4:	f800283a 	ret
    63a8:	2008943a 	slli	r4,r4,16
    63ac:	00c00404 	movi	r3,16
    63b0:	003fea06 	br	635c <__hi0bits+0xc>
    63b4:	00c00804 	movi	r3,32
    63b8:	1805883a 	mov	r2,r3
    63bc:	f800283a 	ret

000063c0 <__lo0bits>:
    63c0:	20c00017 	ldw	r3,0(r4)
    63c4:	188001cc 	andi	r2,r3,7
    63c8:	10000a26 	beq	r2,zero,63f4 <__lo0bits+0x34>
    63cc:	1880004c 	andi	r2,r3,1
    63d0:	1005003a 	cmpeq	r2,r2,zero
    63d4:	10002126 	beq	r2,zero,645c <__lo0bits+0x9c>
    63d8:	1880008c 	andi	r2,r3,2
    63dc:	1000251e 	bne	r2,zero,6474 <__lo0bits+0xb4>
    63e0:	1804d0ba 	srli	r2,r3,2
    63e4:	01400084 	movi	r5,2
    63e8:	20800015 	stw	r2,0(r4)
    63ec:	2805883a 	mov	r2,r5
    63f0:	f800283a 	ret
    63f4:	18bfffcc 	andi	r2,r3,65535
    63f8:	10001526 	beq	r2,zero,6450 <__lo0bits+0x90>
    63fc:	000b883a 	mov	r5,zero
    6400:	18803fcc 	andi	r2,r3,255
    6404:	1000021e 	bne	r2,zero,6410 <__lo0bits+0x50>
    6408:	1806d23a 	srli	r3,r3,8
    640c:	29400204 	addi	r5,r5,8
    6410:	188003cc 	andi	r2,r3,15
    6414:	1000021e 	bne	r2,zero,6420 <__lo0bits+0x60>
    6418:	1806d13a 	srli	r3,r3,4
    641c:	29400104 	addi	r5,r5,4
    6420:	188000cc 	andi	r2,r3,3
    6424:	1000021e 	bne	r2,zero,6430 <__lo0bits+0x70>
    6428:	1806d0ba 	srli	r3,r3,2
    642c:	29400084 	addi	r5,r5,2
    6430:	1880004c 	andi	r2,r3,1
    6434:	1000031e 	bne	r2,zero,6444 <__lo0bits+0x84>
    6438:	1806d07a 	srli	r3,r3,1
    643c:	18000a26 	beq	r3,zero,6468 <__lo0bits+0xa8>
    6440:	29400044 	addi	r5,r5,1
    6444:	2805883a 	mov	r2,r5
    6448:	20c00015 	stw	r3,0(r4)
    644c:	f800283a 	ret
    6450:	1806d43a 	srli	r3,r3,16
    6454:	01400404 	movi	r5,16
    6458:	003fe906 	br	6400 <__lo0bits+0x40>
    645c:	000b883a 	mov	r5,zero
    6460:	2805883a 	mov	r2,r5
    6464:	f800283a 	ret
    6468:	01400804 	movi	r5,32
    646c:	2805883a 	mov	r2,r5
    6470:	f800283a 	ret
    6474:	1804d07a 	srli	r2,r3,1
    6478:	01400044 	movi	r5,1
    647c:	20800015 	stw	r2,0(r4)
    6480:	003fda06 	br	63ec <__lo0bits+0x2c>

00006484 <__mcmp>:
    6484:	20800417 	ldw	r2,16(r4)
    6488:	28c00417 	ldw	r3,16(r5)
    648c:	10cfc83a 	sub	r7,r2,r3
    6490:	38000c1e 	bne	r7,zero,64c4 <__mcmp+0x40>
    6494:	18c5883a 	add	r2,r3,r3
    6498:	1085883a 	add	r2,r2,r2
    649c:	10c00504 	addi	r3,r2,20
    64a0:	21000504 	addi	r4,r4,20
    64a4:	28cb883a 	add	r5,r5,r3
    64a8:	2085883a 	add	r2,r4,r2
    64ac:	10bfff04 	addi	r2,r2,-4
    64b0:	297fff04 	addi	r5,r5,-4
    64b4:	11800017 	ldw	r6,0(r2)
    64b8:	28c00017 	ldw	r3,0(r5)
    64bc:	30c0031e 	bne	r6,r3,64cc <__mcmp+0x48>
    64c0:	20bffa36 	bltu	r4,r2,64ac <__mcmp+0x28>
    64c4:	3805883a 	mov	r2,r7
    64c8:	f800283a 	ret
    64cc:	30c00336 	bltu	r6,r3,64dc <__mcmp+0x58>
    64d0:	01c00044 	movi	r7,1
    64d4:	3805883a 	mov	r2,r7
    64d8:	f800283a 	ret
    64dc:	01ffffc4 	movi	r7,-1
    64e0:	003ff806 	br	64c4 <__mcmp+0x40>

000064e4 <__ulp>:
    64e4:	295ffc2c 	andhi	r5,r5,32752
    64e8:	013f3034 	movhi	r4,64704
    64ec:	290b883a 	add	r5,r5,r4
    64f0:	0145c83a 	sub	r2,zero,r5
    64f4:	1007d53a 	srai	r3,r2,20
    64f8:	000d883a 	mov	r6,zero
    64fc:	0140040e 	bge	zero,r5,6510 <__ulp+0x2c>
    6500:	280f883a 	mov	r7,r5
    6504:	3807883a 	mov	r3,r7
    6508:	3005883a 	mov	r2,r6
    650c:	f800283a 	ret
    6510:	008004c4 	movi	r2,19
    6514:	193ffb04 	addi	r4,r3,-20
    6518:	10c00c0e 	bge	r2,r3,654c <__ulp+0x68>
    651c:	008007c4 	movi	r2,31
    6520:	1107c83a 	sub	r3,r2,r4
    6524:	00800784 	movi	r2,30
    6528:	01400044 	movi	r5,1
    652c:	11000216 	blt	r2,r4,6538 <__ulp+0x54>
    6530:	00800044 	movi	r2,1
    6534:	10ca983a 	sll	r5,r2,r3
    6538:	000f883a 	mov	r7,zero
    653c:	280d883a 	mov	r6,r5
    6540:	3807883a 	mov	r3,r7
    6544:	3005883a 	mov	r2,r6
    6548:	f800283a 	ret
    654c:	00800234 	movhi	r2,8
    6550:	10cfd83a 	sra	r7,r2,r3
    6554:	000d883a 	mov	r6,zero
    6558:	3005883a 	mov	r2,r6
    655c:	3807883a 	mov	r3,r7
    6560:	f800283a 	ret

00006564 <__b2d>:
    6564:	20800417 	ldw	r2,16(r4)
    6568:	defff904 	addi	sp,sp,-28
    656c:	dd000415 	stw	r20,16(sp)
    6570:	1085883a 	add	r2,r2,r2
    6574:	25000504 	addi	r20,r4,20
    6578:	1085883a 	add	r2,r2,r2
    657c:	dc000015 	stw	r16,0(sp)
    6580:	a0a1883a 	add	r16,r20,r2
    6584:	dd400515 	stw	r21,20(sp)
    6588:	857fff17 	ldw	r21,-4(r16)
    658c:	dc400115 	stw	r17,4(sp)
    6590:	dfc00615 	stw	ra,24(sp)
    6594:	a809883a 	mov	r4,r21
    6598:	2823883a 	mov	r17,r5
    659c:	dcc00315 	stw	r19,12(sp)
    65a0:	dc800215 	stw	r18,8(sp)
    65a4:	00063500 	call	6350 <__hi0bits>
    65a8:	100b883a 	mov	r5,r2
    65ac:	00800804 	movi	r2,32
    65b0:	1145c83a 	sub	r2,r2,r5
    65b4:	88800015 	stw	r2,0(r17)
    65b8:	00800284 	movi	r2,10
    65bc:	80ffff04 	addi	r3,r16,-4
    65c0:	11401416 	blt	r2,r5,6614 <__b2d+0xb0>
    65c4:	008002c4 	movi	r2,11
    65c8:	1149c83a 	sub	r4,r2,r5
    65cc:	a0c02736 	bltu	r20,r3,666c <__b2d+0x108>
    65d0:	000d883a 	mov	r6,zero
    65d4:	28800544 	addi	r2,r5,21
    65d8:	a906d83a 	srl	r3,r21,r4
    65dc:	a884983a 	sll	r2,r21,r2
    65e0:	1ccffc34 	orhi	r19,r3,16368
    65e4:	11a4b03a 	or	r18,r2,r6
    65e8:	9005883a 	mov	r2,r18
    65ec:	9807883a 	mov	r3,r19
    65f0:	dfc00617 	ldw	ra,24(sp)
    65f4:	dd400517 	ldw	r21,20(sp)
    65f8:	dd000417 	ldw	r20,16(sp)
    65fc:	dcc00317 	ldw	r19,12(sp)
    6600:	dc800217 	ldw	r18,8(sp)
    6604:	dc400117 	ldw	r17,4(sp)
    6608:	dc000017 	ldw	r16,0(sp)
    660c:	dec00704 	addi	sp,sp,28
    6610:	f800283a 	ret
    6614:	a0c00e36 	bltu	r20,r3,6650 <__b2d+0xec>
    6618:	293ffd44 	addi	r4,r5,-11
    661c:	000d883a 	mov	r6,zero
    6620:	20000f26 	beq	r4,zero,6660 <__b2d+0xfc>
    6624:	00800804 	movi	r2,32
    6628:	110bc83a 	sub	r5,r2,r4
    662c:	a0c01236 	bltu	r20,r3,6678 <__b2d+0x114>
    6630:	000f883a 	mov	r7,zero
    6634:	a904983a 	sll	r2,r21,r4
    6638:	3146d83a 	srl	r3,r6,r5
    663c:	3108983a 	sll	r4,r6,r4
    6640:	108ffc34 	orhi	r2,r2,16368
    6644:	18a6b03a 	or	r19,r3,r2
    6648:	3924b03a 	or	r18,r7,r4
    664c:	003fe606 	br	65e8 <__b2d+0x84>
    6650:	293ffd44 	addi	r4,r5,-11
    6654:	81bffe17 	ldw	r6,-8(r16)
    6658:	80fffe04 	addi	r3,r16,-8
    665c:	203ff11e 	bne	r4,zero,6624 <__b2d+0xc0>
    6660:	accffc34 	orhi	r19,r21,16368
    6664:	3025883a 	mov	r18,r6
    6668:	003fdf06 	br	65e8 <__b2d+0x84>
    666c:	18bfff17 	ldw	r2,-4(r3)
    6670:	110cd83a 	srl	r6,r2,r4
    6674:	003fd706 	br	65d4 <__b2d+0x70>
    6678:	18bfff17 	ldw	r2,-4(r3)
    667c:	114ed83a 	srl	r7,r2,r5
    6680:	003fec06 	br	6634 <__b2d+0xd0>

00006684 <__ratio>:
    6684:	defff904 	addi	sp,sp,-28
    6688:	dc400215 	stw	r17,8(sp)
    668c:	2823883a 	mov	r17,r5
    6690:	d80b883a 	mov	r5,sp
    6694:	dfc00615 	stw	ra,24(sp)
    6698:	dd000515 	stw	r20,20(sp)
    669c:	dcc00415 	stw	r19,16(sp)
    66a0:	dc800315 	stw	r18,12(sp)
    66a4:	2025883a 	mov	r18,r4
    66a8:	00065640 	call	6564 <__b2d>
    66ac:	8809883a 	mov	r4,r17
    66b0:	d9400104 	addi	r5,sp,4
    66b4:	1027883a 	mov	r19,r2
    66b8:	1829883a 	mov	r20,r3
    66bc:	00065640 	call	6564 <__b2d>
    66c0:	89000417 	ldw	r4,16(r17)
    66c4:	91c00417 	ldw	r7,16(r18)
    66c8:	d9800117 	ldw	r6,4(sp)
    66cc:	180b883a 	mov	r5,r3
    66d0:	390fc83a 	sub	r7,r7,r4
    66d4:	1009883a 	mov	r4,r2
    66d8:	d8800017 	ldw	r2,0(sp)
    66dc:	380e917a 	slli	r7,r7,5
    66e0:	2011883a 	mov	r8,r4
    66e4:	1185c83a 	sub	r2,r2,r6
    66e8:	11c5883a 	add	r2,r2,r7
    66ec:	1006953a 	slli	r3,r2,20
    66f0:	2813883a 	mov	r9,r5
    66f4:	00800d0e 	bge	zero,r2,672c <__ratio+0xa8>
    66f8:	1d29883a 	add	r20,r3,r20
    66fc:	a00b883a 	mov	r5,r20
    6700:	480f883a 	mov	r7,r9
    6704:	9809883a 	mov	r4,r19
    6708:	400d883a 	mov	r6,r8
    670c:	00098b00 	call	98b0 <__divdf3>
    6710:	dfc00617 	ldw	ra,24(sp)
    6714:	dd000517 	ldw	r20,20(sp)
    6718:	dcc00417 	ldw	r19,16(sp)
    671c:	dc800317 	ldw	r18,12(sp)
    6720:	dc400217 	ldw	r17,8(sp)
    6724:	dec00704 	addi	sp,sp,28
    6728:	f800283a 	ret
    672c:	28d3c83a 	sub	r9,r5,r3
    6730:	003ff206 	br	66fc <__ratio+0x78>

00006734 <_mprec_log10>:
    6734:	defffe04 	addi	sp,sp,-8
    6738:	008005c4 	movi	r2,23
    673c:	dc000015 	stw	r16,0(sp)
    6740:	dfc00115 	stw	ra,4(sp)
    6744:	2021883a 	mov	r16,r4
    6748:	11000c16 	blt	r2,r4,677c <_mprec_log10+0x48>
    674c:	200490fa 	slli	r2,r4,3
    6750:	00c00074 	movhi	r3,1
    6754:	18f53604 	addi	r3,r3,-11048
    6758:	10c5883a 	add	r2,r2,r3
    675c:	12400117 	ldw	r9,4(r2)
    6760:	12000017 	ldw	r8,0(r2)
    6764:	4807883a 	mov	r3,r9
    6768:	4005883a 	mov	r2,r8
    676c:	dfc00117 	ldw	ra,4(sp)
    6770:	dc000017 	ldw	r16,0(sp)
    6774:	dec00204 	addi	sp,sp,8
    6778:	f800283a 	ret
    677c:	0011883a 	mov	r8,zero
    6780:	024ffc34 	movhi	r9,16368
    6784:	0005883a 	mov	r2,zero
    6788:	00d00934 	movhi	r3,16420
    678c:	480b883a 	mov	r5,r9
    6790:	4009883a 	mov	r4,r8
    6794:	180f883a 	mov	r7,r3
    6798:	100d883a 	mov	r6,r2
    679c:	00094ec0 	call	94ec <__muldf3>
    67a0:	843fffc4 	addi	r16,r16,-1
    67a4:	1011883a 	mov	r8,r2
    67a8:	1813883a 	mov	r9,r3
    67ac:	803ff51e 	bne	r16,zero,6784 <_mprec_log10+0x50>
    67b0:	4005883a 	mov	r2,r8
    67b4:	4807883a 	mov	r3,r9
    67b8:	dfc00117 	ldw	ra,4(sp)
    67bc:	dc000017 	ldw	r16,0(sp)
    67c0:	dec00204 	addi	sp,sp,8
    67c4:	f800283a 	ret

000067c8 <__copybits>:
    67c8:	297fffc4 	addi	r5,r5,-1
    67cc:	30800417 	ldw	r2,16(r6)
    67d0:	280bd17a 	srai	r5,r5,5
    67d4:	31800504 	addi	r6,r6,20
    67d8:	1085883a 	add	r2,r2,r2
    67dc:	294b883a 	add	r5,r5,r5
    67e0:	294b883a 	add	r5,r5,r5
    67e4:	1085883a 	add	r2,r2,r2
    67e8:	290b883a 	add	r5,r5,r4
    67ec:	3087883a 	add	r3,r6,r2
    67f0:	29400104 	addi	r5,r5,4
    67f4:	30c0052e 	bgeu	r6,r3,680c <__copybits+0x44>
    67f8:	30800017 	ldw	r2,0(r6)
    67fc:	31800104 	addi	r6,r6,4
    6800:	20800015 	stw	r2,0(r4)
    6804:	21000104 	addi	r4,r4,4
    6808:	30fffb36 	bltu	r6,r3,67f8 <__copybits+0x30>
    680c:	2140032e 	bgeu	r4,r5,681c <__copybits+0x54>
    6810:	20000015 	stw	zero,0(r4)
    6814:	21000104 	addi	r4,r4,4
    6818:	217ffd36 	bltu	r4,r5,6810 <__copybits+0x48>
    681c:	f800283a 	ret

00006820 <__any_on>:
    6820:	20800417 	ldw	r2,16(r4)
    6824:	2807d17a 	srai	r3,r5,5
    6828:	21000504 	addi	r4,r4,20
    682c:	10c00d0e 	bge	r2,r3,6864 <__any_on+0x44>
    6830:	1085883a 	add	r2,r2,r2
    6834:	1085883a 	add	r2,r2,r2
    6838:	208d883a 	add	r6,r4,r2
    683c:	2180182e 	bgeu	r4,r6,68a0 <__any_on+0x80>
    6840:	30bfff17 	ldw	r2,-4(r6)
    6844:	30ffff04 	addi	r3,r6,-4
    6848:	1000041e 	bne	r2,zero,685c <__any_on+0x3c>
    684c:	20c0142e 	bgeu	r4,r3,68a0 <__any_on+0x80>
    6850:	18ffff04 	addi	r3,r3,-4
    6854:	18800017 	ldw	r2,0(r3)
    6858:	103ffc26 	beq	r2,zero,684c <__any_on+0x2c>
    685c:	00800044 	movi	r2,1
    6860:	f800283a 	ret
    6864:	18800a0e 	bge	r3,r2,6890 <__any_on+0x70>
    6868:	294007cc 	andi	r5,r5,31
    686c:	28000826 	beq	r5,zero,6890 <__any_on+0x70>
    6870:	18c5883a 	add	r2,r3,r3
    6874:	1085883a 	add	r2,r2,r2
    6878:	208d883a 	add	r6,r4,r2
    687c:	30c00017 	ldw	r3,0(r6)
    6880:	1944d83a 	srl	r2,r3,r5
    6884:	1144983a 	sll	r2,r2,r5
    6888:	18bff41e 	bne	r3,r2,685c <__any_on+0x3c>
    688c:	003feb06 	br	683c <__any_on+0x1c>
    6890:	18c5883a 	add	r2,r3,r3
    6894:	1085883a 	add	r2,r2,r2
    6898:	208d883a 	add	r6,r4,r2
    689c:	003fe706 	br	683c <__any_on+0x1c>
    68a0:	0005883a 	mov	r2,zero
    68a4:	f800283a 	ret

000068a8 <_Balloc>:
    68a8:	20c01317 	ldw	r3,76(r4)
    68ac:	defffb04 	addi	sp,sp,-20
    68b0:	dcc00315 	stw	r19,12(sp)
    68b4:	dc800215 	stw	r18,8(sp)
    68b8:	dfc00415 	stw	ra,16(sp)
    68bc:	2825883a 	mov	r18,r5
    68c0:	dc400115 	stw	r17,4(sp)
    68c4:	dc000015 	stw	r16,0(sp)
    68c8:	2027883a 	mov	r19,r4
    68cc:	01800404 	movi	r6,16
    68d0:	01400104 	movi	r5,4
    68d4:	18001726 	beq	r3,zero,6934 <_Balloc+0x8c>
    68d8:	01400044 	movi	r5,1
    68dc:	9485883a 	add	r2,r18,r18
    68e0:	2ca2983a 	sll	r17,r5,r18
    68e4:	1085883a 	add	r2,r2,r2
    68e8:	10c7883a 	add	r3,r2,r3
    68ec:	1c000017 	ldw	r16,0(r3)
    68f0:	8c4d883a 	add	r6,r17,r17
    68f4:	318d883a 	add	r6,r6,r6
    68f8:	9809883a 	mov	r4,r19
    68fc:	31800504 	addi	r6,r6,20
    6900:	80001226 	beq	r16,zero,694c <_Balloc+0xa4>
    6904:	80800017 	ldw	r2,0(r16)
    6908:	18800015 	stw	r2,0(r3)
    690c:	80000415 	stw	zero,16(r16)
    6910:	80000315 	stw	zero,12(r16)
    6914:	8005883a 	mov	r2,r16
    6918:	dfc00417 	ldw	ra,16(sp)
    691c:	dcc00317 	ldw	r19,12(sp)
    6920:	dc800217 	ldw	r18,8(sp)
    6924:	dc400117 	ldw	r17,4(sp)
    6928:	dc000017 	ldw	r16,0(sp)
    692c:	dec00504 	addi	sp,sp,20
    6930:	f800283a 	ret
    6934:	0007fa80 	call	7fa8 <_calloc_r>
    6938:	1007883a 	mov	r3,r2
    693c:	0021883a 	mov	r16,zero
    6940:	98801315 	stw	r2,76(r19)
    6944:	103fe41e 	bne	r2,zero,68d8 <_Balloc+0x30>
    6948:	003ff206 	br	6914 <_Balloc+0x6c>
    694c:	0007fa80 	call	7fa8 <_calloc_r>
    6950:	103ff026 	beq	r2,zero,6914 <_Balloc+0x6c>
    6954:	1021883a 	mov	r16,r2
    6958:	14800115 	stw	r18,4(r2)
    695c:	14400215 	stw	r17,8(r2)
    6960:	003fea06 	br	690c <_Balloc+0x64>

00006964 <__d2b>:
    6964:	defff504 	addi	sp,sp,-44
    6968:	dcc00515 	stw	r19,20(sp)
    696c:	04c00044 	movi	r19,1
    6970:	dc000215 	stw	r16,8(sp)
    6974:	2821883a 	mov	r16,r5
    6978:	980b883a 	mov	r5,r19
    697c:	ddc00915 	stw	r23,36(sp)
    6980:	dd800815 	stw	r22,32(sp)
    6984:	dd400715 	stw	r21,28(sp)
    6988:	dd000615 	stw	r20,24(sp)
    698c:	dc800415 	stw	r18,16(sp)
    6990:	dc400315 	stw	r17,12(sp)
    6994:	dfc00a15 	stw	ra,40(sp)
    6998:	3023883a 	mov	r17,r6
    699c:	382d883a 	mov	r22,r7
    69a0:	ddc00b17 	ldw	r23,44(sp)
    69a4:	00068a80 	call	68a8 <_Balloc>
    69a8:	1025883a 	mov	r18,r2
    69ac:	00a00034 	movhi	r2,32768
    69b0:	10bfffc4 	addi	r2,r2,-1
    69b4:	8888703a 	and	r4,r17,r2
    69b8:	202ad53a 	srli	r21,r4,20
    69bc:	00800434 	movhi	r2,16
    69c0:	10bfffc4 	addi	r2,r2,-1
    69c4:	8886703a 	and	r3,r17,r2
    69c8:	a829003a 	cmpeq	r20,r21,zero
    69cc:	800b883a 	mov	r5,r16
    69d0:	d8c00115 	stw	r3,4(sp)
    69d4:	94000504 	addi	r16,r18,20
    69d8:	a000021e 	bne	r20,zero,69e4 <__d2b+0x80>
    69dc:	18c00434 	orhi	r3,r3,16
    69e0:	d8c00115 	stw	r3,4(sp)
    69e4:	28002726 	beq	r5,zero,6a84 <__d2b+0x120>
    69e8:	d809883a 	mov	r4,sp
    69ec:	d9400015 	stw	r5,0(sp)
    69f0:	00063c00 	call	63c0 <__lo0bits>
    69f4:	100d883a 	mov	r6,r2
    69f8:	10003526 	beq	r2,zero,6ad0 <__d2b+0x16c>
    69fc:	d8c00117 	ldw	r3,4(sp)
    6a00:	00800804 	movi	r2,32
    6a04:	1185c83a 	sub	r2,r2,r6
    6a08:	d9000017 	ldw	r4,0(sp)
    6a0c:	1886983a 	sll	r3,r3,r2
    6a10:	1906b03a 	or	r3,r3,r4
    6a14:	90c00515 	stw	r3,20(r18)
    6a18:	d8c00117 	ldw	r3,4(sp)
    6a1c:	1986d83a 	srl	r3,r3,r6
    6a20:	d8c00115 	stw	r3,4(sp)
    6a24:	180b003a 	cmpeq	r5,r3,zero
    6a28:	00800084 	movi	r2,2
    6a2c:	114bc83a 	sub	r5,r2,r5
    6a30:	80c00115 	stw	r3,4(r16)
    6a34:	91400415 	stw	r5,16(r18)
    6a38:	a0001a1e 	bne	r20,zero,6aa4 <__d2b+0x140>
    6a3c:	3545883a 	add	r2,r6,r21
    6a40:	10bef344 	addi	r2,r2,-1075
    6a44:	00c00d44 	movi	r3,53
    6a48:	b0800015 	stw	r2,0(r22)
    6a4c:	1987c83a 	sub	r3,r3,r6
    6a50:	b8c00015 	stw	r3,0(r23)
    6a54:	9005883a 	mov	r2,r18
    6a58:	dfc00a17 	ldw	ra,40(sp)
    6a5c:	ddc00917 	ldw	r23,36(sp)
    6a60:	dd800817 	ldw	r22,32(sp)
    6a64:	dd400717 	ldw	r21,28(sp)
    6a68:	dd000617 	ldw	r20,24(sp)
    6a6c:	dcc00517 	ldw	r19,20(sp)
    6a70:	dc800417 	ldw	r18,16(sp)
    6a74:	dc400317 	ldw	r17,12(sp)
    6a78:	dc000217 	ldw	r16,8(sp)
    6a7c:	dec00b04 	addi	sp,sp,44
    6a80:	f800283a 	ret
    6a84:	d9000104 	addi	r4,sp,4
    6a88:	00063c00 	call	63c0 <__lo0bits>
    6a8c:	11800804 	addi	r6,r2,32
    6a90:	d8800117 	ldw	r2,4(sp)
    6a94:	94c00415 	stw	r19,16(r18)
    6a98:	980b883a 	mov	r5,r19
    6a9c:	90800515 	stw	r2,20(r18)
    6aa0:	a03fe626 	beq	r20,zero,6a3c <__d2b+0xd8>
    6aa4:	2945883a 	add	r2,r5,r5
    6aa8:	1085883a 	add	r2,r2,r2
    6aac:	1405883a 	add	r2,r2,r16
    6ab0:	113fff17 	ldw	r4,-4(r2)
    6ab4:	30fef384 	addi	r3,r6,-1074
    6ab8:	2820917a 	slli	r16,r5,5
    6abc:	b0c00015 	stw	r3,0(r22)
    6ac0:	00063500 	call	6350 <__hi0bits>
    6ac4:	80a1c83a 	sub	r16,r16,r2
    6ac8:	bc000015 	stw	r16,0(r23)
    6acc:	003fe106 	br	6a54 <__d2b+0xf0>
    6ad0:	d8800017 	ldw	r2,0(sp)
    6ad4:	90800515 	stw	r2,20(r18)
    6ad8:	d8c00117 	ldw	r3,4(sp)
    6adc:	003fd106 	br	6a24 <__d2b+0xc0>

00006ae0 <__mdiff>:
    6ae0:	defffb04 	addi	sp,sp,-20
    6ae4:	dc000015 	stw	r16,0(sp)
    6ae8:	2821883a 	mov	r16,r5
    6aec:	dc800215 	stw	r18,8(sp)
    6af0:	300b883a 	mov	r5,r6
    6af4:	2025883a 	mov	r18,r4
    6af8:	8009883a 	mov	r4,r16
    6afc:	dc400115 	stw	r17,4(sp)
    6b00:	dfc00415 	stw	ra,16(sp)
    6b04:	dcc00315 	stw	r19,12(sp)
    6b08:	3023883a 	mov	r17,r6
    6b0c:	00064840 	call	6484 <__mcmp>
    6b10:	10004226 	beq	r2,zero,6c1c <__mdiff+0x13c>
    6b14:	10005016 	blt	r2,zero,6c58 <__mdiff+0x178>
    6b18:	0027883a 	mov	r19,zero
    6b1c:	81400117 	ldw	r5,4(r16)
    6b20:	9009883a 	mov	r4,r18
    6b24:	00068a80 	call	68a8 <_Balloc>
    6b28:	1019883a 	mov	r12,r2
    6b2c:	82800417 	ldw	r10,16(r16)
    6b30:	88800417 	ldw	r2,16(r17)
    6b34:	81800504 	addi	r6,r16,20
    6b38:	5287883a 	add	r3,r10,r10
    6b3c:	1085883a 	add	r2,r2,r2
    6b40:	18c7883a 	add	r3,r3,r3
    6b44:	1085883a 	add	r2,r2,r2
    6b48:	8a000504 	addi	r8,r17,20
    6b4c:	64c00315 	stw	r19,12(r12)
    6b50:	30db883a 	add	r13,r6,r3
    6b54:	4097883a 	add	r11,r8,r2
    6b58:	61c00504 	addi	r7,r12,20
    6b5c:	0013883a 	mov	r9,zero
    6b60:	31000017 	ldw	r4,0(r6)
    6b64:	41400017 	ldw	r5,0(r8)
    6b68:	42000104 	addi	r8,r8,4
    6b6c:	20bfffcc 	andi	r2,r4,65535
    6b70:	28ffffcc 	andi	r3,r5,65535
    6b74:	10c5c83a 	sub	r2,r2,r3
    6b78:	1245883a 	add	r2,r2,r9
    6b7c:	2008d43a 	srli	r4,r4,16
    6b80:	280ad43a 	srli	r5,r5,16
    6b84:	1007d43a 	srai	r3,r2,16
    6b88:	3880000d 	sth	r2,0(r7)
    6b8c:	2149c83a 	sub	r4,r4,r5
    6b90:	20c9883a 	add	r4,r4,r3
    6b94:	3900008d 	sth	r4,2(r7)
    6b98:	31800104 	addi	r6,r6,4
    6b9c:	39c00104 	addi	r7,r7,4
    6ba0:	2013d43a 	srai	r9,r4,16
    6ba4:	42ffee36 	bltu	r8,r11,6b60 <__mdiff+0x80>
    6ba8:	33400c2e 	bgeu	r6,r13,6bdc <__mdiff+0xfc>
    6bac:	30800017 	ldw	r2,0(r6)
    6bb0:	31800104 	addi	r6,r6,4
    6bb4:	10ffffcc 	andi	r3,r2,65535
    6bb8:	1a47883a 	add	r3,r3,r9
    6bbc:	1004d43a 	srli	r2,r2,16
    6bc0:	1809d43a 	srai	r4,r3,16
    6bc4:	38c0000d 	sth	r3,0(r7)
    6bc8:	1105883a 	add	r2,r2,r4
    6bcc:	3880008d 	sth	r2,2(r7)
    6bd0:	1013d43a 	srai	r9,r2,16
    6bd4:	39c00104 	addi	r7,r7,4
    6bd8:	337ff436 	bltu	r6,r13,6bac <__mdiff+0xcc>
    6bdc:	38bfff17 	ldw	r2,-4(r7)
    6be0:	38ffff04 	addi	r3,r7,-4
    6be4:	1000041e 	bne	r2,zero,6bf8 <__mdiff+0x118>
    6be8:	18ffff04 	addi	r3,r3,-4
    6bec:	18800017 	ldw	r2,0(r3)
    6bf0:	52bfffc4 	addi	r10,r10,-1
    6bf4:	103ffc26 	beq	r2,zero,6be8 <__mdiff+0x108>
    6bf8:	6005883a 	mov	r2,r12
    6bfc:	62800415 	stw	r10,16(r12)
    6c00:	dfc00417 	ldw	ra,16(sp)
    6c04:	dcc00317 	ldw	r19,12(sp)
    6c08:	dc800217 	ldw	r18,8(sp)
    6c0c:	dc400117 	ldw	r17,4(sp)
    6c10:	dc000017 	ldw	r16,0(sp)
    6c14:	dec00504 	addi	sp,sp,20
    6c18:	f800283a 	ret
    6c1c:	9009883a 	mov	r4,r18
    6c20:	000b883a 	mov	r5,zero
    6c24:	00068a80 	call	68a8 <_Balloc>
    6c28:	1019883a 	mov	r12,r2
    6c2c:	00800044 	movi	r2,1
    6c30:	60800415 	stw	r2,16(r12)
    6c34:	6005883a 	mov	r2,r12
    6c38:	60000515 	stw	zero,20(r12)
    6c3c:	dfc00417 	ldw	ra,16(sp)
    6c40:	dcc00317 	ldw	r19,12(sp)
    6c44:	dc800217 	ldw	r18,8(sp)
    6c48:	dc400117 	ldw	r17,4(sp)
    6c4c:	dc000017 	ldw	r16,0(sp)
    6c50:	dec00504 	addi	sp,sp,20
    6c54:	f800283a 	ret
    6c58:	880d883a 	mov	r6,r17
    6c5c:	04c00044 	movi	r19,1
    6c60:	8023883a 	mov	r17,r16
    6c64:	3021883a 	mov	r16,r6
    6c68:	003fac06 	br	6b1c <__mdiff+0x3c>

00006c6c <__lshift>:
    6c6c:	defff904 	addi	sp,sp,-28
    6c70:	28800417 	ldw	r2,16(r5)
    6c74:	dc000015 	stw	r16,0(sp)
    6c78:	3021d17a 	srai	r16,r6,5
    6c7c:	28c00217 	ldw	r3,8(r5)
    6c80:	10800044 	addi	r2,r2,1
    6c84:	dc400115 	stw	r17,4(sp)
    6c88:	80a3883a 	add	r17,r16,r2
    6c8c:	dd400515 	stw	r21,20(sp)
    6c90:	dd000415 	stw	r20,16(sp)
    6c94:	dc800215 	stw	r18,8(sp)
    6c98:	dfc00615 	stw	ra,24(sp)
    6c9c:	2825883a 	mov	r18,r5
    6ca0:	dcc00315 	stw	r19,12(sp)
    6ca4:	3029883a 	mov	r20,r6
    6ca8:	202b883a 	mov	r21,r4
    6cac:	29400117 	ldw	r5,4(r5)
    6cb0:	1c40030e 	bge	r3,r17,6cc0 <__lshift+0x54>
    6cb4:	18c7883a 	add	r3,r3,r3
    6cb8:	29400044 	addi	r5,r5,1
    6cbc:	1c7ffd16 	blt	r3,r17,6cb4 <__lshift+0x48>
    6cc0:	a809883a 	mov	r4,r21
    6cc4:	00068a80 	call	68a8 <_Balloc>
    6cc8:	1027883a 	mov	r19,r2
    6ccc:	11400504 	addi	r5,r2,20
    6cd0:	0400090e 	bge	zero,r16,6cf8 <__lshift+0x8c>
    6cd4:	2805883a 	mov	r2,r5
    6cd8:	0007883a 	mov	r3,zero
    6cdc:	18c00044 	addi	r3,r3,1
    6ce0:	10000015 	stw	zero,0(r2)
    6ce4:	10800104 	addi	r2,r2,4
    6ce8:	80fffc1e 	bne	r16,r3,6cdc <__lshift+0x70>
    6cec:	8405883a 	add	r2,r16,r16
    6cf0:	1085883a 	add	r2,r2,r2
    6cf4:	288b883a 	add	r5,r5,r2
    6cf8:	90800417 	ldw	r2,16(r18)
    6cfc:	91000504 	addi	r4,r18,20
    6d00:	a18007cc 	andi	r6,r20,31
    6d04:	1085883a 	add	r2,r2,r2
    6d08:	1085883a 	add	r2,r2,r2
    6d0c:	208f883a 	add	r7,r4,r2
    6d10:	30001e26 	beq	r6,zero,6d8c <__lshift+0x120>
    6d14:	00800804 	movi	r2,32
    6d18:	1191c83a 	sub	r8,r2,r6
    6d1c:	0007883a 	mov	r3,zero
    6d20:	20800017 	ldw	r2,0(r4)
    6d24:	1184983a 	sll	r2,r2,r6
    6d28:	1884b03a 	or	r2,r3,r2
    6d2c:	28800015 	stw	r2,0(r5)
    6d30:	20c00017 	ldw	r3,0(r4)
    6d34:	21000104 	addi	r4,r4,4
    6d38:	29400104 	addi	r5,r5,4
    6d3c:	1a06d83a 	srl	r3,r3,r8
    6d40:	21fff736 	bltu	r4,r7,6d20 <__lshift+0xb4>
    6d44:	28c00015 	stw	r3,0(r5)
    6d48:	18000126 	beq	r3,zero,6d50 <__lshift+0xe4>
    6d4c:	8c400044 	addi	r17,r17,1
    6d50:	88bfffc4 	addi	r2,r17,-1
    6d54:	98800415 	stw	r2,16(r19)
    6d58:	a809883a 	mov	r4,r21
    6d5c:	900b883a 	mov	r5,r18
    6d60:	00063280 	call	6328 <_Bfree>
    6d64:	9805883a 	mov	r2,r19
    6d68:	dfc00617 	ldw	ra,24(sp)
    6d6c:	dd400517 	ldw	r21,20(sp)
    6d70:	dd000417 	ldw	r20,16(sp)
    6d74:	dcc00317 	ldw	r19,12(sp)
    6d78:	dc800217 	ldw	r18,8(sp)
    6d7c:	dc400117 	ldw	r17,4(sp)
    6d80:	dc000017 	ldw	r16,0(sp)
    6d84:	dec00704 	addi	sp,sp,28
    6d88:	f800283a 	ret
    6d8c:	20800017 	ldw	r2,0(r4)
    6d90:	21000104 	addi	r4,r4,4
    6d94:	28800015 	stw	r2,0(r5)
    6d98:	29400104 	addi	r5,r5,4
    6d9c:	21ffec2e 	bgeu	r4,r7,6d50 <__lshift+0xe4>
    6da0:	20800017 	ldw	r2,0(r4)
    6da4:	21000104 	addi	r4,r4,4
    6da8:	28800015 	stw	r2,0(r5)
    6dac:	29400104 	addi	r5,r5,4
    6db0:	21fff636 	bltu	r4,r7,6d8c <__lshift+0x120>
    6db4:	003fe606 	br	6d50 <__lshift+0xe4>

00006db8 <__multiply>:
    6db8:	defff904 	addi	sp,sp,-28
    6dbc:	dcc00315 	stw	r19,12(sp)
    6dc0:	dc800215 	stw	r18,8(sp)
    6dc4:	2cc00417 	ldw	r19,16(r5)
    6dc8:	34800417 	ldw	r18,16(r6)
    6dcc:	dd000415 	stw	r20,16(sp)
    6dd0:	dc400115 	stw	r17,4(sp)
    6dd4:	dfc00615 	stw	ra,24(sp)
    6dd8:	dd400515 	stw	r21,20(sp)
    6ddc:	dc000015 	stw	r16,0(sp)
    6de0:	2823883a 	mov	r17,r5
    6de4:	3029883a 	mov	r20,r6
    6de8:	9c80040e 	bge	r19,r18,6dfc <__multiply+0x44>
    6dec:	9027883a 	mov	r19,r18
    6df0:	2c800417 	ldw	r18,16(r5)
    6df4:	2829883a 	mov	r20,r5
    6df8:	3023883a 	mov	r17,r6
    6dfc:	88800217 	ldw	r2,8(r17)
    6e00:	9ca1883a 	add	r16,r19,r18
    6e04:	89400117 	ldw	r5,4(r17)
    6e08:	1400010e 	bge	r2,r16,6e10 <__multiply+0x58>
    6e0c:	29400044 	addi	r5,r5,1
    6e10:	00068a80 	call	68a8 <_Balloc>
    6e14:	102b883a 	mov	r21,r2
    6e18:	8405883a 	add	r2,r16,r16
    6e1c:	1085883a 	add	r2,r2,r2
    6e20:	a9000504 	addi	r4,r21,20
    6e24:	209d883a 	add	r14,r4,r2
    6e28:	2380042e 	bgeu	r4,r14,6e3c <__multiply+0x84>
    6e2c:	2005883a 	mov	r2,r4
    6e30:	10000015 	stw	zero,0(r2)
    6e34:	10800104 	addi	r2,r2,4
    6e38:	13bffd36 	bltu	r2,r14,6e30 <__multiply+0x78>
    6e3c:	9485883a 	add	r2,r18,r18
    6e40:	9cc7883a 	add	r3,r19,r19
    6e44:	a1800504 	addi	r6,r20,20
    6e48:	1085883a 	add	r2,r2,r2
    6e4c:	8b400504 	addi	r13,r17,20
    6e50:	18c7883a 	add	r3,r3,r3
    6e54:	309f883a 	add	r15,r6,r2
    6e58:	68d7883a 	add	r11,r13,r3
    6e5c:	33c03b2e 	bgeu	r6,r15,6f4c <__multiply+0x194>
    6e60:	2019883a 	mov	r12,r4
    6e64:	30800017 	ldw	r2,0(r6)
    6e68:	127fffcc 	andi	r9,r2,65535
    6e6c:	48001826 	beq	r9,zero,6ed0 <__multiply+0x118>
    6e70:	6811883a 	mov	r8,r13
    6e74:	600f883a 	mov	r7,r12
    6e78:	0015883a 	mov	r10,zero
    6e7c:	40c00017 	ldw	r3,0(r8)
    6e80:	39400017 	ldw	r5,0(r7)
    6e84:	42000104 	addi	r8,r8,4
    6e88:	193fffcc 	andi	r4,r3,65535
    6e8c:	4909383a 	mul	r4,r9,r4
    6e90:	1806d43a 	srli	r3,r3,16
    6e94:	28bfffcc 	andi	r2,r5,65535
    6e98:	5085883a 	add	r2,r10,r2
    6e9c:	2089883a 	add	r4,r4,r2
    6ea0:	48c7383a 	mul	r3,r9,r3
    6ea4:	280ad43a 	srli	r5,r5,16
    6ea8:	2004d43a 	srli	r2,r4,16
    6eac:	3900000d 	sth	r4,0(r7)
    6eb0:	1947883a 	add	r3,r3,r5
    6eb4:	10c5883a 	add	r2,r2,r3
    6eb8:	3880008d 	sth	r2,2(r7)
    6ebc:	1014d43a 	srli	r10,r2,16
    6ec0:	39c00104 	addi	r7,r7,4
    6ec4:	42ffed36 	bltu	r8,r11,6e7c <__multiply+0xc4>
    6ec8:	3a800015 	stw	r10,0(r7)
    6ecc:	30800017 	ldw	r2,0(r6)
    6ed0:	1012d43a 	srli	r9,r2,16
    6ed4:	48001926 	beq	r9,zero,6f3c <__multiply+0x184>
    6ed8:	60800017 	ldw	r2,0(r12)
    6edc:	6811883a 	mov	r8,r13
    6ee0:	600f883a 	mov	r7,r12
    6ee4:	0015883a 	mov	r10,zero
    6ee8:	100b883a 	mov	r5,r2
    6eec:	41000017 	ldw	r4,0(r8)
    6ef0:	2806d43a 	srli	r3,r5,16
    6ef4:	3880000d 	sth	r2,0(r7)
    6ef8:	20bfffcc 	andi	r2,r4,65535
    6efc:	4885383a 	mul	r2,r9,r2
    6f00:	50c7883a 	add	r3,r10,r3
    6f04:	2008d43a 	srli	r4,r4,16
    6f08:	10c5883a 	add	r2,r2,r3
    6f0c:	3880008d 	sth	r2,2(r7)
    6f10:	39c00104 	addi	r7,r7,4
    6f14:	39400017 	ldw	r5,0(r7)
    6f18:	4909383a 	mul	r4,r9,r4
    6f1c:	1004d43a 	srli	r2,r2,16
    6f20:	28ffffcc 	andi	r3,r5,65535
    6f24:	20c9883a 	add	r4,r4,r3
    6f28:	1105883a 	add	r2,r2,r4
    6f2c:	42000104 	addi	r8,r8,4
    6f30:	1014d43a 	srli	r10,r2,16
    6f34:	42ffed36 	bltu	r8,r11,6eec <__multiply+0x134>
    6f38:	38800015 	stw	r2,0(r7)
    6f3c:	31800104 	addi	r6,r6,4
    6f40:	33c0022e 	bgeu	r6,r15,6f4c <__multiply+0x194>
    6f44:	63000104 	addi	r12,r12,4
    6f48:	003fc606 	br	6e64 <__multiply+0xac>
    6f4c:	0400090e 	bge	zero,r16,6f74 <__multiply+0x1bc>
    6f50:	70bfff17 	ldw	r2,-4(r14)
    6f54:	70ffff04 	addi	r3,r14,-4
    6f58:	10000326 	beq	r2,zero,6f68 <__multiply+0x1b0>
    6f5c:	00000506 	br	6f74 <__multiply+0x1bc>
    6f60:	18800017 	ldw	r2,0(r3)
    6f64:	1000031e 	bne	r2,zero,6f74 <__multiply+0x1bc>
    6f68:	843fffc4 	addi	r16,r16,-1
    6f6c:	18ffff04 	addi	r3,r3,-4
    6f70:	803ffb1e 	bne	r16,zero,6f60 <__multiply+0x1a8>
    6f74:	a805883a 	mov	r2,r21
    6f78:	ac000415 	stw	r16,16(r21)
    6f7c:	dfc00617 	ldw	ra,24(sp)
    6f80:	dd400517 	ldw	r21,20(sp)
    6f84:	dd000417 	ldw	r20,16(sp)
    6f88:	dcc00317 	ldw	r19,12(sp)
    6f8c:	dc800217 	ldw	r18,8(sp)
    6f90:	dc400117 	ldw	r17,4(sp)
    6f94:	dc000017 	ldw	r16,0(sp)
    6f98:	dec00704 	addi	sp,sp,28
    6f9c:	f800283a 	ret

00006fa0 <__i2b>:
    6fa0:	defffd04 	addi	sp,sp,-12
    6fa4:	dc000015 	stw	r16,0(sp)
    6fa8:	04000044 	movi	r16,1
    6fac:	dc800115 	stw	r18,4(sp)
    6fb0:	2825883a 	mov	r18,r5
    6fb4:	800b883a 	mov	r5,r16
    6fb8:	dfc00215 	stw	ra,8(sp)
    6fbc:	00068a80 	call	68a8 <_Balloc>
    6fc0:	14000415 	stw	r16,16(r2)
    6fc4:	14800515 	stw	r18,20(r2)
    6fc8:	dfc00217 	ldw	ra,8(sp)
    6fcc:	dc800117 	ldw	r18,4(sp)
    6fd0:	dc000017 	ldw	r16,0(sp)
    6fd4:	dec00304 	addi	sp,sp,12
    6fd8:	f800283a 	ret

00006fdc <__multadd>:
    6fdc:	defffa04 	addi	sp,sp,-24
    6fe0:	dc800215 	stw	r18,8(sp)
    6fe4:	2c800417 	ldw	r18,16(r5)
    6fe8:	dd000415 	stw	r20,16(sp)
    6fec:	dcc00315 	stw	r19,12(sp)
    6ff0:	dc000015 	stw	r16,0(sp)
    6ff4:	dfc00515 	stw	ra,20(sp)
    6ff8:	3821883a 	mov	r16,r7
    6ffc:	dc400115 	stw	r17,4(sp)
    7000:	2827883a 	mov	r19,r5
    7004:	2029883a 	mov	r20,r4
    7008:	2a000504 	addi	r8,r5,20
    700c:	000f883a 	mov	r7,zero
    7010:	40800017 	ldw	r2,0(r8)
    7014:	39c00044 	addi	r7,r7,1
    7018:	10ffffcc 	andi	r3,r2,65535
    701c:	1987383a 	mul	r3,r3,r6
    7020:	1004d43a 	srli	r2,r2,16
    7024:	1c07883a 	add	r3,r3,r16
    7028:	180ad43a 	srli	r5,r3,16
    702c:	1185383a 	mul	r2,r2,r6
    7030:	18ffffcc 	andi	r3,r3,65535
    7034:	1145883a 	add	r2,r2,r5
    7038:	1008943a 	slli	r4,r2,16
    703c:	1020d43a 	srli	r16,r2,16
    7040:	20c9883a 	add	r4,r4,r3
    7044:	41000015 	stw	r4,0(r8)
    7048:	42000104 	addi	r8,r8,4
    704c:	3cbff016 	blt	r7,r18,7010 <__multadd+0x34>
    7050:	80000826 	beq	r16,zero,7074 <__multadd+0x98>
    7054:	98800217 	ldw	r2,8(r19)
    7058:	90800f0e 	bge	r18,r2,7098 <__multadd+0xbc>
    705c:	9485883a 	add	r2,r18,r18
    7060:	1085883a 	add	r2,r2,r2
    7064:	14c5883a 	add	r2,r2,r19
    7068:	90c00044 	addi	r3,r18,1
    706c:	14000515 	stw	r16,20(r2)
    7070:	98c00415 	stw	r3,16(r19)
    7074:	9805883a 	mov	r2,r19
    7078:	dfc00517 	ldw	ra,20(sp)
    707c:	dd000417 	ldw	r20,16(sp)
    7080:	dcc00317 	ldw	r19,12(sp)
    7084:	dc800217 	ldw	r18,8(sp)
    7088:	dc400117 	ldw	r17,4(sp)
    708c:	dc000017 	ldw	r16,0(sp)
    7090:	dec00604 	addi	sp,sp,24
    7094:	f800283a 	ret
    7098:	99400117 	ldw	r5,4(r19)
    709c:	a009883a 	mov	r4,r20
    70a0:	29400044 	addi	r5,r5,1
    70a4:	00068a80 	call	68a8 <_Balloc>
    70a8:	99800417 	ldw	r6,16(r19)
    70ac:	99400304 	addi	r5,r19,12
    70b0:	11000304 	addi	r4,r2,12
    70b4:	318d883a 	add	r6,r6,r6
    70b8:	318d883a 	add	r6,r6,r6
    70bc:	31800204 	addi	r6,r6,8
    70c0:	1023883a 	mov	r17,r2
    70c4:	0000cc00 	call	cc0 <memcpy>
    70c8:	980b883a 	mov	r5,r19
    70cc:	a009883a 	mov	r4,r20
    70d0:	00063280 	call	6328 <_Bfree>
    70d4:	8827883a 	mov	r19,r17
    70d8:	003fe006 	br	705c <__multadd+0x80>

000070dc <__pow5mult>:
    70dc:	defffa04 	addi	sp,sp,-24
    70e0:	308000cc 	andi	r2,r6,3
    70e4:	dd000415 	stw	r20,16(sp)
    70e8:	dcc00315 	stw	r19,12(sp)
    70ec:	dc000015 	stw	r16,0(sp)
    70f0:	dfc00515 	stw	ra,20(sp)
    70f4:	dc800215 	stw	r18,8(sp)
    70f8:	dc400115 	stw	r17,4(sp)
    70fc:	3021883a 	mov	r16,r6
    7100:	2027883a 	mov	r19,r4
    7104:	2829883a 	mov	r20,r5
    7108:	10002b1e 	bne	r2,zero,71b8 <__pow5mult+0xdc>
    710c:	8025d0ba 	srai	r18,r16,2
    7110:	90001b26 	beq	r18,zero,7180 <__pow5mult+0xa4>
    7114:	9c001217 	ldw	r16,72(r19)
    7118:	8000081e 	bne	r16,zero,713c <__pow5mult+0x60>
    711c:	00003006 	br	71e0 <__pow5mult+0x104>
    7120:	800b883a 	mov	r5,r16
    7124:	800d883a 	mov	r6,r16
    7128:	9809883a 	mov	r4,r19
    712c:	90001426 	beq	r18,zero,7180 <__pow5mult+0xa4>
    7130:	80800017 	ldw	r2,0(r16)
    7134:	10001b26 	beq	r2,zero,71a4 <__pow5mult+0xc8>
    7138:	1021883a 	mov	r16,r2
    713c:	9080004c 	andi	r2,r18,1
    7140:	1005003a 	cmpeq	r2,r2,zero
    7144:	9025d07a 	srai	r18,r18,1
    7148:	800d883a 	mov	r6,r16
    714c:	9809883a 	mov	r4,r19
    7150:	a00b883a 	mov	r5,r20
    7154:	103ff21e 	bne	r2,zero,7120 <__pow5mult+0x44>
    7158:	0006db80 	call	6db8 <__multiply>
    715c:	a00b883a 	mov	r5,r20
    7160:	9809883a 	mov	r4,r19
    7164:	1023883a 	mov	r17,r2
    7168:	00063280 	call	6328 <_Bfree>
    716c:	8829883a 	mov	r20,r17
    7170:	800b883a 	mov	r5,r16
    7174:	800d883a 	mov	r6,r16
    7178:	9809883a 	mov	r4,r19
    717c:	903fec1e 	bne	r18,zero,7130 <__pow5mult+0x54>
    7180:	a005883a 	mov	r2,r20
    7184:	dfc00517 	ldw	ra,20(sp)
    7188:	dd000417 	ldw	r20,16(sp)
    718c:	dcc00317 	ldw	r19,12(sp)
    7190:	dc800217 	ldw	r18,8(sp)
    7194:	dc400117 	ldw	r17,4(sp)
    7198:	dc000017 	ldw	r16,0(sp)
    719c:	dec00604 	addi	sp,sp,24
    71a0:	f800283a 	ret
    71a4:	0006db80 	call	6db8 <__multiply>
    71a8:	80800015 	stw	r2,0(r16)
    71ac:	1021883a 	mov	r16,r2
    71b0:	10000015 	stw	zero,0(r2)
    71b4:	003fe106 	br	713c <__pow5mult+0x60>
    71b8:	1085883a 	add	r2,r2,r2
    71bc:	00c00074 	movhi	r3,1
    71c0:	18f57c04 	addi	r3,r3,-10768
    71c4:	1085883a 	add	r2,r2,r2
    71c8:	10c5883a 	add	r2,r2,r3
    71cc:	11bfff17 	ldw	r6,-4(r2)
    71d0:	000f883a 	mov	r7,zero
    71d4:	0006fdc0 	call	6fdc <__multadd>
    71d8:	1029883a 	mov	r20,r2
    71dc:	003fcb06 	br	710c <__pow5mult+0x30>
    71e0:	9809883a 	mov	r4,r19
    71e4:	01409c44 	movi	r5,625
    71e8:	0006fa00 	call	6fa0 <__i2b>
    71ec:	98801215 	stw	r2,72(r19)
    71f0:	1021883a 	mov	r16,r2
    71f4:	10000015 	stw	zero,0(r2)
    71f8:	003fd006 	br	713c <__pow5mult+0x60>

000071fc <__s2b>:
    71fc:	defff904 	addi	sp,sp,-28
    7200:	dcc00315 	stw	r19,12(sp)
    7204:	dc800215 	stw	r18,8(sp)
    7208:	2827883a 	mov	r19,r5
    720c:	2025883a 	mov	r18,r4
    7210:	01400244 	movi	r5,9
    7214:	39000204 	addi	r4,r7,8
    7218:	dd000415 	stw	r20,16(sp)
    721c:	dc400115 	stw	r17,4(sp)
    7220:	dfc00615 	stw	ra,24(sp)
    7224:	dd400515 	stw	r21,20(sp)
    7228:	dc000015 	stw	r16,0(sp)
    722c:	3829883a 	mov	r20,r7
    7230:	3023883a 	mov	r17,r6
    7234:	0000bf00 	call	bf0 <__divsi3>
    7238:	00c00044 	movi	r3,1
    723c:	1880350e 	bge	r3,r2,7314 <__s2b+0x118>
    7240:	000b883a 	mov	r5,zero
    7244:	18c7883a 	add	r3,r3,r3
    7248:	29400044 	addi	r5,r5,1
    724c:	18bffd16 	blt	r3,r2,7244 <__s2b+0x48>
    7250:	9009883a 	mov	r4,r18
    7254:	00068a80 	call	68a8 <_Balloc>
    7258:	1011883a 	mov	r8,r2
    725c:	d8800717 	ldw	r2,28(sp)
    7260:	00c00044 	movi	r3,1
    7264:	01800244 	movi	r6,9
    7268:	40800515 	stw	r2,20(r8)
    726c:	40c00415 	stw	r3,16(r8)
    7270:	3440260e 	bge	r6,r17,730c <__s2b+0x110>
    7274:	3021883a 	mov	r16,r6
    7278:	99ab883a 	add	r21,r19,r6
    727c:	9c05883a 	add	r2,r19,r16
    7280:	11c00007 	ldb	r7,0(r2)
    7284:	400b883a 	mov	r5,r8
    7288:	9009883a 	mov	r4,r18
    728c:	39fff404 	addi	r7,r7,-48
    7290:	01800284 	movi	r6,10
    7294:	0006fdc0 	call	6fdc <__multadd>
    7298:	84000044 	addi	r16,r16,1
    729c:	1011883a 	mov	r8,r2
    72a0:	8c3ff61e 	bne	r17,r16,727c <__s2b+0x80>
    72a4:	ac45883a 	add	r2,r21,r17
    72a8:	117ffe04 	addi	r5,r2,-8
    72ac:	880d883a 	mov	r6,r17
    72b0:	35000c0e 	bge	r6,r20,72e4 <__s2b+0xe8>
    72b4:	a185c83a 	sub	r2,r20,r6
    72b8:	2821883a 	mov	r16,r5
    72bc:	28a3883a 	add	r17,r5,r2
    72c0:	81c00007 	ldb	r7,0(r16)
    72c4:	400b883a 	mov	r5,r8
    72c8:	9009883a 	mov	r4,r18
    72cc:	39fff404 	addi	r7,r7,-48
    72d0:	01800284 	movi	r6,10
    72d4:	0006fdc0 	call	6fdc <__multadd>
    72d8:	84000044 	addi	r16,r16,1
    72dc:	1011883a 	mov	r8,r2
    72e0:	847ff71e 	bne	r16,r17,72c0 <__s2b+0xc4>
    72e4:	4005883a 	mov	r2,r8
    72e8:	dfc00617 	ldw	ra,24(sp)
    72ec:	dd400517 	ldw	r21,20(sp)
    72f0:	dd000417 	ldw	r20,16(sp)
    72f4:	dcc00317 	ldw	r19,12(sp)
    72f8:	dc800217 	ldw	r18,8(sp)
    72fc:	dc400117 	ldw	r17,4(sp)
    7300:	dc000017 	ldw	r16,0(sp)
    7304:	dec00704 	addi	sp,sp,28
    7308:	f800283a 	ret
    730c:	99400284 	addi	r5,r19,10
    7310:	003fe706 	br	72b0 <__s2b+0xb4>
    7314:	000b883a 	mov	r5,zero
    7318:	003fcd06 	br	7250 <__s2b+0x54>

0000731c <putc>:
    731c:	defffc04 	addi	sp,sp,-16
    7320:	dc800215 	stw	r18,8(sp)
    7324:	04800074 	movhi	r18,1
    7328:	94bc5604 	addi	r18,r18,-3752
    732c:	90c00017 	ldw	r3,0(r18)
    7330:	dc400115 	stw	r17,4(sp)
    7334:	dc000015 	stw	r16,0(sp)
    7338:	dfc00315 	stw	ra,12(sp)
    733c:	2023883a 	mov	r17,r4
    7340:	2821883a 	mov	r16,r5
    7344:	18000226 	beq	r3,zero,7350 <putc+0x34>
    7348:	18800e17 	ldw	r2,56(r3)
    734c:	10001126 	beq	r2,zero,7394 <putc+0x78>
    7350:	80800217 	ldw	r2,8(r16)
    7354:	10ffffc4 	addi	r3,r2,-1
    7358:	80c00215 	stw	r3,8(r16)
    735c:	18001316 	blt	r3,zero,73ac <putc+0x90>
    7360:	80800017 	ldw	r2,0(r16)
    7364:	14400005 	stb	r17,0(r2)
    7368:	80c00017 	ldw	r3,0(r16)
    736c:	18800044 	addi	r2,r3,1
    7370:	18c00003 	ldbu	r3,0(r3)
    7374:	80800015 	stw	r2,0(r16)
    7378:	1805883a 	mov	r2,r3
    737c:	dfc00317 	ldw	ra,12(sp)
    7380:	dc800217 	ldw	r18,8(sp)
    7384:	dc400117 	ldw	r17,4(sp)
    7388:	dc000017 	ldw	r16,0(sp)
    738c:	dec00404 	addi	sp,sp,16
    7390:	f800283a 	ret
    7394:	1809883a 	mov	r4,r3
    7398:	0004a800 	call	4a80 <__sinit>
    739c:	80800217 	ldw	r2,8(r16)
    73a0:	10ffffc4 	addi	r3,r2,-1
    73a4:	80c00215 	stw	r3,8(r16)
    73a8:	183fed0e 	bge	r3,zero,7360 <putc+0x44>
    73ac:	80800617 	ldw	r2,24(r16)
    73b0:	18800f16 	blt	r3,r2,73f0 <putc+0xd4>
    73b4:	80800017 	ldw	r2,0(r16)
    73b8:	14400005 	stb	r17,0(r2)
    73bc:	81000017 	ldw	r4,0(r16)
    73c0:	00800284 	movi	r2,10
    73c4:	20c00003 	ldbu	r3,0(r4)
    73c8:	18801226 	beq	r3,r2,7414 <putc+0xf8>
    73cc:	20800044 	addi	r2,r4,1
    73d0:	80800015 	stw	r2,0(r16)
    73d4:	1805883a 	mov	r2,r3
    73d8:	dfc00317 	ldw	ra,12(sp)
    73dc:	dc800217 	ldw	r18,8(sp)
    73e0:	dc400117 	ldw	r17,4(sp)
    73e4:	dc000017 	ldw	r16,0(sp)
    73e8:	dec00404 	addi	sp,sp,16
    73ec:	f800283a 	ret
    73f0:	91000017 	ldw	r4,0(r18)
    73f4:	880b883a 	mov	r5,r17
    73f8:	800d883a 	mov	r6,r16
    73fc:	dfc00317 	ldw	ra,12(sp)
    7400:	dc800217 	ldw	r18,8(sp)
    7404:	dc400117 	ldw	r17,4(sp)
    7408:	dc000017 	ldw	r16,0(sp)
    740c:	dec00404 	addi	sp,sp,16
    7410:	0007de41 	jmpi	7de4 <__swbuf_r>
    7414:	91000017 	ldw	r4,0(r18)
    7418:	180b883a 	mov	r5,r3
    741c:	003ff606 	br	73f8 <putc+0xdc>

00007420 <_putc_r>:
    7420:	defffc04 	addi	sp,sp,-16
    7424:	dc400215 	stw	r17,8(sp)
    7428:	dc000115 	stw	r16,4(sp)
    742c:	dfc00315 	stw	ra,12(sp)
    7430:	2021883a 	mov	r16,r4
    7434:	2823883a 	mov	r17,r5
    7438:	20000226 	beq	r4,zero,7444 <_putc_r+0x24>
    743c:	20800e17 	ldw	r2,56(r4)
    7440:	10001026 	beq	r2,zero,7484 <_putc_r+0x64>
    7444:	30800217 	ldw	r2,8(r6)
    7448:	10ffffc4 	addi	r3,r2,-1
    744c:	30c00215 	stw	r3,8(r6)
    7450:	18001316 	blt	r3,zero,74a0 <_putc_r+0x80>
    7454:	30800017 	ldw	r2,0(r6)
    7458:	14400005 	stb	r17,0(r2)
    745c:	30c00017 	ldw	r3,0(r6)
    7460:	18800044 	addi	r2,r3,1
    7464:	18c00003 	ldbu	r3,0(r3)
    7468:	30800015 	stw	r2,0(r6)
    746c:	1805883a 	mov	r2,r3
    7470:	dfc00317 	ldw	ra,12(sp)
    7474:	dc400217 	ldw	r17,8(sp)
    7478:	dc000117 	ldw	r16,4(sp)
    747c:	dec00404 	addi	sp,sp,16
    7480:	f800283a 	ret
    7484:	d9800015 	stw	r6,0(sp)
    7488:	0004a800 	call	4a80 <__sinit>
    748c:	d9800017 	ldw	r6,0(sp)
    7490:	30800217 	ldw	r2,8(r6)
    7494:	10ffffc4 	addi	r3,r2,-1
    7498:	30c00215 	stw	r3,8(r6)
    749c:	183fed0e 	bge	r3,zero,7454 <_putc_r+0x34>
    74a0:	30800617 	ldw	r2,24(r6)
    74a4:	18800e16 	blt	r3,r2,74e0 <_putc_r+0xc0>
    74a8:	30800017 	ldw	r2,0(r6)
    74ac:	14400005 	stb	r17,0(r2)
    74b0:	31000017 	ldw	r4,0(r6)
    74b4:	00800284 	movi	r2,10
    74b8:	20c00003 	ldbu	r3,0(r4)
    74bc:	18800f26 	beq	r3,r2,74fc <_putc_r+0xdc>
    74c0:	20800044 	addi	r2,r4,1
    74c4:	30800015 	stw	r2,0(r6)
    74c8:	1805883a 	mov	r2,r3
    74cc:	dfc00317 	ldw	ra,12(sp)
    74d0:	dc400217 	ldw	r17,8(sp)
    74d4:	dc000117 	ldw	r16,4(sp)
    74d8:	dec00404 	addi	sp,sp,16
    74dc:	f800283a 	ret
    74e0:	8009883a 	mov	r4,r16
    74e4:	880b883a 	mov	r5,r17
    74e8:	dfc00317 	ldw	ra,12(sp)
    74ec:	dc400217 	ldw	r17,8(sp)
    74f0:	dc000117 	ldw	r16,4(sp)
    74f4:	dec00404 	addi	sp,sp,16
    74f8:	0007de41 	jmpi	7de4 <__swbuf_r>
    74fc:	8009883a 	mov	r4,r16
    7500:	180b883a 	mov	r5,r3
    7504:	003ff806 	br	74e8 <_putc_r+0xc8>

00007508 <_realloc_r>:
    7508:	defff404 	addi	sp,sp,-48
    750c:	dd800815 	stw	r22,32(sp)
    7510:	dc800415 	stw	r18,16(sp)
    7514:	dc400315 	stw	r17,12(sp)
    7518:	dfc00b15 	stw	ra,44(sp)
    751c:	df000a15 	stw	fp,40(sp)
    7520:	ddc00915 	stw	r23,36(sp)
    7524:	dd400715 	stw	r21,28(sp)
    7528:	dd000615 	stw	r20,24(sp)
    752c:	dcc00515 	stw	r19,20(sp)
    7530:	dc000215 	stw	r16,8(sp)
    7534:	2825883a 	mov	r18,r5
    7538:	3023883a 	mov	r17,r6
    753c:	202d883a 	mov	r22,r4
    7540:	2800c926 	beq	r5,zero,7868 <_realloc_r+0x360>
    7544:	000ad700 	call	ad70 <__malloc_lock>
    7548:	943ffe04 	addi	r16,r18,-8
    754c:	88c002c4 	addi	r3,r17,11
    7550:	00800584 	movi	r2,22
    7554:	82000117 	ldw	r8,4(r16)
    7558:	10c01b2e 	bgeu	r2,r3,75c8 <_realloc_r+0xc0>
    755c:	00bffe04 	movi	r2,-8
    7560:	188e703a 	and	r7,r3,r2
    7564:	3839883a 	mov	fp,r7
    7568:	38001a16 	blt	r7,zero,75d4 <_realloc_r+0xcc>
    756c:	e4401936 	bltu	fp,r17,75d4 <_realloc_r+0xcc>
    7570:	013fff04 	movi	r4,-4
    7574:	4126703a 	and	r19,r8,r4
    7578:	99c02616 	blt	r19,r7,7614 <_realloc_r+0x10c>
    757c:	802b883a 	mov	r21,r16
    7580:	9829883a 	mov	r20,r19
    7584:	84000204 	addi	r16,r16,8
    7588:	a80f883a 	mov	r7,r21
    758c:	a70dc83a 	sub	r6,r20,fp
    7590:	008003c4 	movi	r2,15
    7594:	1180c136 	bltu	r2,r6,789c <_realloc_r+0x394>
    7598:	38800117 	ldw	r2,4(r7)
    759c:	a549883a 	add	r4,r20,r21
    75a0:	1080004c 	andi	r2,r2,1
    75a4:	a084b03a 	or	r2,r20,r2
    75a8:	38800115 	stw	r2,4(r7)
    75ac:	20c00117 	ldw	r3,4(r4)
    75b0:	18c00054 	ori	r3,r3,1
    75b4:	20c00115 	stw	r3,4(r4)
    75b8:	b009883a 	mov	r4,r22
    75bc:	000ad900 	call	ad90 <__malloc_unlock>
    75c0:	8023883a 	mov	r17,r16
    75c4:	00000606 	br	75e0 <_realloc_r+0xd8>
    75c8:	01c00404 	movi	r7,16
    75cc:	3839883a 	mov	fp,r7
    75d0:	e47fe72e 	bgeu	fp,r17,7570 <_realloc_r+0x68>
    75d4:	00800304 	movi	r2,12
    75d8:	0023883a 	mov	r17,zero
    75dc:	b0800015 	stw	r2,0(r22)
    75e0:	8805883a 	mov	r2,r17
    75e4:	dfc00b17 	ldw	ra,44(sp)
    75e8:	df000a17 	ldw	fp,40(sp)
    75ec:	ddc00917 	ldw	r23,36(sp)
    75f0:	dd800817 	ldw	r22,32(sp)
    75f4:	dd400717 	ldw	r21,28(sp)
    75f8:	dd000617 	ldw	r20,24(sp)
    75fc:	dcc00517 	ldw	r19,20(sp)
    7600:	dc800417 	ldw	r18,16(sp)
    7604:	dc400317 	ldw	r17,12(sp)
    7608:	dc000217 	ldw	r16,8(sp)
    760c:	dec00c04 	addi	sp,sp,48
    7610:	f800283a 	ret
    7614:	00800074 	movhi	r2,1
    7618:	10b6d204 	addi	r2,r2,-9400
    761c:	12400217 	ldw	r9,8(r2)
    7620:	84cd883a 	add	r6,r16,r19
    7624:	802b883a 	mov	r21,r16
    7628:	3240b926 	beq	r6,r9,7910 <_realloc_r+0x408>
    762c:	31400117 	ldw	r5,4(r6)
    7630:	00bfff84 	movi	r2,-2
    7634:	2884703a 	and	r2,r5,r2
    7638:	1185883a 	add	r2,r2,r6
    763c:	10c00117 	ldw	r3,4(r2)
    7640:	18c0004c 	andi	r3,r3,1
    7644:	1807003a 	cmpeq	r3,r3,zero
    7648:	1800a326 	beq	r3,zero,78d8 <_realloc_r+0x3d0>
    764c:	2908703a 	and	r4,r5,r4
    7650:	9929883a 	add	r20,r19,r4
    7654:	a1c0a30e 	bge	r20,r7,78e4 <_realloc_r+0x3dc>
    7658:	4080004c 	andi	r2,r8,1
    765c:	1000551e 	bne	r2,zero,77b4 <_realloc_r+0x2ac>
    7660:	80800017 	ldw	r2,0(r16)
    7664:	80afc83a 	sub	r23,r16,r2
    7668:	b8c00117 	ldw	r3,4(r23)
    766c:	00bfff04 	movi	r2,-4
    7670:	1884703a 	and	r2,r3,r2
    7674:	30002e26 	beq	r6,zero,7730 <_realloc_r+0x228>
    7678:	3240b926 	beq	r6,r9,7960 <_realloc_r+0x458>
    767c:	98a9883a 	add	r20,r19,r2
    7680:	2509883a 	add	r4,r4,r20
    7684:	d9000015 	stw	r4,0(sp)
    7688:	21c02a16 	blt	r4,r7,7734 <_realloc_r+0x22c>
    768c:	30800317 	ldw	r2,12(r6)
    7690:	30c00217 	ldw	r3,8(r6)
    7694:	01400904 	movi	r5,36
    7698:	99bfff04 	addi	r6,r19,-4
    769c:	18800315 	stw	r2,12(r3)
    76a0:	10c00215 	stw	r3,8(r2)
    76a4:	b9000317 	ldw	r4,12(r23)
    76a8:	b8800217 	ldw	r2,8(r23)
    76ac:	b82b883a 	mov	r21,r23
    76b0:	bc000204 	addi	r16,r23,8
    76b4:	20800215 	stw	r2,8(r4)
    76b8:	11000315 	stw	r4,12(r2)
    76bc:	2980e436 	bltu	r5,r6,7a50 <_realloc_r+0x548>
    76c0:	008004c4 	movi	r2,19
    76c4:	9009883a 	mov	r4,r18
    76c8:	8011883a 	mov	r8,r16
    76cc:	11800f2e 	bgeu	r2,r6,770c <_realloc_r+0x204>
    76d0:	90800017 	ldw	r2,0(r18)
    76d4:	ba000404 	addi	r8,r23,16
    76d8:	91000204 	addi	r4,r18,8
    76dc:	b8800215 	stw	r2,8(r23)
    76e0:	90c00117 	ldw	r3,4(r18)
    76e4:	008006c4 	movi	r2,27
    76e8:	b8c00315 	stw	r3,12(r23)
    76ec:	1180072e 	bgeu	r2,r6,770c <_realloc_r+0x204>
    76f0:	90c00217 	ldw	r3,8(r18)
    76f4:	ba000604 	addi	r8,r23,24
    76f8:	91000404 	addi	r4,r18,16
    76fc:	b8c00415 	stw	r3,16(r23)
    7700:	90800317 	ldw	r2,12(r18)
    7704:	b8800515 	stw	r2,20(r23)
    7708:	3140e726 	beq	r6,r5,7aa8 <_realloc_r+0x5a0>
    770c:	20800017 	ldw	r2,0(r4)
    7710:	dd000017 	ldw	r20,0(sp)
    7714:	b80f883a 	mov	r7,r23
    7718:	40800015 	stw	r2,0(r8)
    771c:	20c00117 	ldw	r3,4(r4)
    7720:	40c00115 	stw	r3,4(r8)
    7724:	20800217 	ldw	r2,8(r4)
    7728:	40800215 	stw	r2,8(r8)
    772c:	003f9706 	br	758c <_realloc_r+0x84>
    7730:	98a9883a 	add	r20,r19,r2
    7734:	a1c01f16 	blt	r20,r7,77b4 <_realloc_r+0x2ac>
    7738:	b8c00317 	ldw	r3,12(r23)
    773c:	b8800217 	ldw	r2,8(r23)
    7740:	99bfff04 	addi	r6,r19,-4
    7744:	01400904 	movi	r5,36
    7748:	b82b883a 	mov	r21,r23
    774c:	18800215 	stw	r2,8(r3)
    7750:	10c00315 	stw	r3,12(r2)
    7754:	bc000204 	addi	r16,r23,8
    7758:	2980c336 	bltu	r5,r6,7a68 <_realloc_r+0x560>
    775c:	008004c4 	movi	r2,19
    7760:	9009883a 	mov	r4,r18
    7764:	8011883a 	mov	r8,r16
    7768:	11800f2e 	bgeu	r2,r6,77a8 <_realloc_r+0x2a0>
    776c:	90800017 	ldw	r2,0(r18)
    7770:	ba000404 	addi	r8,r23,16
    7774:	91000204 	addi	r4,r18,8
    7778:	b8800215 	stw	r2,8(r23)
    777c:	90c00117 	ldw	r3,4(r18)
    7780:	008006c4 	movi	r2,27
    7784:	b8c00315 	stw	r3,12(r23)
    7788:	1180072e 	bgeu	r2,r6,77a8 <_realloc_r+0x2a0>
    778c:	90c00217 	ldw	r3,8(r18)
    7790:	ba000604 	addi	r8,r23,24
    7794:	91000404 	addi	r4,r18,16
    7798:	b8c00415 	stw	r3,16(r23)
    779c:	90800317 	ldw	r2,12(r18)
    77a0:	b8800515 	stw	r2,20(r23)
    77a4:	3140c726 	beq	r6,r5,7ac4 <_realloc_r+0x5bc>
    77a8:	20800017 	ldw	r2,0(r4)
    77ac:	b80f883a 	mov	r7,r23
    77b0:	003fd906 	br	7718 <_realloc_r+0x210>
    77b4:	880b883a 	mov	r5,r17
    77b8:	b009883a 	mov	r4,r22
    77bc:	000598c0 	call	598c <_malloc_r>
    77c0:	1023883a 	mov	r17,r2
    77c4:	10002526 	beq	r2,zero,785c <_realloc_r+0x354>
    77c8:	80800117 	ldw	r2,4(r16)
    77cc:	00ffff84 	movi	r3,-2
    77d0:	893ffe04 	addi	r4,r17,-8
    77d4:	10c4703a 	and	r2,r2,r3
    77d8:	8085883a 	add	r2,r16,r2
    77dc:	20809526 	beq	r4,r2,7a34 <_realloc_r+0x52c>
    77e0:	99bfff04 	addi	r6,r19,-4
    77e4:	01c00904 	movi	r7,36
    77e8:	39804536 	bltu	r7,r6,7900 <_realloc_r+0x3f8>
    77ec:	008004c4 	movi	r2,19
    77f0:	9009883a 	mov	r4,r18
    77f4:	880b883a 	mov	r5,r17
    77f8:	11800f2e 	bgeu	r2,r6,7838 <_realloc_r+0x330>
    77fc:	90800017 	ldw	r2,0(r18)
    7800:	89400204 	addi	r5,r17,8
    7804:	91000204 	addi	r4,r18,8
    7808:	88800015 	stw	r2,0(r17)
    780c:	90c00117 	ldw	r3,4(r18)
    7810:	008006c4 	movi	r2,27
    7814:	88c00115 	stw	r3,4(r17)
    7818:	1180072e 	bgeu	r2,r6,7838 <_realloc_r+0x330>
    781c:	90c00217 	ldw	r3,8(r18)
    7820:	89400404 	addi	r5,r17,16
    7824:	91000404 	addi	r4,r18,16
    7828:	88c00215 	stw	r3,8(r17)
    782c:	90800317 	ldw	r2,12(r18)
    7830:	88800315 	stw	r2,12(r17)
    7834:	31c09126 	beq	r6,r7,7a7c <_realloc_r+0x574>
    7838:	20800017 	ldw	r2,0(r4)
    783c:	28800015 	stw	r2,0(r5)
    7840:	20c00117 	ldw	r3,4(r4)
    7844:	28c00115 	stw	r3,4(r5)
    7848:	20800217 	ldw	r2,8(r4)
    784c:	28800215 	stw	r2,8(r5)
    7850:	900b883a 	mov	r5,r18
    7854:	b009883a 	mov	r4,r22
    7858:	0004e040 	call	4e04 <_free_r>
    785c:	b009883a 	mov	r4,r22
    7860:	000ad900 	call	ad90 <__malloc_unlock>
    7864:	003f5e06 	br	75e0 <_realloc_r+0xd8>
    7868:	300b883a 	mov	r5,r6
    786c:	dfc00b17 	ldw	ra,44(sp)
    7870:	df000a17 	ldw	fp,40(sp)
    7874:	ddc00917 	ldw	r23,36(sp)
    7878:	dd800817 	ldw	r22,32(sp)
    787c:	dd400717 	ldw	r21,28(sp)
    7880:	dd000617 	ldw	r20,24(sp)
    7884:	dcc00517 	ldw	r19,20(sp)
    7888:	dc800417 	ldw	r18,16(sp)
    788c:	dc400317 	ldw	r17,12(sp)
    7890:	dc000217 	ldw	r16,8(sp)
    7894:	dec00c04 	addi	sp,sp,48
    7898:	000598c1 	jmpi	598c <_malloc_r>
    789c:	38800117 	ldw	r2,4(r7)
    78a0:	e54b883a 	add	r5,fp,r21
    78a4:	31000054 	ori	r4,r6,1
    78a8:	1080004c 	andi	r2,r2,1
    78ac:	1704b03a 	or	r2,r2,fp
    78b0:	38800115 	stw	r2,4(r7)
    78b4:	29000115 	stw	r4,4(r5)
    78b8:	2987883a 	add	r3,r5,r6
    78bc:	18800117 	ldw	r2,4(r3)
    78c0:	29400204 	addi	r5,r5,8
    78c4:	b009883a 	mov	r4,r22
    78c8:	10800054 	ori	r2,r2,1
    78cc:	18800115 	stw	r2,4(r3)
    78d0:	0004e040 	call	4e04 <_free_r>
    78d4:	003f3806 	br	75b8 <_realloc_r+0xb0>
    78d8:	000d883a 	mov	r6,zero
    78dc:	0009883a 	mov	r4,zero
    78e0:	003f5d06 	br	7658 <_realloc_r+0x150>
    78e4:	30c00217 	ldw	r3,8(r6)
    78e8:	30800317 	ldw	r2,12(r6)
    78ec:	800f883a 	mov	r7,r16
    78f0:	84000204 	addi	r16,r16,8
    78f4:	10c00215 	stw	r3,8(r2)
    78f8:	18800315 	stw	r2,12(r3)
    78fc:	003f2306 	br	758c <_realloc_r+0x84>
    7900:	8809883a 	mov	r4,r17
    7904:	900b883a 	mov	r5,r18
    7908:	00061b00 	call	61b0 <memmove>
    790c:	003fd006 	br	7850 <_realloc_r+0x348>
    7910:	30800117 	ldw	r2,4(r6)
    7914:	e0c00404 	addi	r3,fp,16
    7918:	1108703a 	and	r4,r2,r4
    791c:	9905883a 	add	r2,r19,r4
    7920:	10ff4d16 	blt	r2,r3,7658 <_realloc_r+0x150>
    7924:	1705c83a 	sub	r2,r2,fp
    7928:	870b883a 	add	r5,r16,fp
    792c:	10800054 	ori	r2,r2,1
    7930:	28800115 	stw	r2,4(r5)
    7934:	80c00117 	ldw	r3,4(r16)
    7938:	00800074 	movhi	r2,1
    793c:	10b6d204 	addi	r2,r2,-9400
    7940:	b009883a 	mov	r4,r22
    7944:	18c0004c 	andi	r3,r3,1
    7948:	e0c6b03a 	or	r3,fp,r3
    794c:	11400215 	stw	r5,8(r2)
    7950:	80c00115 	stw	r3,4(r16)
    7954:	000ad900 	call	ad90 <__malloc_unlock>
    7958:	84400204 	addi	r17,r16,8
    795c:	003f2006 	br	75e0 <_realloc_r+0xd8>
    7960:	98a9883a 	add	r20,r19,r2
    7964:	2509883a 	add	r4,r4,r20
    7968:	e0800404 	addi	r2,fp,16
    796c:	d9000115 	stw	r4,4(sp)
    7970:	20bf7016 	blt	r4,r2,7734 <_realloc_r+0x22c>
    7974:	b8c00317 	ldw	r3,12(r23)
    7978:	b8800217 	ldw	r2,8(r23)
    797c:	99bfff04 	addi	r6,r19,-4
    7980:	01400904 	movi	r5,36
    7984:	18800215 	stw	r2,8(r3)
    7988:	10c00315 	stw	r3,12(r2)
    798c:	bc400204 	addi	r17,r23,8
    7990:	29804136 	bltu	r5,r6,7a98 <_realloc_r+0x590>
    7994:	008004c4 	movi	r2,19
    7998:	9009883a 	mov	r4,r18
    799c:	880f883a 	mov	r7,r17
    79a0:	11800f2e 	bgeu	r2,r6,79e0 <_realloc_r+0x4d8>
    79a4:	90800017 	ldw	r2,0(r18)
    79a8:	b9c00404 	addi	r7,r23,16
    79ac:	91000204 	addi	r4,r18,8
    79b0:	b8800215 	stw	r2,8(r23)
    79b4:	90c00117 	ldw	r3,4(r18)
    79b8:	008006c4 	movi	r2,27
    79bc:	b8c00315 	stw	r3,12(r23)
    79c0:	1180072e 	bgeu	r2,r6,79e0 <_realloc_r+0x4d8>
    79c4:	90c00217 	ldw	r3,8(r18)
    79c8:	b9c00604 	addi	r7,r23,24
    79cc:	91000404 	addi	r4,r18,16
    79d0:	b8c00415 	stw	r3,16(r23)
    79d4:	90800317 	ldw	r2,12(r18)
    79d8:	b8800515 	stw	r2,20(r23)
    79dc:	31404026 	beq	r6,r5,7ae0 <_realloc_r+0x5d8>
    79e0:	20800017 	ldw	r2,0(r4)
    79e4:	38800015 	stw	r2,0(r7)
    79e8:	20c00117 	ldw	r3,4(r4)
    79ec:	38c00115 	stw	r3,4(r7)
    79f0:	20800217 	ldw	r2,8(r4)
    79f4:	38800215 	stw	r2,8(r7)
    79f8:	d8c00117 	ldw	r3,4(sp)
    79fc:	bf0b883a 	add	r5,r23,fp
    7a00:	b009883a 	mov	r4,r22
    7a04:	1f05c83a 	sub	r2,r3,fp
    7a08:	10800054 	ori	r2,r2,1
    7a0c:	28800115 	stw	r2,4(r5)
    7a10:	b8c00117 	ldw	r3,4(r23)
    7a14:	00800074 	movhi	r2,1
    7a18:	10b6d204 	addi	r2,r2,-9400
    7a1c:	11400215 	stw	r5,8(r2)
    7a20:	18c0004c 	andi	r3,r3,1
    7a24:	e0c6b03a 	or	r3,fp,r3
    7a28:	b8c00115 	stw	r3,4(r23)
    7a2c:	000ad900 	call	ad90 <__malloc_unlock>
    7a30:	003eeb06 	br	75e0 <_realloc_r+0xd8>
    7a34:	20800117 	ldw	r2,4(r4)
    7a38:	00ffff04 	movi	r3,-4
    7a3c:	800f883a 	mov	r7,r16
    7a40:	10c4703a 	and	r2,r2,r3
    7a44:	98a9883a 	add	r20,r19,r2
    7a48:	84000204 	addi	r16,r16,8
    7a4c:	003ecf06 	br	758c <_realloc_r+0x84>
    7a50:	900b883a 	mov	r5,r18
    7a54:	8009883a 	mov	r4,r16
    7a58:	00061b00 	call	61b0 <memmove>
    7a5c:	dd000017 	ldw	r20,0(sp)
    7a60:	b80f883a 	mov	r7,r23
    7a64:	003ec906 	br	758c <_realloc_r+0x84>
    7a68:	900b883a 	mov	r5,r18
    7a6c:	8009883a 	mov	r4,r16
    7a70:	00061b00 	call	61b0 <memmove>
    7a74:	b80f883a 	mov	r7,r23
    7a78:	003ec406 	br	758c <_realloc_r+0x84>
    7a7c:	90c00417 	ldw	r3,16(r18)
    7a80:	89400604 	addi	r5,r17,24
    7a84:	91000604 	addi	r4,r18,24
    7a88:	88c00415 	stw	r3,16(r17)
    7a8c:	90800517 	ldw	r2,20(r18)
    7a90:	88800515 	stw	r2,20(r17)
    7a94:	003f6806 	br	7838 <_realloc_r+0x330>
    7a98:	900b883a 	mov	r5,r18
    7a9c:	8809883a 	mov	r4,r17
    7aa0:	00061b00 	call	61b0 <memmove>
    7aa4:	003fd406 	br	79f8 <_realloc_r+0x4f0>
    7aa8:	90c00417 	ldw	r3,16(r18)
    7aac:	91000604 	addi	r4,r18,24
    7ab0:	ba000804 	addi	r8,r23,32
    7ab4:	b8c00615 	stw	r3,24(r23)
    7ab8:	90800517 	ldw	r2,20(r18)
    7abc:	b8800715 	stw	r2,28(r23)
    7ac0:	003f1206 	br	770c <_realloc_r+0x204>
    7ac4:	90c00417 	ldw	r3,16(r18)
    7ac8:	91000604 	addi	r4,r18,24
    7acc:	ba000804 	addi	r8,r23,32
    7ad0:	b8c00615 	stw	r3,24(r23)
    7ad4:	90800517 	ldw	r2,20(r18)
    7ad8:	b8800715 	stw	r2,28(r23)
    7adc:	003f3206 	br	77a8 <_realloc_r+0x2a0>
    7ae0:	90c00417 	ldw	r3,16(r18)
    7ae4:	91000604 	addi	r4,r18,24
    7ae8:	b9c00804 	addi	r7,r23,32
    7aec:	b8c00615 	stw	r3,24(r23)
    7af0:	90800517 	ldw	r2,20(r18)
    7af4:	b8800715 	stw	r2,28(r23)
    7af8:	003fb906 	br	79e0 <_realloc_r+0x4d8>

00007afc <__isinfd>:
    7afc:	200d883a 	mov	r6,r4
    7b00:	0109c83a 	sub	r4,zero,r4
    7b04:	2188b03a 	or	r4,r4,r6
    7b08:	2008d7fa 	srli	r4,r4,31
    7b0c:	00a00034 	movhi	r2,32768
    7b10:	10bfffc4 	addi	r2,r2,-1
    7b14:	1144703a 	and	r2,r2,r5
    7b18:	2088b03a 	or	r4,r4,r2
    7b1c:	009ffc34 	movhi	r2,32752
    7b20:	1105c83a 	sub	r2,r2,r4
    7b24:	0087c83a 	sub	r3,zero,r2
    7b28:	10c4b03a 	or	r2,r2,r3
    7b2c:	1004d7fa 	srli	r2,r2,31
    7b30:	00c00044 	movi	r3,1
    7b34:	1885c83a 	sub	r2,r3,r2
    7b38:	f800283a 	ret

00007b3c <__isnand>:
    7b3c:	200d883a 	mov	r6,r4
    7b40:	0109c83a 	sub	r4,zero,r4
    7b44:	2188b03a 	or	r4,r4,r6
    7b48:	2008d7fa 	srli	r4,r4,31
    7b4c:	00a00034 	movhi	r2,32768
    7b50:	10bfffc4 	addi	r2,r2,-1
    7b54:	1144703a 	and	r2,r2,r5
    7b58:	2088b03a 	or	r4,r4,r2
    7b5c:	009ffc34 	movhi	r2,32752
    7b60:	1105c83a 	sub	r2,r2,r4
    7b64:	1004d7fa 	srli	r2,r2,31
    7b68:	f800283a 	ret

00007b6c <_sbrk_r>:
    7b6c:	defffd04 	addi	sp,sp,-12
    7b70:	dc000015 	stw	r16,0(sp)
    7b74:	04000074 	movhi	r16,1
    7b78:	84030304 	addi	r16,r16,3084
    7b7c:	dc400115 	stw	r17,4(sp)
    7b80:	80000015 	stw	zero,0(r16)
    7b84:	2023883a 	mov	r17,r4
    7b88:	2809883a 	mov	r4,r5
    7b8c:	dfc00215 	stw	ra,8(sp)
    7b90:	000af900 	call	af90 <sbrk>
    7b94:	1007883a 	mov	r3,r2
    7b98:	00bfffc4 	movi	r2,-1
    7b9c:	18800626 	beq	r3,r2,7bb8 <_sbrk_r+0x4c>
    7ba0:	1805883a 	mov	r2,r3
    7ba4:	dfc00217 	ldw	ra,8(sp)
    7ba8:	dc400117 	ldw	r17,4(sp)
    7bac:	dc000017 	ldw	r16,0(sp)
    7bb0:	dec00304 	addi	sp,sp,12
    7bb4:	f800283a 	ret
    7bb8:	80800017 	ldw	r2,0(r16)
    7bbc:	103ff826 	beq	r2,zero,7ba0 <_sbrk_r+0x34>
    7bc0:	88800015 	stw	r2,0(r17)
    7bc4:	1805883a 	mov	r2,r3
    7bc8:	dfc00217 	ldw	ra,8(sp)
    7bcc:	dc400117 	ldw	r17,4(sp)
    7bd0:	dc000017 	ldw	r16,0(sp)
    7bd4:	dec00304 	addi	sp,sp,12
    7bd8:	f800283a 	ret

00007bdc <__sclose>:
    7bdc:	2940038f 	ldh	r5,14(r5)
    7be0:	000805c1 	jmpi	805c <_close_r>

00007be4 <__sseek>:
    7be4:	defffe04 	addi	sp,sp,-8
    7be8:	dc000015 	stw	r16,0(sp)
    7bec:	2821883a 	mov	r16,r5
    7bf0:	2940038f 	ldh	r5,14(r5)
    7bf4:	dfc00115 	stw	ra,4(sp)
    7bf8:	00082d40 	call	82d4 <_lseek_r>
    7bfc:	1007883a 	mov	r3,r2
    7c00:	00bfffc4 	movi	r2,-1
    7c04:	18800926 	beq	r3,r2,7c2c <__sseek+0x48>
    7c08:	8080030b 	ldhu	r2,12(r16)
    7c0c:	80c01415 	stw	r3,80(r16)
    7c10:	10840014 	ori	r2,r2,4096
    7c14:	8080030d 	sth	r2,12(r16)
    7c18:	1805883a 	mov	r2,r3
    7c1c:	dfc00117 	ldw	ra,4(sp)
    7c20:	dc000017 	ldw	r16,0(sp)
    7c24:	dec00204 	addi	sp,sp,8
    7c28:	f800283a 	ret
    7c2c:	8080030b 	ldhu	r2,12(r16)
    7c30:	10bbffcc 	andi	r2,r2,61439
    7c34:	8080030d 	sth	r2,12(r16)
    7c38:	1805883a 	mov	r2,r3
    7c3c:	dfc00117 	ldw	ra,4(sp)
    7c40:	dc000017 	ldw	r16,0(sp)
    7c44:	dec00204 	addi	sp,sp,8
    7c48:	f800283a 	ret

00007c4c <__swrite>:
    7c4c:	2880030b 	ldhu	r2,12(r5)
    7c50:	defffb04 	addi	sp,sp,-20
    7c54:	dcc00315 	stw	r19,12(sp)
    7c58:	1080400c 	andi	r2,r2,256
    7c5c:	dc800215 	stw	r18,8(sp)
    7c60:	dc400115 	stw	r17,4(sp)
    7c64:	dc000015 	stw	r16,0(sp)
    7c68:	3027883a 	mov	r19,r6
    7c6c:	3825883a 	mov	r18,r7
    7c70:	dfc00415 	stw	ra,16(sp)
    7c74:	2821883a 	mov	r16,r5
    7c78:	000d883a 	mov	r6,zero
    7c7c:	01c00084 	movi	r7,2
    7c80:	2023883a 	mov	r17,r4
    7c84:	10000226 	beq	r2,zero,7c90 <__swrite+0x44>
    7c88:	2940038f 	ldh	r5,14(r5)
    7c8c:	00082d40 	call	82d4 <_lseek_r>
    7c90:	8080030b 	ldhu	r2,12(r16)
    7c94:	8140038f 	ldh	r5,14(r16)
    7c98:	8809883a 	mov	r4,r17
    7c9c:	10bbffcc 	andi	r2,r2,61439
    7ca0:	980d883a 	mov	r6,r19
    7ca4:	900f883a 	mov	r7,r18
    7ca8:	8080030d 	sth	r2,12(r16)
    7cac:	dfc00417 	ldw	ra,16(sp)
    7cb0:	dcc00317 	ldw	r19,12(sp)
    7cb4:	dc800217 	ldw	r18,8(sp)
    7cb8:	dc400117 	ldw	r17,4(sp)
    7cbc:	dc000017 	ldw	r16,0(sp)
    7cc0:	dec00504 	addi	sp,sp,20
    7cc4:	0007f301 	jmpi	7f30 <_write_r>

00007cc8 <__sread>:
    7cc8:	defffe04 	addi	sp,sp,-8
    7ccc:	dc000015 	stw	r16,0(sp)
    7cd0:	2821883a 	mov	r16,r5
    7cd4:	2940038f 	ldh	r5,14(r5)
    7cd8:	dfc00115 	stw	ra,4(sp)
    7cdc:	000834c0 	call	834c <_read_r>
    7ce0:	1007883a 	mov	r3,r2
    7ce4:	10000816 	blt	r2,zero,7d08 <__sread+0x40>
    7ce8:	80801417 	ldw	r2,80(r16)
    7cec:	10c5883a 	add	r2,r2,r3
    7cf0:	80801415 	stw	r2,80(r16)
    7cf4:	1805883a 	mov	r2,r3
    7cf8:	dfc00117 	ldw	ra,4(sp)
    7cfc:	dc000017 	ldw	r16,0(sp)
    7d00:	dec00204 	addi	sp,sp,8
    7d04:	f800283a 	ret
    7d08:	8080030b 	ldhu	r2,12(r16)
    7d0c:	10bbffcc 	andi	r2,r2,61439
    7d10:	8080030d 	sth	r2,12(r16)
    7d14:	1805883a 	mov	r2,r3
    7d18:	dfc00117 	ldw	ra,4(sp)
    7d1c:	dc000017 	ldw	r16,0(sp)
    7d20:	dec00204 	addi	sp,sp,8
    7d24:	f800283a 	ret

00007d28 <strcmp>:
    7d28:	2144b03a 	or	r2,r4,r5
    7d2c:	108000cc 	andi	r2,r2,3
    7d30:	10001d1e 	bne	r2,zero,7da8 <strcmp+0x80>
    7d34:	200f883a 	mov	r7,r4
    7d38:	28800017 	ldw	r2,0(r5)
    7d3c:	21000017 	ldw	r4,0(r4)
    7d40:	280d883a 	mov	r6,r5
    7d44:	2080161e 	bne	r4,r2,7da0 <strcmp+0x78>
    7d48:	023fbff4 	movhi	r8,65279
    7d4c:	423fbfc4 	addi	r8,r8,-257
    7d50:	2207883a 	add	r3,r4,r8
    7d54:	01602074 	movhi	r5,32897
    7d58:	29602004 	addi	r5,r5,-32640
    7d5c:	1946703a 	and	r3,r3,r5
    7d60:	0104303a 	nor	r2,zero,r4
    7d64:	10c4703a 	and	r2,r2,r3
    7d68:	10001c1e 	bne	r2,zero,7ddc <strcmp+0xb4>
    7d6c:	4013883a 	mov	r9,r8
    7d70:	2811883a 	mov	r8,r5
    7d74:	00000106 	br	7d7c <strcmp+0x54>
    7d78:	1800181e 	bne	r3,zero,7ddc <strcmp+0xb4>
    7d7c:	39c00104 	addi	r7,r7,4
    7d80:	39000017 	ldw	r4,0(r7)
    7d84:	31800104 	addi	r6,r6,4
    7d88:	31400017 	ldw	r5,0(r6)
    7d8c:	2245883a 	add	r2,r4,r9
    7d90:	1204703a 	and	r2,r2,r8
    7d94:	0106303a 	nor	r3,zero,r4
    7d98:	1886703a 	and	r3,r3,r2
    7d9c:	217ff626 	beq	r4,r5,7d78 <strcmp+0x50>
    7da0:	3809883a 	mov	r4,r7
    7da4:	300b883a 	mov	r5,r6
    7da8:	20c00007 	ldb	r3,0(r4)
    7dac:	1800051e 	bne	r3,zero,7dc4 <strcmp+0x9c>
    7db0:	00000606 	br	7dcc <strcmp+0xa4>
    7db4:	21000044 	addi	r4,r4,1
    7db8:	20c00007 	ldb	r3,0(r4)
    7dbc:	29400044 	addi	r5,r5,1
    7dc0:	18000226 	beq	r3,zero,7dcc <strcmp+0xa4>
    7dc4:	28800007 	ldb	r2,0(r5)
    7dc8:	18bffa26 	beq	r3,r2,7db4 <strcmp+0x8c>
    7dcc:	20c00003 	ldbu	r3,0(r4)
    7dd0:	28800003 	ldbu	r2,0(r5)
    7dd4:	1885c83a 	sub	r2,r3,r2
    7dd8:	f800283a 	ret
    7ddc:	0005883a 	mov	r2,zero
    7de0:	f800283a 	ret

00007de4 <__swbuf_r>:
    7de4:	defffc04 	addi	sp,sp,-16
    7de8:	dc400215 	stw	r17,8(sp)
    7dec:	dc000115 	stw	r16,4(sp)
    7df0:	dfc00315 	stw	ra,12(sp)
    7df4:	2023883a 	mov	r17,r4
    7df8:	2821883a 	mov	r16,r5
    7dfc:	20000226 	beq	r4,zero,7e08 <__swbuf_r+0x24>
    7e00:	20800e17 	ldw	r2,56(r4)
    7e04:	10002f26 	beq	r2,zero,7ec4 <__swbuf_r+0xe0>
    7e08:	3080030b 	ldhu	r2,12(r6)
    7e0c:	30c00617 	ldw	r3,24(r6)
    7e10:	1080020c 	andi	r2,r2,8
    7e14:	30c00215 	stw	r3,8(r6)
    7e18:	10002226 	beq	r2,zero,7ea4 <__swbuf_r+0xc0>
    7e1c:	30c00417 	ldw	r3,16(r6)
    7e20:	18002026 	beq	r3,zero,7ea4 <__swbuf_r+0xc0>
    7e24:	31000017 	ldw	r4,0(r6)
    7e28:	30800517 	ldw	r2,20(r6)
    7e2c:	20c7c83a 	sub	r3,r4,r3
    7e30:	18802f0e 	bge	r3,r2,7ef0 <__swbuf_r+0x10c>
    7e34:	19400044 	addi	r5,r3,1
    7e38:	30800217 	ldw	r2,8(r6)
    7e3c:	84003fcc 	andi	r16,r16,255
    7e40:	20c00044 	addi	r3,r4,1
    7e44:	10bfffc4 	addi	r2,r2,-1
    7e48:	30800215 	stw	r2,8(r6)
    7e4c:	24000005 	stb	r16,0(r4)
    7e50:	30800517 	ldw	r2,20(r6)
    7e54:	30c00015 	stw	r3,0(r6)
    7e58:	11400c26 	beq	r2,r5,7e8c <__swbuf_r+0xa8>
    7e5c:	3080030b 	ldhu	r2,12(r6)
    7e60:	1080004c 	andi	r2,r2,1
    7e64:	1005003a 	cmpeq	r2,r2,zero
    7e68:	10000626 	beq	r2,zero,7e84 <__swbuf_r+0xa0>
    7e6c:	8005883a 	mov	r2,r16
    7e70:	dfc00317 	ldw	ra,12(sp)
    7e74:	dc400217 	ldw	r17,8(sp)
    7e78:	dc000117 	ldw	r16,4(sp)
    7e7c:	dec00404 	addi	sp,sp,16
    7e80:	f800283a 	ret
    7e84:	00800284 	movi	r2,10
    7e88:	80bff81e 	bne	r16,r2,7e6c <__swbuf_r+0x88>
    7e8c:	8809883a 	mov	r4,r17
    7e90:	300b883a 	mov	r5,r6
    7e94:	00047e80 	call	47e8 <_fflush_r>
    7e98:	103ff426 	beq	r2,zero,7e6c <__swbuf_r+0x88>
    7e9c:	043fffc4 	movi	r16,-1
    7ea0:	003ff206 	br	7e6c <__swbuf_r+0x88>
    7ea4:	300b883a 	mov	r5,r6
    7ea8:	8809883a 	mov	r4,r17
    7eac:	d9800015 	stw	r6,0(sp)
    7eb0:	0002ee00 	call	2ee0 <__swsetup_r>
    7eb4:	d9800017 	ldw	r6,0(sp)
    7eb8:	1000061e 	bne	r2,zero,7ed4 <__swbuf_r+0xf0>
    7ebc:	30c00417 	ldw	r3,16(r6)
    7ec0:	003fd806 	br	7e24 <__swbuf_r+0x40>
    7ec4:	d9800015 	stw	r6,0(sp)
    7ec8:	0004a800 	call	4a80 <__sinit>
    7ecc:	d9800017 	ldw	r6,0(sp)
    7ed0:	003fcd06 	br	7e08 <__swbuf_r+0x24>
    7ed4:	3080030b 	ldhu	r2,12(r6)
    7ed8:	00c00244 	movi	r3,9
    7edc:	043fffc4 	movi	r16,-1
    7ee0:	10801014 	ori	r2,r2,64
    7ee4:	3080030d 	sth	r2,12(r6)
    7ee8:	88c00015 	stw	r3,0(r17)
    7eec:	003fdf06 	br	7e6c <__swbuf_r+0x88>
    7ef0:	300b883a 	mov	r5,r6
    7ef4:	8809883a 	mov	r4,r17
    7ef8:	d9800015 	stw	r6,0(sp)
    7efc:	00047e80 	call	47e8 <_fflush_r>
    7f00:	d9800017 	ldw	r6,0(sp)
    7f04:	103fe51e 	bne	r2,zero,7e9c <__swbuf_r+0xb8>
    7f08:	31000017 	ldw	r4,0(r6)
    7f0c:	01400044 	movi	r5,1
    7f10:	003fc906 	br	7e38 <__swbuf_r+0x54>

00007f14 <__swbuf>:
    7f14:	01800074 	movhi	r6,1
    7f18:	31bc5604 	addi	r6,r6,-3752
    7f1c:	2007883a 	mov	r3,r4
    7f20:	31000017 	ldw	r4,0(r6)
    7f24:	280d883a 	mov	r6,r5
    7f28:	180b883a 	mov	r5,r3
    7f2c:	0007de41 	jmpi	7de4 <__swbuf_r>

00007f30 <_write_r>:
    7f30:	defffd04 	addi	sp,sp,-12
    7f34:	dc000015 	stw	r16,0(sp)
    7f38:	04000074 	movhi	r16,1
    7f3c:	84030304 	addi	r16,r16,3084
    7f40:	dc400115 	stw	r17,4(sp)
    7f44:	80000015 	stw	zero,0(r16)
    7f48:	2023883a 	mov	r17,r4
    7f4c:	2809883a 	mov	r4,r5
    7f50:	300b883a 	mov	r5,r6
    7f54:	380d883a 	mov	r6,r7
    7f58:	dfc00215 	stw	ra,8(sp)
    7f5c:	000b2200 	call	b220 <write>
    7f60:	1007883a 	mov	r3,r2
    7f64:	00bfffc4 	movi	r2,-1
    7f68:	18800626 	beq	r3,r2,7f84 <_write_r+0x54>
    7f6c:	1805883a 	mov	r2,r3
    7f70:	dfc00217 	ldw	ra,8(sp)
    7f74:	dc400117 	ldw	r17,4(sp)
    7f78:	dc000017 	ldw	r16,0(sp)
    7f7c:	dec00304 	addi	sp,sp,12
    7f80:	f800283a 	ret
    7f84:	80800017 	ldw	r2,0(r16)
    7f88:	103ff826 	beq	r2,zero,7f6c <_write_r+0x3c>
    7f8c:	88800015 	stw	r2,0(r17)
    7f90:	1805883a 	mov	r2,r3
    7f94:	dfc00217 	ldw	ra,8(sp)
    7f98:	dc400117 	ldw	r17,4(sp)
    7f9c:	dc000017 	ldw	r16,0(sp)
    7fa0:	dec00304 	addi	sp,sp,12
    7fa4:	f800283a 	ret

00007fa8 <_calloc_r>:
    7fa8:	298b383a 	mul	r5,r5,r6
    7fac:	defffe04 	addi	sp,sp,-8
    7fb0:	dc000015 	stw	r16,0(sp)
    7fb4:	dfc00115 	stw	ra,4(sp)
    7fb8:	000598c0 	call	598c <_malloc_r>
    7fbc:	1021883a 	mov	r16,r2
    7fc0:	01c00904 	movi	r7,36
    7fc4:	10000d26 	beq	r2,zero,7ffc <_calloc_r+0x54>
    7fc8:	10ffff17 	ldw	r3,-4(r2)
    7fcc:	1009883a 	mov	r4,r2
    7fd0:	00bfff04 	movi	r2,-4
    7fd4:	1886703a 	and	r3,r3,r2
    7fd8:	1887883a 	add	r3,r3,r2
    7fdc:	180d883a 	mov	r6,r3
    7fe0:	000b883a 	mov	r5,zero
    7fe4:	38c01736 	bltu	r7,r3,8044 <_calloc_r+0x9c>
    7fe8:	008004c4 	movi	r2,19
    7fec:	10c00836 	bltu	r2,r3,8010 <_calloc_r+0x68>
    7ff0:	20000215 	stw	zero,8(r4)
    7ff4:	20000015 	stw	zero,0(r4)
    7ff8:	20000115 	stw	zero,4(r4)
    7ffc:	8005883a 	mov	r2,r16
    8000:	dfc00117 	ldw	ra,4(sp)
    8004:	dc000017 	ldw	r16,0(sp)
    8008:	dec00204 	addi	sp,sp,8
    800c:	f800283a 	ret
    8010:	008006c4 	movi	r2,27
    8014:	80000015 	stw	zero,0(r16)
    8018:	80000115 	stw	zero,4(r16)
    801c:	81000204 	addi	r4,r16,8
    8020:	10fff32e 	bgeu	r2,r3,7ff0 <_calloc_r+0x48>
    8024:	80000215 	stw	zero,8(r16)
    8028:	80000315 	stw	zero,12(r16)
    802c:	81000404 	addi	r4,r16,16
    8030:	19ffef1e 	bne	r3,r7,7ff0 <_calloc_r+0x48>
    8034:	81000604 	addi	r4,r16,24
    8038:	80000415 	stw	zero,16(r16)
    803c:	80000515 	stw	zero,20(r16)
    8040:	003feb06 	br	7ff0 <_calloc_r+0x48>
    8044:	00062900 	call	6290 <memset>
    8048:	8005883a 	mov	r2,r16
    804c:	dfc00117 	ldw	ra,4(sp)
    8050:	dc000017 	ldw	r16,0(sp)
    8054:	dec00204 	addi	sp,sp,8
    8058:	f800283a 	ret

0000805c <_close_r>:
    805c:	defffd04 	addi	sp,sp,-12
    8060:	dc000015 	stw	r16,0(sp)
    8064:	04000074 	movhi	r16,1
    8068:	84030304 	addi	r16,r16,3084
    806c:	dc400115 	stw	r17,4(sp)
    8070:	80000015 	stw	zero,0(r16)
    8074:	2023883a 	mov	r17,r4
    8078:	2809883a 	mov	r4,r5
    807c:	dfc00215 	stw	ra,8(sp)
    8080:	000a6a80 	call	a6a8 <close>
    8084:	1007883a 	mov	r3,r2
    8088:	00bfffc4 	movi	r2,-1
    808c:	18800626 	beq	r3,r2,80a8 <_close_r+0x4c>
    8090:	1805883a 	mov	r2,r3
    8094:	dfc00217 	ldw	ra,8(sp)
    8098:	dc400117 	ldw	r17,4(sp)
    809c:	dc000017 	ldw	r16,0(sp)
    80a0:	dec00304 	addi	sp,sp,12
    80a4:	f800283a 	ret
    80a8:	80800017 	ldw	r2,0(r16)
    80ac:	103ff826 	beq	r2,zero,8090 <_close_r+0x34>
    80b0:	88800015 	stw	r2,0(r17)
    80b4:	1805883a 	mov	r2,r3
    80b8:	dfc00217 	ldw	ra,8(sp)
    80bc:	dc400117 	ldw	r17,4(sp)
    80c0:	dc000017 	ldw	r16,0(sp)
    80c4:	dec00304 	addi	sp,sp,12
    80c8:	f800283a 	ret

000080cc <_fclose_r>:
    80cc:	defffc04 	addi	sp,sp,-16
    80d0:	dc400115 	stw	r17,4(sp)
    80d4:	dc000015 	stw	r16,0(sp)
    80d8:	dfc00315 	stw	ra,12(sp)
    80dc:	dc800215 	stw	r18,8(sp)
    80e0:	2821883a 	mov	r16,r5
    80e4:	2023883a 	mov	r17,r4
    80e8:	28002926 	beq	r5,zero,8190 <_fclose_r+0xc4>
    80ec:	0004a700 	call	4a70 <__sfp_lock_acquire>
    80f0:	88000226 	beq	r17,zero,80fc <_fclose_r+0x30>
    80f4:	88800e17 	ldw	r2,56(r17)
    80f8:	10002d26 	beq	r2,zero,81b0 <_fclose_r+0xe4>
    80fc:	8080030f 	ldh	r2,12(r16)
    8100:	10002226 	beq	r2,zero,818c <_fclose_r+0xc0>
    8104:	8809883a 	mov	r4,r17
    8108:	800b883a 	mov	r5,r16
    810c:	00047e80 	call	47e8 <_fflush_r>
    8110:	1025883a 	mov	r18,r2
    8114:	80800b17 	ldw	r2,44(r16)
    8118:	10000426 	beq	r2,zero,812c <_fclose_r+0x60>
    811c:	81400717 	ldw	r5,28(r16)
    8120:	8809883a 	mov	r4,r17
    8124:	103ee83a 	callr	r2
    8128:	10002a16 	blt	r2,zero,81d4 <_fclose_r+0x108>
    812c:	8080030b 	ldhu	r2,12(r16)
    8130:	1080200c 	andi	r2,r2,128
    8134:	1000231e 	bne	r2,zero,81c4 <_fclose_r+0xf8>
    8138:	81400c17 	ldw	r5,48(r16)
    813c:	28000526 	beq	r5,zero,8154 <_fclose_r+0x88>
    8140:	80801004 	addi	r2,r16,64
    8144:	28800226 	beq	r5,r2,8150 <_fclose_r+0x84>
    8148:	8809883a 	mov	r4,r17
    814c:	0004e040 	call	4e04 <_free_r>
    8150:	80000c15 	stw	zero,48(r16)
    8154:	81401117 	ldw	r5,68(r16)
    8158:	28000326 	beq	r5,zero,8168 <_fclose_r+0x9c>
    815c:	8809883a 	mov	r4,r17
    8160:	0004e040 	call	4e04 <_free_r>
    8164:	80001115 	stw	zero,68(r16)
    8168:	8000030d 	sth	zero,12(r16)
    816c:	0004a740 	call	4a74 <__sfp_lock_release>
    8170:	9005883a 	mov	r2,r18
    8174:	dfc00317 	ldw	ra,12(sp)
    8178:	dc800217 	ldw	r18,8(sp)
    817c:	dc400117 	ldw	r17,4(sp)
    8180:	dc000017 	ldw	r16,0(sp)
    8184:	dec00404 	addi	sp,sp,16
    8188:	f800283a 	ret
    818c:	0004a740 	call	4a74 <__sfp_lock_release>
    8190:	0025883a 	mov	r18,zero
    8194:	9005883a 	mov	r2,r18
    8198:	dfc00317 	ldw	ra,12(sp)
    819c:	dc800217 	ldw	r18,8(sp)
    81a0:	dc400117 	ldw	r17,4(sp)
    81a4:	dc000017 	ldw	r16,0(sp)
    81a8:	dec00404 	addi	sp,sp,16
    81ac:	f800283a 	ret
    81b0:	8809883a 	mov	r4,r17
    81b4:	0004a800 	call	4a80 <__sinit>
    81b8:	8080030f 	ldh	r2,12(r16)
    81bc:	103fd11e 	bne	r2,zero,8104 <_fclose_r+0x38>
    81c0:	003ff206 	br	818c <_fclose_r+0xc0>
    81c4:	81400417 	ldw	r5,16(r16)
    81c8:	8809883a 	mov	r4,r17
    81cc:	0004e040 	call	4e04 <_free_r>
    81d0:	003fd906 	br	8138 <_fclose_r+0x6c>
    81d4:	04bfffc4 	movi	r18,-1
    81d8:	003fd406 	br	812c <_fclose_r+0x60>

000081dc <fclose>:
    81dc:	00800074 	movhi	r2,1
    81e0:	10bc5604 	addi	r2,r2,-3752
    81e4:	200b883a 	mov	r5,r4
    81e8:	11000017 	ldw	r4,0(r2)
    81ec:	00080cc1 	jmpi	80cc <_fclose_r>

000081f0 <_fstat_r>:
    81f0:	defffd04 	addi	sp,sp,-12
    81f4:	dc000015 	stw	r16,0(sp)
    81f8:	04000074 	movhi	r16,1
    81fc:	84030304 	addi	r16,r16,3084
    8200:	dc400115 	stw	r17,4(sp)
    8204:	80000015 	stw	zero,0(r16)
    8208:	2023883a 	mov	r17,r4
    820c:	2809883a 	mov	r4,r5
    8210:	300b883a 	mov	r5,r6
    8214:	dfc00215 	stw	ra,8(sp)
    8218:	000a8740 	call	a874 <fstat>
    821c:	1007883a 	mov	r3,r2
    8220:	00bfffc4 	movi	r2,-1
    8224:	18800626 	beq	r3,r2,8240 <_fstat_r+0x50>
    8228:	1805883a 	mov	r2,r3
    822c:	dfc00217 	ldw	ra,8(sp)
    8230:	dc400117 	ldw	r17,4(sp)
    8234:	dc000017 	ldw	r16,0(sp)
    8238:	dec00304 	addi	sp,sp,12
    823c:	f800283a 	ret
    8240:	80800017 	ldw	r2,0(r16)
    8244:	103ff826 	beq	r2,zero,8228 <_fstat_r+0x38>
    8248:	88800015 	stw	r2,0(r17)
    824c:	1805883a 	mov	r2,r3
    8250:	dfc00217 	ldw	ra,8(sp)
    8254:	dc400117 	ldw	r17,4(sp)
    8258:	dc000017 	ldw	r16,0(sp)
    825c:	dec00304 	addi	sp,sp,12
    8260:	f800283a 	ret

00008264 <_isatty_r>:
    8264:	defffd04 	addi	sp,sp,-12
    8268:	dc000015 	stw	r16,0(sp)
    826c:	04000074 	movhi	r16,1
    8270:	84030304 	addi	r16,r16,3084
    8274:	dc400115 	stw	r17,4(sp)
    8278:	80000015 	stw	zero,0(r16)
    827c:	2023883a 	mov	r17,r4
    8280:	2809883a 	mov	r4,r5
    8284:	dfc00215 	stw	ra,8(sp)
    8288:	000a9a80 	call	a9a8 <isatty>
    828c:	1007883a 	mov	r3,r2
    8290:	00bfffc4 	movi	r2,-1
    8294:	18800626 	beq	r3,r2,82b0 <_isatty_r+0x4c>
    8298:	1805883a 	mov	r2,r3
    829c:	dfc00217 	ldw	ra,8(sp)
    82a0:	dc400117 	ldw	r17,4(sp)
    82a4:	dc000017 	ldw	r16,0(sp)
    82a8:	dec00304 	addi	sp,sp,12
    82ac:	f800283a 	ret
    82b0:	80800017 	ldw	r2,0(r16)
    82b4:	103ff826 	beq	r2,zero,8298 <_isatty_r+0x34>
    82b8:	88800015 	stw	r2,0(r17)
    82bc:	1805883a 	mov	r2,r3
    82c0:	dfc00217 	ldw	ra,8(sp)
    82c4:	dc400117 	ldw	r17,4(sp)
    82c8:	dc000017 	ldw	r16,0(sp)
    82cc:	dec00304 	addi	sp,sp,12
    82d0:	f800283a 	ret

000082d4 <_lseek_r>:
    82d4:	defffd04 	addi	sp,sp,-12
    82d8:	dc000015 	stw	r16,0(sp)
    82dc:	04000074 	movhi	r16,1
    82e0:	84030304 	addi	r16,r16,3084
    82e4:	dc400115 	stw	r17,4(sp)
    82e8:	80000015 	stw	zero,0(r16)
    82ec:	2023883a 	mov	r17,r4
    82f0:	2809883a 	mov	r4,r5
    82f4:	300b883a 	mov	r5,r6
    82f8:	380d883a 	mov	r6,r7
    82fc:	dfc00215 	stw	ra,8(sp)
    8300:	000abb40 	call	abb4 <lseek>
    8304:	1007883a 	mov	r3,r2
    8308:	00bfffc4 	movi	r2,-1
    830c:	18800626 	beq	r3,r2,8328 <_lseek_r+0x54>
    8310:	1805883a 	mov	r2,r3
    8314:	dfc00217 	ldw	ra,8(sp)
    8318:	dc400117 	ldw	r17,4(sp)
    831c:	dc000017 	ldw	r16,0(sp)
    8320:	dec00304 	addi	sp,sp,12
    8324:	f800283a 	ret
    8328:	80800017 	ldw	r2,0(r16)
    832c:	103ff826 	beq	r2,zero,8310 <_lseek_r+0x3c>
    8330:	88800015 	stw	r2,0(r17)
    8334:	1805883a 	mov	r2,r3
    8338:	dfc00217 	ldw	ra,8(sp)
    833c:	dc400117 	ldw	r17,4(sp)
    8340:	dc000017 	ldw	r16,0(sp)
    8344:	dec00304 	addi	sp,sp,12
    8348:	f800283a 	ret

0000834c <_read_r>:
    834c:	defffd04 	addi	sp,sp,-12
    8350:	dc000015 	stw	r16,0(sp)
    8354:	04000074 	movhi	r16,1
    8358:	84030304 	addi	r16,r16,3084
    835c:	dc400115 	stw	r17,4(sp)
    8360:	80000015 	stw	zero,0(r16)
    8364:	2023883a 	mov	r17,r4
    8368:	2809883a 	mov	r4,r5
    836c:	300b883a 	mov	r5,r6
    8370:	380d883a 	mov	r6,r7
    8374:	dfc00215 	stw	ra,8(sp)
    8378:	000adb00 	call	adb0 <read>
    837c:	1007883a 	mov	r3,r2
    8380:	00bfffc4 	movi	r2,-1
    8384:	18800626 	beq	r3,r2,83a0 <_read_r+0x54>
    8388:	1805883a 	mov	r2,r3
    838c:	dfc00217 	ldw	ra,8(sp)
    8390:	dc400117 	ldw	r17,4(sp)
    8394:	dc000017 	ldw	r16,0(sp)
    8398:	dec00304 	addi	sp,sp,12
    839c:	f800283a 	ret
    83a0:	80800017 	ldw	r2,0(r16)
    83a4:	103ff826 	beq	r2,zero,8388 <_read_r+0x3c>
    83a8:	88800015 	stw	r2,0(r17)
    83ac:	1805883a 	mov	r2,r3
    83b0:	dfc00217 	ldw	ra,8(sp)
    83b4:	dc400117 	ldw	r17,4(sp)
    83b8:	dc000017 	ldw	r16,0(sp)
    83bc:	dec00304 	addi	sp,sp,12
    83c0:	f800283a 	ret

000083c4 <__muldi3>:
    83c4:	2011883a 	mov	r8,r4
    83c8:	427fffcc 	andi	r9,r8,65535
    83cc:	4018d43a 	srli	r12,r8,16
    83d0:	32bfffcc 	andi	r10,r6,65535
    83d4:	3016d43a 	srli	r11,r6,16
    83d8:	4a85383a 	mul	r2,r9,r10
    83dc:	6295383a 	mul	r10,r12,r10
    83e0:	4ad3383a 	mul	r9,r9,r11
    83e4:	113fffcc 	andi	r4,r2,65535
    83e8:	1004d43a 	srli	r2,r2,16
    83ec:	4a93883a 	add	r9,r9,r10
    83f0:	3807883a 	mov	r3,r7
    83f4:	1245883a 	add	r2,r2,r9
    83f8:	280f883a 	mov	r7,r5
    83fc:	180b883a 	mov	r5,r3
    8400:	1006943a 	slli	r3,r2,16
    8404:	defffd04 	addi	sp,sp,-12
    8408:	dc800215 	stw	r18,8(sp)
    840c:	1907883a 	add	r3,r3,r4
    8410:	dc400115 	stw	r17,4(sp)
    8414:	dc000015 	stw	r16,0(sp)
    8418:	4165383a 	mul	r18,r8,r5
    841c:	31e3383a 	mul	r17,r6,r7
    8420:	1012d43a 	srli	r9,r2,16
    8424:	62d9383a 	mul	r12,r12,r11
    8428:	181f883a 	mov	r15,r3
    842c:	1280022e 	bgeu	r2,r10,8438 <__muldi3+0x74>
    8430:	00800074 	movhi	r2,1
    8434:	6099883a 	add	r12,r12,r2
    8438:	624d883a 	add	r6,r12,r9
    843c:	9187883a 	add	r3,r18,r6
    8440:	88c7883a 	add	r3,r17,r3
    8444:	7805883a 	mov	r2,r15
    8448:	dc800217 	ldw	r18,8(sp)
    844c:	dc400117 	ldw	r17,4(sp)
    8450:	dc000017 	ldw	r16,0(sp)
    8454:	dec00304 	addi	sp,sp,12
    8458:	f800283a 	ret

0000845c <__udivdi3>:
    845c:	defff004 	addi	sp,sp,-64
    8460:	2005883a 	mov	r2,r4
    8464:	3011883a 	mov	r8,r6
    8468:	df000e15 	stw	fp,56(sp)
    846c:	dd000a15 	stw	r20,40(sp)
    8470:	dc000615 	stw	r16,24(sp)
    8474:	dfc00f15 	stw	ra,60(sp)
    8478:	ddc00d15 	stw	r23,52(sp)
    847c:	dd800c15 	stw	r22,48(sp)
    8480:	dd400b15 	stw	r21,44(sp)
    8484:	dcc00915 	stw	r19,36(sp)
    8488:	dc800815 	stw	r18,32(sp)
    848c:	dc400715 	stw	r17,28(sp)
    8490:	4021883a 	mov	r16,r8
    8494:	1039883a 	mov	fp,r2
    8498:	2829883a 	mov	r20,r5
    849c:	38003b1e 	bne	r7,zero,858c <__udivdi3+0x130>
    84a0:	2a005c36 	bltu	r5,r8,8614 <__udivdi3+0x1b8>
    84a4:	4000a626 	beq	r8,zero,8740 <__udivdi3+0x2e4>
    84a8:	00bfffd4 	movui	r2,65535
    84ac:	14009e36 	bltu	r2,r16,8728 <__udivdi3+0x2cc>
    84b0:	00803fc4 	movi	r2,255
    84b4:	14013d36 	bltu	r2,r16,89ac <__udivdi3+0x550>
    84b8:	000b883a 	mov	r5,zero
    84bc:	0005883a 	mov	r2,zero
    84c0:	8084d83a 	srl	r2,r16,r2
    84c4:	01000074 	movhi	r4,1
    84c8:	21358404 	addi	r4,r4,-10736
    84cc:	01800804 	movi	r6,32
    84d0:	1105883a 	add	r2,r2,r4
    84d4:	10c00003 	ldbu	r3,0(r2)
    84d8:	28c7883a 	add	r3,r5,r3
    84dc:	30edc83a 	sub	r22,r6,r3
    84e0:	b000ee1e 	bne	r22,zero,889c <__udivdi3+0x440>
    84e4:	802ad43a 	srli	r21,r16,16
    84e8:	00800044 	movi	r2,1
    84ec:	a423c83a 	sub	r17,r20,r16
    84f0:	85ffffcc 	andi	r23,r16,65535
    84f4:	d8800315 	stw	r2,12(sp)
    84f8:	8809883a 	mov	r4,r17
    84fc:	a80b883a 	mov	r5,r21
    8500:	0000cb00 	call	cb0 <__udivsi3>
    8504:	8809883a 	mov	r4,r17
    8508:	a80b883a 	mov	r5,r21
    850c:	102d883a 	mov	r22,r2
    8510:	0000cb80 	call	cb8 <__umodsi3>
    8514:	1004943a 	slli	r2,r2,16
    8518:	e006d43a 	srli	r3,fp,16
    851c:	bda3383a 	mul	r17,r23,r22
    8520:	10c4b03a 	or	r2,r2,r3
    8524:	1440042e 	bgeu	r2,r17,8538 <__udivdi3+0xdc>
    8528:	1405883a 	add	r2,r2,r16
    852c:	b5bfffc4 	addi	r22,r22,-1
    8530:	14000136 	bltu	r2,r16,8538 <__udivdi3+0xdc>
    8534:	14413d36 	bltu	r2,r17,8a2c <__udivdi3+0x5d0>
    8538:	1463c83a 	sub	r17,r2,r17
    853c:	8809883a 	mov	r4,r17
    8540:	a80b883a 	mov	r5,r21
    8544:	0000cb00 	call	cb0 <__udivsi3>
    8548:	8809883a 	mov	r4,r17
    854c:	a80b883a 	mov	r5,r21
    8550:	1029883a 	mov	r20,r2
    8554:	0000cb80 	call	cb8 <__umodsi3>
    8558:	1004943a 	slli	r2,r2,16
    855c:	bd09383a 	mul	r4,r23,r20
    8560:	e0ffffcc 	andi	r3,fp,65535
    8564:	10c4b03a 	or	r2,r2,r3
    8568:	1100042e 	bgeu	r2,r4,857c <__udivdi3+0x120>
    856c:	8085883a 	add	r2,r16,r2
    8570:	a53fffc4 	addi	r20,r20,-1
    8574:	14000136 	bltu	r2,r16,857c <__udivdi3+0x120>
    8578:	11012036 	bltu	r2,r4,89fc <__udivdi3+0x5a0>
    857c:	b004943a 	slli	r2,r22,16
    8580:	d9000317 	ldw	r4,12(sp)
    8584:	a084b03a 	or	r2,r20,r2
    8588:	00001506 	br	85e0 <__udivdi3+0x184>
    858c:	380d883a 	mov	r6,r7
    8590:	29c06236 	bltu	r5,r7,871c <__udivdi3+0x2c0>
    8594:	00bfffd4 	movui	r2,65535
    8598:	11c05a36 	bltu	r2,r7,8704 <__udivdi3+0x2a8>
    859c:	00803fc4 	movi	r2,255
    85a0:	11c0fc36 	bltu	r2,r7,8994 <__udivdi3+0x538>
    85a4:	000b883a 	mov	r5,zero
    85a8:	0005883a 	mov	r2,zero
    85ac:	3084d83a 	srl	r2,r6,r2
    85b0:	01000074 	movhi	r4,1
    85b4:	21358404 	addi	r4,r4,-10736
    85b8:	01c00804 	movi	r7,32
    85bc:	1105883a 	add	r2,r2,r4
    85c0:	10c00003 	ldbu	r3,0(r2)
    85c4:	28c7883a 	add	r3,r5,r3
    85c8:	38efc83a 	sub	r23,r7,r3
    85cc:	b800691e 	bne	r23,zero,8774 <__udivdi3+0x318>
    85d0:	35000136 	bltu	r6,r20,85d8 <__udivdi3+0x17c>
    85d4:	e4005136 	bltu	fp,r16,871c <__udivdi3+0x2c0>
    85d8:	00800044 	movi	r2,1
    85dc:	0009883a 	mov	r4,zero
    85e0:	2007883a 	mov	r3,r4
    85e4:	dfc00f17 	ldw	ra,60(sp)
    85e8:	df000e17 	ldw	fp,56(sp)
    85ec:	ddc00d17 	ldw	r23,52(sp)
    85f0:	dd800c17 	ldw	r22,48(sp)
    85f4:	dd400b17 	ldw	r21,44(sp)
    85f8:	dd000a17 	ldw	r20,40(sp)
    85fc:	dcc00917 	ldw	r19,36(sp)
    8600:	dc800817 	ldw	r18,32(sp)
    8604:	dc400717 	ldw	r17,28(sp)
    8608:	dc000617 	ldw	r16,24(sp)
    860c:	dec01004 	addi	sp,sp,64
    8610:	f800283a 	ret
    8614:	00bfffd4 	movui	r2,65535
    8618:	12005036 	bltu	r2,r8,875c <__udivdi3+0x300>
    861c:	00803fc4 	movi	r2,255
    8620:	1200e836 	bltu	r2,r8,89c4 <__udivdi3+0x568>
    8624:	000b883a 	mov	r5,zero
    8628:	0005883a 	mov	r2,zero
    862c:	8084d83a 	srl	r2,r16,r2
    8630:	01000074 	movhi	r4,1
    8634:	21358404 	addi	r4,r4,-10736
    8638:	01800804 	movi	r6,32
    863c:	1105883a 	add	r2,r2,r4
    8640:	10c00003 	ldbu	r3,0(r2)
    8644:	28c7883a 	add	r3,r5,r3
    8648:	30cbc83a 	sub	r5,r6,r3
    864c:	28000626 	beq	r5,zero,8668 <__udivdi3+0x20c>
    8650:	3145c83a 	sub	r2,r6,r5
    8654:	e084d83a 	srl	r2,fp,r2
    8658:	a146983a 	sll	r3,r20,r5
    865c:	e178983a 	sll	fp,fp,r5
    8660:	8160983a 	sll	r16,r16,r5
    8664:	18a8b03a 	or	r20,r3,r2
    8668:	802ad43a 	srli	r21,r16,16
    866c:	a009883a 	mov	r4,r20
    8670:	85ffffcc 	andi	r23,r16,65535
    8674:	a80b883a 	mov	r5,r21
    8678:	0000cb00 	call	cb0 <__udivsi3>
    867c:	a009883a 	mov	r4,r20
    8680:	a80b883a 	mov	r5,r21
    8684:	102d883a 	mov	r22,r2
    8688:	0000cb80 	call	cb8 <__umodsi3>
    868c:	1004943a 	slli	r2,r2,16
    8690:	e006d43a 	srli	r3,fp,16
    8694:	bda3383a 	mul	r17,r23,r22
    8698:	10c4b03a 	or	r2,r2,r3
    869c:	1440042e 	bgeu	r2,r17,86b0 <__udivdi3+0x254>
    86a0:	1405883a 	add	r2,r2,r16
    86a4:	b5bfffc4 	addi	r22,r22,-1
    86a8:	14000136 	bltu	r2,r16,86b0 <__udivdi3+0x254>
    86ac:	1440d536 	bltu	r2,r17,8a04 <__udivdi3+0x5a8>
    86b0:	1463c83a 	sub	r17,r2,r17
    86b4:	8809883a 	mov	r4,r17
    86b8:	a80b883a 	mov	r5,r21
    86bc:	0000cb00 	call	cb0 <__udivsi3>
    86c0:	8809883a 	mov	r4,r17
    86c4:	a80b883a 	mov	r5,r21
    86c8:	1029883a 	mov	r20,r2
    86cc:	0000cb80 	call	cb8 <__umodsi3>
    86d0:	1004943a 	slli	r2,r2,16
    86d4:	bd09383a 	mul	r4,r23,r20
    86d8:	e0ffffcc 	andi	r3,fp,65535
    86dc:	10c4b03a 	or	r2,r2,r3
    86e0:	1100042e 	bgeu	r2,r4,86f4 <__udivdi3+0x298>
    86e4:	8085883a 	add	r2,r16,r2
    86e8:	a53fffc4 	addi	r20,r20,-1
    86ec:	14000136 	bltu	r2,r16,86f4 <__udivdi3+0x298>
    86f0:	1100c736 	bltu	r2,r4,8a10 <__udivdi3+0x5b4>
    86f4:	b004943a 	slli	r2,r22,16
    86f8:	0009883a 	mov	r4,zero
    86fc:	a084b03a 	or	r2,r20,r2
    8700:	003fb706 	br	85e0 <__udivdi3+0x184>
    8704:	00804034 	movhi	r2,256
    8708:	10bfffc4 	addi	r2,r2,-1
    870c:	11c0a436 	bltu	r2,r7,89a0 <__udivdi3+0x544>
    8710:	01400404 	movi	r5,16
    8714:	2805883a 	mov	r2,r5
    8718:	003fa406 	br	85ac <__udivdi3+0x150>
    871c:	0005883a 	mov	r2,zero
    8720:	0009883a 	mov	r4,zero
    8724:	003fae06 	br	85e0 <__udivdi3+0x184>
    8728:	00804034 	movhi	r2,256
    872c:	10bfffc4 	addi	r2,r2,-1
    8730:	1400a136 	bltu	r2,r16,89b8 <__udivdi3+0x55c>
    8734:	01400404 	movi	r5,16
    8738:	2805883a 	mov	r2,r5
    873c:	003f6006 	br	84c0 <__udivdi3+0x64>
    8740:	01000044 	movi	r4,1
    8744:	000b883a 	mov	r5,zero
    8748:	0000cb00 	call	cb0 <__udivsi3>
    874c:	1021883a 	mov	r16,r2
    8750:	00bfffd4 	movui	r2,65535
    8754:	143ff436 	bltu	r2,r16,8728 <__udivdi3+0x2cc>
    8758:	003f5506 	br	84b0 <__udivdi3+0x54>
    875c:	00804034 	movhi	r2,256
    8760:	10bfffc4 	addi	r2,r2,-1
    8764:	12009a36 	bltu	r2,r8,89d0 <__udivdi3+0x574>
    8768:	01400404 	movi	r5,16
    876c:	2805883a 	mov	r2,r5
    8770:	003fae06 	br	862c <__udivdi3+0x1d0>
    8774:	3dc5c83a 	sub	r2,r7,r23
    8778:	35c8983a 	sll	r4,r6,r23
    877c:	8086d83a 	srl	r3,r16,r2
    8780:	a0a2d83a 	srl	r17,r20,r2
    8784:	e084d83a 	srl	r2,fp,r2
    8788:	20eab03a 	or	r21,r4,r3
    878c:	a82cd43a 	srli	r22,r21,16
    8790:	a5c6983a 	sll	r3,r20,r23
    8794:	8809883a 	mov	r4,r17
    8798:	b00b883a 	mov	r5,r22
    879c:	1886b03a 	or	r3,r3,r2
    87a0:	d8c00215 	stw	r3,8(sp)
    87a4:	0000cb00 	call	cb0 <__udivsi3>
    87a8:	8809883a 	mov	r4,r17
    87ac:	b00b883a 	mov	r5,r22
    87b0:	1029883a 	mov	r20,r2
    87b4:	0000cb80 	call	cb8 <__umodsi3>
    87b8:	a8ffffcc 	andi	r3,r21,65535
    87bc:	d8c00515 	stw	r3,20(sp)
    87c0:	d9000217 	ldw	r4,8(sp)
    87c4:	d9400517 	ldw	r5,20(sp)
    87c8:	1004943a 	slli	r2,r2,16
    87cc:	2006d43a 	srli	r3,r4,16
    87d0:	85e0983a 	sll	r16,r16,r23
    87d4:	2d23383a 	mul	r17,r5,r20
    87d8:	10c4b03a 	or	r2,r2,r3
    87dc:	dc000015 	stw	r16,0(sp)
    87e0:	1440032e 	bgeu	r2,r17,87f0 <__udivdi3+0x394>
    87e4:	1545883a 	add	r2,r2,r21
    87e8:	a53fffc4 	addi	r20,r20,-1
    87ec:	15407f2e 	bgeu	r2,r21,89ec <__udivdi3+0x590>
    87f0:	1463c83a 	sub	r17,r2,r17
    87f4:	8809883a 	mov	r4,r17
    87f8:	b00b883a 	mov	r5,r22
    87fc:	0000cb00 	call	cb0 <__udivsi3>
    8800:	8809883a 	mov	r4,r17
    8804:	b00b883a 	mov	r5,r22
    8808:	1021883a 	mov	r16,r2
    880c:	0000cb80 	call	cb8 <__umodsi3>
    8810:	d8c00517 	ldw	r3,20(sp)
    8814:	d9000217 	ldw	r4,8(sp)
    8818:	1004943a 	slli	r2,r2,16
    881c:	1c0f383a 	mul	r7,r3,r16
    8820:	20ffffcc 	andi	r3,r4,65535
    8824:	10e2b03a 	or	r17,r2,r3
    8828:	89c0032e 	bgeu	r17,r7,8838 <__udivdi3+0x3dc>
    882c:	8d63883a 	add	r17,r17,r21
    8830:	843fffc4 	addi	r16,r16,-1
    8834:	8d40692e 	bgeu	r17,r21,89dc <__udivdi3+0x580>
    8838:	a008943a 	slli	r4,r20,16
    883c:	d9400017 	ldw	r5,0(sp)
    8840:	89e3c83a 	sub	r17,r17,r7
    8844:	8110b03a 	or	r8,r16,r4
    8848:	280cd43a 	srli	r6,r5,16
    884c:	28ffffcc 	andi	r3,r5,65535
    8850:	40bfffcc 	andi	r2,r8,65535
    8854:	400ad43a 	srli	r5,r8,16
    8858:	10d3383a 	mul	r9,r2,r3
    885c:	1185383a 	mul	r2,r2,r6
    8860:	28c7383a 	mul	r3,r5,r3
    8864:	4808d43a 	srli	r4,r9,16
    8868:	298b383a 	mul	r5,r5,r6
    886c:	10c5883a 	add	r2,r2,r3
    8870:	2089883a 	add	r4,r4,r2
    8874:	20c0022e 	bgeu	r4,r3,8880 <__udivdi3+0x424>
    8878:	00800074 	movhi	r2,1
    887c:	288b883a 	add	r5,r5,r2
    8880:	2004d43a 	srli	r2,r4,16
    8884:	288b883a 	add	r5,r5,r2
    8888:	89403f36 	bltu	r17,r5,8988 <__udivdi3+0x52c>
    888c:	89403926 	beq	r17,r5,8974 <__udivdi3+0x518>
    8890:	4005883a 	mov	r2,r8
    8894:	0009883a 	mov	r4,zero
    8898:	003f5106 	br	85e0 <__udivdi3+0x184>
    889c:	85a0983a 	sll	r16,r16,r22
    88a0:	3585c83a 	sub	r2,r6,r22
    88a4:	a0a2d83a 	srl	r17,r20,r2
    88a8:	802ad43a 	srli	r21,r16,16
    88ac:	e084d83a 	srl	r2,fp,r2
    88b0:	a586983a 	sll	r3,r20,r22
    88b4:	8809883a 	mov	r4,r17
    88b8:	a80b883a 	mov	r5,r21
    88bc:	1886b03a 	or	r3,r3,r2
    88c0:	d8c00115 	stw	r3,4(sp)
    88c4:	0000cb00 	call	cb0 <__udivsi3>
    88c8:	8809883a 	mov	r4,r17
    88cc:	a80b883a 	mov	r5,r21
    88d0:	d8800415 	stw	r2,16(sp)
    88d4:	0000cb80 	call	cb8 <__umodsi3>
    88d8:	d9000117 	ldw	r4,4(sp)
    88dc:	d9400417 	ldw	r5,16(sp)
    88e0:	1004943a 	slli	r2,r2,16
    88e4:	85ffffcc 	andi	r23,r16,65535
    88e8:	2006d43a 	srli	r3,r4,16
    88ec:	b963383a 	mul	r17,r23,r5
    88f0:	10c4b03a 	or	r2,r2,r3
    88f4:	1440042e 	bgeu	r2,r17,8908 <__udivdi3+0x4ac>
    88f8:	297fffc4 	addi	r5,r5,-1
    88fc:	1405883a 	add	r2,r2,r16
    8900:	d9400415 	stw	r5,16(sp)
    8904:	1400442e 	bgeu	r2,r16,8a18 <__udivdi3+0x5bc>
    8908:	1463c83a 	sub	r17,r2,r17
    890c:	8809883a 	mov	r4,r17
    8910:	a80b883a 	mov	r5,r21
    8914:	0000cb00 	call	cb0 <__udivsi3>
    8918:	8809883a 	mov	r4,r17
    891c:	a80b883a 	mov	r5,r21
    8920:	1029883a 	mov	r20,r2
    8924:	0000cb80 	call	cb8 <__umodsi3>
    8928:	d9400117 	ldw	r5,4(sp)
    892c:	1004943a 	slli	r2,r2,16
    8930:	bd09383a 	mul	r4,r23,r20
    8934:	28ffffcc 	andi	r3,r5,65535
    8938:	10c6b03a 	or	r3,r2,r3
    893c:	1900062e 	bgeu	r3,r4,8958 <__udivdi3+0x4fc>
    8940:	1c07883a 	add	r3,r3,r16
    8944:	a53fffc4 	addi	r20,r20,-1
    8948:	1c000336 	bltu	r3,r16,8958 <__udivdi3+0x4fc>
    894c:	1900022e 	bgeu	r3,r4,8958 <__udivdi3+0x4fc>
    8950:	a53fffc4 	addi	r20,r20,-1
    8954:	1c07883a 	add	r3,r3,r16
    8958:	d9400417 	ldw	r5,16(sp)
    895c:	e5b8983a 	sll	fp,fp,r22
    8960:	1923c83a 	sub	r17,r3,r4
    8964:	2804943a 	slli	r2,r5,16
    8968:	a0a8b03a 	or	r20,r20,r2
    896c:	dd000315 	stw	r20,12(sp)
    8970:	003ee106 	br	84f8 <__udivdi3+0x9c>
    8974:	2004943a 	slli	r2,r4,16
    8978:	e5c8983a 	sll	r4,fp,r23
    897c:	48ffffcc 	andi	r3,r9,65535
    8980:	10c5883a 	add	r2,r2,r3
    8984:	20bfc22e 	bgeu	r4,r2,8890 <__udivdi3+0x434>
    8988:	40bfffc4 	addi	r2,r8,-1
    898c:	0009883a 	mov	r4,zero
    8990:	003f1306 	br	85e0 <__udivdi3+0x184>
    8994:	01400204 	movi	r5,8
    8998:	2805883a 	mov	r2,r5
    899c:	003f0306 	br	85ac <__udivdi3+0x150>
    89a0:	01400604 	movi	r5,24
    89a4:	2805883a 	mov	r2,r5
    89a8:	003f0006 	br	85ac <__udivdi3+0x150>
    89ac:	01400204 	movi	r5,8
    89b0:	2805883a 	mov	r2,r5
    89b4:	003ec206 	br	84c0 <__udivdi3+0x64>
    89b8:	01400604 	movi	r5,24
    89bc:	2805883a 	mov	r2,r5
    89c0:	003ebf06 	br	84c0 <__udivdi3+0x64>
    89c4:	01400204 	movi	r5,8
    89c8:	2805883a 	mov	r2,r5
    89cc:	003f1706 	br	862c <__udivdi3+0x1d0>
    89d0:	01400604 	movi	r5,24
    89d4:	2805883a 	mov	r2,r5
    89d8:	003f1406 	br	862c <__udivdi3+0x1d0>
    89dc:	89ff962e 	bgeu	r17,r7,8838 <__udivdi3+0x3dc>
    89e0:	8d63883a 	add	r17,r17,r21
    89e4:	843fffc4 	addi	r16,r16,-1
    89e8:	003f9306 	br	8838 <__udivdi3+0x3dc>
    89ec:	147f802e 	bgeu	r2,r17,87f0 <__udivdi3+0x394>
    89f0:	a53fffc4 	addi	r20,r20,-1
    89f4:	1545883a 	add	r2,r2,r21
    89f8:	003f7d06 	br	87f0 <__udivdi3+0x394>
    89fc:	a53fffc4 	addi	r20,r20,-1
    8a00:	003ede06 	br	857c <__udivdi3+0x120>
    8a04:	b5bfffc4 	addi	r22,r22,-1
    8a08:	1405883a 	add	r2,r2,r16
    8a0c:	003f2806 	br	86b0 <__udivdi3+0x254>
    8a10:	a53fffc4 	addi	r20,r20,-1
    8a14:	003f3706 	br	86f4 <__udivdi3+0x298>
    8a18:	147fbb2e 	bgeu	r2,r17,8908 <__udivdi3+0x4ac>
    8a1c:	297fffc4 	addi	r5,r5,-1
    8a20:	1405883a 	add	r2,r2,r16
    8a24:	d9400415 	stw	r5,16(sp)
    8a28:	003fb706 	br	8908 <__udivdi3+0x4ac>
    8a2c:	b5bfffc4 	addi	r22,r22,-1
    8a30:	1405883a 	add	r2,r2,r16
    8a34:	003ec006 	br	8538 <__udivdi3+0xdc>

00008a38 <__umoddi3>:
    8a38:	defff104 	addi	sp,sp,-60
    8a3c:	dd800b15 	stw	r22,44(sp)
    8a40:	dd000915 	stw	r20,36(sp)
    8a44:	dc000515 	stw	r16,20(sp)
    8a48:	dfc00e15 	stw	ra,56(sp)
    8a4c:	df000d15 	stw	fp,52(sp)
    8a50:	ddc00c15 	stw	r23,48(sp)
    8a54:	dd400a15 	stw	r21,40(sp)
    8a58:	dcc00815 	stw	r19,32(sp)
    8a5c:	dc800715 	stw	r18,28(sp)
    8a60:	dc400615 	stw	r17,24(sp)
    8a64:	3021883a 	mov	r16,r6
    8a68:	202d883a 	mov	r22,r4
    8a6c:	2829883a 	mov	r20,r5
    8a70:	38002b1e 	bne	r7,zero,8b20 <__umoddi3+0xe8>
    8a74:	29805036 	bltu	r5,r6,8bb8 <__umoddi3+0x180>
    8a78:	30008a26 	beq	r6,zero,8ca4 <__umoddi3+0x26c>
    8a7c:	00bfffd4 	movui	r2,65535
    8a80:	14008236 	bltu	r2,r16,8c8c <__umoddi3+0x254>
    8a84:	00803fc4 	movi	r2,255
    8a88:	14013636 	bltu	r2,r16,8f64 <__umoddi3+0x52c>
    8a8c:	000b883a 	mov	r5,zero
    8a90:	0005883a 	mov	r2,zero
    8a94:	8084d83a 	srl	r2,r16,r2
    8a98:	01000074 	movhi	r4,1
    8a9c:	21358404 	addi	r4,r4,-10736
    8aa0:	01800804 	movi	r6,32
    8aa4:	1105883a 	add	r2,r2,r4
    8aa8:	10c00003 	ldbu	r3,0(r2)
    8aac:	28c7883a 	add	r3,r5,r3
    8ab0:	30efc83a 	sub	r23,r6,r3
    8ab4:	b800941e 	bne	r23,zero,8d08 <__umoddi3+0x2d0>
    8ab8:	802ad43a 	srli	r21,r16,16
    8abc:	a423c83a 	sub	r17,r20,r16
    8ac0:	0039883a 	mov	fp,zero
    8ac4:	853fffcc 	andi	r20,r16,65535
    8ac8:	8809883a 	mov	r4,r17
    8acc:	a80b883a 	mov	r5,r21
    8ad0:	0000cb00 	call	cb0 <__udivsi3>
    8ad4:	8809883a 	mov	r4,r17
    8ad8:	a80b883a 	mov	r5,r21
    8adc:	a0a3383a 	mul	r17,r20,r2
    8ae0:	0000cb80 	call	cb8 <__umodsi3>
    8ae4:	1004943a 	slli	r2,r2,16
    8ae8:	b006d43a 	srli	r3,r22,16
    8aec:	10c4b03a 	or	r2,r2,r3
    8af0:	1440032e 	bgeu	r2,r17,8b00 <__umoddi3+0xc8>
    8af4:	1405883a 	add	r2,r2,r16
    8af8:	14000136 	bltu	r2,r16,8b00 <__umoddi3+0xc8>
    8afc:	14413536 	bltu	r2,r17,8fd4 <__umoddi3+0x59c>
    8b00:	1463c83a 	sub	r17,r2,r17
    8b04:	8809883a 	mov	r4,r17
    8b08:	a80b883a 	mov	r5,r21
    8b0c:	0000cb00 	call	cb0 <__udivsi3>
    8b10:	8809883a 	mov	r4,r17
    8b14:	a0a3383a 	mul	r17,r20,r2
    8b18:	a80b883a 	mov	r5,r21
    8b1c:	00004d06 	br	8c54 <__umoddi3+0x21c>
    8b20:	380d883a 	mov	r6,r7
    8b24:	29c0102e 	bgeu	r5,r7,8b68 <__umoddi3+0x130>
    8b28:	2011883a 	mov	r8,r4
    8b2c:	2813883a 	mov	r9,r5
    8b30:	4005883a 	mov	r2,r8
    8b34:	4807883a 	mov	r3,r9
    8b38:	dfc00e17 	ldw	ra,56(sp)
    8b3c:	df000d17 	ldw	fp,52(sp)
    8b40:	ddc00c17 	ldw	r23,48(sp)
    8b44:	dd800b17 	ldw	r22,44(sp)
    8b48:	dd400a17 	ldw	r21,40(sp)
    8b4c:	dd000917 	ldw	r20,36(sp)
    8b50:	dcc00817 	ldw	r19,32(sp)
    8b54:	dc800717 	ldw	r18,28(sp)
    8b58:	dc400617 	ldw	r17,24(sp)
    8b5c:	dc000517 	ldw	r16,20(sp)
    8b60:	dec00f04 	addi	sp,sp,60
    8b64:	f800283a 	ret
    8b68:	00bfffd4 	movui	r2,65535
    8b6c:	11c05a36 	bltu	r2,r7,8cd8 <__umoddi3+0x2a0>
    8b70:	00803fc4 	movi	r2,255
    8b74:	11c0fe36 	bltu	r2,r7,8f70 <__umoddi3+0x538>
    8b78:	000b883a 	mov	r5,zero
    8b7c:	0005883a 	mov	r2,zero
    8b80:	3084d83a 	srl	r2,r6,r2
    8b84:	01000074 	movhi	r4,1
    8b88:	21358404 	addi	r4,r4,-10736
    8b8c:	01c00804 	movi	r7,32
    8b90:	1105883a 	add	r2,r2,r4
    8b94:	10c00003 	ldbu	r3,0(r2)
    8b98:	28c7883a 	add	r3,r5,r3
    8b9c:	38ebc83a 	sub	r21,r7,r3
    8ba0:	a800851e 	bne	r21,zero,8db8 <__umoddi3+0x380>
    8ba4:	35005236 	bltu	r6,r20,8cf0 <__umoddi3+0x2b8>
    8ba8:	b400512e 	bgeu	r22,r16,8cf0 <__umoddi3+0x2b8>
    8bac:	b011883a 	mov	r8,r22
    8bb0:	a013883a 	mov	r9,r20
    8bb4:	003fde06 	br	8b30 <__umoddi3+0xf8>
    8bb8:	00bfffd4 	movui	r2,65535
    8bbc:	11804036 	bltu	r2,r6,8cc0 <__umoddi3+0x288>
    8bc0:	00803fc4 	movi	r2,255
    8bc4:	1180ed36 	bltu	r2,r6,8f7c <__umoddi3+0x544>
    8bc8:	000b883a 	mov	r5,zero
    8bcc:	0005883a 	mov	r2,zero
    8bd0:	8084d83a 	srl	r2,r16,r2
    8bd4:	01000074 	movhi	r4,1
    8bd8:	21358404 	addi	r4,r4,-10736
    8bdc:	01800804 	movi	r6,32
    8be0:	1105883a 	add	r2,r2,r4
    8be4:	10c00003 	ldbu	r3,0(r2)
    8be8:	28c7883a 	add	r3,r5,r3
    8bec:	30c7c83a 	sub	r3,r6,r3
    8bf0:	1800bf1e 	bne	r3,zero,8ef0 <__umoddi3+0x4b8>
    8bf4:	0039883a 	mov	fp,zero
    8bf8:	802ad43a 	srli	r21,r16,16
    8bfc:	a009883a 	mov	r4,r20
    8c00:	85ffffcc 	andi	r23,r16,65535
    8c04:	a80b883a 	mov	r5,r21
    8c08:	0000cb00 	call	cb0 <__udivsi3>
    8c0c:	a009883a 	mov	r4,r20
    8c10:	a80b883a 	mov	r5,r21
    8c14:	b8a3383a 	mul	r17,r23,r2
    8c18:	0000cb80 	call	cb8 <__umodsi3>
    8c1c:	1004943a 	slli	r2,r2,16
    8c20:	b006d43a 	srli	r3,r22,16
    8c24:	10c4b03a 	or	r2,r2,r3
    8c28:	1440032e 	bgeu	r2,r17,8c38 <__umoddi3+0x200>
    8c2c:	1405883a 	add	r2,r2,r16
    8c30:	14000136 	bltu	r2,r16,8c38 <__umoddi3+0x200>
    8c34:	1440e536 	bltu	r2,r17,8fcc <__umoddi3+0x594>
    8c38:	1463c83a 	sub	r17,r2,r17
    8c3c:	8809883a 	mov	r4,r17
    8c40:	a80b883a 	mov	r5,r21
    8c44:	0000cb00 	call	cb0 <__udivsi3>
    8c48:	8809883a 	mov	r4,r17
    8c4c:	b8a3383a 	mul	r17,r23,r2
    8c50:	a80b883a 	mov	r5,r21
    8c54:	0000cb80 	call	cb8 <__umodsi3>
    8c58:	1004943a 	slli	r2,r2,16
    8c5c:	b0ffffcc 	andi	r3,r22,65535
    8c60:	10c4b03a 	or	r2,r2,r3
    8c64:	1440042e 	bgeu	r2,r17,8c78 <__umoddi3+0x240>
    8c68:	1405883a 	add	r2,r2,r16
    8c6c:	14000236 	bltu	r2,r16,8c78 <__umoddi3+0x240>
    8c70:	1440012e 	bgeu	r2,r17,8c78 <__umoddi3+0x240>
    8c74:	1405883a 	add	r2,r2,r16
    8c78:	1445c83a 	sub	r2,r2,r17
    8c7c:	1724d83a 	srl	r18,r2,fp
    8c80:	0013883a 	mov	r9,zero
    8c84:	9011883a 	mov	r8,r18
    8c88:	003fa906 	br	8b30 <__umoddi3+0xf8>
    8c8c:	00804034 	movhi	r2,256
    8c90:	10bfffc4 	addi	r2,r2,-1
    8c94:	1400b036 	bltu	r2,r16,8f58 <__umoddi3+0x520>
    8c98:	01400404 	movi	r5,16
    8c9c:	2805883a 	mov	r2,r5
    8ca0:	003f7c06 	br	8a94 <__umoddi3+0x5c>
    8ca4:	01000044 	movi	r4,1
    8ca8:	000b883a 	mov	r5,zero
    8cac:	0000cb00 	call	cb0 <__udivsi3>
    8cb0:	1021883a 	mov	r16,r2
    8cb4:	00bfffd4 	movui	r2,65535
    8cb8:	143ff436 	bltu	r2,r16,8c8c <__umoddi3+0x254>
    8cbc:	003f7106 	br	8a84 <__umoddi3+0x4c>
    8cc0:	00804034 	movhi	r2,256
    8cc4:	10bfffc4 	addi	r2,r2,-1
    8cc8:	1180af36 	bltu	r2,r6,8f88 <__umoddi3+0x550>
    8ccc:	01400404 	movi	r5,16
    8cd0:	2805883a 	mov	r2,r5
    8cd4:	003fbe06 	br	8bd0 <__umoddi3+0x198>
    8cd8:	00804034 	movhi	r2,256
    8cdc:	10bfffc4 	addi	r2,r2,-1
    8ce0:	11c0ac36 	bltu	r2,r7,8f94 <__umoddi3+0x55c>
    8ce4:	01400404 	movi	r5,16
    8ce8:	2805883a 	mov	r2,r5
    8cec:	003fa406 	br	8b80 <__umoddi3+0x148>
    8cf0:	b409c83a 	sub	r4,r22,r16
    8cf4:	b105803a 	cmpltu	r2,r22,r4
    8cf8:	a187c83a 	sub	r3,r20,r6
    8cfc:	18a9c83a 	sub	r20,r3,r2
    8d00:	202d883a 	mov	r22,r4
    8d04:	003fa906 	br	8bac <__umoddi3+0x174>
    8d08:	85e0983a 	sll	r16,r16,r23
    8d0c:	35c5c83a 	sub	r2,r6,r23
    8d10:	a0a2d83a 	srl	r17,r20,r2
    8d14:	802ad43a 	srli	r21,r16,16
    8d18:	b084d83a 	srl	r2,r22,r2
    8d1c:	a5c6983a 	sll	r3,r20,r23
    8d20:	8809883a 	mov	r4,r17
    8d24:	a80b883a 	mov	r5,r21
    8d28:	1886b03a 	or	r3,r3,r2
    8d2c:	d8c00115 	stw	r3,4(sp)
    8d30:	853fffcc 	andi	r20,r16,65535
    8d34:	0000cb00 	call	cb0 <__udivsi3>
    8d38:	8809883a 	mov	r4,r17
    8d3c:	a80b883a 	mov	r5,r21
    8d40:	a0a3383a 	mul	r17,r20,r2
    8d44:	0000cb80 	call	cb8 <__umodsi3>
    8d48:	d9000117 	ldw	r4,4(sp)
    8d4c:	1004943a 	slli	r2,r2,16
    8d50:	b839883a 	mov	fp,r23
    8d54:	2006d43a 	srli	r3,r4,16
    8d58:	10c4b03a 	or	r2,r2,r3
    8d5c:	1440022e 	bgeu	r2,r17,8d68 <__umoddi3+0x330>
    8d60:	1405883a 	add	r2,r2,r16
    8d64:	1400962e 	bgeu	r2,r16,8fc0 <__umoddi3+0x588>
    8d68:	1463c83a 	sub	r17,r2,r17
    8d6c:	8809883a 	mov	r4,r17
    8d70:	a80b883a 	mov	r5,r21
    8d74:	0000cb00 	call	cb0 <__udivsi3>
    8d78:	8809883a 	mov	r4,r17
    8d7c:	a80b883a 	mov	r5,r21
    8d80:	a0a3383a 	mul	r17,r20,r2
    8d84:	0000cb80 	call	cb8 <__umodsi3>
    8d88:	d9400117 	ldw	r5,4(sp)
    8d8c:	1004943a 	slli	r2,r2,16
    8d90:	28ffffcc 	andi	r3,r5,65535
    8d94:	10c4b03a 	or	r2,r2,r3
    8d98:	1440042e 	bgeu	r2,r17,8dac <__umoddi3+0x374>
    8d9c:	1405883a 	add	r2,r2,r16
    8da0:	14000236 	bltu	r2,r16,8dac <__umoddi3+0x374>
    8da4:	1440012e 	bgeu	r2,r17,8dac <__umoddi3+0x374>
    8da8:	1405883a 	add	r2,r2,r16
    8dac:	b5ec983a 	sll	r22,r22,r23
    8db0:	1463c83a 	sub	r17,r2,r17
    8db4:	003f4406 	br	8ac8 <__umoddi3+0x90>
    8db8:	3d4fc83a 	sub	r7,r7,r21
    8dbc:	3546983a 	sll	r3,r6,r21
    8dc0:	81c4d83a 	srl	r2,r16,r7
    8dc4:	a1e2d83a 	srl	r17,r20,r7
    8dc8:	a54c983a 	sll	r6,r20,r21
    8dcc:	18aeb03a 	or	r23,r3,r2
    8dd0:	b828d43a 	srli	r20,r23,16
    8dd4:	b1c4d83a 	srl	r2,r22,r7
    8dd8:	8809883a 	mov	r4,r17
    8ddc:	a00b883a 	mov	r5,r20
    8de0:	308cb03a 	or	r6,r6,r2
    8de4:	d9c00315 	stw	r7,12(sp)
    8de8:	d9800215 	stw	r6,8(sp)
    8dec:	0000cb00 	call	cb0 <__udivsi3>
    8df0:	8809883a 	mov	r4,r17
    8df4:	a00b883a 	mov	r5,r20
    8df8:	1039883a 	mov	fp,r2
    8dfc:	0000cb80 	call	cb8 <__umodsi3>
    8e00:	b8ffffcc 	andi	r3,r23,65535
    8e04:	d8c00415 	stw	r3,16(sp)
    8e08:	d9000217 	ldw	r4,8(sp)
    8e0c:	d9400417 	ldw	r5,16(sp)
    8e10:	1004943a 	slli	r2,r2,16
    8e14:	2006d43a 	srli	r3,r4,16
    8e18:	8560983a 	sll	r16,r16,r21
    8e1c:	2f23383a 	mul	r17,r5,fp
    8e20:	10c4b03a 	or	r2,r2,r3
    8e24:	dc000015 	stw	r16,0(sp)
    8e28:	b56c983a 	sll	r22,r22,r21
    8e2c:	1440032e 	bgeu	r2,r17,8e3c <__umoddi3+0x404>
    8e30:	15c5883a 	add	r2,r2,r23
    8e34:	e73fffc4 	addi	fp,fp,-1
    8e38:	15c05d2e 	bgeu	r2,r23,8fb0 <__umoddi3+0x578>
    8e3c:	1463c83a 	sub	r17,r2,r17
    8e40:	8809883a 	mov	r4,r17
    8e44:	a00b883a 	mov	r5,r20
    8e48:	0000cb00 	call	cb0 <__udivsi3>
    8e4c:	8809883a 	mov	r4,r17
    8e50:	a00b883a 	mov	r5,r20
    8e54:	1021883a 	mov	r16,r2
    8e58:	0000cb80 	call	cb8 <__umodsi3>
    8e5c:	d8c00417 	ldw	r3,16(sp)
    8e60:	d9000217 	ldw	r4,8(sp)
    8e64:	1004943a 	slli	r2,r2,16
    8e68:	1c23383a 	mul	r17,r3,r16
    8e6c:	20ffffcc 	andi	r3,r4,65535
    8e70:	10ceb03a 	or	r7,r2,r3
    8e74:	3c40032e 	bgeu	r7,r17,8e84 <__umoddi3+0x44c>
    8e78:	3dcf883a 	add	r7,r7,r23
    8e7c:	843fffc4 	addi	r16,r16,-1
    8e80:	3dc0472e 	bgeu	r7,r23,8fa0 <__umoddi3+0x568>
    8e84:	e004943a 	slli	r2,fp,16
    8e88:	d9400017 	ldw	r5,0(sp)
    8e8c:	3c4fc83a 	sub	r7,r7,r17
    8e90:	8084b03a 	or	r2,r16,r2
    8e94:	28ffffcc 	andi	r3,r5,65535
    8e98:	280cd43a 	srli	r6,r5,16
    8e9c:	100ad43a 	srli	r5,r2,16
    8ea0:	10bfffcc 	andi	r2,r2,65535
    8ea4:	10d1383a 	mul	r8,r2,r3
    8ea8:	28c7383a 	mul	r3,r5,r3
    8eac:	1185383a 	mul	r2,r2,r6
    8eb0:	4008d43a 	srli	r4,r8,16
    8eb4:	298b383a 	mul	r5,r5,r6
    8eb8:	10c5883a 	add	r2,r2,r3
    8ebc:	2089883a 	add	r4,r4,r2
    8ec0:	20c0022e 	bgeu	r4,r3,8ecc <__umoddi3+0x494>
    8ec4:	00800074 	movhi	r2,1
    8ec8:	288b883a 	add	r5,r5,r2
    8ecc:	2004d43a 	srli	r2,r4,16
    8ed0:	2008943a 	slli	r4,r4,16
    8ed4:	40ffffcc 	andi	r3,r8,65535
    8ed8:	288b883a 	add	r5,r5,r2
    8edc:	20c9883a 	add	r4,r4,r3
    8ee0:	39400b36 	bltu	r7,r5,8f10 <__umoddi3+0x4d8>
    8ee4:	39403d26 	beq	r7,r5,8fdc <__umoddi3+0x5a4>
    8ee8:	394bc83a 	sub	r5,r7,r5
    8eec:	00000f06 	br	8f2c <__umoddi3+0x4f4>
    8ef0:	30c5c83a 	sub	r2,r6,r3
    8ef4:	1839883a 	mov	fp,r3
    8ef8:	b084d83a 	srl	r2,r22,r2
    8efc:	a0c6983a 	sll	r3,r20,r3
    8f00:	8720983a 	sll	r16,r16,fp
    8f04:	b72c983a 	sll	r22,r22,fp
    8f08:	18a8b03a 	or	r20,r3,r2
    8f0c:	003f3a06 	br	8bf8 <__umoddi3+0x1c0>
    8f10:	d8c00017 	ldw	r3,0(sp)
    8f14:	20c5c83a 	sub	r2,r4,r3
    8f18:	2089803a 	cmpltu	r4,r4,r2
    8f1c:	2dc7c83a 	sub	r3,r5,r23
    8f20:	1907c83a 	sub	r3,r3,r4
    8f24:	38cbc83a 	sub	r5,r7,r3
    8f28:	1009883a 	mov	r4,r2
    8f2c:	b105c83a 	sub	r2,r22,r4
    8f30:	b087803a 	cmpltu	r3,r22,r2
    8f34:	28c7c83a 	sub	r3,r5,r3
    8f38:	d9400317 	ldw	r5,12(sp)
    8f3c:	1544d83a 	srl	r2,r2,r21
    8f40:	1948983a 	sll	r4,r3,r5
    8f44:	1d46d83a 	srl	r3,r3,r21
    8f48:	20a4b03a 	or	r18,r4,r2
    8f4c:	9011883a 	mov	r8,r18
    8f50:	1813883a 	mov	r9,r3
    8f54:	003ef606 	br	8b30 <__umoddi3+0xf8>
    8f58:	01400604 	movi	r5,24
    8f5c:	2805883a 	mov	r2,r5
    8f60:	003ecc06 	br	8a94 <__umoddi3+0x5c>
    8f64:	01400204 	movi	r5,8
    8f68:	2805883a 	mov	r2,r5
    8f6c:	003ec906 	br	8a94 <__umoddi3+0x5c>
    8f70:	01400204 	movi	r5,8
    8f74:	2805883a 	mov	r2,r5
    8f78:	003f0106 	br	8b80 <__umoddi3+0x148>
    8f7c:	01400204 	movi	r5,8
    8f80:	2805883a 	mov	r2,r5
    8f84:	003f1206 	br	8bd0 <__umoddi3+0x198>
    8f88:	01400604 	movi	r5,24
    8f8c:	2805883a 	mov	r2,r5
    8f90:	003f0f06 	br	8bd0 <__umoddi3+0x198>
    8f94:	01400604 	movi	r5,24
    8f98:	2805883a 	mov	r2,r5
    8f9c:	003ef806 	br	8b80 <__umoddi3+0x148>
    8fa0:	3c7fb82e 	bgeu	r7,r17,8e84 <__umoddi3+0x44c>
    8fa4:	843fffc4 	addi	r16,r16,-1
    8fa8:	3dcf883a 	add	r7,r7,r23
    8fac:	003fb506 	br	8e84 <__umoddi3+0x44c>
    8fb0:	147fa22e 	bgeu	r2,r17,8e3c <__umoddi3+0x404>
    8fb4:	e73fffc4 	addi	fp,fp,-1
    8fb8:	15c5883a 	add	r2,r2,r23
    8fbc:	003f9f06 	br	8e3c <__umoddi3+0x404>
    8fc0:	147f692e 	bgeu	r2,r17,8d68 <__umoddi3+0x330>
    8fc4:	1405883a 	add	r2,r2,r16
    8fc8:	003f6706 	br	8d68 <__umoddi3+0x330>
    8fcc:	1405883a 	add	r2,r2,r16
    8fd0:	003f1906 	br	8c38 <__umoddi3+0x200>
    8fd4:	1405883a 	add	r2,r2,r16
    8fd8:	003ec906 	br	8b00 <__umoddi3+0xc8>
    8fdc:	b13fcc36 	bltu	r22,r4,8f10 <__umoddi3+0x4d8>
    8fe0:	000b883a 	mov	r5,zero
    8fe4:	003fd106 	br	8f2c <__umoddi3+0x4f4>

00008fe8 <_fpadd_parts>:
    8fe8:	defff804 	addi	sp,sp,-32
    8fec:	dcc00315 	stw	r19,12(sp)
    8ff0:	2027883a 	mov	r19,r4
    8ff4:	21000017 	ldw	r4,0(r4)
    8ff8:	00c00044 	movi	r3,1
    8ffc:	dd400515 	stw	r21,20(sp)
    9000:	dd000415 	stw	r20,16(sp)
    9004:	ddc00715 	stw	r23,28(sp)
    9008:	dd800615 	stw	r22,24(sp)
    900c:	dc800215 	stw	r18,8(sp)
    9010:	dc400115 	stw	r17,4(sp)
    9014:	dc000015 	stw	r16,0(sp)
    9018:	282b883a 	mov	r21,r5
    901c:	3029883a 	mov	r20,r6
    9020:	1900632e 	bgeu	r3,r4,91b0 <_fpadd_parts+0x1c8>
    9024:	28800017 	ldw	r2,0(r5)
    9028:	1880812e 	bgeu	r3,r2,9230 <_fpadd_parts+0x248>
    902c:	00c00104 	movi	r3,4
    9030:	20c0dc26 	beq	r4,r3,93a4 <_fpadd_parts+0x3bc>
    9034:	10c07e26 	beq	r2,r3,9230 <_fpadd_parts+0x248>
    9038:	00c00084 	movi	r3,2
    903c:	10c06726 	beq	r2,r3,91dc <_fpadd_parts+0x1f4>
    9040:	20c07b26 	beq	r4,r3,9230 <_fpadd_parts+0x248>
    9044:	9dc00217 	ldw	r23,8(r19)
    9048:	28c00217 	ldw	r3,8(r5)
    904c:	9c400317 	ldw	r17,12(r19)
    9050:	2bc00317 	ldw	r15,12(r5)
    9054:	b8cdc83a 	sub	r6,r23,r3
    9058:	9c800417 	ldw	r18,16(r19)
    905c:	2c000417 	ldw	r16,16(r5)
    9060:	3009883a 	mov	r4,r6
    9064:	30009716 	blt	r6,zero,92c4 <_fpadd_parts+0x2dc>
    9068:	00800fc4 	movi	r2,63
    906c:	11806b16 	blt	r2,r6,921c <_fpadd_parts+0x234>
    9070:	0100a40e 	bge	zero,r4,9304 <_fpadd_parts+0x31c>
    9074:	35bff804 	addi	r22,r6,-32
    9078:	b000bc16 	blt	r22,zero,936c <_fpadd_parts+0x384>
    907c:	8596d83a 	srl	r11,r16,r22
    9080:	0019883a 	mov	r12,zero
    9084:	0013883a 	mov	r9,zero
    9088:	01000044 	movi	r4,1
    908c:	0015883a 	mov	r10,zero
    9090:	b000be16 	blt	r22,zero,938c <_fpadd_parts+0x3a4>
    9094:	2590983a 	sll	r8,r4,r22
    9098:	000f883a 	mov	r7,zero
    909c:	00bfffc4 	movi	r2,-1
    90a0:	3889883a 	add	r4,r7,r2
    90a4:	408b883a 	add	r5,r8,r2
    90a8:	21cd803a 	cmpltu	r6,r4,r7
    90ac:	314b883a 	add	r5,r6,r5
    90b0:	7904703a 	and	r2,r15,r4
    90b4:	8146703a 	and	r3,r16,r5
    90b8:	10c4b03a 	or	r2,r2,r3
    90bc:	10000226 	beq	r2,zero,90c8 <_fpadd_parts+0xe0>
    90c0:	02400044 	movi	r9,1
    90c4:	0015883a 	mov	r10,zero
    90c8:	5a5eb03a 	or	r15,r11,r9
    90cc:	62a0b03a 	or	r16,r12,r10
    90d0:	99400117 	ldw	r5,4(r19)
    90d4:	a8800117 	ldw	r2,4(r21)
    90d8:	28806e26 	beq	r5,r2,9294 <_fpadd_parts+0x2ac>
    90dc:	28006626 	beq	r5,zero,9278 <_fpadd_parts+0x290>
    90e0:	7c45c83a 	sub	r2,r15,r17
    90e4:	7889803a 	cmpltu	r4,r15,r2
    90e8:	8487c83a 	sub	r3,r16,r18
    90ec:	1909c83a 	sub	r4,r3,r4
    90f0:	100d883a 	mov	r6,r2
    90f4:	200f883a 	mov	r7,r4
    90f8:	38007716 	blt	r7,zero,92d8 <_fpadd_parts+0x2f0>
    90fc:	a5c00215 	stw	r23,8(r20)
    9100:	a1c00415 	stw	r7,16(r20)
    9104:	a0000115 	stw	zero,4(r20)
    9108:	a1800315 	stw	r6,12(r20)
    910c:	a2000317 	ldw	r8,12(r20)
    9110:	a2400417 	ldw	r9,16(r20)
    9114:	00bfffc4 	movi	r2,-1
    9118:	408b883a 	add	r5,r8,r2
    911c:	2a09803a 	cmpltu	r4,r5,r8
    9120:	488d883a 	add	r6,r9,r2
    9124:	01c40034 	movhi	r7,4096
    9128:	39ffffc4 	addi	r7,r7,-1
    912c:	218d883a 	add	r6,r4,r6
    9130:	39801736 	bltu	r7,r6,9190 <_fpadd_parts+0x1a8>
    9134:	31c06526 	beq	r6,r7,92cc <_fpadd_parts+0x2e4>
    9138:	a3000217 	ldw	r12,8(r20)
    913c:	4209883a 	add	r4,r8,r8
    9140:	00bfffc4 	movi	r2,-1
    9144:	220f803a 	cmpltu	r7,r4,r8
    9148:	4a4b883a 	add	r5,r9,r9
    914c:	394f883a 	add	r7,r7,r5
    9150:	2095883a 	add	r10,r4,r2
    9154:	3897883a 	add	r11,r7,r2
    9158:	510d803a 	cmpltu	r6,r10,r4
    915c:	6099883a 	add	r12,r12,r2
    9160:	32d7883a 	add	r11,r6,r11
    9164:	00840034 	movhi	r2,4096
    9168:	10bfffc4 	addi	r2,r2,-1
    916c:	2011883a 	mov	r8,r4
    9170:	3813883a 	mov	r9,r7
    9174:	a1000315 	stw	r4,12(r20)
    9178:	a1c00415 	stw	r7,16(r20)
    917c:	a3000215 	stw	r12,8(r20)
    9180:	12c00336 	bltu	r2,r11,9190 <_fpadd_parts+0x1a8>
    9184:	58bfed1e 	bne	r11,r2,913c <_fpadd_parts+0x154>
    9188:	00bfff84 	movi	r2,-2
    918c:	12bfeb2e 	bgeu	r2,r10,913c <_fpadd_parts+0x154>
    9190:	a2800417 	ldw	r10,16(r20)
    9194:	008000c4 	movi	r2,3
    9198:	00c80034 	movhi	r3,8192
    919c:	18ffffc4 	addi	r3,r3,-1
    91a0:	a2400317 	ldw	r9,12(r20)
    91a4:	a0800015 	stw	r2,0(r20)
    91a8:	1a802336 	bltu	r3,r10,9238 <_fpadd_parts+0x250>
    91ac:	a027883a 	mov	r19,r20
    91b0:	9805883a 	mov	r2,r19
    91b4:	ddc00717 	ldw	r23,28(sp)
    91b8:	dd800617 	ldw	r22,24(sp)
    91bc:	dd400517 	ldw	r21,20(sp)
    91c0:	dd000417 	ldw	r20,16(sp)
    91c4:	dcc00317 	ldw	r19,12(sp)
    91c8:	dc800217 	ldw	r18,8(sp)
    91cc:	dc400117 	ldw	r17,4(sp)
    91d0:	dc000017 	ldw	r16,0(sp)
    91d4:	dec00804 	addi	sp,sp,32
    91d8:	f800283a 	ret
    91dc:	20fff41e 	bne	r4,r3,91b0 <_fpadd_parts+0x1c8>
    91e0:	31000015 	stw	r4,0(r6)
    91e4:	98800117 	ldw	r2,4(r19)
    91e8:	30800115 	stw	r2,4(r6)
    91ec:	98c00217 	ldw	r3,8(r19)
    91f0:	30c00215 	stw	r3,8(r6)
    91f4:	98800317 	ldw	r2,12(r19)
    91f8:	30800315 	stw	r2,12(r6)
    91fc:	98c00417 	ldw	r3,16(r19)
    9200:	30c00415 	stw	r3,16(r6)
    9204:	98800117 	ldw	r2,4(r19)
    9208:	28c00117 	ldw	r3,4(r5)
    920c:	3027883a 	mov	r19,r6
    9210:	10c4703a 	and	r2,r2,r3
    9214:	30800115 	stw	r2,4(r6)
    9218:	003fe506 	br	91b0 <_fpadd_parts+0x1c8>
    921c:	1dc02616 	blt	r3,r23,92b8 <_fpadd_parts+0x2d0>
    9220:	0023883a 	mov	r17,zero
    9224:	182f883a 	mov	r23,r3
    9228:	0025883a 	mov	r18,zero
    922c:	003fa806 	br	90d0 <_fpadd_parts+0xe8>
    9230:	a827883a 	mov	r19,r21
    9234:	003fde06 	br	91b0 <_fpadd_parts+0x1c8>
    9238:	01800044 	movi	r6,1
    923c:	500497fa 	slli	r2,r10,31
    9240:	4808d07a 	srli	r4,r9,1
    9244:	518ad83a 	srl	r5,r10,r6
    9248:	a2000217 	ldw	r8,8(r20)
    924c:	1108b03a 	or	r4,r2,r4
    9250:	0007883a 	mov	r3,zero
    9254:	4984703a 	and	r2,r9,r6
    9258:	208cb03a 	or	r6,r4,r2
    925c:	28ceb03a 	or	r7,r5,r3
    9260:	42000044 	addi	r8,r8,1
    9264:	a027883a 	mov	r19,r20
    9268:	a1c00415 	stw	r7,16(r20)
    926c:	a2000215 	stw	r8,8(r20)
    9270:	a1800315 	stw	r6,12(r20)
    9274:	003fce06 	br	91b0 <_fpadd_parts+0x1c8>
    9278:	8bc5c83a 	sub	r2,r17,r15
    927c:	8889803a 	cmpltu	r4,r17,r2
    9280:	9407c83a 	sub	r3,r18,r16
    9284:	1909c83a 	sub	r4,r3,r4
    9288:	100d883a 	mov	r6,r2
    928c:	200f883a 	mov	r7,r4
    9290:	003f9906 	br	90f8 <_fpadd_parts+0x110>
    9294:	7c45883a 	add	r2,r15,r17
    9298:	13c9803a 	cmpltu	r4,r2,r15
    929c:	8487883a 	add	r3,r16,r18
    92a0:	20c9883a 	add	r4,r4,r3
    92a4:	a1400115 	stw	r5,4(r20)
    92a8:	a5c00215 	stw	r23,8(r20)
    92ac:	a0800315 	stw	r2,12(r20)
    92b0:	a1000415 	stw	r4,16(r20)
    92b4:	003fb606 	br	9190 <_fpadd_parts+0x1a8>
    92b8:	001f883a 	mov	r15,zero
    92bc:	0021883a 	mov	r16,zero
    92c0:	003f8306 	br	90d0 <_fpadd_parts+0xe8>
    92c4:	018dc83a 	sub	r6,zero,r6
    92c8:	003f6706 	br	9068 <_fpadd_parts+0x80>
    92cc:	00bfff84 	movi	r2,-2
    92d0:	117faf36 	bltu	r2,r5,9190 <_fpadd_parts+0x1a8>
    92d4:	003f9806 	br	9138 <_fpadd_parts+0x150>
    92d8:	0005883a 	mov	r2,zero
    92dc:	1189c83a 	sub	r4,r2,r6
    92e0:	1105803a 	cmpltu	r2,r2,r4
    92e4:	01cbc83a 	sub	r5,zero,r7
    92e8:	2885c83a 	sub	r2,r5,r2
    92ec:	01800044 	movi	r6,1
    92f0:	a1800115 	stw	r6,4(r20)
    92f4:	a5c00215 	stw	r23,8(r20)
    92f8:	a1000315 	stw	r4,12(r20)
    92fc:	a0800415 	stw	r2,16(r20)
    9300:	003f8206 	br	910c <_fpadd_parts+0x124>
    9304:	203f7226 	beq	r4,zero,90d0 <_fpadd_parts+0xe8>
    9308:	35bff804 	addi	r22,r6,-32
    930c:	b9af883a 	add	r23,r23,r6
    9310:	b0003116 	blt	r22,zero,93d8 <_fpadd_parts+0x3f0>
    9314:	959ad83a 	srl	r13,r18,r22
    9318:	001d883a 	mov	r14,zero
    931c:	000f883a 	mov	r7,zero
    9320:	01000044 	movi	r4,1
    9324:	0011883a 	mov	r8,zero
    9328:	b0002516 	blt	r22,zero,93c0 <_fpadd_parts+0x3d8>
    932c:	2594983a 	sll	r10,r4,r22
    9330:	0013883a 	mov	r9,zero
    9334:	00bfffc4 	movi	r2,-1
    9338:	4889883a 	add	r4,r9,r2
    933c:	508b883a 	add	r5,r10,r2
    9340:	224d803a 	cmpltu	r6,r4,r9
    9344:	314b883a 	add	r5,r6,r5
    9348:	8904703a 	and	r2,r17,r4
    934c:	9146703a 	and	r3,r18,r5
    9350:	10c4b03a 	or	r2,r2,r3
    9354:	10000226 	beq	r2,zero,9360 <_fpadd_parts+0x378>
    9358:	01c00044 	movi	r7,1
    935c:	0011883a 	mov	r8,zero
    9360:	69e2b03a 	or	r17,r13,r7
    9364:	7224b03a 	or	r18,r14,r8
    9368:	003f5906 	br	90d0 <_fpadd_parts+0xe8>
    936c:	8407883a 	add	r3,r16,r16
    9370:	008007c4 	movi	r2,31
    9374:	1185c83a 	sub	r2,r2,r6
    9378:	1886983a 	sll	r3,r3,r2
    937c:	7996d83a 	srl	r11,r15,r6
    9380:	8198d83a 	srl	r12,r16,r6
    9384:	1ad6b03a 	or	r11,r3,r11
    9388:	003f3e06 	br	9084 <_fpadd_parts+0x9c>
    938c:	2006d07a 	srli	r3,r4,1
    9390:	008007c4 	movi	r2,31
    9394:	1185c83a 	sub	r2,r2,r6
    9398:	1890d83a 	srl	r8,r3,r2
    939c:	218e983a 	sll	r7,r4,r6
    93a0:	003f3e06 	br	909c <_fpadd_parts+0xb4>
    93a4:	113f821e 	bne	r2,r4,91b0 <_fpadd_parts+0x1c8>
    93a8:	28c00117 	ldw	r3,4(r5)
    93ac:	98800117 	ldw	r2,4(r19)
    93b0:	10ff7f26 	beq	r2,r3,91b0 <_fpadd_parts+0x1c8>
    93b4:	04c00074 	movhi	r19,1
    93b8:	9cf57f04 	addi	r19,r19,-10756
    93bc:	003f7c06 	br	91b0 <_fpadd_parts+0x1c8>
    93c0:	2006d07a 	srli	r3,r4,1
    93c4:	008007c4 	movi	r2,31
    93c8:	1185c83a 	sub	r2,r2,r6
    93cc:	1894d83a 	srl	r10,r3,r2
    93d0:	2192983a 	sll	r9,r4,r6
    93d4:	003fd706 	br	9334 <_fpadd_parts+0x34c>
    93d8:	9487883a 	add	r3,r18,r18
    93dc:	008007c4 	movi	r2,31
    93e0:	1185c83a 	sub	r2,r2,r6
    93e4:	1886983a 	sll	r3,r3,r2
    93e8:	899ad83a 	srl	r13,r17,r6
    93ec:	919cd83a 	srl	r14,r18,r6
    93f0:	1b5ab03a 	or	r13,r3,r13
    93f4:	003fc906 	br	931c <_fpadd_parts+0x334>

000093f8 <__subdf3>:
    93f8:	deffea04 	addi	sp,sp,-88
    93fc:	dcc01415 	stw	r19,80(sp)
    9400:	dcc00404 	addi	r19,sp,16
    9404:	2011883a 	mov	r8,r4
    9408:	2813883a 	mov	r9,r5
    940c:	dc401315 	stw	r17,76(sp)
    9410:	d809883a 	mov	r4,sp
    9414:	980b883a 	mov	r5,r19
    9418:	dc400904 	addi	r17,sp,36
    941c:	dfc01515 	stw	ra,84(sp)
    9420:	da400115 	stw	r9,4(sp)
    9424:	d9c00315 	stw	r7,12(sp)
    9428:	da000015 	stw	r8,0(sp)
    942c:	d9800215 	stw	r6,8(sp)
    9430:	000a4a80 	call	a4a8 <__unpack_d>
    9434:	d9000204 	addi	r4,sp,8
    9438:	880b883a 	mov	r5,r17
    943c:	000a4a80 	call	a4a8 <__unpack_d>
    9440:	d8800a17 	ldw	r2,40(sp)
    9444:	880b883a 	mov	r5,r17
    9448:	9809883a 	mov	r4,r19
    944c:	d9800e04 	addi	r6,sp,56
    9450:	1080005c 	xori	r2,r2,1
    9454:	d8800a15 	stw	r2,40(sp)
    9458:	0008fe80 	call	8fe8 <_fpadd_parts>
    945c:	1009883a 	mov	r4,r2
    9460:	000a1940 	call	a194 <__pack_d>
    9464:	dfc01517 	ldw	ra,84(sp)
    9468:	dcc01417 	ldw	r19,80(sp)
    946c:	dc401317 	ldw	r17,76(sp)
    9470:	dec01604 	addi	sp,sp,88
    9474:	f800283a 	ret

00009478 <__adddf3>:
    9478:	deffea04 	addi	sp,sp,-88
    947c:	dcc01415 	stw	r19,80(sp)
    9480:	dcc00404 	addi	r19,sp,16
    9484:	2011883a 	mov	r8,r4
    9488:	2813883a 	mov	r9,r5
    948c:	dc401315 	stw	r17,76(sp)
    9490:	d809883a 	mov	r4,sp
    9494:	980b883a 	mov	r5,r19
    9498:	dc400904 	addi	r17,sp,36
    949c:	dfc01515 	stw	ra,84(sp)
    94a0:	da400115 	stw	r9,4(sp)
    94a4:	d9c00315 	stw	r7,12(sp)
    94a8:	da000015 	stw	r8,0(sp)
    94ac:	d9800215 	stw	r6,8(sp)
    94b0:	000a4a80 	call	a4a8 <__unpack_d>
    94b4:	d9000204 	addi	r4,sp,8
    94b8:	880b883a 	mov	r5,r17
    94bc:	000a4a80 	call	a4a8 <__unpack_d>
    94c0:	d9800e04 	addi	r6,sp,56
    94c4:	9809883a 	mov	r4,r19
    94c8:	880b883a 	mov	r5,r17
    94cc:	0008fe80 	call	8fe8 <_fpadd_parts>
    94d0:	1009883a 	mov	r4,r2
    94d4:	000a1940 	call	a194 <__pack_d>
    94d8:	dfc01517 	ldw	ra,84(sp)
    94dc:	dcc01417 	ldw	r19,80(sp)
    94e0:	dc401317 	ldw	r17,76(sp)
    94e4:	dec01604 	addi	sp,sp,88
    94e8:	f800283a 	ret

000094ec <__muldf3>:
    94ec:	deffe004 	addi	sp,sp,-128
    94f0:	dc401815 	stw	r17,96(sp)
    94f4:	dc400404 	addi	r17,sp,16
    94f8:	2011883a 	mov	r8,r4
    94fc:	2813883a 	mov	r9,r5
    9500:	dc001715 	stw	r16,92(sp)
    9504:	d809883a 	mov	r4,sp
    9508:	880b883a 	mov	r5,r17
    950c:	dc000904 	addi	r16,sp,36
    9510:	dfc01f15 	stw	ra,124(sp)
    9514:	da400115 	stw	r9,4(sp)
    9518:	d9c00315 	stw	r7,12(sp)
    951c:	da000015 	stw	r8,0(sp)
    9520:	d9800215 	stw	r6,8(sp)
    9524:	ddc01e15 	stw	r23,120(sp)
    9528:	dd801d15 	stw	r22,116(sp)
    952c:	dd401c15 	stw	r21,112(sp)
    9530:	dd001b15 	stw	r20,108(sp)
    9534:	dcc01a15 	stw	r19,104(sp)
    9538:	dc801915 	stw	r18,100(sp)
    953c:	000a4a80 	call	a4a8 <__unpack_d>
    9540:	d9000204 	addi	r4,sp,8
    9544:	800b883a 	mov	r5,r16
    9548:	000a4a80 	call	a4a8 <__unpack_d>
    954c:	d9000417 	ldw	r4,16(sp)
    9550:	00800044 	movi	r2,1
    9554:	1100102e 	bgeu	r2,r4,9598 <__muldf3+0xac>
    9558:	d8c00917 	ldw	r3,36(sp)
    955c:	10c0062e 	bgeu	r2,r3,9578 <__muldf3+0x8c>
    9560:	00800104 	movi	r2,4
    9564:	20800a26 	beq	r4,r2,9590 <__muldf3+0xa4>
    9568:	1880cc26 	beq	r3,r2,989c <__muldf3+0x3b0>
    956c:	00800084 	movi	r2,2
    9570:	20800926 	beq	r4,r2,9598 <__muldf3+0xac>
    9574:	1880191e 	bne	r3,r2,95dc <__muldf3+0xf0>
    9578:	d8c00a17 	ldw	r3,40(sp)
    957c:	d8800517 	ldw	r2,20(sp)
    9580:	8009883a 	mov	r4,r16
    9584:	10c4c03a 	cmpne	r2,r2,r3
    9588:	d8800a15 	stw	r2,40(sp)
    958c:	00000706 	br	95ac <__muldf3+0xc0>
    9590:	00800084 	movi	r2,2
    9594:	1880c326 	beq	r3,r2,98a4 <__muldf3+0x3b8>
    9598:	d8800517 	ldw	r2,20(sp)
    959c:	d8c00a17 	ldw	r3,40(sp)
    95a0:	8809883a 	mov	r4,r17
    95a4:	10c4c03a 	cmpne	r2,r2,r3
    95a8:	d8800515 	stw	r2,20(sp)
    95ac:	000a1940 	call	a194 <__pack_d>
    95b0:	dfc01f17 	ldw	ra,124(sp)
    95b4:	ddc01e17 	ldw	r23,120(sp)
    95b8:	dd801d17 	ldw	r22,116(sp)
    95bc:	dd401c17 	ldw	r21,112(sp)
    95c0:	dd001b17 	ldw	r20,108(sp)
    95c4:	dcc01a17 	ldw	r19,104(sp)
    95c8:	dc801917 	ldw	r18,100(sp)
    95cc:	dc401817 	ldw	r17,96(sp)
    95d0:	dc001717 	ldw	r16,92(sp)
    95d4:	dec02004 	addi	sp,sp,128
    95d8:	f800283a 	ret
    95dc:	dd800717 	ldw	r22,28(sp)
    95e0:	dc800c17 	ldw	r18,48(sp)
    95e4:	002b883a 	mov	r21,zero
    95e8:	0023883a 	mov	r17,zero
    95ec:	a80b883a 	mov	r5,r21
    95f0:	b00d883a 	mov	r6,r22
    95f4:	880f883a 	mov	r7,r17
    95f8:	ddc00817 	ldw	r23,32(sp)
    95fc:	dcc00d17 	ldw	r19,52(sp)
    9600:	9009883a 	mov	r4,r18
    9604:	00083c40 	call	83c4 <__muldi3>
    9608:	001b883a 	mov	r13,zero
    960c:	680f883a 	mov	r7,r13
    9610:	b009883a 	mov	r4,r22
    9614:	000b883a 	mov	r5,zero
    9618:	980d883a 	mov	r6,r19
    961c:	b82d883a 	mov	r22,r23
    9620:	002f883a 	mov	r23,zero
    9624:	db401615 	stw	r13,88(sp)
    9628:	d8801315 	stw	r2,76(sp)
    962c:	d8c01415 	stw	r3,80(sp)
    9630:	dcc01515 	stw	r19,84(sp)
    9634:	00083c40 	call	83c4 <__muldi3>
    9638:	b00d883a 	mov	r6,r22
    963c:	000b883a 	mov	r5,zero
    9640:	9009883a 	mov	r4,r18
    9644:	b80f883a 	mov	r7,r23
    9648:	1021883a 	mov	r16,r2
    964c:	1823883a 	mov	r17,r3
    9650:	00083c40 	call	83c4 <__muldi3>
    9654:	8085883a 	add	r2,r16,r2
    9658:	140d803a 	cmpltu	r6,r2,r16
    965c:	88c7883a 	add	r3,r17,r3
    9660:	30cd883a 	add	r6,r6,r3
    9664:	1029883a 	mov	r20,r2
    9668:	302b883a 	mov	r21,r6
    966c:	da801317 	ldw	r10,76(sp)
    9670:	dac01417 	ldw	r11,80(sp)
    9674:	db001517 	ldw	r12,84(sp)
    9678:	db401617 	ldw	r13,88(sp)
    967c:	3440612e 	bgeu	r6,r17,9804 <__muldf3+0x318>
    9680:	0009883a 	mov	r4,zero
    9684:	5105883a 	add	r2,r10,r4
    9688:	128d803a 	cmpltu	r6,r2,r10
    968c:	5d07883a 	add	r3,r11,r20
    9690:	30cd883a 	add	r6,r6,r3
    9694:	0021883a 	mov	r16,zero
    9698:	04400044 	movi	r17,1
    969c:	1025883a 	mov	r18,r2
    96a0:	3027883a 	mov	r19,r6
    96a4:	32c06236 	bltu	r6,r11,9830 <__muldf3+0x344>
    96a8:	59807a26 	beq	r11,r6,9894 <__muldf3+0x3a8>
    96ac:	680b883a 	mov	r5,r13
    96b0:	b80f883a 	mov	r7,r23
    96b4:	6009883a 	mov	r4,r12
    96b8:	b00d883a 	mov	r6,r22
    96bc:	00083c40 	call	83c4 <__muldi3>
    96c0:	1009883a 	mov	r4,r2
    96c4:	000f883a 	mov	r7,zero
    96c8:	1545883a 	add	r2,r2,r21
    96cc:	1111803a 	cmpltu	r8,r2,r4
    96d0:	19c7883a 	add	r3,r3,r7
    96d4:	40c7883a 	add	r3,r8,r3
    96d8:	88cb883a 	add	r5,r17,r3
    96dc:	d8c00617 	ldw	r3,24(sp)
    96e0:	8089883a 	add	r4,r16,r2
    96e4:	d8800b17 	ldw	r2,44(sp)
    96e8:	18c00104 	addi	r3,r3,4
    96ec:	240d803a 	cmpltu	r6,r4,r16
    96f0:	10c7883a 	add	r3,r2,r3
    96f4:	2013883a 	mov	r9,r4
    96f8:	d8800a17 	ldw	r2,40(sp)
    96fc:	d9000517 	ldw	r4,20(sp)
    9700:	314d883a 	add	r6,r6,r5
    9704:	3015883a 	mov	r10,r6
    9708:	2088c03a 	cmpne	r4,r4,r2
    970c:	00880034 	movhi	r2,8192
    9710:	10bfffc4 	addi	r2,r2,-1
    9714:	d9000f15 	stw	r4,60(sp)
    9718:	d8c01015 	stw	r3,64(sp)
    971c:	1180162e 	bgeu	r2,r6,9778 <__muldf3+0x28c>
    9720:	1811883a 	mov	r8,r3
    9724:	101f883a 	mov	r15,r2
    9728:	980497fa 	slli	r2,r19,31
    972c:	9016d07a 	srli	r11,r18,1
    9730:	500697fa 	slli	r3,r10,31
    9734:	480cd07a 	srli	r6,r9,1
    9738:	500ed07a 	srli	r7,r10,1
    973c:	12d6b03a 	or	r11,r2,r11
    9740:	00800044 	movi	r2,1
    9744:	198cb03a 	or	r6,r3,r6
    9748:	4888703a 	and	r4,r9,r2
    974c:	9818d07a 	srli	r12,r19,1
    9750:	001b883a 	mov	r13,zero
    9754:	03a00034 	movhi	r14,32768
    9758:	3013883a 	mov	r9,r6
    975c:	3815883a 	mov	r10,r7
    9760:	4091883a 	add	r8,r8,r2
    9764:	20000226 	beq	r4,zero,9770 <__muldf3+0x284>
    9768:	5b64b03a 	or	r18,r11,r13
    976c:	63a6b03a 	or	r19,r12,r14
    9770:	7abfed36 	bltu	r15,r10,9728 <__muldf3+0x23c>
    9774:	da001015 	stw	r8,64(sp)
    9778:	00840034 	movhi	r2,4096
    977c:	10bfffc4 	addi	r2,r2,-1
    9780:	12801436 	bltu	r2,r10,97d4 <__muldf3+0x2e8>
    9784:	da001017 	ldw	r8,64(sp)
    9788:	101f883a 	mov	r15,r2
    978c:	4a45883a 	add	r2,r9,r9
    9790:	124d803a 	cmpltu	r6,r2,r9
    9794:	5287883a 	add	r3,r10,r10
    9798:	9497883a 	add	r11,r18,r18
    979c:	5c8f803a 	cmpltu	r7,r11,r18
    97a0:	9cd9883a 	add	r12,r19,r19
    97a4:	01000044 	movi	r4,1
    97a8:	30cd883a 	add	r6,r6,r3
    97ac:	3b0f883a 	add	r7,r7,r12
    97b0:	423fffc4 	addi	r8,r8,-1
    97b4:	1013883a 	mov	r9,r2
    97b8:	3015883a 	mov	r10,r6
    97bc:	111ab03a 	or	r13,r2,r4
    97c0:	98003016 	blt	r19,zero,9884 <__muldf3+0x398>
    97c4:	5825883a 	mov	r18,r11
    97c8:	3827883a 	mov	r19,r7
    97cc:	7abfef2e 	bgeu	r15,r10,978c <__muldf3+0x2a0>
    97d0:	da001015 	stw	r8,64(sp)
    97d4:	00803fc4 	movi	r2,255
    97d8:	488e703a 	and	r7,r9,r2
    97dc:	00802004 	movi	r2,128
    97e0:	0007883a 	mov	r3,zero
    97e4:	0011883a 	mov	r8,zero
    97e8:	38801826 	beq	r7,r2,984c <__muldf3+0x360>
    97ec:	008000c4 	movi	r2,3
    97f0:	d9000e04 	addi	r4,sp,56
    97f4:	da801215 	stw	r10,72(sp)
    97f8:	d8800e15 	stw	r2,56(sp)
    97fc:	da401115 	stw	r9,68(sp)
    9800:	003f6a06 	br	95ac <__muldf3+0xc0>
    9804:	89802126 	beq	r17,r6,988c <__muldf3+0x3a0>
    9808:	0009883a 	mov	r4,zero
    980c:	5105883a 	add	r2,r10,r4
    9810:	128d803a 	cmpltu	r6,r2,r10
    9814:	5d07883a 	add	r3,r11,r20
    9818:	30cd883a 	add	r6,r6,r3
    981c:	0021883a 	mov	r16,zero
    9820:	0023883a 	mov	r17,zero
    9824:	1025883a 	mov	r18,r2
    9828:	3027883a 	mov	r19,r6
    982c:	32ff9e2e 	bgeu	r6,r11,96a8 <__muldf3+0x1bc>
    9830:	00800044 	movi	r2,1
    9834:	8089883a 	add	r4,r16,r2
    9838:	240d803a 	cmpltu	r6,r4,r16
    983c:	344d883a 	add	r6,r6,r17
    9840:	2021883a 	mov	r16,r4
    9844:	3023883a 	mov	r17,r6
    9848:	003f9806 	br	96ac <__muldf3+0x1c0>
    984c:	403fe71e 	bne	r8,zero,97ec <__muldf3+0x300>
    9850:	01004004 	movi	r4,256
    9854:	4904703a 	and	r2,r9,r4
    9858:	10c4b03a 	or	r2,r2,r3
    985c:	103fe31e 	bne	r2,zero,97ec <__muldf3+0x300>
    9860:	94c4b03a 	or	r2,r18,r19
    9864:	103fe126 	beq	r2,zero,97ec <__muldf3+0x300>
    9868:	49c5883a 	add	r2,r9,r7
    986c:	1251803a 	cmpltu	r8,r2,r9
    9870:	4291883a 	add	r8,r8,r10
    9874:	013fc004 	movi	r4,-256
    9878:	1112703a 	and	r9,r2,r4
    987c:	4015883a 	mov	r10,r8
    9880:	003fda06 	br	97ec <__muldf3+0x300>
    9884:	6813883a 	mov	r9,r13
    9888:	003fce06 	br	97c4 <__muldf3+0x2d8>
    988c:	143f7c36 	bltu	r2,r16,9680 <__muldf3+0x194>
    9890:	003fdd06 	br	9808 <__muldf3+0x31c>
    9894:	12bf852e 	bgeu	r2,r10,96ac <__muldf3+0x1c0>
    9898:	003fe506 	br	9830 <__muldf3+0x344>
    989c:	00800084 	movi	r2,2
    98a0:	20bf351e 	bne	r4,r2,9578 <__muldf3+0x8c>
    98a4:	01000074 	movhi	r4,1
    98a8:	21357f04 	addi	r4,r4,-10756
    98ac:	003f3f06 	br	95ac <__muldf3+0xc0>

000098b0 <__divdf3>:
    98b0:	deffed04 	addi	sp,sp,-76
    98b4:	dcc01115 	stw	r19,68(sp)
    98b8:	dcc00404 	addi	r19,sp,16
    98bc:	2011883a 	mov	r8,r4
    98c0:	2813883a 	mov	r9,r5
    98c4:	dc000e15 	stw	r16,56(sp)
    98c8:	d809883a 	mov	r4,sp
    98cc:	980b883a 	mov	r5,r19
    98d0:	dc000904 	addi	r16,sp,36
    98d4:	dfc01215 	stw	ra,72(sp)
    98d8:	da400115 	stw	r9,4(sp)
    98dc:	d9c00315 	stw	r7,12(sp)
    98e0:	da000015 	stw	r8,0(sp)
    98e4:	d9800215 	stw	r6,8(sp)
    98e8:	dc801015 	stw	r18,64(sp)
    98ec:	dc400f15 	stw	r17,60(sp)
    98f0:	000a4a80 	call	a4a8 <__unpack_d>
    98f4:	d9000204 	addi	r4,sp,8
    98f8:	800b883a 	mov	r5,r16
    98fc:	000a4a80 	call	a4a8 <__unpack_d>
    9900:	d9000417 	ldw	r4,16(sp)
    9904:	00800044 	movi	r2,1
    9908:	11000b2e 	bgeu	r2,r4,9938 <__divdf3+0x88>
    990c:	d9400917 	ldw	r5,36(sp)
    9910:	1140762e 	bgeu	r2,r5,9aec <__divdf3+0x23c>
    9914:	d8800517 	ldw	r2,20(sp)
    9918:	d8c00a17 	ldw	r3,40(sp)
    991c:	01800104 	movi	r6,4
    9920:	10c4f03a 	xor	r2,r2,r3
    9924:	d8800515 	stw	r2,20(sp)
    9928:	21800226 	beq	r4,r6,9934 <__divdf3+0x84>
    992c:	00800084 	movi	r2,2
    9930:	2080141e 	bne	r4,r2,9984 <__divdf3+0xd4>
    9934:	29000926 	beq	r5,r4,995c <__divdf3+0xac>
    9938:	9809883a 	mov	r4,r19
    993c:	000a1940 	call	a194 <__pack_d>
    9940:	dfc01217 	ldw	ra,72(sp)
    9944:	dcc01117 	ldw	r19,68(sp)
    9948:	dc801017 	ldw	r18,64(sp)
    994c:	dc400f17 	ldw	r17,60(sp)
    9950:	dc000e17 	ldw	r16,56(sp)
    9954:	dec01304 	addi	sp,sp,76
    9958:	f800283a 	ret
    995c:	01000074 	movhi	r4,1
    9960:	21357f04 	addi	r4,r4,-10756
    9964:	000a1940 	call	a194 <__pack_d>
    9968:	dfc01217 	ldw	ra,72(sp)
    996c:	dcc01117 	ldw	r19,68(sp)
    9970:	dc801017 	ldw	r18,64(sp)
    9974:	dc400f17 	ldw	r17,60(sp)
    9978:	dc000e17 	ldw	r16,56(sp)
    997c:	dec01304 	addi	sp,sp,76
    9980:	f800283a 	ret
    9984:	29805b26 	beq	r5,r6,9af4 <__divdf3+0x244>
    9988:	28802d26 	beq	r5,r2,9a40 <__divdf3+0x190>
    998c:	d8c00617 	ldw	r3,24(sp)
    9990:	d8800b17 	ldw	r2,44(sp)
    9994:	d9c00817 	ldw	r7,32(sp)
    9998:	dc400d17 	ldw	r17,52(sp)
    999c:	188bc83a 	sub	r5,r3,r2
    99a0:	d9800717 	ldw	r6,28(sp)
    99a4:	dc000c17 	ldw	r16,48(sp)
    99a8:	d9400615 	stw	r5,24(sp)
    99ac:	3c403836 	bltu	r7,r17,9a90 <__divdf3+0x1e0>
    99b0:	89c03626 	beq	r17,r7,9a8c <__divdf3+0x1dc>
    99b4:	0015883a 	mov	r10,zero
    99b8:	001d883a 	mov	r14,zero
    99bc:	02c40034 	movhi	r11,4096
    99c0:	001f883a 	mov	r15,zero
    99c4:	003f883a 	mov	ra,zero
    99c8:	04800f44 	movi	r18,61
    99cc:	00000f06 	br	9a0c <__divdf3+0x15c>
    99d0:	601d883a 	mov	r14,r12
    99d4:	681f883a 	mov	r15,r13
    99d8:	400d883a 	mov	r6,r8
    99dc:	100f883a 	mov	r7,r2
    99e0:	3191883a 	add	r8,r6,r6
    99e4:	5808d07a 	srli	r4,r11,1
    99e8:	4185803a 	cmpltu	r2,r8,r6
    99ec:	39d3883a 	add	r9,r7,r7
    99f0:	28c6b03a 	or	r3,r5,r3
    99f4:	1245883a 	add	r2,r2,r9
    99f8:	1815883a 	mov	r10,r3
    99fc:	2017883a 	mov	r11,r4
    9a00:	400d883a 	mov	r6,r8
    9a04:	100f883a 	mov	r7,r2
    9a08:	fc801726 	beq	ra,r18,9a68 <__divdf3+0x1b8>
    9a0c:	580a97fa 	slli	r5,r11,31
    9a10:	5006d07a 	srli	r3,r10,1
    9a14:	ffc00044 	addi	ra,ra,1
    9a18:	3c7ff136 	bltu	r7,r17,99e0 <__divdf3+0x130>
    9a1c:	3411c83a 	sub	r8,r6,r16
    9a20:	3205803a 	cmpltu	r2,r6,r8
    9a24:	3c53c83a 	sub	r9,r7,r17
    9a28:	7298b03a 	or	r12,r14,r10
    9a2c:	7adab03a 	or	r13,r15,r11
    9a30:	4885c83a 	sub	r2,r9,r2
    9a34:	89ffe61e 	bne	r17,r7,99d0 <__divdf3+0x120>
    9a38:	343fe936 	bltu	r6,r16,99e0 <__divdf3+0x130>
    9a3c:	003fe406 	br	99d0 <__divdf3+0x120>
    9a40:	9809883a 	mov	r4,r19
    9a44:	d9800415 	stw	r6,16(sp)
    9a48:	000a1940 	call	a194 <__pack_d>
    9a4c:	dfc01217 	ldw	ra,72(sp)
    9a50:	dcc01117 	ldw	r19,68(sp)
    9a54:	dc801017 	ldw	r18,64(sp)
    9a58:	dc400f17 	ldw	r17,60(sp)
    9a5c:	dc000e17 	ldw	r16,56(sp)
    9a60:	dec01304 	addi	sp,sp,76
    9a64:	f800283a 	ret
    9a68:	00803fc4 	movi	r2,255
    9a6c:	7090703a 	and	r8,r14,r2
    9a70:	00802004 	movi	r2,128
    9a74:	0007883a 	mov	r3,zero
    9a78:	0013883a 	mov	r9,zero
    9a7c:	40800d26 	beq	r8,r2,9ab4 <__divdf3+0x204>
    9a80:	dbc00815 	stw	r15,32(sp)
    9a84:	db800715 	stw	r14,28(sp)
    9a88:	003fab06 	br	9938 <__divdf3+0x88>
    9a8c:	343fc92e 	bgeu	r6,r16,99b4 <__divdf3+0x104>
    9a90:	3185883a 	add	r2,r6,r6
    9a94:	1189803a 	cmpltu	r4,r2,r6
    9a98:	39c7883a 	add	r3,r7,r7
    9a9c:	20c9883a 	add	r4,r4,r3
    9aa0:	297fffc4 	addi	r5,r5,-1
    9aa4:	100d883a 	mov	r6,r2
    9aa8:	200f883a 	mov	r7,r4
    9aac:	d9400615 	stw	r5,24(sp)
    9ab0:	003fc006 	br	99b4 <__divdf3+0x104>
    9ab4:	483ff21e 	bne	r9,zero,9a80 <__divdf3+0x1d0>
    9ab8:	01004004 	movi	r4,256
    9abc:	7104703a 	and	r2,r14,r4
    9ac0:	10c4b03a 	or	r2,r2,r3
    9ac4:	103fee1e 	bne	r2,zero,9a80 <__divdf3+0x1d0>
    9ac8:	31c4b03a 	or	r2,r6,r7
    9acc:	103fec26 	beq	r2,zero,9a80 <__divdf3+0x1d0>
    9ad0:	7205883a 	add	r2,r14,r8
    9ad4:	1391803a 	cmpltu	r8,r2,r14
    9ad8:	43d1883a 	add	r8,r8,r15
    9adc:	013fc004 	movi	r4,-256
    9ae0:	111c703a 	and	r14,r2,r4
    9ae4:	401f883a 	mov	r15,r8
    9ae8:	003fe506 	br	9a80 <__divdf3+0x1d0>
    9aec:	8009883a 	mov	r4,r16
    9af0:	003f9206 	br	993c <__divdf3+0x8c>
    9af4:	9809883a 	mov	r4,r19
    9af8:	d8000715 	stw	zero,28(sp)
    9afc:	d8000815 	stw	zero,32(sp)
    9b00:	d8000615 	stw	zero,24(sp)
    9b04:	003f8d06 	br	993c <__divdf3+0x8c>

00009b08 <__eqdf2>:
    9b08:	deffef04 	addi	sp,sp,-68
    9b0c:	dc400f15 	stw	r17,60(sp)
    9b10:	dc400404 	addi	r17,sp,16
    9b14:	2005883a 	mov	r2,r4
    9b18:	2807883a 	mov	r3,r5
    9b1c:	dc000e15 	stw	r16,56(sp)
    9b20:	d809883a 	mov	r4,sp
    9b24:	880b883a 	mov	r5,r17
    9b28:	dc000904 	addi	r16,sp,36
    9b2c:	d8c00115 	stw	r3,4(sp)
    9b30:	d8800015 	stw	r2,0(sp)
    9b34:	d9800215 	stw	r6,8(sp)
    9b38:	dfc01015 	stw	ra,64(sp)
    9b3c:	d9c00315 	stw	r7,12(sp)
    9b40:	000a4a80 	call	a4a8 <__unpack_d>
    9b44:	d9000204 	addi	r4,sp,8
    9b48:	800b883a 	mov	r5,r16
    9b4c:	000a4a80 	call	a4a8 <__unpack_d>
    9b50:	d8800417 	ldw	r2,16(sp)
    9b54:	00c00044 	movi	r3,1
    9b58:	180d883a 	mov	r6,r3
    9b5c:	1880062e 	bgeu	r3,r2,9b78 <__eqdf2+0x70>
    9b60:	d8800917 	ldw	r2,36(sp)
    9b64:	8809883a 	mov	r4,r17
    9b68:	800b883a 	mov	r5,r16
    9b6c:	1880022e 	bgeu	r3,r2,9b78 <__eqdf2+0x70>
    9b70:	000a5e00 	call	a5e0 <__fpcmp_parts_d>
    9b74:	100d883a 	mov	r6,r2
    9b78:	3005883a 	mov	r2,r6
    9b7c:	dfc01017 	ldw	ra,64(sp)
    9b80:	dc400f17 	ldw	r17,60(sp)
    9b84:	dc000e17 	ldw	r16,56(sp)
    9b88:	dec01104 	addi	sp,sp,68
    9b8c:	f800283a 	ret

00009b90 <__nedf2>:
    9b90:	deffef04 	addi	sp,sp,-68
    9b94:	dc400f15 	stw	r17,60(sp)
    9b98:	dc400404 	addi	r17,sp,16
    9b9c:	2005883a 	mov	r2,r4
    9ba0:	2807883a 	mov	r3,r5
    9ba4:	dc000e15 	stw	r16,56(sp)
    9ba8:	d809883a 	mov	r4,sp
    9bac:	880b883a 	mov	r5,r17
    9bb0:	dc000904 	addi	r16,sp,36
    9bb4:	d8c00115 	stw	r3,4(sp)
    9bb8:	d8800015 	stw	r2,0(sp)
    9bbc:	d9800215 	stw	r6,8(sp)
    9bc0:	dfc01015 	stw	ra,64(sp)
    9bc4:	d9c00315 	stw	r7,12(sp)
    9bc8:	000a4a80 	call	a4a8 <__unpack_d>
    9bcc:	d9000204 	addi	r4,sp,8
    9bd0:	800b883a 	mov	r5,r16
    9bd4:	000a4a80 	call	a4a8 <__unpack_d>
    9bd8:	d8800417 	ldw	r2,16(sp)
    9bdc:	00c00044 	movi	r3,1
    9be0:	180d883a 	mov	r6,r3
    9be4:	1880062e 	bgeu	r3,r2,9c00 <__nedf2+0x70>
    9be8:	d8800917 	ldw	r2,36(sp)
    9bec:	8809883a 	mov	r4,r17
    9bf0:	800b883a 	mov	r5,r16
    9bf4:	1880022e 	bgeu	r3,r2,9c00 <__nedf2+0x70>
    9bf8:	000a5e00 	call	a5e0 <__fpcmp_parts_d>
    9bfc:	100d883a 	mov	r6,r2
    9c00:	3005883a 	mov	r2,r6
    9c04:	dfc01017 	ldw	ra,64(sp)
    9c08:	dc400f17 	ldw	r17,60(sp)
    9c0c:	dc000e17 	ldw	r16,56(sp)
    9c10:	dec01104 	addi	sp,sp,68
    9c14:	f800283a 	ret

00009c18 <__gtdf2>:
    9c18:	deffef04 	addi	sp,sp,-68
    9c1c:	dc400f15 	stw	r17,60(sp)
    9c20:	dc400404 	addi	r17,sp,16
    9c24:	2005883a 	mov	r2,r4
    9c28:	2807883a 	mov	r3,r5
    9c2c:	dc000e15 	stw	r16,56(sp)
    9c30:	d809883a 	mov	r4,sp
    9c34:	880b883a 	mov	r5,r17
    9c38:	dc000904 	addi	r16,sp,36
    9c3c:	d8c00115 	stw	r3,4(sp)
    9c40:	d8800015 	stw	r2,0(sp)
    9c44:	d9800215 	stw	r6,8(sp)
    9c48:	dfc01015 	stw	ra,64(sp)
    9c4c:	d9c00315 	stw	r7,12(sp)
    9c50:	000a4a80 	call	a4a8 <__unpack_d>
    9c54:	d9000204 	addi	r4,sp,8
    9c58:	800b883a 	mov	r5,r16
    9c5c:	000a4a80 	call	a4a8 <__unpack_d>
    9c60:	d8800417 	ldw	r2,16(sp)
    9c64:	00c00044 	movi	r3,1
    9c68:	01bfffc4 	movi	r6,-1
    9c6c:	1880062e 	bgeu	r3,r2,9c88 <__gtdf2+0x70>
    9c70:	d8800917 	ldw	r2,36(sp)
    9c74:	8809883a 	mov	r4,r17
    9c78:	800b883a 	mov	r5,r16
    9c7c:	1880022e 	bgeu	r3,r2,9c88 <__gtdf2+0x70>
    9c80:	000a5e00 	call	a5e0 <__fpcmp_parts_d>
    9c84:	100d883a 	mov	r6,r2
    9c88:	3005883a 	mov	r2,r6
    9c8c:	dfc01017 	ldw	ra,64(sp)
    9c90:	dc400f17 	ldw	r17,60(sp)
    9c94:	dc000e17 	ldw	r16,56(sp)
    9c98:	dec01104 	addi	sp,sp,68
    9c9c:	f800283a 	ret

00009ca0 <__gedf2>:
    9ca0:	deffef04 	addi	sp,sp,-68
    9ca4:	dc400f15 	stw	r17,60(sp)
    9ca8:	dc400404 	addi	r17,sp,16
    9cac:	2005883a 	mov	r2,r4
    9cb0:	2807883a 	mov	r3,r5
    9cb4:	dc000e15 	stw	r16,56(sp)
    9cb8:	d809883a 	mov	r4,sp
    9cbc:	880b883a 	mov	r5,r17
    9cc0:	dc000904 	addi	r16,sp,36
    9cc4:	d8c00115 	stw	r3,4(sp)
    9cc8:	d8800015 	stw	r2,0(sp)
    9ccc:	d9800215 	stw	r6,8(sp)
    9cd0:	dfc01015 	stw	ra,64(sp)
    9cd4:	d9c00315 	stw	r7,12(sp)
    9cd8:	000a4a80 	call	a4a8 <__unpack_d>
    9cdc:	d9000204 	addi	r4,sp,8
    9ce0:	800b883a 	mov	r5,r16
    9ce4:	000a4a80 	call	a4a8 <__unpack_d>
    9ce8:	d8800417 	ldw	r2,16(sp)
    9cec:	00c00044 	movi	r3,1
    9cf0:	01bfffc4 	movi	r6,-1
    9cf4:	1880062e 	bgeu	r3,r2,9d10 <__gedf2+0x70>
    9cf8:	d8800917 	ldw	r2,36(sp)
    9cfc:	8809883a 	mov	r4,r17
    9d00:	800b883a 	mov	r5,r16
    9d04:	1880022e 	bgeu	r3,r2,9d10 <__gedf2+0x70>
    9d08:	000a5e00 	call	a5e0 <__fpcmp_parts_d>
    9d0c:	100d883a 	mov	r6,r2
    9d10:	3005883a 	mov	r2,r6
    9d14:	dfc01017 	ldw	ra,64(sp)
    9d18:	dc400f17 	ldw	r17,60(sp)
    9d1c:	dc000e17 	ldw	r16,56(sp)
    9d20:	dec01104 	addi	sp,sp,68
    9d24:	f800283a 	ret

00009d28 <__ltdf2>:
    9d28:	deffef04 	addi	sp,sp,-68
    9d2c:	dc400f15 	stw	r17,60(sp)
    9d30:	dc400404 	addi	r17,sp,16
    9d34:	2005883a 	mov	r2,r4
    9d38:	2807883a 	mov	r3,r5
    9d3c:	dc000e15 	stw	r16,56(sp)
    9d40:	d809883a 	mov	r4,sp
    9d44:	880b883a 	mov	r5,r17
    9d48:	dc000904 	addi	r16,sp,36
    9d4c:	d8c00115 	stw	r3,4(sp)
    9d50:	d8800015 	stw	r2,0(sp)
    9d54:	d9800215 	stw	r6,8(sp)
    9d58:	dfc01015 	stw	ra,64(sp)
    9d5c:	d9c00315 	stw	r7,12(sp)
    9d60:	000a4a80 	call	a4a8 <__unpack_d>
    9d64:	d9000204 	addi	r4,sp,8
    9d68:	800b883a 	mov	r5,r16
    9d6c:	000a4a80 	call	a4a8 <__unpack_d>
    9d70:	d8800417 	ldw	r2,16(sp)
    9d74:	00c00044 	movi	r3,1
    9d78:	180d883a 	mov	r6,r3
    9d7c:	1880062e 	bgeu	r3,r2,9d98 <__ltdf2+0x70>
    9d80:	d8800917 	ldw	r2,36(sp)
    9d84:	8809883a 	mov	r4,r17
    9d88:	800b883a 	mov	r5,r16
    9d8c:	1880022e 	bgeu	r3,r2,9d98 <__ltdf2+0x70>
    9d90:	000a5e00 	call	a5e0 <__fpcmp_parts_d>
    9d94:	100d883a 	mov	r6,r2
    9d98:	3005883a 	mov	r2,r6
    9d9c:	dfc01017 	ldw	ra,64(sp)
    9da0:	dc400f17 	ldw	r17,60(sp)
    9da4:	dc000e17 	ldw	r16,56(sp)
    9da8:	dec01104 	addi	sp,sp,68
    9dac:	f800283a 	ret

00009db0 <__floatsidf>:
    9db0:	2006d7fa 	srli	r3,r4,31
    9db4:	defff604 	addi	sp,sp,-40
    9db8:	008000c4 	movi	r2,3
    9dbc:	dfc00915 	stw	ra,36(sp)
    9dc0:	dcc00815 	stw	r19,32(sp)
    9dc4:	dc800715 	stw	r18,28(sp)
    9dc8:	dc400615 	stw	r17,24(sp)
    9dcc:	dc000515 	stw	r16,20(sp)
    9dd0:	d8800015 	stw	r2,0(sp)
    9dd4:	d8c00115 	stw	r3,4(sp)
    9dd8:	20000f1e 	bne	r4,zero,9e18 <__floatsidf+0x68>
    9ddc:	00800084 	movi	r2,2
    9de0:	d8800015 	stw	r2,0(sp)
    9de4:	d809883a 	mov	r4,sp
    9de8:	000a1940 	call	a194 <__pack_d>
    9dec:	1009883a 	mov	r4,r2
    9df0:	180b883a 	mov	r5,r3
    9df4:	2005883a 	mov	r2,r4
    9df8:	2807883a 	mov	r3,r5
    9dfc:	dfc00917 	ldw	ra,36(sp)
    9e00:	dcc00817 	ldw	r19,32(sp)
    9e04:	dc800717 	ldw	r18,28(sp)
    9e08:	dc400617 	ldw	r17,24(sp)
    9e0c:	dc000517 	ldw	r16,20(sp)
    9e10:	dec00a04 	addi	sp,sp,40
    9e14:	f800283a 	ret
    9e18:	00800f04 	movi	r2,60
    9e1c:	1807003a 	cmpeq	r3,r3,zero
    9e20:	d8800215 	stw	r2,8(sp)
    9e24:	18001126 	beq	r3,zero,9e6c <__floatsidf+0xbc>
    9e28:	0027883a 	mov	r19,zero
    9e2c:	2025883a 	mov	r18,r4
    9e30:	d9000315 	stw	r4,12(sp)
    9e34:	dcc00415 	stw	r19,16(sp)
    9e38:	000a1140 	call	a114 <__clzsi2>
    9e3c:	11000744 	addi	r4,r2,29
    9e40:	013fe80e 	bge	zero,r4,9de4 <__floatsidf+0x34>
    9e44:	10bfff44 	addi	r2,r2,-3
    9e48:	10000c16 	blt	r2,zero,9e7c <__floatsidf+0xcc>
    9e4c:	90a2983a 	sll	r17,r18,r2
    9e50:	0021883a 	mov	r16,zero
    9e54:	d8800217 	ldw	r2,8(sp)
    9e58:	dc400415 	stw	r17,16(sp)
    9e5c:	dc000315 	stw	r16,12(sp)
    9e60:	1105c83a 	sub	r2,r2,r4
    9e64:	d8800215 	stw	r2,8(sp)
    9e68:	003fde06 	br	9de4 <__floatsidf+0x34>
    9e6c:	00a00034 	movhi	r2,32768
    9e70:	20800a26 	beq	r4,r2,9e9c <__floatsidf+0xec>
    9e74:	0109c83a 	sub	r4,zero,r4
    9e78:	003feb06 	br	9e28 <__floatsidf+0x78>
    9e7c:	9006d07a 	srli	r3,r18,1
    9e80:	008007c4 	movi	r2,31
    9e84:	1105c83a 	sub	r2,r2,r4
    9e88:	1886d83a 	srl	r3,r3,r2
    9e8c:	9922983a 	sll	r17,r19,r4
    9e90:	9120983a 	sll	r16,r18,r4
    9e94:	1c62b03a 	or	r17,r3,r17
    9e98:	003fee06 	br	9e54 <__floatsidf+0xa4>
    9e9c:	0009883a 	mov	r4,zero
    9ea0:	01707834 	movhi	r5,49632
    9ea4:	003fd306 	br	9df4 <__floatsidf+0x44>

00009ea8 <__fixdfsi>:
    9ea8:	defff804 	addi	sp,sp,-32
    9eac:	2005883a 	mov	r2,r4
    9eb0:	2807883a 	mov	r3,r5
    9eb4:	d809883a 	mov	r4,sp
    9eb8:	d9400204 	addi	r5,sp,8
    9ebc:	d8c00115 	stw	r3,4(sp)
    9ec0:	d8800015 	stw	r2,0(sp)
    9ec4:	dfc00715 	stw	ra,28(sp)
    9ec8:	000a4a80 	call	a4a8 <__unpack_d>
    9ecc:	d8c00217 	ldw	r3,8(sp)
    9ed0:	00800084 	movi	r2,2
    9ed4:	1880051e 	bne	r3,r2,9eec <__fixdfsi+0x44>
    9ed8:	0007883a 	mov	r3,zero
    9edc:	1805883a 	mov	r2,r3
    9ee0:	dfc00717 	ldw	ra,28(sp)
    9ee4:	dec00804 	addi	sp,sp,32
    9ee8:	f800283a 	ret
    9eec:	00800044 	movi	r2,1
    9ef0:	10fff92e 	bgeu	r2,r3,9ed8 <__fixdfsi+0x30>
    9ef4:	00800104 	movi	r2,4
    9ef8:	18800426 	beq	r3,r2,9f0c <__fixdfsi+0x64>
    9efc:	d8c00417 	ldw	r3,16(sp)
    9f00:	183ff516 	blt	r3,zero,9ed8 <__fixdfsi+0x30>
    9f04:	00800784 	movi	r2,30
    9f08:	10c0080e 	bge	r2,r3,9f2c <__fixdfsi+0x84>
    9f0c:	d8800317 	ldw	r2,12(sp)
    9f10:	1000121e 	bne	r2,zero,9f5c <__fixdfsi+0xb4>
    9f14:	00e00034 	movhi	r3,32768
    9f18:	18ffffc4 	addi	r3,r3,-1
    9f1c:	1805883a 	mov	r2,r3
    9f20:	dfc00717 	ldw	ra,28(sp)
    9f24:	dec00804 	addi	sp,sp,32
    9f28:	f800283a 	ret
    9f2c:	00800f04 	movi	r2,60
    9f30:	10d1c83a 	sub	r8,r2,r3
    9f34:	40bff804 	addi	r2,r8,-32
    9f38:	d9800517 	ldw	r6,20(sp)
    9f3c:	d9c00617 	ldw	r7,24(sp)
    9f40:	10000816 	blt	r2,zero,9f64 <__fixdfsi+0xbc>
    9f44:	3888d83a 	srl	r4,r7,r2
    9f48:	d8800317 	ldw	r2,12(sp)
    9f4c:	2007883a 	mov	r3,r4
    9f50:	103fe226 	beq	r2,zero,9edc <__fixdfsi+0x34>
    9f54:	0107c83a 	sub	r3,zero,r4
    9f58:	003fe006 	br	9edc <__fixdfsi+0x34>
    9f5c:	00e00034 	movhi	r3,32768
    9f60:	003fde06 	br	9edc <__fixdfsi+0x34>
    9f64:	39c7883a 	add	r3,r7,r7
    9f68:	008007c4 	movi	r2,31
    9f6c:	1205c83a 	sub	r2,r2,r8
    9f70:	1886983a 	sll	r3,r3,r2
    9f74:	3208d83a 	srl	r4,r6,r8
    9f78:	1908b03a 	or	r4,r3,r4
    9f7c:	003ff206 	br	9f48 <__fixdfsi+0xa0>

00009f80 <__floatunsidf>:
    9f80:	defff204 	addi	sp,sp,-56
    9f84:	dfc00d15 	stw	ra,52(sp)
    9f88:	ddc00c15 	stw	r23,48(sp)
    9f8c:	dd800b15 	stw	r22,44(sp)
    9f90:	dd400a15 	stw	r21,40(sp)
    9f94:	dd000915 	stw	r20,36(sp)
    9f98:	dcc00815 	stw	r19,32(sp)
    9f9c:	dc800715 	stw	r18,28(sp)
    9fa0:	dc400615 	stw	r17,24(sp)
    9fa4:	dc000515 	stw	r16,20(sp)
    9fa8:	d8000115 	stw	zero,4(sp)
    9fac:	20000f1e 	bne	r4,zero,9fec <__floatunsidf+0x6c>
    9fb0:	00800084 	movi	r2,2
    9fb4:	d8800015 	stw	r2,0(sp)
    9fb8:	d809883a 	mov	r4,sp
    9fbc:	000a1940 	call	a194 <__pack_d>
    9fc0:	dfc00d17 	ldw	ra,52(sp)
    9fc4:	ddc00c17 	ldw	r23,48(sp)
    9fc8:	dd800b17 	ldw	r22,44(sp)
    9fcc:	dd400a17 	ldw	r21,40(sp)
    9fd0:	dd000917 	ldw	r20,36(sp)
    9fd4:	dcc00817 	ldw	r19,32(sp)
    9fd8:	dc800717 	ldw	r18,28(sp)
    9fdc:	dc400617 	ldw	r17,24(sp)
    9fe0:	dc000517 	ldw	r16,20(sp)
    9fe4:	dec00e04 	addi	sp,sp,56
    9fe8:	f800283a 	ret
    9fec:	008000c4 	movi	r2,3
    9ff0:	00c00f04 	movi	r3,60
    9ff4:	002f883a 	mov	r23,zero
    9ff8:	202d883a 	mov	r22,r4
    9ffc:	d8800015 	stw	r2,0(sp)
    a000:	d8c00215 	stw	r3,8(sp)
    a004:	d9000315 	stw	r4,12(sp)
    a008:	ddc00415 	stw	r23,16(sp)
    a00c:	000a1140 	call	a114 <__clzsi2>
    a010:	12400744 	addi	r9,r2,29
    a014:	48000b16 	blt	r9,zero,a044 <__floatunsidf+0xc4>
    a018:	483fe726 	beq	r9,zero,9fb8 <__floatunsidf+0x38>
    a01c:	10bfff44 	addi	r2,r2,-3
    a020:	10002e16 	blt	r2,zero,a0dc <__floatunsidf+0x15c>
    a024:	b0a2983a 	sll	r17,r22,r2
    a028:	0021883a 	mov	r16,zero
    a02c:	d8800217 	ldw	r2,8(sp)
    a030:	dc400415 	stw	r17,16(sp)
    a034:	dc000315 	stw	r16,12(sp)
    a038:	1245c83a 	sub	r2,r2,r9
    a03c:	d8800215 	stw	r2,8(sp)
    a040:	003fdd06 	br	9fb8 <__floatunsidf+0x38>
    a044:	0255c83a 	sub	r10,zero,r9
    a048:	51bff804 	addi	r6,r10,-32
    a04c:	30001b16 	blt	r6,zero,a0bc <__floatunsidf+0x13c>
    a050:	b9a8d83a 	srl	r20,r23,r6
    a054:	002b883a 	mov	r21,zero
    a058:	000f883a 	mov	r7,zero
    a05c:	01000044 	movi	r4,1
    a060:	0011883a 	mov	r8,zero
    a064:	30002516 	blt	r6,zero,a0fc <__floatunsidf+0x17c>
    a068:	21a6983a 	sll	r19,r4,r6
    a06c:	0025883a 	mov	r18,zero
    a070:	00bfffc4 	movi	r2,-1
    a074:	9089883a 	add	r4,r18,r2
    a078:	988b883a 	add	r5,r19,r2
    a07c:	248d803a 	cmpltu	r6,r4,r18
    a080:	314b883a 	add	r5,r6,r5
    a084:	b104703a 	and	r2,r22,r4
    a088:	b946703a 	and	r3,r23,r5
    a08c:	10c4b03a 	or	r2,r2,r3
    a090:	10000226 	beq	r2,zero,a09c <__floatunsidf+0x11c>
    a094:	01c00044 	movi	r7,1
    a098:	0011883a 	mov	r8,zero
    a09c:	d9000217 	ldw	r4,8(sp)
    a0a0:	a1c4b03a 	or	r2,r20,r7
    a0a4:	aa06b03a 	or	r3,r21,r8
    a0a8:	2249c83a 	sub	r4,r4,r9
    a0ac:	d8c00415 	stw	r3,16(sp)
    a0b0:	d9000215 	stw	r4,8(sp)
    a0b4:	d8800315 	stw	r2,12(sp)
    a0b8:	003fbf06 	br	9fb8 <__floatunsidf+0x38>
    a0bc:	bdc7883a 	add	r3,r23,r23
    a0c0:	008007c4 	movi	r2,31
    a0c4:	1285c83a 	sub	r2,r2,r10
    a0c8:	1886983a 	sll	r3,r3,r2
    a0cc:	b2a8d83a 	srl	r20,r22,r10
    a0d0:	baaad83a 	srl	r21,r23,r10
    a0d4:	1d28b03a 	or	r20,r3,r20
    a0d8:	003fdf06 	br	a058 <__floatunsidf+0xd8>
    a0dc:	b006d07a 	srli	r3,r22,1
    a0e0:	008007c4 	movi	r2,31
    a0e4:	1245c83a 	sub	r2,r2,r9
    a0e8:	1886d83a 	srl	r3,r3,r2
    a0ec:	ba62983a 	sll	r17,r23,r9
    a0f0:	b260983a 	sll	r16,r22,r9
    a0f4:	1c62b03a 	or	r17,r3,r17
    a0f8:	003fcc06 	br	a02c <__floatunsidf+0xac>
    a0fc:	2006d07a 	srli	r3,r4,1
    a100:	008007c4 	movi	r2,31
    a104:	1285c83a 	sub	r2,r2,r10
    a108:	18a6d83a 	srl	r19,r3,r2
    a10c:	22a4983a 	sll	r18,r4,r10
    a110:	003fd706 	br	a070 <__floatunsidf+0xf0>

0000a114 <__clzsi2>:
    a114:	00bfffd4 	movui	r2,65535
    a118:	11000e36 	bltu	r2,r4,a154 <__clzsi2+0x40>
    a11c:	00803fc4 	movi	r2,255
    a120:	01400204 	movi	r5,8
    a124:	0007883a 	mov	r3,zero
    a128:	11001036 	bltu	r2,r4,a16c <__clzsi2+0x58>
    a12c:	000b883a 	mov	r5,zero
    a130:	20c6d83a 	srl	r3,r4,r3
    a134:	00800074 	movhi	r2,1
    a138:	10b58404 	addi	r2,r2,-10736
    a13c:	1887883a 	add	r3,r3,r2
    a140:	18800003 	ldbu	r2,0(r3)
    a144:	00c00804 	movi	r3,32
    a148:	2885883a 	add	r2,r5,r2
    a14c:	1885c83a 	sub	r2,r3,r2
    a150:	f800283a 	ret
    a154:	01400404 	movi	r5,16
    a158:	00804034 	movhi	r2,256
    a15c:	10bfffc4 	addi	r2,r2,-1
    a160:	2807883a 	mov	r3,r5
    a164:	113ff22e 	bgeu	r2,r4,a130 <__clzsi2+0x1c>
    a168:	01400604 	movi	r5,24
    a16c:	2807883a 	mov	r3,r5
    a170:	20c6d83a 	srl	r3,r4,r3
    a174:	00800074 	movhi	r2,1
    a178:	10b58404 	addi	r2,r2,-10736
    a17c:	1887883a 	add	r3,r3,r2
    a180:	18800003 	ldbu	r2,0(r3)
    a184:	00c00804 	movi	r3,32
    a188:	2885883a 	add	r2,r5,r2
    a18c:	1885c83a 	sub	r2,r3,r2
    a190:	f800283a 	ret

0000a194 <__pack_d>:
    a194:	20c00017 	ldw	r3,0(r4)
    a198:	defffd04 	addi	sp,sp,-12
    a19c:	dc000015 	stw	r16,0(sp)
    a1a0:	dc800215 	stw	r18,8(sp)
    a1a4:	dc400115 	stw	r17,4(sp)
    a1a8:	00800044 	movi	r2,1
    a1ac:	22000317 	ldw	r8,12(r4)
    a1b0:	001f883a 	mov	r15,zero
    a1b4:	22400417 	ldw	r9,16(r4)
    a1b8:	24000117 	ldw	r16,4(r4)
    a1bc:	10c0552e 	bgeu	r2,r3,a314 <__pack_d+0x180>
    a1c0:	00800104 	movi	r2,4
    a1c4:	18804f26 	beq	r3,r2,a304 <__pack_d+0x170>
    a1c8:	00800084 	movi	r2,2
    a1cc:	18800226 	beq	r3,r2,a1d8 <__pack_d+0x44>
    a1d0:	4244b03a 	or	r2,r8,r9
    a1d4:	10001a1e 	bne	r2,zero,a240 <__pack_d+0xac>
    a1d8:	000d883a 	mov	r6,zero
    a1dc:	000f883a 	mov	r7,zero
    a1e0:	0011883a 	mov	r8,zero
    a1e4:	00800434 	movhi	r2,16
    a1e8:	10bfffc4 	addi	r2,r2,-1
    a1ec:	301d883a 	mov	r14,r6
    a1f0:	3884703a 	and	r2,r7,r2
    a1f4:	400a953a 	slli	r5,r8,20
    a1f8:	79bffc2c 	andhi	r6,r15,65520
    a1fc:	308cb03a 	or	r6,r6,r2
    a200:	00e00434 	movhi	r3,32784
    a204:	18ffffc4 	addi	r3,r3,-1
    a208:	800497fa 	slli	r2,r16,31
    a20c:	30c6703a 	and	r3,r6,r3
    a210:	1946b03a 	or	r3,r3,r5
    a214:	01600034 	movhi	r5,32768
    a218:	297fffc4 	addi	r5,r5,-1
    a21c:	194a703a 	and	r5,r3,r5
    a220:	288ab03a 	or	r5,r5,r2
    a224:	2807883a 	mov	r3,r5
    a228:	7005883a 	mov	r2,r14
    a22c:	dc800217 	ldw	r18,8(sp)
    a230:	dc400117 	ldw	r17,4(sp)
    a234:	dc000017 	ldw	r16,0(sp)
    a238:	dec00304 	addi	sp,sp,12
    a23c:	f800283a 	ret
    a240:	21000217 	ldw	r4,8(r4)
    a244:	00bf0084 	movi	r2,-1022
    a248:	20803f16 	blt	r4,r2,a348 <__pack_d+0x1b4>
    a24c:	0080ffc4 	movi	r2,1023
    a250:	11002c16 	blt	r2,r4,a304 <__pack_d+0x170>
    a254:	00803fc4 	movi	r2,255
    a258:	408c703a 	and	r6,r8,r2
    a25c:	00802004 	movi	r2,128
    a260:	0007883a 	mov	r3,zero
    a264:	000f883a 	mov	r7,zero
    a268:	2280ffc4 	addi	r10,r4,1023
    a26c:	30801e26 	beq	r6,r2,a2e8 <__pack_d+0x154>
    a270:	00801fc4 	movi	r2,127
    a274:	4089883a 	add	r4,r8,r2
    a278:	220d803a 	cmpltu	r6,r4,r8
    a27c:	324d883a 	add	r6,r6,r9
    a280:	2011883a 	mov	r8,r4
    a284:	3013883a 	mov	r9,r6
    a288:	00880034 	movhi	r2,8192
    a28c:	10bfffc4 	addi	r2,r2,-1
    a290:	12400d36 	bltu	r2,r9,a2c8 <__pack_d+0x134>
    a294:	4804963a 	slli	r2,r9,24
    a298:	400cd23a 	srli	r6,r8,8
    a29c:	480ed23a 	srli	r7,r9,8
    a2a0:	013fffc4 	movi	r4,-1
    a2a4:	118cb03a 	or	r6,r2,r6
    a2a8:	01400434 	movhi	r5,16
    a2ac:	297fffc4 	addi	r5,r5,-1
    a2b0:	3104703a 	and	r2,r6,r4
    a2b4:	3946703a 	and	r3,r7,r5
    a2b8:	5201ffcc 	andi	r8,r10,2047
    a2bc:	100d883a 	mov	r6,r2
    a2c0:	180f883a 	mov	r7,r3
    a2c4:	003fc706 	br	a1e4 <__pack_d+0x50>
    a2c8:	480897fa 	slli	r4,r9,31
    a2cc:	4004d07a 	srli	r2,r8,1
    a2d0:	4806d07a 	srli	r3,r9,1
    a2d4:	52800044 	addi	r10,r10,1
    a2d8:	2084b03a 	or	r2,r4,r2
    a2dc:	1011883a 	mov	r8,r2
    a2e0:	1813883a 	mov	r9,r3
    a2e4:	003feb06 	br	a294 <__pack_d+0x100>
    a2e8:	383fe11e 	bne	r7,zero,a270 <__pack_d+0xdc>
    a2ec:	01004004 	movi	r4,256
    a2f0:	4104703a 	and	r2,r8,r4
    a2f4:	10c4b03a 	or	r2,r2,r3
    a2f8:	103fe326 	beq	r2,zero,a288 <__pack_d+0xf4>
    a2fc:	3005883a 	mov	r2,r6
    a300:	003fdc06 	br	a274 <__pack_d+0xe0>
    a304:	000d883a 	mov	r6,zero
    a308:	000f883a 	mov	r7,zero
    a30c:	0201ffc4 	movi	r8,2047
    a310:	003fb406 	br	a1e4 <__pack_d+0x50>
    a314:	0005883a 	mov	r2,zero
    a318:	00c00234 	movhi	r3,8
    a31c:	408cb03a 	or	r6,r8,r2
    a320:	48ceb03a 	or	r7,r9,r3
    a324:	013fffc4 	movi	r4,-1
    a328:	01400434 	movhi	r5,16
    a32c:	297fffc4 	addi	r5,r5,-1
    a330:	3104703a 	and	r2,r6,r4
    a334:	3946703a 	and	r3,r7,r5
    a338:	100d883a 	mov	r6,r2
    a33c:	180f883a 	mov	r7,r3
    a340:	0201ffc4 	movi	r8,2047
    a344:	003fa706 	br	a1e4 <__pack_d+0x50>
    a348:	1109c83a 	sub	r4,r2,r4
    a34c:	00800e04 	movi	r2,56
    a350:	11004316 	blt	r2,r4,a460 <__pack_d+0x2cc>
    a354:	21fff804 	addi	r7,r4,-32
    a358:	38004516 	blt	r7,zero,a470 <__pack_d+0x2dc>
    a35c:	49d8d83a 	srl	r12,r9,r7
    a360:	001b883a 	mov	r13,zero
    a364:	0023883a 	mov	r17,zero
    a368:	01400044 	movi	r5,1
    a36c:	0025883a 	mov	r18,zero
    a370:	38004716 	blt	r7,zero,a490 <__pack_d+0x2fc>
    a374:	29d6983a 	sll	r11,r5,r7
    a378:	0015883a 	mov	r10,zero
    a37c:	00bfffc4 	movi	r2,-1
    a380:	5089883a 	add	r4,r10,r2
    a384:	588b883a 	add	r5,r11,r2
    a388:	228d803a 	cmpltu	r6,r4,r10
    a38c:	314b883a 	add	r5,r6,r5
    a390:	4104703a 	and	r2,r8,r4
    a394:	4946703a 	and	r3,r9,r5
    a398:	10c4b03a 	or	r2,r2,r3
    a39c:	10000226 	beq	r2,zero,a3a8 <__pack_d+0x214>
    a3a0:	04400044 	movi	r17,1
    a3a4:	0025883a 	mov	r18,zero
    a3a8:	00803fc4 	movi	r2,255
    a3ac:	644eb03a 	or	r7,r12,r17
    a3b0:	3892703a 	and	r9,r7,r2
    a3b4:	00802004 	movi	r2,128
    a3b8:	6c90b03a 	or	r8,r13,r18
    a3bc:	0015883a 	mov	r10,zero
    a3c0:	48801626 	beq	r9,r2,a41c <__pack_d+0x288>
    a3c4:	01001fc4 	movi	r4,127
    a3c8:	3905883a 	add	r2,r7,r4
    a3cc:	11cd803a 	cmpltu	r6,r2,r7
    a3d0:	320d883a 	add	r6,r6,r8
    a3d4:	100f883a 	mov	r7,r2
    a3d8:	00840034 	movhi	r2,4096
    a3dc:	10bfffc4 	addi	r2,r2,-1
    a3e0:	3011883a 	mov	r8,r6
    a3e4:	0007883a 	mov	r3,zero
    a3e8:	11801b36 	bltu	r2,r6,a458 <__pack_d+0x2c4>
    a3ec:	4004963a 	slli	r2,r8,24
    a3f0:	3808d23a 	srli	r4,r7,8
    a3f4:	400ad23a 	srli	r5,r8,8
    a3f8:	1813883a 	mov	r9,r3
    a3fc:	1108b03a 	or	r4,r2,r4
    a400:	00bfffc4 	movi	r2,-1
    a404:	00c00434 	movhi	r3,16
    a408:	18ffffc4 	addi	r3,r3,-1
    a40c:	208c703a 	and	r6,r4,r2
    a410:	28ce703a 	and	r7,r5,r3
    a414:	4a01ffcc 	andi	r8,r9,2047
    a418:	003f7206 	br	a1e4 <__pack_d+0x50>
    a41c:	503fe91e 	bne	r10,zero,a3c4 <__pack_d+0x230>
    a420:	01004004 	movi	r4,256
    a424:	3904703a 	and	r2,r7,r4
    a428:	0007883a 	mov	r3,zero
    a42c:	10c4b03a 	or	r2,r2,r3
    a430:	10000626 	beq	r2,zero,a44c <__pack_d+0x2b8>
    a434:	3a45883a 	add	r2,r7,r9
    a438:	11cd803a 	cmpltu	r6,r2,r7
    a43c:	320d883a 	add	r6,r6,r8
    a440:	100f883a 	mov	r7,r2
    a444:	3011883a 	mov	r8,r6
    a448:	0007883a 	mov	r3,zero
    a44c:	00840034 	movhi	r2,4096
    a450:	10bfffc4 	addi	r2,r2,-1
    a454:	123fe52e 	bgeu	r2,r8,a3ec <__pack_d+0x258>
    a458:	00c00044 	movi	r3,1
    a45c:	003fe306 	br	a3ec <__pack_d+0x258>
    a460:	0009883a 	mov	r4,zero
    a464:	0013883a 	mov	r9,zero
    a468:	000b883a 	mov	r5,zero
    a46c:	003fe406 	br	a400 <__pack_d+0x26c>
    a470:	4a47883a 	add	r3,r9,r9
    a474:	008007c4 	movi	r2,31
    a478:	1105c83a 	sub	r2,r2,r4
    a47c:	1886983a 	sll	r3,r3,r2
    a480:	4118d83a 	srl	r12,r8,r4
    a484:	491ad83a 	srl	r13,r9,r4
    a488:	1b18b03a 	or	r12,r3,r12
    a48c:	003fb506 	br	a364 <__pack_d+0x1d0>
    a490:	2806d07a 	srli	r3,r5,1
    a494:	008007c4 	movi	r2,31
    a498:	1105c83a 	sub	r2,r2,r4
    a49c:	1896d83a 	srl	r11,r3,r2
    a4a0:	2914983a 	sll	r10,r5,r4
    a4a4:	003fb506 	br	a37c <__pack_d+0x1e8>

0000a4a8 <__unpack_d>:
    a4a8:	20c00117 	ldw	r3,4(r4)
    a4ac:	22400017 	ldw	r9,0(r4)
    a4b0:	00800434 	movhi	r2,16
    a4b4:	10bfffc4 	addi	r2,r2,-1
    a4b8:	1808d53a 	srli	r4,r3,20
    a4bc:	180cd7fa 	srli	r6,r3,31
    a4c0:	1894703a 	and	r10,r3,r2
    a4c4:	2201ffcc 	andi	r8,r4,2047
    a4c8:	281b883a 	mov	r13,r5
    a4cc:	4817883a 	mov	r11,r9
    a4d0:	29800115 	stw	r6,4(r5)
    a4d4:	5019883a 	mov	r12,r10
    a4d8:	40001e1e 	bne	r8,zero,a554 <__unpack_d+0xac>
    a4dc:	4a84b03a 	or	r2,r9,r10
    a4e0:	10001926 	beq	r2,zero,a548 <__unpack_d+0xa0>
    a4e4:	4804d63a 	srli	r2,r9,24
    a4e8:	500c923a 	slli	r6,r10,8
    a4ec:	013f0084 	movi	r4,-1022
    a4f0:	00c40034 	movhi	r3,4096
    a4f4:	18ffffc4 	addi	r3,r3,-1
    a4f8:	118cb03a 	or	r6,r2,r6
    a4fc:	008000c4 	movi	r2,3
    a500:	480a923a 	slli	r5,r9,8
    a504:	68800015 	stw	r2,0(r13)
    a508:	69000215 	stw	r4,8(r13)
    a50c:	19800b36 	bltu	r3,r6,a53c <__unpack_d+0x94>
    a510:	200f883a 	mov	r7,r4
    a514:	1811883a 	mov	r8,r3
    a518:	2945883a 	add	r2,r5,r5
    a51c:	1149803a 	cmpltu	r4,r2,r5
    a520:	3187883a 	add	r3,r6,r6
    a524:	20c9883a 	add	r4,r4,r3
    a528:	100b883a 	mov	r5,r2
    a52c:	200d883a 	mov	r6,r4
    a530:	39ffffc4 	addi	r7,r7,-1
    a534:	413ff82e 	bgeu	r8,r4,a518 <__unpack_d+0x70>
    a538:	69c00215 	stw	r7,8(r13)
    a53c:	69800415 	stw	r6,16(r13)
    a540:	69400315 	stw	r5,12(r13)
    a544:	f800283a 	ret
    a548:	00800084 	movi	r2,2
    a54c:	28800015 	stw	r2,0(r5)
    a550:	f800283a 	ret
    a554:	0081ffc4 	movi	r2,2047
    a558:	40800f26 	beq	r8,r2,a598 <__unpack_d+0xf0>
    a55c:	480cd63a 	srli	r6,r9,24
    a560:	5006923a 	slli	r3,r10,8
    a564:	4804923a 	slli	r2,r9,8
    a568:	0009883a 	mov	r4,zero
    a56c:	30c6b03a 	or	r3,r6,r3
    a570:	01440034 	movhi	r5,4096
    a574:	110cb03a 	or	r6,r2,r4
    a578:	423f0044 	addi	r8,r8,-1023
    a57c:	194eb03a 	or	r7,r3,r5
    a580:	008000c4 	movi	r2,3
    a584:	69c00415 	stw	r7,16(r13)
    a588:	6a000215 	stw	r8,8(r13)
    a58c:	68800015 	stw	r2,0(r13)
    a590:	69800315 	stw	r6,12(r13)
    a594:	f800283a 	ret
    a598:	4a84b03a 	or	r2,r9,r10
    a59c:	1000031e 	bne	r2,zero,a5ac <__unpack_d+0x104>
    a5a0:	00800104 	movi	r2,4
    a5a4:	28800015 	stw	r2,0(r5)
    a5a8:	f800283a 	ret
    a5ac:	0009883a 	mov	r4,zero
    a5b0:	01400234 	movhi	r5,8
    a5b4:	4904703a 	and	r2,r9,r4
    a5b8:	5146703a 	and	r3,r10,r5
    a5bc:	10c4b03a 	or	r2,r2,r3
    a5c0:	10000526 	beq	r2,zero,a5d8 <__unpack_d+0x130>
    a5c4:	00800044 	movi	r2,1
    a5c8:	68800015 	stw	r2,0(r13)
    a5cc:	6b000415 	stw	r12,16(r13)
    a5d0:	6ac00315 	stw	r11,12(r13)
    a5d4:	f800283a 	ret
    a5d8:	68000015 	stw	zero,0(r13)
    a5dc:	003ffb06 	br	a5cc <__unpack_d+0x124>

0000a5e0 <__fpcmp_parts_d>:
    a5e0:	21800017 	ldw	r6,0(r4)
    a5e4:	00c00044 	movi	r3,1
    a5e8:	19800a2e 	bgeu	r3,r6,a614 <__fpcmp_parts_d+0x34>
    a5ec:	28800017 	ldw	r2,0(r5)
    a5f0:	1880082e 	bgeu	r3,r2,a614 <__fpcmp_parts_d+0x34>
    a5f4:	00c00104 	movi	r3,4
    a5f8:	30c02626 	beq	r6,r3,a694 <__fpcmp_parts_d+0xb4>
    a5fc:	10c02226 	beq	r2,r3,a688 <__fpcmp_parts_d+0xa8>
    a600:	00c00084 	movi	r3,2
    a604:	30c00526 	beq	r6,r3,a61c <__fpcmp_parts_d+0x3c>
    a608:	10c0071e 	bne	r2,r3,a628 <__fpcmp_parts_d+0x48>
    a60c:	20800117 	ldw	r2,4(r4)
    a610:	1000091e 	bne	r2,zero,a638 <__fpcmp_parts_d+0x58>
    a614:	00800044 	movi	r2,1
    a618:	f800283a 	ret
    a61c:	10c01a1e 	bne	r2,r3,a688 <__fpcmp_parts_d+0xa8>
    a620:	0005883a 	mov	r2,zero
    a624:	f800283a 	ret
    a628:	22000117 	ldw	r8,4(r4)
    a62c:	28800117 	ldw	r2,4(r5)
    a630:	40800326 	beq	r8,r2,a640 <__fpcmp_parts_d+0x60>
    a634:	403ff726 	beq	r8,zero,a614 <__fpcmp_parts_d+0x34>
    a638:	00bfffc4 	movi	r2,-1
    a63c:	f800283a 	ret
    a640:	20c00217 	ldw	r3,8(r4)
    a644:	28800217 	ldw	r2,8(r5)
    a648:	10fffa16 	blt	r2,r3,a634 <__fpcmp_parts_d+0x54>
    a64c:	18800916 	blt	r3,r2,a674 <__fpcmp_parts_d+0x94>
    a650:	21c00417 	ldw	r7,16(r4)
    a654:	28c00417 	ldw	r3,16(r5)
    a658:	21800317 	ldw	r6,12(r4)
    a65c:	28800317 	ldw	r2,12(r5)
    a660:	19fff436 	bltu	r3,r7,a634 <__fpcmp_parts_d+0x54>
    a664:	38c00526 	beq	r7,r3,a67c <__fpcmp_parts_d+0x9c>
    a668:	38c00236 	bltu	r7,r3,a674 <__fpcmp_parts_d+0x94>
    a66c:	19ffec1e 	bne	r3,r7,a620 <__fpcmp_parts_d+0x40>
    a670:	30bfeb2e 	bgeu	r6,r2,a620 <__fpcmp_parts_d+0x40>
    a674:	403fe71e 	bne	r8,zero,a614 <__fpcmp_parts_d+0x34>
    a678:	003fef06 	br	a638 <__fpcmp_parts_d+0x58>
    a67c:	11bffa2e 	bgeu	r2,r6,a668 <__fpcmp_parts_d+0x88>
    a680:	403fe426 	beq	r8,zero,a614 <__fpcmp_parts_d+0x34>
    a684:	003fec06 	br	a638 <__fpcmp_parts_d+0x58>
    a688:	28800117 	ldw	r2,4(r5)
    a68c:	103fe11e 	bne	r2,zero,a614 <__fpcmp_parts_d+0x34>
    a690:	003fe906 	br	a638 <__fpcmp_parts_d+0x58>
    a694:	11bfdd1e 	bne	r2,r6,a60c <__fpcmp_parts_d+0x2c>
    a698:	28c00117 	ldw	r3,4(r5)
    a69c:	20800117 	ldw	r2,4(r4)
    a6a0:	1885c83a 	sub	r2,r3,r2
    a6a4:	f800283a 	ret

0000a6a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    a6a8:	defff804 	addi	sp,sp,-32
    a6ac:	dfc00715 	stw	ra,28(sp)
    a6b0:	df000615 	stw	fp,24(sp)
    a6b4:	df000604 	addi	fp,sp,24
    a6b8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    a6bc:	e0bffc17 	ldw	r2,-16(fp)
    a6c0:	1004803a 	cmplt	r2,r2,zero
    a6c4:	1000081e 	bne	r2,zero,a6e8 <close+0x40>
    a6c8:	e0bffc17 	ldw	r2,-16(fp)
    a6cc:	10800324 	muli	r2,r2,12
    a6d0:	1007883a 	mov	r3,r2
    a6d4:	00800074 	movhi	r2,1
    a6d8:	10b7de04 	addi	r2,r2,-8328
    a6dc:	1887883a 	add	r3,r3,r2
    a6e0:	e0ffff15 	stw	r3,-4(fp)
    a6e4:	00000106 	br	a6ec <close+0x44>
    a6e8:	e03fff15 	stw	zero,-4(fp)
    a6ec:	e0bfff17 	ldw	r2,-4(fp)
    a6f0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    a6f4:	e0bffb17 	ldw	r2,-20(fp)
    a6f8:	1005003a 	cmpeq	r2,r2,zero
    a6fc:	10001d1e 	bne	r2,zero,a774 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    a700:	e0bffb17 	ldw	r2,-20(fp)
    a704:	10800017 	ldw	r2,0(r2)
    a708:	10800417 	ldw	r2,16(r2)
    a70c:	1005003a 	cmpeq	r2,r2,zero
    a710:	1000071e 	bne	r2,zero,a730 <close+0x88>
    a714:	e0bffb17 	ldw	r2,-20(fp)
    a718:	10800017 	ldw	r2,0(r2)
    a71c:	10800417 	ldw	r2,16(r2)
    a720:	e13ffb17 	ldw	r4,-20(fp)
    a724:	103ee83a 	callr	r2
    a728:	e0bffe15 	stw	r2,-8(fp)
    a72c:	00000106 	br	a734 <close+0x8c>
    a730:	e03ffe15 	stw	zero,-8(fp)
    a734:	e0bffe17 	ldw	r2,-8(fp)
    a738:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    a73c:	e13ffc17 	ldw	r4,-16(fp)
    a740:	000af300 	call	af30 <alt_release_fd>
    if (rval < 0)
    a744:	e0bffa17 	ldw	r2,-24(fp)
    a748:	1004403a 	cmpge	r2,r2,zero
    a74c:	1000071e 	bne	r2,zero,a76c <close+0xc4>
    {
      ALT_ERRNO = -rval;
    a750:	000a7a40 	call	a7a4 <alt_get_errno>
    a754:	e0fffa17 	ldw	r3,-24(fp)
    a758:	00c7c83a 	sub	r3,zero,r3
    a75c:	10c00015 	stw	r3,0(r2)
      return -1;
    a760:	00bfffc4 	movi	r2,-1
    a764:	e0bffd15 	stw	r2,-12(fp)
    a768:	00000806 	br	a78c <close+0xe4>
    }
    return 0;
    a76c:	e03ffd15 	stw	zero,-12(fp)
    a770:	00000606 	br	a78c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a774:	000a7a40 	call	a7a4 <alt_get_errno>
    a778:	1007883a 	mov	r3,r2
    a77c:	00801444 	movi	r2,81
    a780:	18800015 	stw	r2,0(r3)
    return -1;
    a784:	00bfffc4 	movi	r2,-1
    a788:	e0bffd15 	stw	r2,-12(fp)
    a78c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    a790:	e037883a 	mov	sp,fp
    a794:	dfc00117 	ldw	ra,4(sp)
    a798:	df000017 	ldw	fp,0(sp)
    a79c:	dec00204 	addi	sp,sp,8
    a7a0:	f800283a 	ret

0000a7a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a7a4:	defffd04 	addi	sp,sp,-12
    a7a8:	dfc00215 	stw	ra,8(sp)
    a7ac:	df000115 	stw	fp,4(sp)
    a7b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a7b4:	00800074 	movhi	r2,1
    a7b8:	10bc6104 	addi	r2,r2,-3708
    a7bc:	10800017 	ldw	r2,0(r2)
    a7c0:	1005003a 	cmpeq	r2,r2,zero
    a7c4:	1000061e 	bne	r2,zero,a7e0 <alt_get_errno+0x3c>
    a7c8:	00800074 	movhi	r2,1
    a7cc:	10bc6104 	addi	r2,r2,-3708
    a7d0:	10800017 	ldw	r2,0(r2)
    a7d4:	103ee83a 	callr	r2
    a7d8:	e0bfff15 	stw	r2,-4(fp)
    a7dc:	00000306 	br	a7ec <alt_get_errno+0x48>
    a7e0:	00800074 	movhi	r2,1
    a7e4:	10830304 	addi	r2,r2,3084
    a7e8:	e0bfff15 	stw	r2,-4(fp)
    a7ec:	e0bfff17 	ldw	r2,-4(fp)
}
    a7f0:	e037883a 	mov	sp,fp
    a7f4:	dfc00117 	ldw	ra,4(sp)
    a7f8:	df000017 	ldw	fp,0(sp)
    a7fc:	dec00204 	addi	sp,sp,8
    a800:	f800283a 	ret

0000a804 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    a804:	defffe04 	addi	sp,sp,-8
    a808:	df000115 	stw	fp,4(sp)
    a80c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    a810:	e03fff15 	stw	zero,-4(fp)
    a814:	00000506 	br	a82c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    a818:	e0bfff17 	ldw	r2,-4(fp)
    a81c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    a820:	e0bfff17 	ldw	r2,-4(fp)
    a824:	10800804 	addi	r2,r2,32
    a828:	e0bfff15 	stw	r2,-4(fp)
    a82c:	e0bfff17 	ldw	r2,-4(fp)
    a830:	10820030 	cmpltui	r2,r2,2048
    a834:	103ff81e 	bne	r2,zero,a818 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    a838:	e037883a 	mov	sp,fp
    a83c:	df000017 	ldw	fp,0(sp)
    a840:	dec00104 	addi	sp,sp,4
    a844:	f800283a 	ret

0000a848 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    a848:	defffc04 	addi	sp,sp,-16
    a84c:	df000315 	stw	fp,12(sp)
    a850:	df000304 	addi	fp,sp,12
    a854:	e13ffd15 	stw	r4,-12(fp)
    a858:	e17ffe15 	stw	r5,-8(fp)
    a85c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    a860:	e0bfff17 	ldw	r2,-4(fp)
}
    a864:	e037883a 	mov	sp,fp
    a868:	df000017 	ldw	fp,0(sp)
    a86c:	dec00104 	addi	sp,sp,4
    a870:	f800283a 	ret

0000a874 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    a874:	defff904 	addi	sp,sp,-28
    a878:	dfc00615 	stw	ra,24(sp)
    a87c:	df000515 	stw	fp,20(sp)
    a880:	df000504 	addi	fp,sp,20
    a884:	e13ffc15 	stw	r4,-16(fp)
    a888:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a88c:	e0bffc17 	ldw	r2,-16(fp)
    a890:	1004803a 	cmplt	r2,r2,zero
    a894:	1000081e 	bne	r2,zero,a8b8 <fstat+0x44>
    a898:	e0bffc17 	ldw	r2,-16(fp)
    a89c:	10800324 	muli	r2,r2,12
    a8a0:	1007883a 	mov	r3,r2
    a8a4:	00800074 	movhi	r2,1
    a8a8:	10b7de04 	addi	r2,r2,-8328
    a8ac:	1887883a 	add	r3,r3,r2
    a8b0:	e0ffff15 	stw	r3,-4(fp)
    a8b4:	00000106 	br	a8bc <fstat+0x48>
    a8b8:	e03fff15 	stw	zero,-4(fp)
    a8bc:	e0bfff17 	ldw	r2,-4(fp)
    a8c0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    a8c4:	e0bffb17 	ldw	r2,-20(fp)
    a8c8:	1005003a 	cmpeq	r2,r2,zero
    a8cc:	1000121e 	bne	r2,zero,a918 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    a8d0:	e0bffb17 	ldw	r2,-20(fp)
    a8d4:	10800017 	ldw	r2,0(r2)
    a8d8:	10800817 	ldw	r2,32(r2)
    a8dc:	1005003a 	cmpeq	r2,r2,zero
    a8e0:	1000081e 	bne	r2,zero,a904 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    a8e4:	e0bffb17 	ldw	r2,-20(fp)
    a8e8:	10800017 	ldw	r2,0(r2)
    a8ec:	10800817 	ldw	r2,32(r2)
    a8f0:	e13ffb17 	ldw	r4,-20(fp)
    a8f4:	e17ffd17 	ldw	r5,-12(fp)
    a8f8:	103ee83a 	callr	r2
    a8fc:	e0bffe15 	stw	r2,-8(fp)
    a900:	00000b06 	br	a930 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    a904:	e0fffd17 	ldw	r3,-12(fp)
    a908:	00880004 	movi	r2,8192
    a90c:	18800115 	stw	r2,4(r3)
      return 0;
    a910:	e03ffe15 	stw	zero,-8(fp)
    a914:	00000606 	br	a930 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a918:	000a9480 	call	a948 <alt_get_errno>
    a91c:	1007883a 	mov	r3,r2
    a920:	00801444 	movi	r2,81
    a924:	18800015 	stw	r2,0(r3)
    return -1;
    a928:	00bfffc4 	movi	r2,-1
    a92c:	e0bffe15 	stw	r2,-8(fp)
    a930:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    a934:	e037883a 	mov	sp,fp
    a938:	dfc00117 	ldw	ra,4(sp)
    a93c:	df000017 	ldw	fp,0(sp)
    a940:	dec00204 	addi	sp,sp,8
    a944:	f800283a 	ret

0000a948 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a948:	defffd04 	addi	sp,sp,-12
    a94c:	dfc00215 	stw	ra,8(sp)
    a950:	df000115 	stw	fp,4(sp)
    a954:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a958:	00800074 	movhi	r2,1
    a95c:	10bc6104 	addi	r2,r2,-3708
    a960:	10800017 	ldw	r2,0(r2)
    a964:	1005003a 	cmpeq	r2,r2,zero
    a968:	1000061e 	bne	r2,zero,a984 <alt_get_errno+0x3c>
    a96c:	00800074 	movhi	r2,1
    a970:	10bc6104 	addi	r2,r2,-3708
    a974:	10800017 	ldw	r2,0(r2)
    a978:	103ee83a 	callr	r2
    a97c:	e0bfff15 	stw	r2,-4(fp)
    a980:	00000306 	br	a990 <alt_get_errno+0x48>
    a984:	00800074 	movhi	r2,1
    a988:	10830304 	addi	r2,r2,3084
    a98c:	e0bfff15 	stw	r2,-4(fp)
    a990:	e0bfff17 	ldw	r2,-4(fp)
}
    a994:	e037883a 	mov	sp,fp
    a998:	dfc00117 	ldw	ra,4(sp)
    a99c:	df000017 	ldw	fp,0(sp)
    a9a0:	dec00204 	addi	sp,sp,8
    a9a4:	f800283a 	ret

0000a9a8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    a9a8:	deffeb04 	addi	sp,sp,-84
    a9ac:	dfc01415 	stw	ra,80(sp)
    a9b0:	df001315 	stw	fp,76(sp)
    a9b4:	df001304 	addi	fp,sp,76
    a9b8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a9bc:	e0bffd17 	ldw	r2,-12(fp)
    a9c0:	1004803a 	cmplt	r2,r2,zero
    a9c4:	1000081e 	bne	r2,zero,a9e8 <isatty+0x40>
    a9c8:	e0bffd17 	ldw	r2,-12(fp)
    a9cc:	10800324 	muli	r2,r2,12
    a9d0:	1007883a 	mov	r3,r2
    a9d4:	00800074 	movhi	r2,1
    a9d8:	10b7de04 	addi	r2,r2,-8328
    a9dc:	1887883a 	add	r3,r3,r2
    a9e0:	e0ffff15 	stw	r3,-4(fp)
    a9e4:	00000106 	br	a9ec <isatty+0x44>
    a9e8:	e03fff15 	stw	zero,-4(fp)
    a9ec:	e0bfff17 	ldw	r2,-4(fp)
    a9f0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    a9f4:	e0bfed17 	ldw	r2,-76(fp)
    a9f8:	1005003a 	cmpeq	r2,r2,zero
    a9fc:	10000f1e 	bne	r2,zero,aa3c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    aa00:	e0bfed17 	ldw	r2,-76(fp)
    aa04:	10800017 	ldw	r2,0(r2)
    aa08:	10800817 	ldw	r2,32(r2)
    aa0c:	1004c03a 	cmpne	r2,r2,zero
    aa10:	1000031e 	bne	r2,zero,aa20 <isatty+0x78>
    {
      return 1;
    aa14:	00800044 	movi	r2,1
    aa18:	e0bffe15 	stw	r2,-8(fp)
    aa1c:	00000c06 	br	aa50 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    aa20:	e17fee04 	addi	r5,fp,-72
    aa24:	e13ffd17 	ldw	r4,-12(fp)
    aa28:	000a8740 	call	a874 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    aa2c:	e0bfef17 	ldw	r2,-68(fp)
    aa30:	10880020 	cmpeqi	r2,r2,8192
    aa34:	e0bffe15 	stw	r2,-8(fp)
    aa38:	00000506 	br	aa50 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    aa3c:	000aa680 	call	aa68 <alt_get_errno>
    aa40:	1007883a 	mov	r3,r2
    aa44:	00801444 	movi	r2,81
    aa48:	18800015 	stw	r2,0(r3)
    return 0;
    aa4c:	e03ffe15 	stw	zero,-8(fp)
    aa50:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    aa54:	e037883a 	mov	sp,fp
    aa58:	dfc00117 	ldw	ra,4(sp)
    aa5c:	df000017 	ldw	fp,0(sp)
    aa60:	dec00204 	addi	sp,sp,8
    aa64:	f800283a 	ret

0000aa68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aa68:	defffd04 	addi	sp,sp,-12
    aa6c:	dfc00215 	stw	ra,8(sp)
    aa70:	df000115 	stw	fp,4(sp)
    aa74:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    aa78:	00800074 	movhi	r2,1
    aa7c:	10bc6104 	addi	r2,r2,-3708
    aa80:	10800017 	ldw	r2,0(r2)
    aa84:	1005003a 	cmpeq	r2,r2,zero
    aa88:	1000061e 	bne	r2,zero,aaa4 <alt_get_errno+0x3c>
    aa8c:	00800074 	movhi	r2,1
    aa90:	10bc6104 	addi	r2,r2,-3708
    aa94:	10800017 	ldw	r2,0(r2)
    aa98:	103ee83a 	callr	r2
    aa9c:	e0bfff15 	stw	r2,-4(fp)
    aaa0:	00000306 	br	aab0 <alt_get_errno+0x48>
    aaa4:	00800074 	movhi	r2,1
    aaa8:	10830304 	addi	r2,r2,3084
    aaac:	e0bfff15 	stw	r2,-4(fp)
    aab0:	e0bfff17 	ldw	r2,-4(fp)
}
    aab4:	e037883a 	mov	sp,fp
    aab8:	dfc00117 	ldw	ra,4(sp)
    aabc:	df000017 	ldw	fp,0(sp)
    aac0:	dec00204 	addi	sp,sp,8
    aac4:	f800283a 	ret

0000aac8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    aac8:	defffe04 	addi	sp,sp,-8
    aacc:	dfc00115 	stw	ra,4(sp)
    aad0:	df000015 	stw	fp,0(sp)
    aad4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    aad8:	01000074 	movhi	r4,1
    aadc:	213c6604 	addi	r4,r4,-3688
    aae0:	01400074 	movhi	r5,1
    aae4:	2975cf04 	addi	r5,r5,-10436
    aae8:	01800074 	movhi	r6,1
    aaec:	31bc6604 	addi	r6,r6,-3688
    aaf0:	000ab480 	call	ab48 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    aaf4:	01000034 	movhi	r4,0
    aaf8:	21000804 	addi	r4,r4,32
    aafc:	01400034 	movhi	r5,0
    ab00:	29400804 	addi	r5,r5,32
    ab04:	01800034 	movhi	r6,0
    ab08:	31806d04 	addi	r6,r6,436
    ab0c:	000ab480 	call	ab48 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    ab10:	01000074 	movhi	r4,1
    ab14:	2134ad04 	addi	r4,r4,-11596
    ab18:	01400074 	movhi	r5,1
    ab1c:	2974ad04 	addi	r5,r5,-11596
    ab20:	01800074 	movhi	r6,1
    ab24:	31b5cf04 	addi	r6,r6,-10436
    ab28:	000ab480 	call	ab48 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    ab2c:	000a8040 	call	a804 <alt_dcache_flush_all>
  alt_icache_flush_all();
    ab30:	000c4900 	call	c490 <alt_icache_flush_all>
}
    ab34:	e037883a 	mov	sp,fp
    ab38:	dfc00117 	ldw	ra,4(sp)
    ab3c:	df000017 	ldw	fp,0(sp)
    ab40:	dec00204 	addi	sp,sp,8
    ab44:	f800283a 	ret

0000ab48 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    ab48:	defffc04 	addi	sp,sp,-16
    ab4c:	df000315 	stw	fp,12(sp)
    ab50:	df000304 	addi	fp,sp,12
    ab54:	e13ffd15 	stw	r4,-12(fp)
    ab58:	e17ffe15 	stw	r5,-8(fp)
    ab5c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ab60:	e0fffe17 	ldw	r3,-8(fp)
    ab64:	e0bffd17 	ldw	r2,-12(fp)
    ab68:	18800e26 	beq	r3,r2,aba4 <alt_load_section+0x5c>
  {
    while( to != end )
    ab6c:	00000a06 	br	ab98 <alt_load_section+0x50>
    {
      *to++ = *from++;
    ab70:	e0bffd17 	ldw	r2,-12(fp)
    ab74:	10c00017 	ldw	r3,0(r2)
    ab78:	e0bffe17 	ldw	r2,-8(fp)
    ab7c:	10c00015 	stw	r3,0(r2)
    ab80:	e0bffe17 	ldw	r2,-8(fp)
    ab84:	10800104 	addi	r2,r2,4
    ab88:	e0bffe15 	stw	r2,-8(fp)
    ab8c:	e0bffd17 	ldw	r2,-12(fp)
    ab90:	10800104 	addi	r2,r2,4
    ab94:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ab98:	e0fffe17 	ldw	r3,-8(fp)
    ab9c:	e0bfff17 	ldw	r2,-4(fp)
    aba0:	18bff31e 	bne	r3,r2,ab70 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    aba4:	e037883a 	mov	sp,fp
    aba8:	df000017 	ldw	fp,0(sp)
    abac:	dec00104 	addi	sp,sp,4
    abb0:	f800283a 	ret

0000abb4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    abb4:	defff804 	addi	sp,sp,-32
    abb8:	dfc00715 	stw	ra,28(sp)
    abbc:	df000615 	stw	fp,24(sp)
    abc0:	df000604 	addi	fp,sp,24
    abc4:	e13ffc15 	stw	r4,-16(fp)
    abc8:	e17ffd15 	stw	r5,-12(fp)
    abcc:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    abd0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    abd4:	e0bffc17 	ldw	r2,-16(fp)
    abd8:	1004803a 	cmplt	r2,r2,zero
    abdc:	1000081e 	bne	r2,zero,ac00 <lseek+0x4c>
    abe0:	e0bffc17 	ldw	r2,-16(fp)
    abe4:	10800324 	muli	r2,r2,12
    abe8:	1007883a 	mov	r3,r2
    abec:	00800074 	movhi	r2,1
    abf0:	10b7de04 	addi	r2,r2,-8328
    abf4:	1887883a 	add	r3,r3,r2
    abf8:	e0ffff15 	stw	r3,-4(fp)
    abfc:	00000106 	br	ac04 <lseek+0x50>
    ac00:	e03fff15 	stw	zero,-4(fp)
    ac04:	e0bfff17 	ldw	r2,-4(fp)
    ac08:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    ac0c:	e0bffb17 	ldw	r2,-20(fp)
    ac10:	1005003a 	cmpeq	r2,r2,zero
    ac14:	1000111e 	bne	r2,zero,ac5c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    ac18:	e0bffb17 	ldw	r2,-20(fp)
    ac1c:	10800017 	ldw	r2,0(r2)
    ac20:	10800717 	ldw	r2,28(r2)
    ac24:	1005003a 	cmpeq	r2,r2,zero
    ac28:	1000091e 	bne	r2,zero,ac50 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    ac2c:	e0bffb17 	ldw	r2,-20(fp)
    ac30:	10800017 	ldw	r2,0(r2)
    ac34:	10800717 	ldw	r2,28(r2)
    ac38:	e13ffb17 	ldw	r4,-20(fp)
    ac3c:	e17ffd17 	ldw	r5,-12(fp)
    ac40:	e1bffe17 	ldw	r6,-8(fp)
    ac44:	103ee83a 	callr	r2
    ac48:	e0bffa15 	stw	r2,-24(fp)
    ac4c:	00000506 	br	ac64 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    ac50:	00bfde84 	movi	r2,-134
    ac54:	e0bffa15 	stw	r2,-24(fp)
    ac58:	00000206 	br	ac64 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    ac5c:	00bfebc4 	movi	r2,-81
    ac60:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    ac64:	e0bffa17 	ldw	r2,-24(fp)
    ac68:	1004403a 	cmpge	r2,r2,zero
    ac6c:	1000071e 	bne	r2,zero,ac8c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    ac70:	000aca40 	call	aca4 <alt_get_errno>
    ac74:	1007883a 	mov	r3,r2
    ac78:	e0bffa17 	ldw	r2,-24(fp)
    ac7c:	0085c83a 	sub	r2,zero,r2
    ac80:	18800015 	stw	r2,0(r3)
    rc = -1;
    ac84:	00bfffc4 	movi	r2,-1
    ac88:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    ac8c:	e0bffa17 	ldw	r2,-24(fp)
}
    ac90:	e037883a 	mov	sp,fp
    ac94:	dfc00117 	ldw	ra,4(sp)
    ac98:	df000017 	ldw	fp,0(sp)
    ac9c:	dec00204 	addi	sp,sp,8
    aca0:	f800283a 	ret

0000aca4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aca4:	defffd04 	addi	sp,sp,-12
    aca8:	dfc00215 	stw	ra,8(sp)
    acac:	df000115 	stw	fp,4(sp)
    acb0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    acb4:	00800074 	movhi	r2,1
    acb8:	10bc6104 	addi	r2,r2,-3708
    acbc:	10800017 	ldw	r2,0(r2)
    acc0:	1005003a 	cmpeq	r2,r2,zero
    acc4:	1000061e 	bne	r2,zero,ace0 <alt_get_errno+0x3c>
    acc8:	00800074 	movhi	r2,1
    accc:	10bc6104 	addi	r2,r2,-3708
    acd0:	10800017 	ldw	r2,0(r2)
    acd4:	103ee83a 	callr	r2
    acd8:	e0bfff15 	stw	r2,-4(fp)
    acdc:	00000306 	br	acec <alt_get_errno+0x48>
    ace0:	00800074 	movhi	r2,1
    ace4:	10830304 	addi	r2,r2,3084
    ace8:	e0bfff15 	stw	r2,-4(fp)
    acec:	e0bfff17 	ldw	r2,-4(fp)
}
    acf0:	e037883a 	mov	sp,fp
    acf4:	dfc00117 	ldw	ra,4(sp)
    acf8:	df000017 	ldw	fp,0(sp)
    acfc:	dec00204 	addi	sp,sp,8
    ad00:	f800283a 	ret

0000ad04 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ad04:	defffd04 	addi	sp,sp,-12
    ad08:	dfc00215 	stw	ra,8(sp)
    ad0c:	df000115 	stw	fp,4(sp)
    ad10:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ad14:	0009883a 	mov	r4,zero
    ad18:	000b3a00 	call	b3a0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ad1c:	000b3d40 	call	b3d4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ad20:	01000074 	movhi	r4,1
    ad24:	2135c704 	addi	r4,r4,-10468
    ad28:	01400074 	movhi	r5,1
    ad2c:	2975c704 	addi	r5,r5,-10468
    ad30:	01800074 	movhi	r6,1
    ad34:	31b5c704 	addi	r6,r6,-10468
    ad38:	000c8500 	call	c850 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ad3c:	000c3c80 	call	c3c8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ad40:	01000074 	movhi	r4,1
    ad44:	21310b04 	addi	r4,r4,-15316
    ad48:	000cea80 	call	cea8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ad4c:	d126ae17 	ldw	r4,-25928(gp)
    ad50:	d166af17 	ldw	r5,-25924(gp)
    ad54:	d1a6b017 	ldw	r6,-25920(gp)
    ad58:	00002000 	call	200 <main>
    ad5c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    ad60:	01000044 	movi	r4,1
    ad64:	000a6a80 	call	a6a8 <close>
  exit (result);
    ad68:	e13fff17 	ldw	r4,-4(fp)
    ad6c:	000cebc0 	call	cebc <exit>

0000ad70 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    ad70:	defffe04 	addi	sp,sp,-8
    ad74:	df000115 	stw	fp,4(sp)
    ad78:	df000104 	addi	fp,sp,4
    ad7c:	e13fff15 	stw	r4,-4(fp)
}
    ad80:	e037883a 	mov	sp,fp
    ad84:	df000017 	ldw	fp,0(sp)
    ad88:	dec00104 	addi	sp,sp,4
    ad8c:	f800283a 	ret

0000ad90 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    ad90:	defffe04 	addi	sp,sp,-8
    ad94:	df000115 	stw	fp,4(sp)
    ad98:	df000104 	addi	fp,sp,4
    ad9c:	e13fff15 	stw	r4,-4(fp)
}
    ada0:	e037883a 	mov	sp,fp
    ada4:	df000017 	ldw	fp,0(sp)
    ada8:	dec00104 	addi	sp,sp,4
    adac:	f800283a 	ret

0000adb0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    adb0:	defff704 	addi	sp,sp,-36
    adb4:	dfc00815 	stw	ra,32(sp)
    adb8:	df000715 	stw	fp,28(sp)
    adbc:	df000704 	addi	fp,sp,28
    adc0:	e13ffb15 	stw	r4,-20(fp)
    adc4:	e17ffc15 	stw	r5,-16(fp)
    adc8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    adcc:	e0bffb17 	ldw	r2,-20(fp)
    add0:	1004803a 	cmplt	r2,r2,zero
    add4:	1000081e 	bne	r2,zero,adf8 <read+0x48>
    add8:	e0bffb17 	ldw	r2,-20(fp)
    addc:	10800324 	muli	r2,r2,12
    ade0:	1007883a 	mov	r3,r2
    ade4:	00800074 	movhi	r2,1
    ade8:	10b7de04 	addi	r2,r2,-8328
    adec:	1887883a 	add	r3,r3,r2
    adf0:	e0ffff15 	stw	r3,-4(fp)
    adf4:	00000106 	br	adfc <read+0x4c>
    adf8:	e03fff15 	stw	zero,-4(fp)
    adfc:	e0bfff17 	ldw	r2,-4(fp)
    ae00:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    ae04:	e0bffa17 	ldw	r2,-24(fp)
    ae08:	1005003a 	cmpeq	r2,r2,zero
    ae0c:	1000241e 	bne	r2,zero,aea0 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ae10:	e0bffa17 	ldw	r2,-24(fp)
    ae14:	10800217 	ldw	r2,8(r2)
    ae18:	108000cc 	andi	r2,r2,3
    ae1c:	10800060 	cmpeqi	r2,r2,1
    ae20:	10001a1e 	bne	r2,zero,ae8c <read+0xdc>
    ae24:	e0bffa17 	ldw	r2,-24(fp)
    ae28:	10800017 	ldw	r2,0(r2)
    ae2c:	10800517 	ldw	r2,20(r2)
    ae30:	1005003a 	cmpeq	r2,r2,zero
    ae34:	1000151e 	bne	r2,zero,ae8c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ae38:	e0bffa17 	ldw	r2,-24(fp)
    ae3c:	10800017 	ldw	r2,0(r2)
    ae40:	10800517 	ldw	r2,20(r2)
    ae44:	e17ffc17 	ldw	r5,-16(fp)
    ae48:	e1bffd17 	ldw	r6,-12(fp)
    ae4c:	e13ffa17 	ldw	r4,-24(fp)
    ae50:	103ee83a 	callr	r2
    ae54:	e0bff915 	stw	r2,-28(fp)
    ae58:	e0bff917 	ldw	r2,-28(fp)
    ae5c:	1004403a 	cmpge	r2,r2,zero
    ae60:	1000071e 	bne	r2,zero,ae80 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    ae64:	000aed00 	call	aed0 <alt_get_errno>
    ae68:	e0fff917 	ldw	r3,-28(fp)
    ae6c:	00c7c83a 	sub	r3,zero,r3
    ae70:	10c00015 	stw	r3,0(r2)
          return -1;
    ae74:	00bfffc4 	movi	r2,-1
    ae78:	e0bffe15 	stw	r2,-8(fp)
    ae7c:	00000e06 	br	aeb8 <read+0x108>
        }
        return rval;
    ae80:	e0bff917 	ldw	r2,-28(fp)
    ae84:	e0bffe15 	stw	r2,-8(fp)
    ae88:	00000b06 	br	aeb8 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ae8c:	000aed00 	call	aed0 <alt_get_errno>
    ae90:	1007883a 	mov	r3,r2
    ae94:	00800344 	movi	r2,13
    ae98:	18800015 	stw	r2,0(r3)
    ae9c:	00000406 	br	aeb0 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    aea0:	000aed00 	call	aed0 <alt_get_errno>
    aea4:	1007883a 	mov	r3,r2
    aea8:	00801444 	movi	r2,81
    aeac:	18800015 	stw	r2,0(r3)
  }
  return -1;
    aeb0:	00bfffc4 	movi	r2,-1
    aeb4:	e0bffe15 	stw	r2,-8(fp)
    aeb8:	e0bffe17 	ldw	r2,-8(fp)
}
    aebc:	e037883a 	mov	sp,fp
    aec0:	dfc00117 	ldw	ra,4(sp)
    aec4:	df000017 	ldw	fp,0(sp)
    aec8:	dec00204 	addi	sp,sp,8
    aecc:	f800283a 	ret

0000aed0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aed0:	defffd04 	addi	sp,sp,-12
    aed4:	dfc00215 	stw	ra,8(sp)
    aed8:	df000115 	stw	fp,4(sp)
    aedc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    aee0:	00800074 	movhi	r2,1
    aee4:	10bc6104 	addi	r2,r2,-3708
    aee8:	10800017 	ldw	r2,0(r2)
    aeec:	1005003a 	cmpeq	r2,r2,zero
    aef0:	1000061e 	bne	r2,zero,af0c <alt_get_errno+0x3c>
    aef4:	00800074 	movhi	r2,1
    aef8:	10bc6104 	addi	r2,r2,-3708
    aefc:	10800017 	ldw	r2,0(r2)
    af00:	103ee83a 	callr	r2
    af04:	e0bfff15 	stw	r2,-4(fp)
    af08:	00000306 	br	af18 <alt_get_errno+0x48>
    af0c:	00800074 	movhi	r2,1
    af10:	10830304 	addi	r2,r2,3084
    af14:	e0bfff15 	stw	r2,-4(fp)
    af18:	e0bfff17 	ldw	r2,-4(fp)
}
    af1c:	e037883a 	mov	sp,fp
    af20:	dfc00117 	ldw	ra,4(sp)
    af24:	df000017 	ldw	fp,0(sp)
    af28:	dec00204 	addi	sp,sp,8
    af2c:	f800283a 	ret

0000af30 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    af30:	defffe04 	addi	sp,sp,-8
    af34:	df000115 	stw	fp,4(sp)
    af38:	df000104 	addi	fp,sp,4
    af3c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    af40:	e0bfff17 	ldw	r2,-4(fp)
    af44:	108000d0 	cmplti	r2,r2,3
    af48:	10000d1e 	bne	r2,zero,af80 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    af4c:	e0bfff17 	ldw	r2,-4(fp)
    af50:	00c00074 	movhi	r3,1
    af54:	18f7de04 	addi	r3,r3,-8328
    af58:	10800324 	muli	r2,r2,12
    af5c:	10c5883a 	add	r2,r2,r3
    af60:	10800204 	addi	r2,r2,8
    af64:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    af68:	e0bfff17 	ldw	r2,-4(fp)
    af6c:	00c00074 	movhi	r3,1
    af70:	18f7de04 	addi	r3,r3,-8328
    af74:	10800324 	muli	r2,r2,12
    af78:	10c5883a 	add	r2,r2,r3
    af7c:	10000015 	stw	zero,0(r2)
  }
}
    af80:	e037883a 	mov	sp,fp
    af84:	df000017 	ldw	fp,0(sp)
    af88:	dec00104 	addi	sp,sp,4
    af8c:	f800283a 	ret

0000af90 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    af90:	defff804 	addi	sp,sp,-32
    af94:	df000715 	stw	fp,28(sp)
    af98:	df000704 	addi	fp,sp,28
    af9c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    afa0:	0005303a 	rdctl	r2,status
    afa4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    afa8:	e0fffb17 	ldw	r3,-20(fp)
    afac:	00bfff84 	movi	r2,-2
    afb0:	1884703a 	and	r2,r3,r2
    afb4:	1001703a 	wrctl	status,r2
  
  return context;
    afb8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    afbc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    afc0:	d0a00c17 	ldw	r2,-32720(gp)
    afc4:	10c000c4 	addi	r3,r2,3
    afc8:	00bfff04 	movi	r2,-4
    afcc:	1884703a 	and	r2,r3,r2
    afd0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    afd4:	d0e00c17 	ldw	r3,-32720(gp)
    afd8:	e0bffe17 	ldw	r2,-8(fp)
    afdc:	1887883a 	add	r3,r3,r2
    afe0:	008000b4 	movhi	r2,2
    afe4:	10800004 	addi	r2,r2,0
    afe8:	10c0072e 	bgeu	r2,r3,b008 <sbrk+0x78>
    afec:	e0bffd17 	ldw	r2,-12(fp)
    aff0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    aff4:	e0bffa17 	ldw	r2,-24(fp)
    aff8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    affc:	00bfffc4 	movi	r2,-1
    b000:	e0bfff15 	stw	r2,-4(fp)
    b004:	00000c06 	br	b038 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    b008:	d0a00c17 	ldw	r2,-32720(gp)
    b00c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    b010:	d0e00c17 	ldw	r3,-32720(gp)
    b014:	e0bffe17 	ldw	r2,-8(fp)
    b018:	1885883a 	add	r2,r3,r2
    b01c:	d0a00c15 	stw	r2,-32720(gp)
    b020:	e0bffd17 	ldw	r2,-12(fp)
    b024:	e0bff915 	stw	r2,-28(fp)
    b028:	e0bff917 	ldw	r2,-28(fp)
    b02c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b030:	e0bffc17 	ldw	r2,-16(fp)
    b034:	e0bfff15 	stw	r2,-4(fp)
    b038:	e0bfff17 	ldw	r2,-4(fp)
} 
    b03c:	e037883a 	mov	sp,fp
    b040:	df000017 	ldw	fp,0(sp)
    b044:	dec00104 	addi	sp,sp,4
    b048:	f800283a 	ret

0000b04c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    b04c:	defffa04 	addi	sp,sp,-24
    b050:	df000515 	stw	fp,20(sp)
    b054:	df000504 	addi	fp,sp,20
    b058:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b05c:	0005303a 	rdctl	r2,status
    b060:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b064:	e0fffd17 	ldw	r3,-12(fp)
    b068:	00bfff84 	movi	r2,-2
    b06c:	1884703a 	and	r2,r3,r2
    b070:	1001703a 	wrctl	status,r2
  
  return context;
    b074:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    b078:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    b07c:	e0bfff17 	ldw	r2,-4(fp)
    b080:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    b084:	e0bffc17 	ldw	r2,-16(fp)
    b088:	10c00017 	ldw	r3,0(r2)
    b08c:	e0bffc17 	ldw	r2,-16(fp)
    b090:	10800117 	ldw	r2,4(r2)
    b094:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    b098:	e0bffc17 	ldw	r2,-16(fp)
    b09c:	10c00117 	ldw	r3,4(r2)
    b0a0:	e0bffc17 	ldw	r2,-16(fp)
    b0a4:	10800017 	ldw	r2,0(r2)
    b0a8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    b0ac:	e0fffc17 	ldw	r3,-16(fp)
    b0b0:	e0bffc17 	ldw	r2,-16(fp)
    b0b4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    b0b8:	e0fffc17 	ldw	r3,-16(fp)
    b0bc:	e0bffc17 	ldw	r2,-16(fp)
    b0c0:	18800015 	stw	r2,0(r3)
    b0c4:	e0bffe17 	ldw	r2,-8(fp)
    b0c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b0cc:	e0bffb17 	ldw	r2,-20(fp)
    b0d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    b0d4:	e037883a 	mov	sp,fp
    b0d8:	df000017 	ldw	fp,0(sp)
    b0dc:	dec00104 	addi	sp,sp,4
    b0e0:	f800283a 	ret

0000b0e4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    b0e4:	defffb04 	addi	sp,sp,-20
    b0e8:	dfc00415 	stw	ra,16(sp)
    b0ec:	df000315 	stw	fp,12(sp)
    b0f0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    b0f4:	d0a00d17 	ldw	r2,-32716(gp)
    b0f8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    b0fc:	d0a6b217 	ldw	r2,-25912(gp)
    b100:	10800044 	addi	r2,r2,1
    b104:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b108:	00003106 	br	b1d0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    b10c:	e0bffe17 	ldw	r2,-8(fp)
    b110:	10800017 	ldw	r2,0(r2)
    b114:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    b118:	e0bffe17 	ldw	r2,-8(fp)
    b11c:	10800403 	ldbu	r2,16(r2)
    b120:	10803fcc 	andi	r2,r2,255
    b124:	1005003a 	cmpeq	r2,r2,zero
    b128:	1000051e 	bne	r2,zero,b140 <alt_tick+0x5c>
    b12c:	d0a6b217 	ldw	r2,-25912(gp)
    b130:	1004c03a 	cmpne	r2,r2,zero
    b134:	1000021e 	bne	r2,zero,b140 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    b138:	e0bffe17 	ldw	r2,-8(fp)
    b13c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    b140:	e0bffe17 	ldw	r2,-8(fp)
    b144:	10c00217 	ldw	r3,8(r2)
    b148:	d0a6b217 	ldw	r2,-25912(gp)
    b14c:	10c01e36 	bltu	r2,r3,b1c8 <alt_tick+0xe4>
    b150:	e0bffe17 	ldw	r2,-8(fp)
    b154:	10800403 	ldbu	r2,16(r2)
    b158:	10803fcc 	andi	r2,r2,255
    b15c:	1004c03a 	cmpne	r2,r2,zero
    b160:	1000191e 	bne	r2,zero,b1c8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    b164:	e0bffe17 	ldw	r2,-8(fp)
    b168:	10c00317 	ldw	r3,12(r2)
    b16c:	e0bffe17 	ldw	r2,-8(fp)
    b170:	11000517 	ldw	r4,20(r2)
    b174:	183ee83a 	callr	r3
    b178:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    b17c:	e0bffd17 	ldw	r2,-12(fp)
    b180:	1004c03a 	cmpne	r2,r2,zero
    b184:	1000031e 	bne	r2,zero,b194 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    b188:	e13ffe17 	ldw	r4,-8(fp)
    b18c:	000b04c0 	call	b04c <alt_alarm_stop>
    b190:	00000d06 	br	b1c8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    b194:	e0bffe17 	ldw	r2,-8(fp)
    b198:	10c00217 	ldw	r3,8(r2)
    b19c:	e0bffd17 	ldw	r2,-12(fp)
    b1a0:	1887883a 	add	r3,r3,r2
    b1a4:	e0bffe17 	ldw	r2,-8(fp)
    b1a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    b1ac:	e0bffe17 	ldw	r2,-8(fp)
    b1b0:	10c00217 	ldw	r3,8(r2)
    b1b4:	d0a6b217 	ldw	r2,-25912(gp)
    b1b8:	1880032e 	bgeu	r3,r2,b1c8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    b1bc:	e0fffe17 	ldw	r3,-8(fp)
    b1c0:	00800044 	movi	r2,1
    b1c4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    b1c8:	e0bfff17 	ldw	r2,-4(fp)
    b1cc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b1d0:	d0e00d04 	addi	r3,gp,-32716
    b1d4:	e0bffe17 	ldw	r2,-8(fp)
    b1d8:	10ffcc1e 	bne	r2,r3,b10c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    b1dc:	e037883a 	mov	sp,fp
    b1e0:	dfc00117 	ldw	ra,4(sp)
    b1e4:	df000017 	ldw	fp,0(sp)
    b1e8:	dec00204 	addi	sp,sp,8
    b1ec:	f800283a 	ret

0000b1f0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    b1f0:	defffd04 	addi	sp,sp,-12
    b1f4:	dfc00215 	stw	ra,8(sp)
    b1f8:	df000115 	stw	fp,4(sp)
    b1fc:	df000104 	addi	fp,sp,4
    b200:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    b204:	e13fff17 	ldw	r4,-4(fp)
    b208:	000c1680 	call	c168 <alt_busy_sleep>
}
    b20c:	e037883a 	mov	sp,fp
    b210:	dfc00117 	ldw	ra,4(sp)
    b214:	df000017 	ldw	fp,0(sp)
    b218:	dec00204 	addi	sp,sp,8
    b21c:	f800283a 	ret

0000b220 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b220:	defff704 	addi	sp,sp,-36
    b224:	dfc00815 	stw	ra,32(sp)
    b228:	df000715 	stw	fp,28(sp)
    b22c:	df000704 	addi	fp,sp,28
    b230:	e13ffb15 	stw	r4,-20(fp)
    b234:	e17ffc15 	stw	r5,-16(fp)
    b238:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b23c:	e0bffb17 	ldw	r2,-20(fp)
    b240:	1004803a 	cmplt	r2,r2,zero
    b244:	1000081e 	bne	r2,zero,b268 <write+0x48>
    b248:	e0bffb17 	ldw	r2,-20(fp)
    b24c:	10800324 	muli	r2,r2,12
    b250:	1007883a 	mov	r3,r2
    b254:	00800074 	movhi	r2,1
    b258:	10b7de04 	addi	r2,r2,-8328
    b25c:	1887883a 	add	r3,r3,r2
    b260:	e0ffff15 	stw	r3,-4(fp)
    b264:	00000106 	br	b26c <write+0x4c>
    b268:	e03fff15 	stw	zero,-4(fp)
    b26c:	e0bfff17 	ldw	r2,-4(fp)
    b270:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b274:	e0bffa17 	ldw	r2,-24(fp)
    b278:	1005003a 	cmpeq	r2,r2,zero
    b27c:	1000241e 	bne	r2,zero,b310 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b280:	e0bffa17 	ldw	r2,-24(fp)
    b284:	10800217 	ldw	r2,8(r2)
    b288:	108000cc 	andi	r2,r2,3
    b28c:	1005003a 	cmpeq	r2,r2,zero
    b290:	10001a1e 	bne	r2,zero,b2fc <write+0xdc>
    b294:	e0bffa17 	ldw	r2,-24(fp)
    b298:	10800017 	ldw	r2,0(r2)
    b29c:	10800617 	ldw	r2,24(r2)
    b2a0:	1005003a 	cmpeq	r2,r2,zero
    b2a4:	1000151e 	bne	r2,zero,b2fc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b2a8:	e0bffa17 	ldw	r2,-24(fp)
    b2ac:	10800017 	ldw	r2,0(r2)
    b2b0:	10800617 	ldw	r2,24(r2)
    b2b4:	e17ffc17 	ldw	r5,-16(fp)
    b2b8:	e1bffd17 	ldw	r6,-12(fp)
    b2bc:	e13ffa17 	ldw	r4,-24(fp)
    b2c0:	103ee83a 	callr	r2
    b2c4:	e0bff915 	stw	r2,-28(fp)
    b2c8:	e0bff917 	ldw	r2,-28(fp)
    b2cc:	1004403a 	cmpge	r2,r2,zero
    b2d0:	1000071e 	bne	r2,zero,b2f0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    b2d4:	000b3400 	call	b340 <alt_get_errno>
    b2d8:	e0fff917 	ldw	r3,-28(fp)
    b2dc:	00c7c83a 	sub	r3,zero,r3
    b2e0:	10c00015 	stw	r3,0(r2)
        return -1;
    b2e4:	00bfffc4 	movi	r2,-1
    b2e8:	e0bffe15 	stw	r2,-8(fp)
    b2ec:	00000e06 	br	b328 <write+0x108>
      }
      return rval;
    b2f0:	e0bff917 	ldw	r2,-28(fp)
    b2f4:	e0bffe15 	stw	r2,-8(fp)
    b2f8:	00000b06 	br	b328 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b2fc:	000b3400 	call	b340 <alt_get_errno>
    b300:	1007883a 	mov	r3,r2
    b304:	00800344 	movi	r2,13
    b308:	18800015 	stw	r2,0(r3)
    b30c:	00000406 	br	b320 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b310:	000b3400 	call	b340 <alt_get_errno>
    b314:	1007883a 	mov	r3,r2
    b318:	00801444 	movi	r2,81
    b31c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b320:	00bfffc4 	movi	r2,-1
    b324:	e0bffe15 	stw	r2,-8(fp)
    b328:	e0bffe17 	ldw	r2,-8(fp)
}
    b32c:	e037883a 	mov	sp,fp
    b330:	dfc00117 	ldw	ra,4(sp)
    b334:	df000017 	ldw	fp,0(sp)
    b338:	dec00204 	addi	sp,sp,8
    b33c:	f800283a 	ret

0000b340 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b340:	defffd04 	addi	sp,sp,-12
    b344:	dfc00215 	stw	ra,8(sp)
    b348:	df000115 	stw	fp,4(sp)
    b34c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b350:	00800074 	movhi	r2,1
    b354:	10bc6104 	addi	r2,r2,-3708
    b358:	10800017 	ldw	r2,0(r2)
    b35c:	1005003a 	cmpeq	r2,r2,zero
    b360:	1000061e 	bne	r2,zero,b37c <alt_get_errno+0x3c>
    b364:	00800074 	movhi	r2,1
    b368:	10bc6104 	addi	r2,r2,-3708
    b36c:	10800017 	ldw	r2,0(r2)
    b370:	103ee83a 	callr	r2
    b374:	e0bfff15 	stw	r2,-4(fp)
    b378:	00000306 	br	b388 <alt_get_errno+0x48>
    b37c:	00800074 	movhi	r2,1
    b380:	10830304 	addi	r2,r2,3084
    b384:	e0bfff15 	stw	r2,-4(fp)
    b388:	e0bfff17 	ldw	r2,-4(fp)
}
    b38c:	e037883a 	mov	sp,fp
    b390:	dfc00117 	ldw	ra,4(sp)
    b394:	df000017 	ldw	fp,0(sp)
    b398:	dec00204 	addi	sp,sp,8
    b39c:	f800283a 	ret

0000b3a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b3a0:	defffd04 	addi	sp,sp,-12
    b3a4:	dfc00215 	stw	ra,8(sp)
    b3a8:	df000115 	stw	fp,4(sp)
    b3ac:	df000104 	addi	fp,sp,4
    b3b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
    b3b4:	000cb8c0 	call	cb8c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b3b8:	00800044 	movi	r2,1
    b3bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b3c0:	e037883a 	mov	sp,fp
    b3c4:	dfc00117 	ldw	ra,4(sp)
    b3c8:	df000017 	ldw	fp,0(sp)
    b3cc:	dec00204 	addi	sp,sp,8
    b3d0:	f800283a 	ret

0000b3d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b3d4:	defffe04 	addi	sp,sp,-8
    b3d8:	dfc00115 	stw	ra,4(sp)
    b3dc:	df000015 	stw	fp,0(sp)
    b3e0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    b3e4:	01010134 	movhi	r4,1028
    b3e8:	21040004 	addi	r4,r4,4096
    b3ec:	000b883a 	mov	r5,zero
    b3f0:	000d883a 	mov	r6,zero
    b3f4:	01c0fa04 	movi	r7,1000
    b3f8:	000bf840 	call	bf84 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    b3fc:	01000074 	movhi	r4,1
    b400:	21384804 	addi	r4,r4,-7904
    b404:	000b883a 	mov	r5,zero
    b408:	01800044 	movi	r6,1
    b40c:	000b5b00 	call	b5b0 <altera_avalon_jtag_uart_init>
    b410:	01000074 	movhi	r4,1
    b414:	21383e04 	addi	r4,r4,-7944
    b418:	000b4300 	call	b430 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
}
    b41c:	e037883a 	mov	sp,fp
    b420:	dfc00117 	ldw	ra,4(sp)
    b424:	df000017 	ldw	fp,0(sp)
    b428:	dec00204 	addi	sp,sp,8
    b42c:	f800283a 	ret

0000b430 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b430:	defffd04 	addi	sp,sp,-12
    b434:	dfc00215 	stw	ra,8(sp)
    b438:	df000115 	stw	fp,4(sp)
    b43c:	df000104 	addi	fp,sp,4
    b440:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b444:	e13fff17 	ldw	r4,-4(fp)
    b448:	01400074 	movhi	r5,1
    b44c:	297c5e04 	addi	r5,r5,-3720
    b450:	000c2b40 	call	c2b4 <alt_dev_llist_insert>
}
    b454:	e037883a 	mov	sp,fp
    b458:	dfc00117 	ldw	ra,4(sp)
    b45c:	df000017 	ldw	fp,0(sp)
    b460:	dec00204 	addi	sp,sp,8
    b464:	f800283a 	ret

0000b468 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b468:	defffa04 	addi	sp,sp,-24
    b46c:	dfc00515 	stw	ra,20(sp)
    b470:	df000415 	stw	fp,16(sp)
    b474:	df000404 	addi	fp,sp,16
    b478:	e13ffd15 	stw	r4,-12(fp)
    b47c:	e17ffe15 	stw	r5,-8(fp)
    b480:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b484:	e0bffd17 	ldw	r2,-12(fp)
    b488:	10800017 	ldw	r2,0(r2)
    b48c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b490:	e0bffc17 	ldw	r2,-16(fp)
    b494:	11000a04 	addi	r4,r2,40
    b498:	e0bffd17 	ldw	r2,-12(fp)
    b49c:	11c00217 	ldw	r7,8(r2)
    b4a0:	e17ffe17 	ldw	r5,-8(fp)
    b4a4:	e1bfff17 	ldw	r6,-4(fp)
    b4a8:	000bab00 	call	bab0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b4ac:	e037883a 	mov	sp,fp
    b4b0:	dfc00117 	ldw	ra,4(sp)
    b4b4:	df000017 	ldw	fp,0(sp)
    b4b8:	dec00204 	addi	sp,sp,8
    b4bc:	f800283a 	ret

0000b4c0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b4c0:	defffa04 	addi	sp,sp,-24
    b4c4:	dfc00515 	stw	ra,20(sp)
    b4c8:	df000415 	stw	fp,16(sp)
    b4cc:	df000404 	addi	fp,sp,16
    b4d0:	e13ffd15 	stw	r4,-12(fp)
    b4d4:	e17ffe15 	stw	r5,-8(fp)
    b4d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b4dc:	e0bffd17 	ldw	r2,-12(fp)
    b4e0:	10800017 	ldw	r2,0(r2)
    b4e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b4e8:	e0bffc17 	ldw	r2,-16(fp)
    b4ec:	11000a04 	addi	r4,r2,40
    b4f0:	e0bffd17 	ldw	r2,-12(fp)
    b4f4:	11c00217 	ldw	r7,8(r2)
    b4f8:	e17ffe17 	ldw	r5,-8(fp)
    b4fc:	e1bfff17 	ldw	r6,-4(fp)
    b500:	000bcd40 	call	bcd4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b504:	e037883a 	mov	sp,fp
    b508:	dfc00117 	ldw	ra,4(sp)
    b50c:	df000017 	ldw	fp,0(sp)
    b510:	dec00204 	addi	sp,sp,8
    b514:	f800283a 	ret

0000b518 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    b518:	defffc04 	addi	sp,sp,-16
    b51c:	dfc00315 	stw	ra,12(sp)
    b520:	df000215 	stw	fp,8(sp)
    b524:	df000204 	addi	fp,sp,8
    b528:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b52c:	e0bfff17 	ldw	r2,-4(fp)
    b530:	10800017 	ldw	r2,0(r2)
    b534:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    b538:	e0bffe17 	ldw	r2,-8(fp)
    b53c:	11000a04 	addi	r4,r2,40
    b540:	e0bfff17 	ldw	r2,-4(fp)
    b544:	11400217 	ldw	r5,8(r2)
    b548:	000b9480 	call	b948 <altera_avalon_jtag_uart_close>
}
    b54c:	e037883a 	mov	sp,fp
    b550:	dfc00117 	ldw	ra,4(sp)
    b554:	df000017 	ldw	fp,0(sp)
    b558:	dec00204 	addi	sp,sp,8
    b55c:	f800283a 	ret

0000b560 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    b560:	defffa04 	addi	sp,sp,-24
    b564:	dfc00515 	stw	ra,20(sp)
    b568:	df000415 	stw	fp,16(sp)
    b56c:	df000404 	addi	fp,sp,16
    b570:	e13ffd15 	stw	r4,-12(fp)
    b574:	e17ffe15 	stw	r5,-8(fp)
    b578:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    b57c:	e0bffd17 	ldw	r2,-12(fp)
    b580:	10800017 	ldw	r2,0(r2)
    b584:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    b588:	e0bffc17 	ldw	r2,-16(fp)
    b58c:	11000a04 	addi	r4,r2,40
    b590:	e17ffe17 	ldw	r5,-8(fp)
    b594:	e1bfff17 	ldw	r6,-4(fp)
    b598:	000b9bc0 	call	b9bc <altera_avalon_jtag_uart_ioctl>
}
    b59c:	e037883a 	mov	sp,fp
    b5a0:	dfc00117 	ldw	ra,4(sp)
    b5a4:	df000017 	ldw	fp,0(sp)
    b5a8:	dec00204 	addi	sp,sp,8
    b5ac:	f800283a 	ret

0000b5b0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    b5b0:	defffa04 	addi	sp,sp,-24
    b5b4:	dfc00515 	stw	ra,20(sp)
    b5b8:	df000415 	stw	fp,16(sp)
    b5bc:	df000404 	addi	fp,sp,16
    b5c0:	e13ffd15 	stw	r4,-12(fp)
    b5c4:	e17ffe15 	stw	r5,-8(fp)
    b5c8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b5cc:	e0fffd17 	ldw	r3,-12(fp)
    b5d0:	00800044 	movi	r2,1
    b5d4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    b5d8:	e0bffd17 	ldw	r2,-12(fp)
    b5dc:	10800017 	ldw	r2,0(r2)
    b5e0:	11000104 	addi	r4,r2,4
    b5e4:	e0bffd17 	ldw	r2,-12(fp)
    b5e8:	10800817 	ldw	r2,32(r2)
    b5ec:	1007883a 	mov	r3,r2
    b5f0:	2005883a 	mov	r2,r4
    b5f4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    b5f8:	e13ffe17 	ldw	r4,-8(fp)
    b5fc:	e17fff17 	ldw	r5,-4(fp)
    b600:	d8000015 	stw	zero,0(sp)
    b604:	01800074 	movhi	r6,1
    b608:	31ad9c04 	addi	r6,r6,-18832
    b60c:	e1fffd17 	ldw	r7,-12(fp)
    b610:	000c4c00 	call	c4c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    b614:	e0bffd17 	ldw	r2,-12(fp)
    b618:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    b61c:	e0bffd17 	ldw	r2,-12(fp)
    b620:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b624:	00800074 	movhi	r2,1
    b628:	10830704 	addi	r2,r2,3100
    b62c:	10800017 	ldw	r2,0(r2)
    b630:	100b883a 	mov	r5,r2
    b634:	01800074 	movhi	r6,1
    b638:	31ae2604 	addi	r6,r6,-18280
    b63c:	e1fffd17 	ldw	r7,-12(fp)
    b640:	000c0140 	call	c014 <alt_alarm_start>
    b644:	1004403a 	cmpge	r2,r2,zero
    b648:	1000041e 	bne	r2,zero,b65c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    b64c:	e0fffd17 	ldw	r3,-12(fp)
    b650:	00a00034 	movhi	r2,32768
    b654:	10bfffc4 	addi	r2,r2,-1
    b658:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    b65c:	e037883a 	mov	sp,fp
    b660:	dfc00117 	ldw	ra,4(sp)
    b664:	df000017 	ldw	fp,0(sp)
    b668:	dec00204 	addi	sp,sp,8
    b66c:	f800283a 	ret

0000b670 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    b670:	defff804 	addi	sp,sp,-32
    b674:	df000715 	stw	fp,28(sp)
    b678:	df000704 	addi	fp,sp,28
    b67c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    b680:	e0bfff17 	ldw	r2,-4(fp)
    b684:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    b688:	e0bffe17 	ldw	r2,-8(fp)
    b68c:	10800017 	ldw	r2,0(r2)
    b690:	e0bffd15 	stw	r2,-12(fp)
    b694:	00000006 	br	b698 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b698:	e0bffd17 	ldw	r2,-12(fp)
    b69c:	10800104 	addi	r2,r2,4
    b6a0:	10800037 	ldwio	r2,0(r2)
    b6a4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    b6a8:	e0bffc17 	ldw	r2,-16(fp)
    b6ac:	1080c00c 	andi	r2,r2,768
    b6b0:	1005003a 	cmpeq	r2,r2,zero
    b6b4:	1000741e 	bne	r2,zero,b888 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    b6b8:	e0bffc17 	ldw	r2,-16(fp)
    b6bc:	1080400c 	andi	r2,r2,256
    b6c0:	1005003a 	cmpeq	r2,r2,zero
    b6c4:	1000351e 	bne	r2,zero,b79c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    b6c8:	00800074 	movhi	r2,1
    b6cc:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b6d0:	e0bffe17 	ldw	r2,-8(fp)
    b6d4:	10800a17 	ldw	r2,40(r2)
    b6d8:	10800044 	addi	r2,r2,1
    b6dc:	1081ffcc 	andi	r2,r2,2047
    b6e0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    b6e4:	e0bffe17 	ldw	r2,-8(fp)
    b6e8:	10c00b17 	ldw	r3,44(r2)
    b6ec:	e0bffa17 	ldw	r2,-24(fp)
    b6f0:	18801626 	beq	r3,r2,b74c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    b6f4:	e0bffd17 	ldw	r2,-12(fp)
    b6f8:	10800037 	ldwio	r2,0(r2)
    b6fc:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    b700:	e0bffb17 	ldw	r2,-20(fp)
    b704:	10a0000c 	andi	r2,r2,32768
    b708:	1005003a 	cmpeq	r2,r2,zero
    b70c:	10000f1e 	bne	r2,zero,b74c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    b710:	e0bffe17 	ldw	r2,-8(fp)
    b714:	10c00a17 	ldw	r3,40(r2)
    b718:	e0bffb17 	ldw	r2,-20(fp)
    b71c:	1009883a 	mov	r4,r2
    b720:	e0bffe17 	ldw	r2,-8(fp)
    b724:	1885883a 	add	r2,r3,r2
    b728:	10800e04 	addi	r2,r2,56
    b72c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b730:	e0bffe17 	ldw	r2,-8(fp)
    b734:	10800a17 	ldw	r2,40(r2)
    b738:	10800044 	addi	r2,r2,1
    b73c:	10c1ffcc 	andi	r3,r2,2047
    b740:	e0bffe17 	ldw	r2,-8(fp)
    b744:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    b748:	003fe106 	br	b6d0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    b74c:	e0bffb17 	ldw	r2,-20(fp)
    b750:	10bfffec 	andhi	r2,r2,65535
    b754:	1005003a 	cmpeq	r2,r2,zero
    b758:	1000101e 	bne	r2,zero,b79c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b75c:	e0bffe17 	ldw	r2,-8(fp)
    b760:	10c00817 	ldw	r3,32(r2)
    b764:	00bfff84 	movi	r2,-2
    b768:	1886703a 	and	r3,r3,r2
    b76c:	e0bffe17 	ldw	r2,-8(fp)
    b770:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    b774:	e0bffd17 	ldw	r2,-12(fp)
    b778:	11000104 	addi	r4,r2,4
    b77c:	e0bffe17 	ldw	r2,-8(fp)
    b780:	10800817 	ldw	r2,32(r2)
    b784:	1007883a 	mov	r3,r2
    b788:	2005883a 	mov	r2,r4
    b78c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b790:	e0bffd17 	ldw	r2,-12(fp)
    b794:	10800104 	addi	r2,r2,4
    b798:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    b79c:	e0bffc17 	ldw	r2,-16(fp)
    b7a0:	1080800c 	andi	r2,r2,512
    b7a4:	1005003a 	cmpeq	r2,r2,zero
    b7a8:	103fbb1e 	bne	r2,zero,b698 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    b7ac:	e0bffc17 	ldw	r2,-16(fp)
    b7b0:	10bfffec 	andhi	r2,r2,65535
    b7b4:	1004d43a 	srli	r2,r2,16
    b7b8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    b7bc:	00001506 	br	b814 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    b7c0:	e13ffd17 	ldw	r4,-12(fp)
    b7c4:	e0bffe17 	ldw	r2,-8(fp)
    b7c8:	10c00d17 	ldw	r3,52(r2)
    b7cc:	e0bffe17 	ldw	r2,-8(fp)
    b7d0:	1885883a 	add	r2,r3,r2
    b7d4:	10820e04 	addi	r2,r2,2104
    b7d8:	10800003 	ldbu	r2,0(r2)
    b7dc:	10c03fcc 	andi	r3,r2,255
    b7e0:	18c0201c 	xori	r3,r3,128
    b7e4:	18ffe004 	addi	r3,r3,-128
    b7e8:	2005883a 	mov	r2,r4
    b7ec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b7f0:	e0bffe17 	ldw	r2,-8(fp)
    b7f4:	10800d17 	ldw	r2,52(r2)
    b7f8:	10800044 	addi	r2,r2,1
    b7fc:	10c1ffcc 	andi	r3,r2,2047
    b800:	e0bffe17 	ldw	r2,-8(fp)
    b804:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    b808:	e0bff917 	ldw	r2,-28(fp)
    b80c:	10bfffc4 	addi	r2,r2,-1
    b810:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    b814:	e0bff917 	ldw	r2,-28(fp)
    b818:	1005003a 	cmpeq	r2,r2,zero
    b81c:	1000051e 	bne	r2,zero,b834 <altera_avalon_jtag_uart_irq+0x1c4>
    b820:	e0bffe17 	ldw	r2,-8(fp)
    b824:	10c00d17 	ldw	r3,52(r2)
    b828:	e0bffe17 	ldw	r2,-8(fp)
    b82c:	10800c17 	ldw	r2,48(r2)
    b830:	18bfe31e 	bne	r3,r2,b7c0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    b834:	e0bff917 	ldw	r2,-28(fp)
    b838:	1005003a 	cmpeq	r2,r2,zero
    b83c:	103f961e 	bne	r2,zero,b698 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b840:	e0bffe17 	ldw	r2,-8(fp)
    b844:	10c00817 	ldw	r3,32(r2)
    b848:	00bfff44 	movi	r2,-3
    b84c:	1886703a 	and	r3,r3,r2
    b850:	e0bffe17 	ldw	r2,-8(fp)
    b854:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b858:	e0bffe17 	ldw	r2,-8(fp)
    b85c:	10800017 	ldw	r2,0(r2)
    b860:	11000104 	addi	r4,r2,4
    b864:	e0bffe17 	ldw	r2,-8(fp)
    b868:	10800817 	ldw	r2,32(r2)
    b86c:	1007883a 	mov	r3,r2
    b870:	2005883a 	mov	r2,r4
    b874:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b878:	e0bffd17 	ldw	r2,-12(fp)
    b87c:	10800104 	addi	r2,r2,4
    b880:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    b884:	003f8406 	br	b698 <altera_avalon_jtag_uart_irq+0x28>
}
    b888:	e037883a 	mov	sp,fp
    b88c:	df000017 	ldw	fp,0(sp)
    b890:	dec00104 	addi	sp,sp,4
    b894:	f800283a 	ret

0000b898 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    b898:	defffc04 	addi	sp,sp,-16
    b89c:	df000315 	stw	fp,12(sp)
    b8a0:	df000304 	addi	fp,sp,12
    b8a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    b8a8:	e0bfff17 	ldw	r2,-4(fp)
    b8ac:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    b8b0:	e0bffe17 	ldw	r2,-8(fp)
    b8b4:	10800017 	ldw	r2,0(r2)
    b8b8:	10800104 	addi	r2,r2,4
    b8bc:	10800037 	ldwio	r2,0(r2)
    b8c0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    b8c4:	e0bffd17 	ldw	r2,-12(fp)
    b8c8:	1081000c 	andi	r2,r2,1024
    b8cc:	1005003a 	cmpeq	r2,r2,zero
    b8d0:	10000c1e 	bne	r2,zero,b904 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    b8d4:	e0bffe17 	ldw	r2,-8(fp)
    b8d8:	10800017 	ldw	r2,0(r2)
    b8dc:	11000104 	addi	r4,r2,4
    b8e0:	e0bffe17 	ldw	r2,-8(fp)
    b8e4:	10800817 	ldw	r2,32(r2)
    b8e8:	10810014 	ori	r2,r2,1024
    b8ec:	1007883a 	mov	r3,r2
    b8f0:	2005883a 	mov	r2,r4
    b8f4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    b8f8:	e0bffe17 	ldw	r2,-8(fp)
    b8fc:	10000915 	stw	zero,36(r2)
    b900:	00000a06 	br	b92c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    b904:	e0bffe17 	ldw	r2,-8(fp)
    b908:	10c00917 	ldw	r3,36(r2)
    b90c:	00a00034 	movhi	r2,32768
    b910:	10bfff04 	addi	r2,r2,-4
    b914:	10c00536 	bltu	r2,r3,b92c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    b918:	e0bffe17 	ldw	r2,-8(fp)
    b91c:	10800917 	ldw	r2,36(r2)
    b920:	10c00044 	addi	r3,r2,1
    b924:	e0bffe17 	ldw	r2,-8(fp)
    b928:	10c00915 	stw	r3,36(r2)
    b92c:	00800074 	movhi	r2,1
    b930:	10830704 	addi	r2,r2,3100
    b934:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    b938:	e037883a 	mov	sp,fp
    b93c:	df000017 	ldw	fp,0(sp)
    b940:	dec00104 	addi	sp,sp,4
    b944:	f800283a 	ret

0000b948 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    b948:	defffc04 	addi	sp,sp,-16
    b94c:	df000315 	stw	fp,12(sp)
    b950:	df000304 	addi	fp,sp,12
    b954:	e13ffd15 	stw	r4,-12(fp)
    b958:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b95c:	00000706 	br	b97c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    b960:	e0bffe17 	ldw	r2,-8(fp)
    b964:	1090000c 	andi	r2,r2,16384
    b968:	1005003a 	cmpeq	r2,r2,zero
    b96c:	1000031e 	bne	r2,zero,b97c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    b970:	00bffd44 	movi	r2,-11
    b974:	e0bfff15 	stw	r2,-4(fp)
    b978:	00000b06 	br	b9a8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b97c:	e0bffd17 	ldw	r2,-12(fp)
    b980:	10c00d17 	ldw	r3,52(r2)
    b984:	e0bffd17 	ldw	r2,-12(fp)
    b988:	10800c17 	ldw	r2,48(r2)
    b98c:	18800526 	beq	r3,r2,b9a4 <altera_avalon_jtag_uart_close+0x5c>
    b990:	e0bffd17 	ldw	r2,-12(fp)
    b994:	10c00917 	ldw	r3,36(r2)
    b998:	e0bffd17 	ldw	r2,-12(fp)
    b99c:	10800117 	ldw	r2,4(r2)
    b9a0:	18bfef36 	bltu	r3,r2,b960 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    b9a4:	e03fff15 	stw	zero,-4(fp)
    b9a8:	e0bfff17 	ldw	r2,-4(fp)
}
    b9ac:	e037883a 	mov	sp,fp
    b9b0:	df000017 	ldw	fp,0(sp)
    b9b4:	dec00104 	addi	sp,sp,4
    b9b8:	f800283a 	ret

0000b9bc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    b9bc:	defff804 	addi	sp,sp,-32
    b9c0:	df000715 	stw	fp,28(sp)
    b9c4:	df000704 	addi	fp,sp,28
    b9c8:	e13ffb15 	stw	r4,-20(fp)
    b9cc:	e17ffc15 	stw	r5,-16(fp)
    b9d0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    b9d4:	00bff9c4 	movi	r2,-25
    b9d8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    b9dc:	e0bffc17 	ldw	r2,-16(fp)
    b9e0:	e0bfff15 	stw	r2,-4(fp)
    b9e4:	e0ffff17 	ldw	r3,-4(fp)
    b9e8:	189a8060 	cmpeqi	r2,r3,27137
    b9ec:	1000041e 	bne	r2,zero,ba00 <altera_avalon_jtag_uart_ioctl+0x44>
    b9f0:	e0ffff17 	ldw	r3,-4(fp)
    b9f4:	189a80a0 	cmpeqi	r2,r3,27138
    b9f8:	10001b1e 	bne	r2,zero,ba68 <altera_avalon_jtag_uart_ioctl+0xac>
    b9fc:	00002706 	br	ba9c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ba00:	e0bffb17 	ldw	r2,-20(fp)
    ba04:	10c00117 	ldw	r3,4(r2)
    ba08:	00a00034 	movhi	r2,32768
    ba0c:	10bfffc4 	addi	r2,r2,-1
    ba10:	18802226 	beq	r3,r2,ba9c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    ba14:	e0bffd17 	ldw	r2,-12(fp)
    ba18:	10800017 	ldw	r2,0(r2)
    ba1c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    ba20:	e0bff917 	ldw	r2,-28(fp)
    ba24:	10800090 	cmplti	r2,r2,2
    ba28:	1000071e 	bne	r2,zero,ba48 <altera_avalon_jtag_uart_ioctl+0x8c>
    ba2c:	e0fff917 	ldw	r3,-28(fp)
    ba30:	00a00034 	movhi	r2,32768
    ba34:	10bfffc4 	addi	r2,r2,-1
    ba38:	18800326 	beq	r3,r2,ba48 <altera_avalon_jtag_uart_ioctl+0x8c>
    ba3c:	e0bff917 	ldw	r2,-28(fp)
    ba40:	e0bffe15 	stw	r2,-8(fp)
    ba44:	00000306 	br	ba54 <altera_avalon_jtag_uart_ioctl+0x98>
    ba48:	00e00034 	movhi	r3,32768
    ba4c:	18ffff84 	addi	r3,r3,-2
    ba50:	e0fffe15 	stw	r3,-8(fp)
    ba54:	e0bffb17 	ldw	r2,-20(fp)
    ba58:	e0fffe17 	ldw	r3,-8(fp)
    ba5c:	10c00115 	stw	r3,4(r2)
      rc = 0;
    ba60:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    ba64:	00000d06 	br	ba9c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    ba68:	e0bffb17 	ldw	r2,-20(fp)
    ba6c:	10c00117 	ldw	r3,4(r2)
    ba70:	00a00034 	movhi	r2,32768
    ba74:	10bfffc4 	addi	r2,r2,-1
    ba78:	18800826 	beq	r3,r2,ba9c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ba7c:	e13ffd17 	ldw	r4,-12(fp)
    ba80:	e0bffb17 	ldw	r2,-20(fp)
    ba84:	10c00917 	ldw	r3,36(r2)
    ba88:	e0bffb17 	ldw	r2,-20(fp)
    ba8c:	10800117 	ldw	r2,4(r2)
    ba90:	1885803a 	cmpltu	r2,r3,r2
    ba94:	20800015 	stw	r2,0(r4)
      rc = 0;
    ba98:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    ba9c:	e0bffa17 	ldw	r2,-24(fp)
}
    baa0:	e037883a 	mov	sp,fp
    baa4:	df000017 	ldw	fp,0(sp)
    baa8:	dec00104 	addi	sp,sp,4
    baac:	f800283a 	ret

0000bab0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    bab0:	defff204 	addi	sp,sp,-56
    bab4:	dfc00d15 	stw	ra,52(sp)
    bab8:	df000c15 	stw	fp,48(sp)
    babc:	df000c04 	addi	fp,sp,48
    bac0:	e13ffb15 	stw	r4,-20(fp)
    bac4:	e17ffc15 	stw	r5,-16(fp)
    bac8:	e1bffd15 	stw	r6,-12(fp)
    bacc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    bad0:	e0bffc17 	ldw	r2,-16(fp)
    bad4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    bad8:	00004806 	br	bbfc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    badc:	e0bffb17 	ldw	r2,-20(fp)
    bae0:	10800a17 	ldw	r2,40(r2)
    bae4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    bae8:	e0bffb17 	ldw	r2,-20(fp)
    baec:	10800b17 	ldw	r2,44(r2)
    baf0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    baf4:	e0fff717 	ldw	r3,-36(fp)
    baf8:	e0bff617 	ldw	r2,-40(fp)
    bafc:	18800536 	bltu	r3,r2,bb14 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    bb00:	e0bff717 	ldw	r2,-36(fp)
    bb04:	e0fff617 	ldw	r3,-40(fp)
    bb08:	10c5c83a 	sub	r2,r2,r3
    bb0c:	e0bff815 	stw	r2,-32(fp)
    bb10:	00000406 	br	bb24 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    bb14:	00820004 	movi	r2,2048
    bb18:	e0fff617 	ldw	r3,-40(fp)
    bb1c:	10c5c83a 	sub	r2,r2,r3
    bb20:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    bb24:	e0bff817 	ldw	r2,-32(fp)
    bb28:	1005003a 	cmpeq	r2,r2,zero
    bb2c:	10001f1e 	bne	r2,zero,bbac <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    bb30:	e0fffd17 	ldw	r3,-12(fp)
    bb34:	e0bff817 	ldw	r2,-32(fp)
    bb38:	1880022e 	bgeu	r3,r2,bb44 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    bb3c:	e0bffd17 	ldw	r2,-12(fp)
    bb40:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    bb44:	e0bffb17 	ldw	r2,-20(fp)
    bb48:	10c00e04 	addi	r3,r2,56
    bb4c:	e0bff617 	ldw	r2,-40(fp)
    bb50:	1887883a 	add	r3,r3,r2
    bb54:	e0bffa17 	ldw	r2,-24(fp)
    bb58:	1009883a 	mov	r4,r2
    bb5c:	180b883a 	mov	r5,r3
    bb60:	e1bff817 	ldw	r6,-32(fp)
    bb64:	0000cc00 	call	cc0 <memcpy>
      ptr   += n;
    bb68:	e0fff817 	ldw	r3,-32(fp)
    bb6c:	e0bffa17 	ldw	r2,-24(fp)
    bb70:	10c5883a 	add	r2,r2,r3
    bb74:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    bb78:	e0fffd17 	ldw	r3,-12(fp)
    bb7c:	e0bff817 	ldw	r2,-32(fp)
    bb80:	1885c83a 	sub	r2,r3,r2
    bb84:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bb88:	e0fff617 	ldw	r3,-40(fp)
    bb8c:	e0bff817 	ldw	r2,-32(fp)
    bb90:	1885883a 	add	r2,r3,r2
    bb94:	10c1ffcc 	andi	r3,r2,2047
    bb98:	e0bffb17 	ldw	r2,-20(fp)
    bb9c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    bba0:	e0bffd17 	ldw	r2,-12(fp)
    bba4:	10800048 	cmpgei	r2,r2,1
    bba8:	103fcc1e 	bne	r2,zero,badc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    bbac:	e0fffa17 	ldw	r3,-24(fp)
    bbb0:	e0bffc17 	ldw	r2,-16(fp)
    bbb4:	1880141e 	bne	r3,r2,bc08 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    bbb8:	e0bffe17 	ldw	r2,-8(fp)
    bbbc:	1090000c 	andi	r2,r2,16384
    bbc0:	1004c03a 	cmpne	r2,r2,zero
    bbc4:	1000101e 	bne	r2,zero,bc08 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    bbc8:	e0bffb17 	ldw	r2,-20(fp)
    bbcc:	10c00a17 	ldw	r3,40(r2)
    bbd0:	e0bff717 	ldw	r2,-36(fp)
    bbd4:	1880051e 	bne	r3,r2,bbec <altera_avalon_jtag_uart_read+0x13c>
    bbd8:	e0bffb17 	ldw	r2,-20(fp)
    bbdc:	10c00917 	ldw	r3,36(r2)
    bbe0:	e0bffb17 	ldw	r2,-20(fp)
    bbe4:	10800117 	ldw	r2,4(r2)
    bbe8:	18bff736 	bltu	r3,r2,bbc8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    bbec:	e0bffb17 	ldw	r2,-20(fp)
    bbf0:	10c00a17 	ldw	r3,40(r2)
    bbf4:	e0bff717 	ldw	r2,-36(fp)
    bbf8:	18800326 	beq	r3,r2,bc08 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    bbfc:	e0bffd17 	ldw	r2,-12(fp)
    bc00:	10800048 	cmpgei	r2,r2,1
    bc04:	103fb51e 	bne	r2,zero,badc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    bc08:	e0fffa17 	ldw	r3,-24(fp)
    bc0c:	e0bffc17 	ldw	r2,-16(fp)
    bc10:	18801926 	beq	r3,r2,bc78 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bc14:	0005303a 	rdctl	r2,status
    bc18:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bc1c:	e0fff517 	ldw	r3,-44(fp)
    bc20:	00bfff84 	movi	r2,-2
    bc24:	1884703a 	and	r2,r3,r2
    bc28:	1001703a 	wrctl	status,r2
  
  return context;
    bc2c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    bc30:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bc34:	e0bffb17 	ldw	r2,-20(fp)
    bc38:	10800817 	ldw	r2,32(r2)
    bc3c:	10c00054 	ori	r3,r2,1
    bc40:	e0bffb17 	ldw	r2,-20(fp)
    bc44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bc48:	e0bffb17 	ldw	r2,-20(fp)
    bc4c:	10800017 	ldw	r2,0(r2)
    bc50:	11000104 	addi	r4,r2,4
    bc54:	e0bffb17 	ldw	r2,-20(fp)
    bc58:	10800817 	ldw	r2,32(r2)
    bc5c:	1007883a 	mov	r3,r2
    bc60:	2005883a 	mov	r2,r4
    bc64:	10c00035 	stwio	r3,0(r2)
    bc68:	e0bff917 	ldw	r2,-28(fp)
    bc6c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bc70:	e0bff417 	ldw	r2,-48(fp)
    bc74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    bc78:	e0fffa17 	ldw	r3,-24(fp)
    bc7c:	e0bffc17 	ldw	r2,-16(fp)
    bc80:	18800526 	beq	r3,r2,bc98 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    bc84:	e0fffa17 	ldw	r3,-24(fp)
    bc88:	e0bffc17 	ldw	r2,-16(fp)
    bc8c:	1887c83a 	sub	r3,r3,r2
    bc90:	e0ffff15 	stw	r3,-4(fp)
    bc94:	00000906 	br	bcbc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    bc98:	e0bffe17 	ldw	r2,-8(fp)
    bc9c:	1090000c 	andi	r2,r2,16384
    bca0:	1005003a 	cmpeq	r2,r2,zero
    bca4:	1000031e 	bne	r2,zero,bcb4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    bca8:	00bffd44 	movi	r2,-11
    bcac:	e0bfff15 	stw	r2,-4(fp)
    bcb0:	00000206 	br	bcbc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    bcb4:	00bffec4 	movi	r2,-5
    bcb8:	e0bfff15 	stw	r2,-4(fp)
    bcbc:	e0bfff17 	ldw	r2,-4(fp)
}
    bcc0:	e037883a 	mov	sp,fp
    bcc4:	dfc00117 	ldw	ra,4(sp)
    bcc8:	df000017 	ldw	fp,0(sp)
    bccc:	dec00204 	addi	sp,sp,8
    bcd0:	f800283a 	ret

0000bcd4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    bcd4:	defff204 	addi	sp,sp,-56
    bcd8:	dfc00d15 	stw	ra,52(sp)
    bcdc:	df000c15 	stw	fp,48(sp)
    bce0:	df000c04 	addi	fp,sp,48
    bce4:	e13ffb15 	stw	r4,-20(fp)
    bce8:	e17ffc15 	stw	r5,-16(fp)
    bcec:	e1bffd15 	stw	r6,-12(fp)
    bcf0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    bcf4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    bcf8:	e0bffc17 	ldw	r2,-16(fp)
    bcfc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    bd00:	00003a06 	br	bdec <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    bd04:	e0bffb17 	ldw	r2,-20(fp)
    bd08:	10800c17 	ldw	r2,48(r2)
    bd0c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    bd10:	e0bffb17 	ldw	r2,-20(fp)
    bd14:	10800d17 	ldw	r2,52(r2)
    bd18:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    bd1c:	e0fffa17 	ldw	r3,-24(fp)
    bd20:	e0bff917 	ldw	r2,-28(fp)
    bd24:	1880062e 	bgeu	r3,r2,bd40 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    bd28:	e0fff917 	ldw	r3,-28(fp)
    bd2c:	e0bffa17 	ldw	r2,-24(fp)
    bd30:	1885c83a 	sub	r2,r3,r2
    bd34:	10bfffc4 	addi	r2,r2,-1
    bd38:	e0bff815 	stw	r2,-32(fp)
    bd3c:	00000c06 	br	bd70 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    bd40:	e0bff917 	ldw	r2,-28(fp)
    bd44:	1005003a 	cmpeq	r2,r2,zero
    bd48:	1000051e 	bne	r2,zero,bd60 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    bd4c:	00820004 	movi	r2,2048
    bd50:	e0fffa17 	ldw	r3,-24(fp)
    bd54:	10c5c83a 	sub	r2,r2,r3
    bd58:	e0bff815 	stw	r2,-32(fp)
    bd5c:	00000406 	br	bd70 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    bd60:	0081ffc4 	movi	r2,2047
    bd64:	e0fffa17 	ldw	r3,-24(fp)
    bd68:	10c5c83a 	sub	r2,r2,r3
    bd6c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    bd70:	e0bff817 	ldw	r2,-32(fp)
    bd74:	1005003a 	cmpeq	r2,r2,zero
    bd78:	10001f1e 	bne	r2,zero,bdf8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    bd7c:	e0fffd17 	ldw	r3,-12(fp)
    bd80:	e0bff817 	ldw	r2,-32(fp)
    bd84:	1880022e 	bgeu	r3,r2,bd90 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    bd88:	e0bffd17 	ldw	r2,-12(fp)
    bd8c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    bd90:	e0bffb17 	ldw	r2,-20(fp)
    bd94:	10c20e04 	addi	r3,r2,2104
    bd98:	e0bffa17 	ldw	r2,-24(fp)
    bd9c:	1885883a 	add	r2,r3,r2
    bda0:	e0fffc17 	ldw	r3,-16(fp)
    bda4:	1009883a 	mov	r4,r2
    bda8:	180b883a 	mov	r5,r3
    bdac:	e1bff817 	ldw	r6,-32(fp)
    bdb0:	0000cc00 	call	cc0 <memcpy>
      ptr   += n;
    bdb4:	e0fff817 	ldw	r3,-32(fp)
    bdb8:	e0bffc17 	ldw	r2,-16(fp)
    bdbc:	10c5883a 	add	r2,r2,r3
    bdc0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    bdc4:	e0fffd17 	ldw	r3,-12(fp)
    bdc8:	e0bff817 	ldw	r2,-32(fp)
    bdcc:	1885c83a 	sub	r2,r3,r2
    bdd0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bdd4:	e0fffa17 	ldw	r3,-24(fp)
    bdd8:	e0bff817 	ldw	r2,-32(fp)
    bddc:	1885883a 	add	r2,r3,r2
    bde0:	10c1ffcc 	andi	r3,r2,2047
    bde4:	e0bffb17 	ldw	r2,-20(fp)
    bde8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    bdec:	e0bffd17 	ldw	r2,-12(fp)
    bdf0:	10800048 	cmpgei	r2,r2,1
    bdf4:	103fc31e 	bne	r2,zero,bd04 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bdf8:	0005303a 	rdctl	r2,status
    bdfc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    be00:	e0fff517 	ldw	r3,-44(fp)
    be04:	00bfff84 	movi	r2,-2
    be08:	1884703a 	and	r2,r3,r2
    be0c:	1001703a 	wrctl	status,r2
  
  return context;
    be10:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    be14:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    be18:	e0bffb17 	ldw	r2,-20(fp)
    be1c:	10800817 	ldw	r2,32(r2)
    be20:	10c00094 	ori	r3,r2,2
    be24:	e0bffb17 	ldw	r2,-20(fp)
    be28:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    be2c:	e0bffb17 	ldw	r2,-20(fp)
    be30:	10800017 	ldw	r2,0(r2)
    be34:	11000104 	addi	r4,r2,4
    be38:	e0bffb17 	ldw	r2,-20(fp)
    be3c:	10800817 	ldw	r2,32(r2)
    be40:	1007883a 	mov	r3,r2
    be44:	2005883a 	mov	r2,r4
    be48:	10c00035 	stwio	r3,0(r2)
    be4c:	e0bff717 	ldw	r2,-36(fp)
    be50:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    be54:	e0bff417 	ldw	r2,-48(fp)
    be58:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    be5c:	e0bffd17 	ldw	r2,-12(fp)
    be60:	10800050 	cmplti	r2,r2,1
    be64:	1000111e 	bne	r2,zero,beac <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    be68:	e0bffe17 	ldw	r2,-8(fp)
    be6c:	1090000c 	andi	r2,r2,16384
    be70:	1004c03a 	cmpne	r2,r2,zero
    be74:	1000101e 	bne	r2,zero,beb8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    be78:	e0bffb17 	ldw	r2,-20(fp)
    be7c:	10c00d17 	ldw	r3,52(r2)
    be80:	e0bff917 	ldw	r2,-28(fp)
    be84:	1880051e 	bne	r3,r2,be9c <altera_avalon_jtag_uart_write+0x1c8>
    be88:	e0bffb17 	ldw	r2,-20(fp)
    be8c:	10c00917 	ldw	r3,36(r2)
    be90:	e0bffb17 	ldw	r2,-20(fp)
    be94:	10800117 	ldw	r2,4(r2)
    be98:	18bff736 	bltu	r3,r2,be78 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    be9c:	e0bffb17 	ldw	r2,-20(fp)
    bea0:	10c00d17 	ldw	r3,52(r2)
    bea4:	e0bff917 	ldw	r2,-28(fp)
    bea8:	18800326 	beq	r3,r2,beb8 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    beac:	e0bffd17 	ldw	r2,-12(fp)
    beb0:	10800048 	cmpgei	r2,r2,1
    beb4:	103fcd1e 	bne	r2,zero,bdec <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    beb8:	e0fffc17 	ldw	r3,-16(fp)
    bebc:	e0bff617 	ldw	r2,-40(fp)
    bec0:	18800526 	beq	r3,r2,bed8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    bec4:	e0fffc17 	ldw	r3,-16(fp)
    bec8:	e0bff617 	ldw	r2,-40(fp)
    becc:	1887c83a 	sub	r3,r3,r2
    bed0:	e0ffff15 	stw	r3,-4(fp)
    bed4:	00000906 	br	befc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    bed8:	e0bffe17 	ldw	r2,-8(fp)
    bedc:	1090000c 	andi	r2,r2,16384
    bee0:	1005003a 	cmpeq	r2,r2,zero
    bee4:	1000031e 	bne	r2,zero,bef4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    bee8:	00bffd44 	movi	r2,-11
    beec:	e0bfff15 	stw	r2,-4(fp)
    bef0:	00000206 	br	befc <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    bef4:	00bffec4 	movi	r2,-5
    bef8:	e0bfff15 	stw	r2,-4(fp)
    befc:	e0bfff17 	ldw	r2,-4(fp)
}
    bf00:	e037883a 	mov	sp,fp
    bf04:	dfc00117 	ldw	ra,4(sp)
    bf08:	df000017 	ldw	fp,0(sp)
    bf0c:	dec00204 	addi	sp,sp,8
    bf10:	f800283a 	ret

0000bf14 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    bf14:	defffa04 	addi	sp,sp,-24
    bf18:	dfc00515 	stw	ra,20(sp)
    bf1c:	df000415 	stw	fp,16(sp)
    bf20:	df000404 	addi	fp,sp,16
    bf24:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    bf28:	e0bfff17 	ldw	r2,-4(fp)
    bf2c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    bf30:	e0bfff17 	ldw	r2,-4(fp)
    bf34:	10800104 	addi	r2,r2,4
    bf38:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf3c:	0005303a 	rdctl	r2,status
    bf40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf44:	e0fffd17 	ldw	r3,-12(fp)
    bf48:	00bfff84 	movi	r2,-2
    bf4c:	1884703a 	and	r2,r3,r2
    bf50:	1001703a 	wrctl	status,r2
  
  return context;
    bf54:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    bf58:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    bf5c:	000b0e40 	call	b0e4 <alt_tick>
    bf60:	e0bffe17 	ldw	r2,-8(fp)
    bf64:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bf68:	e0bffc17 	ldw	r2,-16(fp)
    bf6c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    bf70:	e037883a 	mov	sp,fp
    bf74:	dfc00117 	ldw	ra,4(sp)
    bf78:	df000017 	ldw	fp,0(sp)
    bf7c:	dec00204 	addi	sp,sp,8
    bf80:	f800283a 	ret

0000bf84 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    bf84:	defff804 	addi	sp,sp,-32
    bf88:	dfc00715 	stw	ra,28(sp)
    bf8c:	df000615 	stw	fp,24(sp)
    bf90:	df000604 	addi	fp,sp,24
    bf94:	e13ffc15 	stw	r4,-16(fp)
    bf98:	e17ffd15 	stw	r5,-12(fp)
    bf9c:	e1bffe15 	stw	r6,-8(fp)
    bfa0:	e1ffff15 	stw	r7,-4(fp)
    bfa4:	e0bfff17 	ldw	r2,-4(fp)
    bfa8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    bfac:	00800074 	movhi	r2,1
    bfb0:	10830704 	addi	r2,r2,3100
    bfb4:	10800017 	ldw	r2,0(r2)
    bfb8:	1004c03a 	cmpne	r2,r2,zero
    bfbc:	1000041e 	bne	r2,zero,bfd0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    bfc0:	00c00074 	movhi	r3,1
    bfc4:	18c30704 	addi	r3,r3,3100
    bfc8:	e0bffb17 	ldw	r2,-20(fp)
    bfcc:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    bfd0:	e0bffc17 	ldw	r2,-16(fp)
    bfd4:	10800104 	addi	r2,r2,4
    bfd8:	1007883a 	mov	r3,r2
    bfdc:	008001c4 	movi	r2,7
    bfe0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    bfe4:	d8000015 	stw	zero,0(sp)
    bfe8:	e13ffd17 	ldw	r4,-12(fp)
    bfec:	e17ffe17 	ldw	r5,-8(fp)
    bff0:	01800074 	movhi	r6,1
    bff4:	31afc504 	addi	r6,r6,-16620
    bff8:	e1fffc17 	ldw	r7,-16(fp)
    bffc:	000c4c00 	call	c4c0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    c000:	e037883a 	mov	sp,fp
    c004:	dfc00117 	ldw	ra,4(sp)
    c008:	df000017 	ldw	fp,0(sp)
    c00c:	dec00204 	addi	sp,sp,8
    c010:	f800283a 	ret

0000c014 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    c014:	defff404 	addi	sp,sp,-48
    c018:	df000b15 	stw	fp,44(sp)
    c01c:	df000b04 	addi	fp,sp,44
    c020:	e13ffb15 	stw	r4,-20(fp)
    c024:	e17ffc15 	stw	r5,-16(fp)
    c028:	e1bffd15 	stw	r6,-12(fp)
    c02c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    c030:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c034:	00800074 	movhi	r2,1
    c038:	10830704 	addi	r2,r2,3100
    c03c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    c040:	1005003a 	cmpeq	r2,r2,zero
    c044:	1000411e 	bne	r2,zero,c14c <alt_alarm_start+0x138>
  {
    if (alarm)
    c048:	e0bffb17 	ldw	r2,-20(fp)
    c04c:	1005003a 	cmpeq	r2,r2,zero
    c050:	10003b1e 	bne	r2,zero,c140 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    c054:	e0fffb17 	ldw	r3,-20(fp)
    c058:	e0bffd17 	ldw	r2,-12(fp)
    c05c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    c060:	e0fffb17 	ldw	r3,-20(fp)
    c064:	e0bffe17 	ldw	r2,-8(fp)
    c068:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c06c:	0005303a 	rdctl	r2,status
    c070:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c074:	e0fff817 	ldw	r3,-32(fp)
    c078:	00bfff84 	movi	r2,-2
    c07c:	1884703a 	and	r2,r3,r2
    c080:	1001703a 	wrctl	status,r2
  
  return context;
    c084:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    c088:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    c08c:	00800074 	movhi	r2,1
    c090:	10830804 	addi	r2,r2,3104
    c094:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    c098:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    c09c:	e0fffc17 	ldw	r3,-16(fp)
    c0a0:	e0bff917 	ldw	r2,-28(fp)
    c0a4:	1885883a 	add	r2,r3,r2
    c0a8:	10c00044 	addi	r3,r2,1
    c0ac:	e0bffb17 	ldw	r2,-20(fp)
    c0b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    c0b4:	e0bffb17 	ldw	r2,-20(fp)
    c0b8:	10c00217 	ldw	r3,8(r2)
    c0bc:	e0bff917 	ldw	r2,-28(fp)
    c0c0:	1880042e 	bgeu	r3,r2,c0d4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    c0c4:	e0fffb17 	ldw	r3,-20(fp)
    c0c8:	00800044 	movi	r2,1
    c0cc:	18800405 	stb	r2,16(r3)
    c0d0:	00000206 	br	c0dc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    c0d4:	e0bffb17 	ldw	r2,-20(fp)
    c0d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    c0dc:	e0fffb17 	ldw	r3,-20(fp)
    c0e0:	00800074 	movhi	r2,1
    c0e4:	10bc6304 	addi	r2,r2,-3700
    c0e8:	e0bff615 	stw	r2,-40(fp)
    c0ec:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c0f0:	e0fff717 	ldw	r3,-36(fp)
    c0f4:	e0bff617 	ldw	r2,-40(fp)
    c0f8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    c0fc:	e0bff617 	ldw	r2,-40(fp)
    c100:	10c00017 	ldw	r3,0(r2)
    c104:	e0bff717 	ldw	r2,-36(fp)
    c108:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c10c:	e0bff617 	ldw	r2,-40(fp)
    c110:	10c00017 	ldw	r3,0(r2)
    c114:	e0bff717 	ldw	r2,-36(fp)
    c118:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    c11c:	e0fff617 	ldw	r3,-40(fp)
    c120:	e0bff717 	ldw	r2,-36(fp)
    c124:	18800015 	stw	r2,0(r3)
    c128:	e0bffa17 	ldw	r2,-24(fp)
    c12c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c130:	e0bff517 	ldw	r2,-44(fp)
    c134:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    c138:	e03fff15 	stw	zero,-4(fp)
    c13c:	00000506 	br	c154 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    c140:	00bffa84 	movi	r2,-22
    c144:	e0bfff15 	stw	r2,-4(fp)
    c148:	00000206 	br	c154 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    c14c:	00bfde84 	movi	r2,-134
    c150:	e0bfff15 	stw	r2,-4(fp)
    c154:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    c158:	e037883a 	mov	sp,fp
    c15c:	df000017 	ldw	fp,0(sp)
    c160:	dec00104 	addi	sp,sp,4
    c164:	f800283a 	ret

0000c168 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    c168:	defffa04 	addi	sp,sp,-24
    c16c:	dfc00515 	stw	ra,20(sp)
    c170:	df000415 	stw	fp,16(sp)
    c174:	df000404 	addi	fp,sp,16
    c178:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    c17c:	008000c4 	movi	r2,3
    c180:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
    c184:	e0fffc17 	ldw	r3,-16(fp)
    c188:	008003f4 	movhi	r2,15
    c18c:	10909004 	addi	r2,r2,16960
    c190:	188b383a 	mul	r5,r3,r2
    c194:	01017db4 	movhi	r4,1526
    c198:	21384004 	addi	r4,r4,-7936
    c19c:	0000cb00 	call	cb0 <__udivsi3>
    c1a0:	100b883a 	mov	r5,r2
    c1a4:	01200034 	movhi	r4,32768
    c1a8:	213fffc4 	addi	r4,r4,-1
    c1ac:	0000cb00 	call	cb0 <__udivsi3>
    c1b0:	100b883a 	mov	r5,r2
    c1b4:	e13fff17 	ldw	r4,-4(fp)
    c1b8:	0000cb00 	call	cb0 <__udivsi3>
    c1bc:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    c1c0:	e0bffd17 	ldw	r2,-12(fp)
    c1c4:	1005003a 	cmpeq	r2,r2,zero
    c1c8:	1000281e 	bne	r2,zero,c26c <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
    c1cc:	e03ffe15 	stw	zero,-8(fp)
    c1d0:	00001606 	br	c22c <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    c1d4:	00a00034 	movhi	r2,32768
    c1d8:	10bfffc4 	addi	r2,r2,-1
    c1dc:	10bfffc4 	addi	r2,r2,-1
    c1e0:	103ffe1e 	bne	r2,zero,c1dc <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    c1e4:	e0fffc17 	ldw	r3,-16(fp)
    c1e8:	008003f4 	movhi	r2,15
    c1ec:	10909004 	addi	r2,r2,16960
    c1f0:	188b383a 	mul	r5,r3,r2
    c1f4:	01017db4 	movhi	r4,1526
    c1f8:	21384004 	addi	r4,r4,-7936
    c1fc:	0000cb00 	call	cb0 <__udivsi3>
    c200:	100b883a 	mov	r5,r2
    c204:	01200034 	movhi	r4,32768
    c208:	213fffc4 	addi	r4,r4,-1
    c20c:	0000cb00 	call	cb0 <__udivsi3>
    c210:	1007883a 	mov	r3,r2
    c214:	e0bfff17 	ldw	r2,-4(fp)
    c218:	10c5c83a 	sub	r2,r2,r3
    c21c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    c220:	e0bffe17 	ldw	r2,-8(fp)
    c224:	10800044 	addi	r2,r2,1
    c228:	e0bffe15 	stw	r2,-8(fp)
    c22c:	e0fffe17 	ldw	r3,-8(fp)
    c230:	e0bffd17 	ldw	r2,-12(fp)
    c234:	18bfe716 	blt	r3,r2,c1d4 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    c238:	e0fffc17 	ldw	r3,-16(fp)
    c23c:	008003f4 	movhi	r2,15
    c240:	10909004 	addi	r2,r2,16960
    c244:	188b383a 	mul	r5,r3,r2
    c248:	01017db4 	movhi	r4,1526
    c24c:	21384004 	addi	r4,r4,-7936
    c250:	0000cb00 	call	cb0 <__udivsi3>
    c254:	1007883a 	mov	r3,r2
    c258:	e0bfff17 	ldw	r2,-4(fp)
    c25c:	1885383a 	mul	r2,r3,r2
    c260:	10bfffc4 	addi	r2,r2,-1
    c264:	103ffe1e 	bne	r2,zero,c260 <alt_busy_sleep+0xf8>
    c268:	00000c06 	br	c29c <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    c26c:	e0fffc17 	ldw	r3,-16(fp)
    c270:	008003f4 	movhi	r2,15
    c274:	10909004 	addi	r2,r2,16960
    c278:	188b383a 	mul	r5,r3,r2
    c27c:	01017db4 	movhi	r4,1526
    c280:	21384004 	addi	r4,r4,-7936
    c284:	0000cb00 	call	cb0 <__udivsi3>
    c288:	1007883a 	mov	r3,r2
    c28c:	e0bfff17 	ldw	r2,-4(fp)
    c290:	1885383a 	mul	r2,r3,r2
    c294:	10bfffc4 	addi	r2,r2,-1
    c298:	00bffe16 	blt	zero,r2,c294 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    c29c:	0005883a 	mov	r2,zero
}
    c2a0:	e037883a 	mov	sp,fp
    c2a4:	dfc00117 	ldw	ra,4(sp)
    c2a8:	df000017 	ldw	fp,0(sp)
    c2ac:	dec00204 	addi	sp,sp,8
    c2b0:	f800283a 	ret

0000c2b4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    c2b4:	defff904 	addi	sp,sp,-28
    c2b8:	dfc00615 	stw	ra,24(sp)
    c2bc:	df000515 	stw	fp,20(sp)
    c2c0:	df000504 	addi	fp,sp,20
    c2c4:	e13ffd15 	stw	r4,-12(fp)
    c2c8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    c2cc:	e0bffd17 	ldw	r2,-12(fp)
    c2d0:	1005003a 	cmpeq	r2,r2,zero
    c2d4:	1000041e 	bne	r2,zero,c2e8 <alt_dev_llist_insert+0x34>
    c2d8:	e0bffd17 	ldw	r2,-12(fp)
    c2dc:	10800217 	ldw	r2,8(r2)
    c2e0:	1004c03a 	cmpne	r2,r2,zero
    c2e4:	1000071e 	bne	r2,zero,c304 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    c2e8:	000c3680 	call	c368 <alt_get_errno>
    c2ec:	1007883a 	mov	r3,r2
    c2f0:	00800584 	movi	r2,22
    c2f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    c2f8:	00bffa84 	movi	r2,-22
    c2fc:	e0bfff15 	stw	r2,-4(fp)
    c300:	00001306 	br	c350 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    c304:	e0fffd17 	ldw	r3,-12(fp)
    c308:	e0bffe17 	ldw	r2,-8(fp)
    c30c:	e0bffb15 	stw	r2,-20(fp)
    c310:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c314:	e0fffc17 	ldw	r3,-16(fp)
    c318:	e0bffb17 	ldw	r2,-20(fp)
    c31c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    c320:	e0bffb17 	ldw	r2,-20(fp)
    c324:	10c00017 	ldw	r3,0(r2)
    c328:	e0bffc17 	ldw	r2,-16(fp)
    c32c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c330:	e0bffb17 	ldw	r2,-20(fp)
    c334:	10c00017 	ldw	r3,0(r2)
    c338:	e0bffc17 	ldw	r2,-16(fp)
    c33c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    c340:	e0fffb17 	ldw	r3,-20(fp)
    c344:	e0bffc17 	ldw	r2,-16(fp)
    c348:	18800015 	stw	r2,0(r3)

  return 0;  
    c34c:	e03fff15 	stw	zero,-4(fp)
    c350:	e0bfff17 	ldw	r2,-4(fp)
}
    c354:	e037883a 	mov	sp,fp
    c358:	dfc00117 	ldw	ra,4(sp)
    c35c:	df000017 	ldw	fp,0(sp)
    c360:	dec00204 	addi	sp,sp,8
    c364:	f800283a 	ret

0000c368 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c368:	defffd04 	addi	sp,sp,-12
    c36c:	dfc00215 	stw	ra,8(sp)
    c370:	df000115 	stw	fp,4(sp)
    c374:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c378:	00800074 	movhi	r2,1
    c37c:	10bc6104 	addi	r2,r2,-3708
    c380:	10800017 	ldw	r2,0(r2)
    c384:	1005003a 	cmpeq	r2,r2,zero
    c388:	1000061e 	bne	r2,zero,c3a4 <alt_get_errno+0x3c>
    c38c:	00800074 	movhi	r2,1
    c390:	10bc6104 	addi	r2,r2,-3708
    c394:	10800017 	ldw	r2,0(r2)
    c398:	103ee83a 	callr	r2
    c39c:	e0bfff15 	stw	r2,-4(fp)
    c3a0:	00000306 	br	c3b0 <alt_get_errno+0x48>
    c3a4:	00800074 	movhi	r2,1
    c3a8:	10830304 	addi	r2,r2,3084
    c3ac:	e0bfff15 	stw	r2,-4(fp)
    c3b0:	e0bfff17 	ldw	r2,-4(fp)
}
    c3b4:	e037883a 	mov	sp,fp
    c3b8:	dfc00117 	ldw	ra,4(sp)
    c3bc:	df000017 	ldw	fp,0(sp)
    c3c0:	dec00204 	addi	sp,sp,8
    c3c4:	f800283a 	ret

0000c3c8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    c3c8:	defffd04 	addi	sp,sp,-12
    c3cc:	dfc00215 	stw	ra,8(sp)
    c3d0:	df000115 	stw	fp,4(sp)
    c3d4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c3d8:	00bfff04 	movi	r2,-4
    c3dc:	00c00074 	movhi	r3,1
    c3e0:	18f4ad04 	addi	r3,r3,-11596
    c3e4:	1885883a 	add	r2,r3,r2
    c3e8:	e0bfff15 	stw	r2,-4(fp)
    c3ec:	00000606 	br	c408 <_do_ctors+0x40>
        (*ctor) (); 
    c3f0:	e0bfff17 	ldw	r2,-4(fp)
    c3f4:	10800017 	ldw	r2,0(r2)
    c3f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c3fc:	e0bfff17 	ldw	r2,-4(fp)
    c400:	10bfff04 	addi	r2,r2,-4
    c404:	e0bfff15 	stw	r2,-4(fp)
    c408:	e0ffff17 	ldw	r3,-4(fp)
    c40c:	00800074 	movhi	r2,1
    c410:	10b4ac04 	addi	r2,r2,-11600
    c414:	18bff62e 	bgeu	r3,r2,c3f0 <_do_ctors+0x28>
        (*ctor) (); 
}
    c418:	e037883a 	mov	sp,fp
    c41c:	dfc00117 	ldw	ra,4(sp)
    c420:	df000017 	ldw	fp,0(sp)
    c424:	dec00204 	addi	sp,sp,8
    c428:	f800283a 	ret

0000c42c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    c42c:	defffd04 	addi	sp,sp,-12
    c430:	dfc00215 	stw	ra,8(sp)
    c434:	df000115 	stw	fp,4(sp)
    c438:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c43c:	00bfff04 	movi	r2,-4
    c440:	00c00074 	movhi	r3,1
    c444:	18f4ad04 	addi	r3,r3,-11596
    c448:	1885883a 	add	r2,r3,r2
    c44c:	e0bfff15 	stw	r2,-4(fp)
    c450:	00000606 	br	c46c <_do_dtors+0x40>
        (*dtor) (); 
    c454:	e0bfff17 	ldw	r2,-4(fp)
    c458:	10800017 	ldw	r2,0(r2)
    c45c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c460:	e0bfff17 	ldw	r2,-4(fp)
    c464:	10bfff04 	addi	r2,r2,-4
    c468:	e0bfff15 	stw	r2,-4(fp)
    c46c:	e0ffff17 	ldw	r3,-4(fp)
    c470:	00800074 	movhi	r2,1
    c474:	10b4ad04 	addi	r2,r2,-11596
    c478:	18bff62e 	bgeu	r3,r2,c454 <_do_dtors+0x28>
        (*dtor) (); 
}
    c47c:	e037883a 	mov	sp,fp
    c480:	dfc00117 	ldw	ra,4(sp)
    c484:	df000017 	ldw	fp,0(sp)
    c488:	dec00204 	addi	sp,sp,8
    c48c:	f800283a 	ret

0000c490 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c490:	defffe04 	addi	sp,sp,-8
    c494:	dfc00115 	stw	ra,4(sp)
    c498:	df000015 	stw	fp,0(sp)
    c49c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    c4a0:	0009883a 	mov	r4,zero
    c4a4:	01440004 	movi	r5,4096
    c4a8:	000ce180 	call	ce18 <alt_icache_flush>
#endif
}
    c4ac:	e037883a 	mov	sp,fp
    c4b0:	dfc00117 	ldw	ra,4(sp)
    c4b4:	df000017 	ldw	fp,0(sp)
    c4b8:	dec00204 	addi	sp,sp,8
    c4bc:	f800283a 	ret

0000c4c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c4c0:	defff904 	addi	sp,sp,-28
    c4c4:	dfc00615 	stw	ra,24(sp)
    c4c8:	df000515 	stw	fp,20(sp)
    c4cc:	df000504 	addi	fp,sp,20
    c4d0:	e13ffc15 	stw	r4,-16(fp)
    c4d4:	e17ffd15 	stw	r5,-12(fp)
    c4d8:	e1bffe15 	stw	r6,-8(fp)
    c4dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    c4e0:	e0800217 	ldw	r2,8(fp)
    c4e4:	d8800015 	stw	r2,0(sp)
    c4e8:	e13ffc17 	ldw	r4,-16(fp)
    c4ec:	e17ffd17 	ldw	r5,-12(fp)
    c4f0:	e1bffe17 	ldw	r6,-8(fp)
    c4f4:	e1ffff17 	ldw	r7,-4(fp)
    c4f8:	000c6940 	call	c694 <alt_iic_isr_register>
}  
    c4fc:	e037883a 	mov	sp,fp
    c500:	dfc00117 	ldw	ra,4(sp)
    c504:	df000017 	ldw	fp,0(sp)
    c508:	dec00204 	addi	sp,sp,8
    c50c:	f800283a 	ret

0000c510 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    c510:	defff904 	addi	sp,sp,-28
    c514:	df000615 	stw	fp,24(sp)
    c518:	df000604 	addi	fp,sp,24
    c51c:	e13ffe15 	stw	r4,-8(fp)
    c520:	e17fff15 	stw	r5,-4(fp)
    c524:	e0bfff17 	ldw	r2,-4(fp)
    c528:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c52c:	0005303a 	rdctl	r2,status
    c530:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c534:	e0fffb17 	ldw	r3,-20(fp)
    c538:	00bfff84 	movi	r2,-2
    c53c:	1884703a 	and	r2,r3,r2
    c540:	1001703a 	wrctl	status,r2
  
  return context;
    c544:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c548:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    c54c:	e0fffc17 	ldw	r3,-16(fp)
    c550:	00800044 	movi	r2,1
    c554:	10c4983a 	sll	r2,r2,r3
    c558:	1007883a 	mov	r3,r2
    c55c:	00800074 	movhi	r2,1
    c560:	10830904 	addi	r2,r2,3108
    c564:	10800017 	ldw	r2,0(r2)
    c568:	1886b03a 	or	r3,r3,r2
    c56c:	00800074 	movhi	r2,1
    c570:	10830904 	addi	r2,r2,3108
    c574:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c578:	00800074 	movhi	r2,1
    c57c:	10830904 	addi	r2,r2,3108
    c580:	10800017 	ldw	r2,0(r2)
    c584:	100170fa 	wrctl	ienable,r2
    c588:	e0bffd17 	ldw	r2,-12(fp)
    c58c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c590:	e0bffa17 	ldw	r2,-24(fp)
    c594:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c598:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    c59c:	e037883a 	mov	sp,fp
    c5a0:	df000017 	ldw	fp,0(sp)
    c5a4:	dec00104 	addi	sp,sp,4
    c5a8:	f800283a 	ret

0000c5ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    c5ac:	defff904 	addi	sp,sp,-28
    c5b0:	df000615 	stw	fp,24(sp)
    c5b4:	df000604 	addi	fp,sp,24
    c5b8:	e13ffe15 	stw	r4,-8(fp)
    c5bc:	e17fff15 	stw	r5,-4(fp)
    c5c0:	e0bfff17 	ldw	r2,-4(fp)
    c5c4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c5c8:	0005303a 	rdctl	r2,status
    c5cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c5d0:	e0fffb17 	ldw	r3,-20(fp)
    c5d4:	00bfff84 	movi	r2,-2
    c5d8:	1884703a 	and	r2,r3,r2
    c5dc:	1001703a 	wrctl	status,r2
  
  return context;
    c5e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c5e4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    c5e8:	e0fffc17 	ldw	r3,-16(fp)
    c5ec:	00800044 	movi	r2,1
    c5f0:	10c4983a 	sll	r2,r2,r3
    c5f4:	0084303a 	nor	r2,zero,r2
    c5f8:	1007883a 	mov	r3,r2
    c5fc:	00800074 	movhi	r2,1
    c600:	10830904 	addi	r2,r2,3108
    c604:	10800017 	ldw	r2,0(r2)
    c608:	1886703a 	and	r3,r3,r2
    c60c:	00800074 	movhi	r2,1
    c610:	10830904 	addi	r2,r2,3108
    c614:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c618:	00800074 	movhi	r2,1
    c61c:	10830904 	addi	r2,r2,3108
    c620:	10800017 	ldw	r2,0(r2)
    c624:	100170fa 	wrctl	ienable,r2
    c628:	e0bffd17 	ldw	r2,-12(fp)
    c62c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c630:	e0bffa17 	ldw	r2,-24(fp)
    c634:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c638:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    c63c:	e037883a 	mov	sp,fp
    c640:	df000017 	ldw	fp,0(sp)
    c644:	dec00104 	addi	sp,sp,4
    c648:	f800283a 	ret

0000c64c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    c64c:	defffc04 	addi	sp,sp,-16
    c650:	df000315 	stw	fp,12(sp)
    c654:	df000304 	addi	fp,sp,12
    c658:	e13ffe15 	stw	r4,-8(fp)
    c65c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    c660:	000530fa 	rdctl	r2,ienable
    c664:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    c668:	e0ffff17 	ldw	r3,-4(fp)
    c66c:	00800044 	movi	r2,1
    c670:	10c4983a 	sll	r2,r2,r3
    c674:	1007883a 	mov	r3,r2
    c678:	e0bffd17 	ldw	r2,-12(fp)
    c67c:	1884703a 	and	r2,r3,r2
    c680:	1004c03a 	cmpne	r2,r2,zero
}
    c684:	e037883a 	mov	sp,fp
    c688:	df000017 	ldw	fp,0(sp)
    c68c:	dec00104 	addi	sp,sp,4
    c690:	f800283a 	ret

0000c694 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c694:	defff404 	addi	sp,sp,-48
    c698:	dfc00b15 	stw	ra,44(sp)
    c69c:	df000a15 	stw	fp,40(sp)
    c6a0:	df000a04 	addi	fp,sp,40
    c6a4:	e13ffb15 	stw	r4,-20(fp)
    c6a8:	e17ffc15 	stw	r5,-16(fp)
    c6ac:	e1bffd15 	stw	r6,-12(fp)
    c6b0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    c6b4:	00bffa84 	movi	r2,-22
    c6b8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    c6bc:	e0bffc17 	ldw	r2,-16(fp)
    c6c0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c6c4:	e0bff917 	ldw	r2,-28(fp)
    c6c8:	10800808 	cmpgei	r2,r2,32
    c6cc:	1000291e 	bne	r2,zero,c774 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c6d0:	0005303a 	rdctl	r2,status
    c6d4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c6d8:	e0fff717 	ldw	r3,-36(fp)
    c6dc:	00bfff84 	movi	r2,-2
    c6e0:	1884703a 	and	r2,r3,r2
    c6e4:	1001703a 	wrctl	status,r2
  
  return context;
    c6e8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    c6ec:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    c6f0:	e0bff917 	ldw	r2,-28(fp)
    c6f4:	00c00074 	movhi	r3,1
    c6f8:	18c31404 	addi	r3,r3,3152
    c6fc:	100490fa 	slli	r2,r2,3
    c700:	10c7883a 	add	r3,r2,r3
    c704:	e0bffd17 	ldw	r2,-12(fp)
    c708:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    c70c:	e0bff917 	ldw	r2,-28(fp)
    c710:	00c00074 	movhi	r3,1
    c714:	18c31404 	addi	r3,r3,3152
    c718:	100490fa 	slli	r2,r2,3
    c71c:	10c5883a 	add	r2,r2,r3
    c720:	10c00104 	addi	r3,r2,4
    c724:	e0bffe17 	ldw	r2,-8(fp)
    c728:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    c72c:	e0bffd17 	ldw	r2,-12(fp)
    c730:	1005003a 	cmpeq	r2,r2,zero
    c734:	1000051e 	bne	r2,zero,c74c <alt_iic_isr_register+0xb8>
    c738:	e17ff917 	ldw	r5,-28(fp)
    c73c:	e13ffb17 	ldw	r4,-20(fp)
    c740:	000c5100 	call	c510 <alt_ic_irq_enable>
    c744:	e0bfff15 	stw	r2,-4(fp)
    c748:	00000406 	br	c75c <alt_iic_isr_register+0xc8>
    c74c:	e17ff917 	ldw	r5,-28(fp)
    c750:	e13ffb17 	ldw	r4,-20(fp)
    c754:	000c5ac0 	call	c5ac <alt_ic_irq_disable>
    c758:	e0bfff15 	stw	r2,-4(fp)
    c75c:	e0bfff17 	ldw	r2,-4(fp)
    c760:	e0bffa15 	stw	r2,-24(fp)
    c764:	e0bff817 	ldw	r2,-32(fp)
    c768:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c76c:	e0bff617 	ldw	r2,-40(fp)
    c770:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    c774:	e0bffa17 	ldw	r2,-24(fp)
}
    c778:	e037883a 	mov	sp,fp
    c77c:	dfc00117 	ldw	ra,4(sp)
    c780:	df000017 	ldw	fp,0(sp)
    c784:	dec00204 	addi	sp,sp,8
    c788:	f800283a 	ret

0000c78c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c78c:	defff904 	addi	sp,sp,-28
    c790:	dfc00615 	stw	ra,24(sp)
    c794:	df000515 	stw	fp,20(sp)
    c798:	df000504 	addi	fp,sp,20
    c79c:	e13ffc15 	stw	r4,-16(fp)
    c7a0:	e17ffd15 	stw	r5,-12(fp)
    c7a4:	e1bffe15 	stw	r6,-8(fp)
    c7a8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c7ac:	e13ffd17 	ldw	r4,-12(fp)
    c7b0:	e17ffe17 	ldw	r5,-8(fp)
    c7b4:	e1bfff17 	ldw	r6,-4(fp)
    c7b8:	000c9a40 	call	c9a4 <open>
    c7bc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c7c0:	e0bffb17 	ldw	r2,-20(fp)
    c7c4:	1004803a 	cmplt	r2,r2,zero
    c7c8:	10001c1e 	bne	r2,zero,c83c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    c7cc:	e0bffb17 	ldw	r2,-20(fp)
    c7d0:	00c00074 	movhi	r3,1
    c7d4:	18f7de04 	addi	r3,r3,-8328
    c7d8:	10800324 	muli	r2,r2,12
    c7dc:	10c5883a 	add	r2,r2,r3
    c7e0:	10c00017 	ldw	r3,0(r2)
    c7e4:	e0bffc17 	ldw	r2,-16(fp)
    c7e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c7ec:	e0bffb17 	ldw	r2,-20(fp)
    c7f0:	00c00074 	movhi	r3,1
    c7f4:	18f7de04 	addi	r3,r3,-8328
    c7f8:	10800324 	muli	r2,r2,12
    c7fc:	10c5883a 	add	r2,r2,r3
    c800:	10800104 	addi	r2,r2,4
    c804:	10c00017 	ldw	r3,0(r2)
    c808:	e0bffc17 	ldw	r2,-16(fp)
    c80c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c810:	e0bffb17 	ldw	r2,-20(fp)
    c814:	00c00074 	movhi	r3,1
    c818:	18f7de04 	addi	r3,r3,-8328
    c81c:	10800324 	muli	r2,r2,12
    c820:	10c5883a 	add	r2,r2,r3
    c824:	10800204 	addi	r2,r2,8
    c828:	10c00017 	ldw	r3,0(r2)
    c82c:	e0bffc17 	ldw	r2,-16(fp)
    c830:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c834:	e13ffb17 	ldw	r4,-20(fp)
    c838:	000af300 	call	af30 <alt_release_fd>
  }
} 
    c83c:	e037883a 	mov	sp,fp
    c840:	dfc00117 	ldw	ra,4(sp)
    c844:	df000017 	ldw	fp,0(sp)
    c848:	dec00204 	addi	sp,sp,8
    c84c:	f800283a 	ret

0000c850 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c850:	defffb04 	addi	sp,sp,-20
    c854:	dfc00415 	stw	ra,16(sp)
    c858:	df000315 	stw	fp,12(sp)
    c85c:	df000304 	addi	fp,sp,12
    c860:	e13ffd15 	stw	r4,-12(fp)
    c864:	e17ffe15 	stw	r5,-8(fp)
    c868:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c86c:	01000074 	movhi	r4,1
    c870:	2137e104 	addi	r4,r4,-8316
    c874:	e17ffd17 	ldw	r5,-12(fp)
    c878:	01800044 	movi	r6,1
    c87c:	01c07fc4 	movi	r7,511
    c880:	000c78c0 	call	c78c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c884:	01000074 	movhi	r4,1
    c888:	2137de04 	addi	r4,r4,-8328
    c88c:	e17ffe17 	ldw	r5,-8(fp)
    c890:	000d883a 	mov	r6,zero
    c894:	01c07fc4 	movi	r7,511
    c898:	000c78c0 	call	c78c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c89c:	01000074 	movhi	r4,1
    c8a0:	2137e404 	addi	r4,r4,-8304
    c8a4:	e17fff17 	ldw	r5,-4(fp)
    c8a8:	01800044 	movi	r6,1
    c8ac:	01c07fc4 	movi	r7,511
    c8b0:	000c78c0 	call	c78c <alt_open_fd>
}  
    c8b4:	e037883a 	mov	sp,fp
    c8b8:	dfc00117 	ldw	ra,4(sp)
    c8bc:	df000017 	ldw	fp,0(sp)
    c8c0:	dec00204 	addi	sp,sp,8
    c8c4:	f800283a 	ret

0000c8c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c8c8:	defffc04 	addi	sp,sp,-16
    c8cc:	df000315 	stw	fp,12(sp)
    c8d0:	df000304 	addi	fp,sp,12
    c8d4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c8d8:	e0bffe17 	ldw	r2,-8(fp)
    c8dc:	10800217 	ldw	r2,8(r2)
    c8e0:	10d00034 	orhi	r3,r2,16384
    c8e4:	e0bffe17 	ldw	r2,-8(fp)
    c8e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c8ec:	e03ffd15 	stw	zero,-12(fp)
    c8f0:	00002006 	br	c974 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c8f4:	e0bffd17 	ldw	r2,-12(fp)
    c8f8:	00c00074 	movhi	r3,1
    c8fc:	18f7de04 	addi	r3,r3,-8328
    c900:	10800324 	muli	r2,r2,12
    c904:	10c5883a 	add	r2,r2,r3
    c908:	10c00017 	ldw	r3,0(r2)
    c90c:	e0bffe17 	ldw	r2,-8(fp)
    c910:	10800017 	ldw	r2,0(r2)
    c914:	1880141e 	bne	r3,r2,c968 <alt_file_locked+0xa0>
    c918:	e0bffd17 	ldw	r2,-12(fp)
    c91c:	00c00074 	movhi	r3,1
    c920:	18f7de04 	addi	r3,r3,-8328
    c924:	10800324 	muli	r2,r2,12
    c928:	10c5883a 	add	r2,r2,r3
    c92c:	10800204 	addi	r2,r2,8
    c930:	10800017 	ldw	r2,0(r2)
    c934:	1004403a 	cmpge	r2,r2,zero
    c938:	10000b1e 	bne	r2,zero,c968 <alt_file_locked+0xa0>
    c93c:	e0bffd17 	ldw	r2,-12(fp)
    c940:	10800324 	muli	r2,r2,12
    c944:	1007883a 	mov	r3,r2
    c948:	00800074 	movhi	r2,1
    c94c:	10b7de04 	addi	r2,r2,-8328
    c950:	1887883a 	add	r3,r3,r2
    c954:	e0bffe17 	ldw	r2,-8(fp)
    c958:	18800326 	beq	r3,r2,c968 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c95c:	00bffcc4 	movi	r2,-13
    c960:	e0bfff15 	stw	r2,-4(fp)
    c964:	00000a06 	br	c990 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c968:	e0bffd17 	ldw	r2,-12(fp)
    c96c:	10800044 	addi	r2,r2,1
    c970:	e0bffd15 	stw	r2,-12(fp)
    c974:	00800074 	movhi	r2,1
    c978:	10bc6004 	addi	r2,r2,-3712
    c97c:	10800017 	ldw	r2,0(r2)
    c980:	1007883a 	mov	r3,r2
    c984:	e0bffd17 	ldw	r2,-12(fp)
    c988:	18bfda2e 	bgeu	r3,r2,c8f4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c98c:	e03fff15 	stw	zero,-4(fp)
    c990:	e0bfff17 	ldw	r2,-4(fp)
}
    c994:	e037883a 	mov	sp,fp
    c998:	df000017 	ldw	fp,0(sp)
    c99c:	dec00104 	addi	sp,sp,4
    c9a0:	f800283a 	ret

0000c9a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c9a4:	defff404 	addi	sp,sp,-48
    c9a8:	dfc00b15 	stw	ra,44(sp)
    c9ac:	df000a15 	stw	fp,40(sp)
    c9b0:	df000a04 	addi	fp,sp,40
    c9b4:	e13ffb15 	stw	r4,-20(fp)
    c9b8:	e17ffc15 	stw	r5,-16(fp)
    c9bc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c9c0:	00bfffc4 	movi	r2,-1
    c9c4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    c9c8:	00bffb44 	movi	r2,-19
    c9cc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    c9d0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c9d4:	e13ffb17 	ldw	r4,-20(fp)
    c9d8:	01400074 	movhi	r5,1
    c9dc:	297c5e04 	addi	r5,r5,-3720
    c9e0:	000cbac0 	call	cbac <alt_find_dev>
    c9e4:	e0bffa15 	stw	r2,-24(fp)
    c9e8:	e0bffa17 	ldw	r2,-24(fp)
    c9ec:	1004c03a 	cmpne	r2,r2,zero
    c9f0:	1000051e 	bne	r2,zero,ca08 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c9f4:	e13ffb17 	ldw	r4,-20(fp)
    c9f8:	000cc400 	call	cc40 <alt_find_file>
    c9fc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    ca00:	00800044 	movi	r2,1
    ca04:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    ca08:	e0bffa17 	ldw	r2,-24(fp)
    ca0c:	1005003a 	cmpeq	r2,r2,zero
    ca10:	1000301e 	bne	r2,zero,cad4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    ca14:	e13ffa17 	ldw	r4,-24(fp)
    ca18:	000cd600 	call	cd60 <alt_get_fd>
    ca1c:	e0bff815 	stw	r2,-32(fp)
    ca20:	e0bff817 	ldw	r2,-32(fp)
    ca24:	1004403a 	cmpge	r2,r2,zero
    ca28:	1000031e 	bne	r2,zero,ca38 <open+0x94>
    {
      status = index;
    ca2c:	e0bff817 	ldw	r2,-32(fp)
    ca30:	e0bff715 	stw	r2,-36(fp)
    ca34:	00002906 	br	cadc <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    ca38:	e0bff817 	ldw	r2,-32(fp)
    ca3c:	10800324 	muli	r2,r2,12
    ca40:	1007883a 	mov	r3,r2
    ca44:	00800074 	movhi	r2,1
    ca48:	10b7de04 	addi	r2,r2,-8328
    ca4c:	1885883a 	add	r2,r3,r2
    ca50:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    ca54:	e0fffc17 	ldw	r3,-16(fp)
    ca58:	00900034 	movhi	r2,16384
    ca5c:	10bfffc4 	addi	r2,r2,-1
    ca60:	1886703a 	and	r3,r3,r2
    ca64:	e0bff917 	ldw	r2,-28(fp)
    ca68:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    ca6c:	e0bff617 	ldw	r2,-40(fp)
    ca70:	1004c03a 	cmpne	r2,r2,zero
    ca74:	1000061e 	bne	r2,zero,ca90 <open+0xec>
    ca78:	e13ff917 	ldw	r4,-28(fp)
    ca7c:	000c8c80 	call	c8c8 <alt_file_locked>
    ca80:	e0bff715 	stw	r2,-36(fp)
    ca84:	e0bff717 	ldw	r2,-36(fp)
    ca88:	1004803a 	cmplt	r2,r2,zero
    ca8c:	1000131e 	bne	r2,zero,cadc <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    ca90:	e0bffa17 	ldw	r2,-24(fp)
    ca94:	10800317 	ldw	r2,12(r2)
    ca98:	1005003a 	cmpeq	r2,r2,zero
    ca9c:	1000091e 	bne	r2,zero,cac4 <open+0x120>
    caa0:	e0bffa17 	ldw	r2,-24(fp)
    caa4:	10800317 	ldw	r2,12(r2)
    caa8:	e13ff917 	ldw	r4,-28(fp)
    caac:	e17ffb17 	ldw	r5,-20(fp)
    cab0:	e1bffc17 	ldw	r6,-16(fp)
    cab4:	e1fffd17 	ldw	r7,-12(fp)
    cab8:	103ee83a 	callr	r2
    cabc:	e0bfff15 	stw	r2,-4(fp)
    cac0:	00000106 	br	cac8 <open+0x124>
    cac4:	e03fff15 	stw	zero,-4(fp)
    cac8:	e0bfff17 	ldw	r2,-4(fp)
    cacc:	e0bff715 	stw	r2,-36(fp)
    cad0:	00000206 	br	cadc <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    cad4:	00bffb44 	movi	r2,-19
    cad8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    cadc:	e0bff717 	ldw	r2,-36(fp)
    cae0:	1004403a 	cmpge	r2,r2,zero
    cae4:	1000091e 	bne	r2,zero,cb0c <open+0x168>
  {
    alt_release_fd (index);  
    cae8:	e13ff817 	ldw	r4,-32(fp)
    caec:	000af300 	call	af30 <alt_release_fd>
    ALT_ERRNO = -status;
    caf0:	000cb2c0 	call	cb2c <alt_get_errno>
    caf4:	e0fff717 	ldw	r3,-36(fp)
    caf8:	00c7c83a 	sub	r3,zero,r3
    cafc:	10c00015 	stw	r3,0(r2)
    return -1;
    cb00:	00bfffc4 	movi	r2,-1
    cb04:	e0bffe15 	stw	r2,-8(fp)
    cb08:	00000206 	br	cb14 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    cb0c:	e0bff817 	ldw	r2,-32(fp)
    cb10:	e0bffe15 	stw	r2,-8(fp)
    cb14:	e0bffe17 	ldw	r2,-8(fp)
}
    cb18:	e037883a 	mov	sp,fp
    cb1c:	dfc00117 	ldw	ra,4(sp)
    cb20:	df000017 	ldw	fp,0(sp)
    cb24:	dec00204 	addi	sp,sp,8
    cb28:	f800283a 	ret

0000cb2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cb2c:	defffd04 	addi	sp,sp,-12
    cb30:	dfc00215 	stw	ra,8(sp)
    cb34:	df000115 	stw	fp,4(sp)
    cb38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    cb3c:	00800074 	movhi	r2,1
    cb40:	10bc6104 	addi	r2,r2,-3708
    cb44:	10800017 	ldw	r2,0(r2)
    cb48:	1005003a 	cmpeq	r2,r2,zero
    cb4c:	1000061e 	bne	r2,zero,cb68 <alt_get_errno+0x3c>
    cb50:	00800074 	movhi	r2,1
    cb54:	10bc6104 	addi	r2,r2,-3708
    cb58:	10800017 	ldw	r2,0(r2)
    cb5c:	103ee83a 	callr	r2
    cb60:	e0bfff15 	stw	r2,-4(fp)
    cb64:	00000306 	br	cb74 <alt_get_errno+0x48>
    cb68:	00800074 	movhi	r2,1
    cb6c:	10830304 	addi	r2,r2,3084
    cb70:	e0bfff15 	stw	r2,-4(fp)
    cb74:	e0bfff17 	ldw	r2,-4(fp)
}
    cb78:	e037883a 	mov	sp,fp
    cb7c:	dfc00117 	ldw	ra,4(sp)
    cb80:	df000017 	ldw	fp,0(sp)
    cb84:	dec00204 	addi	sp,sp,8
    cb88:	f800283a 	ret

0000cb8c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    cb8c:	deffff04 	addi	sp,sp,-4
    cb90:	df000015 	stw	fp,0(sp)
    cb94:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    cb98:	000170fa 	wrctl	ienable,zero
}
    cb9c:	e037883a 	mov	sp,fp
    cba0:	df000017 	ldw	fp,0(sp)
    cba4:	dec00104 	addi	sp,sp,4
    cba8:	f800283a 	ret

0000cbac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    cbac:	defff904 	addi	sp,sp,-28
    cbb0:	dfc00615 	stw	ra,24(sp)
    cbb4:	df000515 	stw	fp,20(sp)
    cbb8:	df000504 	addi	fp,sp,20
    cbbc:	e13ffd15 	stw	r4,-12(fp)
    cbc0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    cbc4:	e0bffe17 	ldw	r2,-8(fp)
    cbc8:	10800017 	ldw	r2,0(r2)
    cbcc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    cbd0:	e13ffd17 	ldw	r4,-12(fp)
    cbd4:	0000f440 	call	f44 <strlen>
    cbd8:	10800044 	addi	r2,r2,1
    cbdc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    cbe0:	00000d06 	br	cc18 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    cbe4:	e0bffc17 	ldw	r2,-16(fp)
    cbe8:	11000217 	ldw	r4,8(r2)
    cbec:	e1bffb17 	ldw	r6,-20(fp)
    cbf0:	e17ffd17 	ldw	r5,-12(fp)
    cbf4:	000cef40 	call	cef4 <memcmp>
    cbf8:	1004c03a 	cmpne	r2,r2,zero
    cbfc:	1000031e 	bne	r2,zero,cc0c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    cc00:	e0bffc17 	ldw	r2,-16(fp)
    cc04:	e0bfff15 	stw	r2,-4(fp)
    cc08:	00000706 	br	cc28 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    cc0c:	e0bffc17 	ldw	r2,-16(fp)
    cc10:	10800017 	ldw	r2,0(r2)
    cc14:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    cc18:	e0fffe17 	ldw	r3,-8(fp)
    cc1c:	e0bffc17 	ldw	r2,-16(fp)
    cc20:	10fff01e 	bne	r2,r3,cbe4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    cc24:	e03fff15 	stw	zero,-4(fp)
    cc28:	e0bfff17 	ldw	r2,-4(fp)
}
    cc2c:	e037883a 	mov	sp,fp
    cc30:	dfc00117 	ldw	ra,4(sp)
    cc34:	df000017 	ldw	fp,0(sp)
    cc38:	dec00204 	addi	sp,sp,8
    cc3c:	f800283a 	ret

0000cc40 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    cc40:	defffa04 	addi	sp,sp,-24
    cc44:	dfc00515 	stw	ra,20(sp)
    cc48:	df000415 	stw	fp,16(sp)
    cc4c:	df000404 	addi	fp,sp,16
    cc50:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    cc54:	00800074 	movhi	r2,1
    cc58:	10bc5c04 	addi	r2,r2,-3728
    cc5c:	10800017 	ldw	r2,0(r2)
    cc60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    cc64:	00003306 	br	cd34 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    cc68:	e0bffd17 	ldw	r2,-12(fp)
    cc6c:	11000217 	ldw	r4,8(r2)
    cc70:	0000f440 	call	f44 <strlen>
    cc74:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    cc78:	e0bffd17 	ldw	r2,-12(fp)
    cc7c:	10c00217 	ldw	r3,8(r2)
    cc80:	e0bffc17 	ldw	r2,-16(fp)
    cc84:	1885883a 	add	r2,r3,r2
    cc88:	10bfffc4 	addi	r2,r2,-1
    cc8c:	10800003 	ldbu	r2,0(r2)
    cc90:	10803fcc 	andi	r2,r2,255
    cc94:	1080201c 	xori	r2,r2,128
    cc98:	10bfe004 	addi	r2,r2,-128
    cc9c:	10800bd8 	cmpnei	r2,r2,47
    cca0:	1000031e 	bne	r2,zero,ccb0 <alt_find_file+0x70>
    {
      len -= 1;
    cca4:	e0bffc17 	ldw	r2,-16(fp)
    cca8:	10bfffc4 	addi	r2,r2,-1
    ccac:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ccb0:	e0bffc17 	ldw	r2,-16(fp)
    ccb4:	1007883a 	mov	r3,r2
    ccb8:	e0bffe17 	ldw	r2,-8(fp)
    ccbc:	1885883a 	add	r2,r3,r2
    ccc0:	10800003 	ldbu	r2,0(r2)
    ccc4:	10803fcc 	andi	r2,r2,255
    ccc8:	1080201c 	xori	r2,r2,128
    cccc:	10bfe004 	addi	r2,r2,-128
    ccd0:	10800be0 	cmpeqi	r2,r2,47
    ccd4:	10000a1e 	bne	r2,zero,cd00 <alt_find_file+0xc0>
    ccd8:	e0bffc17 	ldw	r2,-16(fp)
    ccdc:	1007883a 	mov	r3,r2
    cce0:	e0bffe17 	ldw	r2,-8(fp)
    cce4:	1885883a 	add	r2,r3,r2
    cce8:	10800003 	ldbu	r2,0(r2)
    ccec:	10803fcc 	andi	r2,r2,255
    ccf0:	1080201c 	xori	r2,r2,128
    ccf4:	10bfe004 	addi	r2,r2,-128
    ccf8:	1004c03a 	cmpne	r2,r2,zero
    ccfc:	10000a1e 	bne	r2,zero,cd28 <alt_find_file+0xe8>
    cd00:	e0bffd17 	ldw	r2,-12(fp)
    cd04:	11000217 	ldw	r4,8(r2)
    cd08:	e1bffc17 	ldw	r6,-16(fp)
    cd0c:	e17ffe17 	ldw	r5,-8(fp)
    cd10:	000cef40 	call	cef4 <memcmp>
    cd14:	1004c03a 	cmpne	r2,r2,zero
    cd18:	1000031e 	bne	r2,zero,cd28 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    cd1c:	e0bffd17 	ldw	r2,-12(fp)
    cd20:	e0bfff15 	stw	r2,-4(fp)
    cd24:	00000806 	br	cd48 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    cd28:	e0bffd17 	ldw	r2,-12(fp)
    cd2c:	10800017 	ldw	r2,0(r2)
    cd30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    cd34:	00c00074 	movhi	r3,1
    cd38:	18fc5c04 	addi	r3,r3,-3728
    cd3c:	e0bffd17 	ldw	r2,-12(fp)
    cd40:	10ffc91e 	bne	r2,r3,cc68 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    cd44:	e03fff15 	stw	zero,-4(fp)
    cd48:	e0bfff17 	ldw	r2,-4(fp)
}
    cd4c:	e037883a 	mov	sp,fp
    cd50:	dfc00117 	ldw	ra,4(sp)
    cd54:	df000017 	ldw	fp,0(sp)
    cd58:	dec00204 	addi	sp,sp,8
    cd5c:	f800283a 	ret

0000cd60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    cd60:	defffc04 	addi	sp,sp,-16
    cd64:	df000315 	stw	fp,12(sp)
    cd68:	df000304 	addi	fp,sp,12
    cd6c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    cd70:	00bffa04 	movi	r2,-24
    cd74:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cd78:	e03ffe15 	stw	zero,-8(fp)
    cd7c:	00001e06 	br	cdf8 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    cd80:	e0bffe17 	ldw	r2,-8(fp)
    cd84:	00c00074 	movhi	r3,1
    cd88:	18f7de04 	addi	r3,r3,-8328
    cd8c:	10800324 	muli	r2,r2,12
    cd90:	10c5883a 	add	r2,r2,r3
    cd94:	10800017 	ldw	r2,0(r2)
    cd98:	1004c03a 	cmpne	r2,r2,zero
    cd9c:	1000131e 	bne	r2,zero,cdec <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    cda0:	e0bffe17 	ldw	r2,-8(fp)
    cda4:	00c00074 	movhi	r3,1
    cda8:	18f7de04 	addi	r3,r3,-8328
    cdac:	10800324 	muli	r2,r2,12
    cdb0:	10c7883a 	add	r3,r2,r3
    cdb4:	e0bfff17 	ldw	r2,-4(fp)
    cdb8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    cdbc:	00800074 	movhi	r2,1
    cdc0:	10bc6004 	addi	r2,r2,-3712
    cdc4:	10c00017 	ldw	r3,0(r2)
    cdc8:	e0bffe17 	ldw	r2,-8(fp)
    cdcc:	1880040e 	bge	r3,r2,cde0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    cdd0:	00c00074 	movhi	r3,1
    cdd4:	18fc6004 	addi	r3,r3,-3712
    cdd8:	e0bffe17 	ldw	r2,-8(fp)
    cddc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    cde0:	e0bffe17 	ldw	r2,-8(fp)
    cde4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    cde8:	00000606 	br	ce04 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cdec:	e0bffe17 	ldw	r2,-8(fp)
    cdf0:	10800044 	addi	r2,r2,1
    cdf4:	e0bffe15 	stw	r2,-8(fp)
    cdf8:	e0bffe17 	ldw	r2,-8(fp)
    cdfc:	10800810 	cmplti	r2,r2,32
    ce00:	103fdf1e 	bne	r2,zero,cd80 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    ce04:	e0bffd17 	ldw	r2,-12(fp)
}
    ce08:	e037883a 	mov	sp,fp
    ce0c:	df000017 	ldw	fp,0(sp)
    ce10:	dec00104 	addi	sp,sp,4
    ce14:	f800283a 	ret

0000ce18 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    ce18:	defffb04 	addi	sp,sp,-20
    ce1c:	df000415 	stw	fp,16(sp)
    ce20:	df000404 	addi	fp,sp,16
    ce24:	e13ffe15 	stw	r4,-8(fp)
    ce28:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    ce2c:	e0bfff17 	ldw	r2,-4(fp)
    ce30:	10840070 	cmpltui	r2,r2,4097
    ce34:	1000021e 	bne	r2,zero,ce40 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    ce38:	00840004 	movi	r2,4096
    ce3c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    ce40:	e0fffe17 	ldw	r3,-8(fp)
    ce44:	e0bfff17 	ldw	r2,-4(fp)
    ce48:	1885883a 	add	r2,r3,r2
    ce4c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    ce50:	e0bffe17 	ldw	r2,-8(fp)
    ce54:	e0bffd15 	stw	r2,-12(fp)
    ce58:	00000506 	br	ce70 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    ce5c:	e0bffd17 	ldw	r2,-12(fp)
    ce60:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    ce64:	e0bffd17 	ldw	r2,-12(fp)
    ce68:	10800804 	addi	r2,r2,32
    ce6c:	e0bffd15 	stw	r2,-12(fp)
    ce70:	e0fffd17 	ldw	r3,-12(fp)
    ce74:	e0bffc17 	ldw	r2,-16(fp)
    ce78:	18bff836 	bltu	r3,r2,ce5c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    ce7c:	e0bffe17 	ldw	r2,-8(fp)
    ce80:	108007cc 	andi	r2,r2,31
    ce84:	1005003a 	cmpeq	r2,r2,zero
    ce88:	1000021e 	bne	r2,zero,ce94 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    ce8c:	e0bffd17 	ldw	r2,-12(fp)
    ce90:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    ce94:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    ce98:	e037883a 	mov	sp,fp
    ce9c:	df000017 	ldw	fp,0(sp)
    cea0:	dec00104 	addi	sp,sp,4
    cea4:	f800283a 	ret

0000cea8 <atexit>:
    cea8:	200b883a 	mov	r5,r4
    ceac:	000d883a 	mov	r6,zero
    ceb0:	0009883a 	mov	r4,zero
    ceb4:	000f883a 	mov	r7,zero
    ceb8:	000cf681 	jmpi	cf68 <__register_exitproc>

0000cebc <exit>:
    cebc:	defffe04 	addi	sp,sp,-8
    cec0:	000b883a 	mov	r5,zero
    cec4:	dc000015 	stw	r16,0(sp)
    cec8:	dfc00115 	stw	ra,4(sp)
    cecc:	2021883a 	mov	r16,r4
    ced0:	000d0a00 	call	d0a0 <__call_exitprocs>
    ced4:	00800074 	movhi	r2,1
    ced8:	10bc5704 	addi	r2,r2,-3748
    cedc:	11000017 	ldw	r4,0(r2)
    cee0:	20800f17 	ldw	r2,60(r4)
    cee4:	10000126 	beq	r2,zero,ceec <exit+0x30>
    cee8:	103ee83a 	callr	r2
    ceec:	8009883a 	mov	r4,r16
    cef0:	000d2900 	call	d290 <_exit>

0000cef4 <memcmp>:
    cef4:	00c000c4 	movi	r3,3
    cef8:	1980032e 	bgeu	r3,r6,cf08 <memcmp+0x14>
    cefc:	2144b03a 	or	r2,r4,r5
    cf00:	10c4703a 	and	r2,r2,r3
    cf04:	10000f26 	beq	r2,zero,cf44 <memcmp+0x50>
    cf08:	31ffffc4 	addi	r7,r6,-1
    cf0c:	3000061e 	bne	r6,zero,cf28 <memcmp+0x34>
    cf10:	00000a06 	br	cf3c <memcmp+0x48>
    cf14:	39ffffc4 	addi	r7,r7,-1
    cf18:	00bfffc4 	movi	r2,-1
    cf1c:	21000044 	addi	r4,r4,1
    cf20:	29400044 	addi	r5,r5,1
    cf24:	38800526 	beq	r7,r2,cf3c <memcmp+0x48>
    cf28:	20c00003 	ldbu	r3,0(r4)
    cf2c:	28800003 	ldbu	r2,0(r5)
    cf30:	18bff826 	beq	r3,r2,cf14 <memcmp+0x20>
    cf34:	1885c83a 	sub	r2,r3,r2
    cf38:	f800283a 	ret
    cf3c:	0005883a 	mov	r2,zero
    cf40:	f800283a 	ret
    cf44:	180f883a 	mov	r7,r3
    cf48:	20c00017 	ldw	r3,0(r4)
    cf4c:	28800017 	ldw	r2,0(r5)
    cf50:	18bfed1e 	bne	r3,r2,cf08 <memcmp+0x14>
    cf54:	31bfff04 	addi	r6,r6,-4
    cf58:	21000104 	addi	r4,r4,4
    cf5c:	29400104 	addi	r5,r5,4
    cf60:	39bff936 	bltu	r7,r6,cf48 <memcmp+0x54>
    cf64:	003fe806 	br	cf08 <memcmp+0x14>

0000cf68 <__register_exitproc>:
    cf68:	defffa04 	addi	sp,sp,-24
    cf6c:	00800074 	movhi	r2,1
    cf70:	10bc5704 	addi	r2,r2,-3748
    cf74:	dc000015 	stw	r16,0(sp)
    cf78:	14000017 	ldw	r16,0(r2)
    cf7c:	dd000415 	stw	r20,16(sp)
    cf80:	2829883a 	mov	r20,r5
    cf84:	81405217 	ldw	r5,328(r16)
    cf88:	dcc00315 	stw	r19,12(sp)
    cf8c:	dc800215 	stw	r18,8(sp)
    cf90:	dc400115 	stw	r17,4(sp)
    cf94:	dfc00515 	stw	ra,20(sp)
    cf98:	2023883a 	mov	r17,r4
    cf9c:	3027883a 	mov	r19,r6
    cfa0:	3825883a 	mov	r18,r7
    cfa4:	28002526 	beq	r5,zero,d03c <__register_exitproc+0xd4>
    cfa8:	29000117 	ldw	r4,4(r5)
    cfac:	008007c4 	movi	r2,31
    cfb0:	11002716 	blt	r2,r4,d050 <__register_exitproc+0xe8>
    cfb4:	8800101e 	bne	r17,zero,cff8 <__register_exitproc+0x90>
    cfb8:	2105883a 	add	r2,r4,r4
    cfbc:	1085883a 	add	r2,r2,r2
    cfc0:	20c00044 	addi	r3,r4,1
    cfc4:	1145883a 	add	r2,r2,r5
    cfc8:	0009883a 	mov	r4,zero
    cfcc:	15000215 	stw	r20,8(r2)
    cfd0:	28c00115 	stw	r3,4(r5)
    cfd4:	2005883a 	mov	r2,r4
    cfd8:	dfc00517 	ldw	ra,20(sp)
    cfdc:	dd000417 	ldw	r20,16(sp)
    cfe0:	dcc00317 	ldw	r19,12(sp)
    cfe4:	dc800217 	ldw	r18,8(sp)
    cfe8:	dc400117 	ldw	r17,4(sp)
    cfec:	dc000017 	ldw	r16,0(sp)
    cff0:	dec00604 	addi	sp,sp,24
    cff4:	f800283a 	ret
    cff8:	29802204 	addi	r6,r5,136
    cffc:	00800044 	movi	r2,1
    d000:	110e983a 	sll	r7,r2,r4
    d004:	30c04017 	ldw	r3,256(r6)
    d008:	2105883a 	add	r2,r4,r4
    d00c:	1085883a 	add	r2,r2,r2
    d010:	1185883a 	add	r2,r2,r6
    d014:	19c6b03a 	or	r3,r3,r7
    d018:	14802015 	stw	r18,128(r2)
    d01c:	14c00015 	stw	r19,0(r2)
    d020:	00800084 	movi	r2,2
    d024:	30c04015 	stw	r3,256(r6)
    d028:	88bfe31e 	bne	r17,r2,cfb8 <__register_exitproc+0x50>
    d02c:	30804117 	ldw	r2,260(r6)
    d030:	11c4b03a 	or	r2,r2,r7
    d034:	30804115 	stw	r2,260(r6)
    d038:	003fdf06 	br	cfb8 <__register_exitproc+0x50>
    d03c:	00800074 	movhi	r2,1
    d040:	10835404 	addi	r2,r2,3408
    d044:	100b883a 	mov	r5,r2
    d048:	80805215 	stw	r2,328(r16)
    d04c:	003fd606 	br	cfa8 <__register_exitproc+0x40>
    d050:	00800034 	movhi	r2,0
    d054:	10800004 	addi	r2,r2,0
    d058:	1000021e 	bne	r2,zero,d064 <__register_exitproc+0xfc>
    d05c:	013fffc4 	movi	r4,-1
    d060:	003fdc06 	br	cfd4 <__register_exitproc+0x6c>
    d064:	01006404 	movi	r4,400
    d068:	103ee83a 	callr	r2
    d06c:	1007883a 	mov	r3,r2
    d070:	103ffa26 	beq	r2,zero,d05c <__register_exitproc+0xf4>
    d074:	80805217 	ldw	r2,328(r16)
    d078:	180b883a 	mov	r5,r3
    d07c:	18000115 	stw	zero,4(r3)
    d080:	18800015 	stw	r2,0(r3)
    d084:	80c05215 	stw	r3,328(r16)
    d088:	18006215 	stw	zero,392(r3)
    d08c:	18006315 	stw	zero,396(r3)
    d090:	0009883a 	mov	r4,zero
    d094:	883fc826 	beq	r17,zero,cfb8 <__register_exitproc+0x50>
    d098:	003fd706 	br	cff8 <__register_exitproc+0x90>

0000d09c <register_fini>:
    d09c:	f800283a 	ret

0000d0a0 <__call_exitprocs>:
    d0a0:	00800074 	movhi	r2,1
    d0a4:	10bc5704 	addi	r2,r2,-3748
    d0a8:	10800017 	ldw	r2,0(r2)
    d0ac:	defff304 	addi	sp,sp,-52
    d0b0:	df000b15 	stw	fp,44(sp)
    d0b4:	d8800115 	stw	r2,4(sp)
    d0b8:	00800034 	movhi	r2,0
    d0bc:	10800004 	addi	r2,r2,0
    d0c0:	1005003a 	cmpeq	r2,r2,zero
    d0c4:	d8800215 	stw	r2,8(sp)
    d0c8:	d8800117 	ldw	r2,4(sp)
    d0cc:	dd400815 	stw	r21,32(sp)
    d0d0:	dd000715 	stw	r20,28(sp)
    d0d4:	10805204 	addi	r2,r2,328
    d0d8:	dfc00c15 	stw	ra,48(sp)
    d0dc:	ddc00a15 	stw	r23,40(sp)
    d0e0:	dd800915 	stw	r22,36(sp)
    d0e4:	dcc00615 	stw	r19,24(sp)
    d0e8:	dc800515 	stw	r18,20(sp)
    d0ec:	dc400415 	stw	r17,16(sp)
    d0f0:	dc000315 	stw	r16,12(sp)
    d0f4:	282b883a 	mov	r21,r5
    d0f8:	2039883a 	mov	fp,r4
    d0fc:	d8800015 	stw	r2,0(sp)
    d100:	2829003a 	cmpeq	r20,r5,zero
    d104:	d8800117 	ldw	r2,4(sp)
    d108:	14405217 	ldw	r17,328(r2)
    d10c:	88001026 	beq	r17,zero,d150 <__call_exitprocs+0xb0>
    d110:	ddc00017 	ldw	r23,0(sp)
    d114:	88800117 	ldw	r2,4(r17)
    d118:	8c802204 	addi	r18,r17,136
    d11c:	143fffc4 	addi	r16,r2,-1
    d120:	80000916 	blt	r16,zero,d148 <__call_exitprocs+0xa8>
    d124:	05bfffc4 	movi	r22,-1
    d128:	a000151e 	bne	r20,zero,d180 <__call_exitprocs+0xe0>
    d12c:	8409883a 	add	r4,r16,r16
    d130:	2105883a 	add	r2,r4,r4
    d134:	1485883a 	add	r2,r2,r18
    d138:	10c02017 	ldw	r3,128(r2)
    d13c:	a8c01126 	beq	r21,r3,d184 <__call_exitprocs+0xe4>
    d140:	843fffc4 	addi	r16,r16,-1
    d144:	85bff81e 	bne	r16,r22,d128 <__call_exitprocs+0x88>
    d148:	d8800217 	ldw	r2,8(sp)
    d14c:	10003126 	beq	r2,zero,d214 <__call_exitprocs+0x174>
    d150:	dfc00c17 	ldw	ra,48(sp)
    d154:	df000b17 	ldw	fp,44(sp)
    d158:	ddc00a17 	ldw	r23,40(sp)
    d15c:	dd800917 	ldw	r22,36(sp)
    d160:	dd400817 	ldw	r21,32(sp)
    d164:	dd000717 	ldw	r20,28(sp)
    d168:	dcc00617 	ldw	r19,24(sp)
    d16c:	dc800517 	ldw	r18,20(sp)
    d170:	dc400417 	ldw	r17,16(sp)
    d174:	dc000317 	ldw	r16,12(sp)
    d178:	dec00d04 	addi	sp,sp,52
    d17c:	f800283a 	ret
    d180:	8409883a 	add	r4,r16,r16
    d184:	88c00117 	ldw	r3,4(r17)
    d188:	2105883a 	add	r2,r4,r4
    d18c:	1445883a 	add	r2,r2,r17
    d190:	18ffffc4 	addi	r3,r3,-1
    d194:	11800217 	ldw	r6,8(r2)
    d198:	1c001526 	beq	r3,r16,d1f0 <__call_exitprocs+0x150>
    d19c:	10000215 	stw	zero,8(r2)
    d1a0:	303fe726 	beq	r6,zero,d140 <__call_exitprocs+0xa0>
    d1a4:	00c00044 	movi	r3,1
    d1a8:	1c06983a 	sll	r3,r3,r16
    d1ac:	90804017 	ldw	r2,256(r18)
    d1b0:	8cc00117 	ldw	r19,4(r17)
    d1b4:	1884703a 	and	r2,r3,r2
    d1b8:	10001426 	beq	r2,zero,d20c <__call_exitprocs+0x16c>
    d1bc:	90804117 	ldw	r2,260(r18)
    d1c0:	1884703a 	and	r2,r3,r2
    d1c4:	10000c1e 	bne	r2,zero,d1f8 <__call_exitprocs+0x158>
    d1c8:	2105883a 	add	r2,r4,r4
    d1cc:	1485883a 	add	r2,r2,r18
    d1d0:	11400017 	ldw	r5,0(r2)
    d1d4:	e009883a 	mov	r4,fp
    d1d8:	303ee83a 	callr	r6
    d1dc:	88800117 	ldw	r2,4(r17)
    d1e0:	98bfc81e 	bne	r19,r2,d104 <__call_exitprocs+0x64>
    d1e4:	b8800017 	ldw	r2,0(r23)
    d1e8:	147fd526 	beq	r2,r17,d140 <__call_exitprocs+0xa0>
    d1ec:	003fc506 	br	d104 <__call_exitprocs+0x64>
    d1f0:	8c000115 	stw	r16,4(r17)
    d1f4:	003fea06 	br	d1a0 <__call_exitprocs+0x100>
    d1f8:	2105883a 	add	r2,r4,r4
    d1fc:	1485883a 	add	r2,r2,r18
    d200:	11000017 	ldw	r4,0(r2)
    d204:	303ee83a 	callr	r6
    d208:	003ff406 	br	d1dc <__call_exitprocs+0x13c>
    d20c:	303ee83a 	callr	r6
    d210:	003ff206 	br	d1dc <__call_exitprocs+0x13c>
    d214:	88800117 	ldw	r2,4(r17)
    d218:	1000081e 	bne	r2,zero,d23c <__call_exitprocs+0x19c>
    d21c:	89000017 	ldw	r4,0(r17)
    d220:	20000726 	beq	r4,zero,d240 <__call_exitprocs+0x1a0>
    d224:	b9000015 	stw	r4,0(r23)
    d228:	8809883a 	mov	r4,r17
    d22c:	00000000 	call	0 <__reset>
    d230:	bc400017 	ldw	r17,0(r23)
    d234:	883fb71e 	bne	r17,zero,d114 <__call_exitprocs+0x74>
    d238:	003fc506 	br	d150 <__call_exitprocs+0xb0>
    d23c:	89000017 	ldw	r4,0(r17)
    d240:	882f883a 	mov	r23,r17
    d244:	2023883a 	mov	r17,r4
    d248:	883fb21e 	bne	r17,zero,d114 <__call_exitprocs+0x74>
    d24c:	003fc006 	br	d150 <__call_exitprocs+0xb0>

0000d250 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    d250:	defffd04 	addi	sp,sp,-12
    d254:	df000215 	stw	fp,8(sp)
    d258:	df000204 	addi	fp,sp,8
    d25c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    d260:	e0bfff17 	ldw	r2,-4(fp)
    d264:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    d268:	e0bffe17 	ldw	r2,-8(fp)
    d26c:	1005003a 	cmpeq	r2,r2,zero
    d270:	1000021e 	bne	r2,zero,d27c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    d274:	002af070 	cmpltui	zero,zero,43969
    d278:	00000106 	br	d280 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    d27c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    d280:	e037883a 	mov	sp,fp
    d284:	df000017 	ldw	fp,0(sp)
    d288:	dec00104 	addi	sp,sp,4
    d28c:	f800283a 	ret

0000d290 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    d290:	defffd04 	addi	sp,sp,-12
    d294:	dfc00215 	stw	ra,8(sp)
    d298:	df000115 	stw	fp,4(sp)
    d29c:	df000104 	addi	fp,sp,4
    d2a0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    d2a4:	e13fff17 	ldw	r4,-4(fp)
    d2a8:	000d2500 	call	d250 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    d2ac:	003fff06 	br	d2ac <_exit+0x1c>
    d2b0:	0000d09c 	xori	zero,zero,834
