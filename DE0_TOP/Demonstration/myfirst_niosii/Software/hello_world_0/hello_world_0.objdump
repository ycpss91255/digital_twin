
hello_world_0.elf:     file format elf32-littlenios2
hello_world_0.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000027fc memsz 0x000027fc flags r-x
    LOAD off    0x0000381c vaddr 0x0000a81c paddr 0x0000bb30 align 2**12
         filesz 0x00001314 memsz 0x00001314 flags rw-
    LOAD off    0x00004e44 vaddr 0x0000ce44 paddr 0x0000ce44 align 2**12
         filesz 0x00000000 memsz 0x000001a8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002624  000081b4  000081b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  0000a7d8  0000a7d8  000037d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001314  0000a81c  0000bb30  0000381c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a8  0000ce44  0000ce44  00004e44  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00004b30  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000005b8  00000000  00000000  00004b58  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000084e  00000000  00000000  00005110  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a710  00000000  00000000  0000595e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000281b  00000000  00000000  0001006e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006b84  00000000  00000000  00012889  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000948  00000000  00000000  00019410  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000b5e  00000000  00000000  00019d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000f35  00000000  00000000  0001a8b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0001b7ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  0001b820  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001d429  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001d42c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001d42f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001d430  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001d431  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001d435  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001d439  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001d43d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001d446  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001d44f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0001d458  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000032  00000000  00000000  0001d465  2**0
                  CONTENTS, READONLY
 29 .jdi          00005141  00000000  00000000  0001d497  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0002fc92  00000000  00000000  000225d8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081b4 l    d  .text	00000000 .text
0000a7d8 l    d  .rodata	00000000 .rodata
0000a81c l    d  .rwdata	00000000 .rwdata
0000ce44 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000081fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a81c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
000084e0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000086d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000a8fc l     O .rwdata	00001060 jtag_uart
000087b0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000089f0 l     F .text	00000228 altera_avalon_jtag_uart_irq
00008c18 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
000094e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009588 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009668 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009a8c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00009bc8 l     F .text	000000dc alt_file_locked
00009e2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000a5b4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000a774 l     F .text	00000040 alt_sim_halt
0000854c g     F .text	0000006c alt_main
00008268 g     F .text	00000090 _puts_r
0000ce60 g     O .bss	00000100 alt_irq
0000bb30 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ce44 g     O .bss	00000004 errno
0000ce4c g     O .bss	00000004 alt_argv
00013b04 g       *ABS*	00000000 _gp
0000b984 g     O .rwdata	00000180 alt_fd_list
0000a0b0 g     F .text	00000094 alt_find_dev
0000a41c g     F .text	0000002c memcpy
00009b50 g     F .text	00000078 alt_io_redirect
0000a7d8 g       *ABS*	00000000 __DTOR_END__
000082f8 g     F .text	00000014 puts
00008e30 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0000a31c g     F .text	00000090 alt_icache_flush
0000bb1c g     O .rwdata	00000004 alt_max_fd
0000bb08 g     O .rwdata	00000004 _global_impure_ptr
0000cfec g       *ABS*	00000000 __bss_end
00009994 g     F .text	000000f8 alt_iic_isr_register
00009f84 g     F .text	0000010c alt_tick
0000994c g     F .text	00000048 alt_ic_irq_enabled
00009eec g     F .text	00000098 alt_alarm_stop
0000ce54 g     O .bss	00000004 alt_irq_active
000080ec g     F .exceptions	000000c8 alt_irq_handler
0000b95c g     O .rwdata	00000028 alt_dev_null
00009544 g     F .text	00000044 alt_dcache_flush_all
0000bb30 g       *ABS*	00000000 __ram_rwdata_end
0000bb14 g     O .rwdata	00000008 alt_dev_list
000085b8 g     F .text	00000120 write
0000a81c g       *ABS*	00000000 __ram_rodata_end
0000cfec g       *ABS*	00000000 end
00008930 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000a7d4 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009054 g     F .text	00000240 altera_avalon_jtag_uart_write
0000a5b8 g     F .text	000001bc __call_exitprocs
000081b4 g     F .text	0000004c _start
0000ce58 g     O .bss	00000004 _alt_tick_rate
0000ce5c g     O .bss	00000004 _alt_nticks
0000876c g     F .text	00000044 alt_sys_init
0000a448 g     F .text	0000016c __register_exitproc
00008cc8 g     F .text	00000074 altera_avalon_jtag_uart_close
0000a81c g       *ABS*	00000000 __ram_rwdata_start
0000a7d8 g       *ABS*	00000000 __ram_rodata_start
000087e8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000a264 g     F .text	000000b8 alt_get_fd
0000a3e0 g     F .text	0000003c memcmp
00008898 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0000cfec g       *ABS*	00000000 __alt_stack_base
000088e0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0000a144 g     F .text	00000120 alt_find_file
000095b4 g     F .text	000000b4 alt_dev_llist_insert
0000832c g     F .text	000000bc __sfvwrite_small_dev
0000ce44 g       *ABS*	00000000 __bss_start
00008200 g     F .text	00000068 main
0000ce50 g     O .bss	00000004 alt_envp
00008840 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000cf60 g     O .bss	0000008c _atexit0
0000bb20 g     O .rwdata	00000004 alt_errno
0000a7d8 g       *ABS*	00000000 __CTOR_END__
0000a7d8 g       *ABS*	00000000 __flash_rodata_start
0000a7d8 g       *ABS*	00000000 __DTOR_LIST__
00008738 g     F .text	00000034 alt_irq_init
00009e8c g     F .text	00000060 alt_release_fd
0000a3ac g     F .text	00000014 atexit
000083e8 g     F .text	00000078 _write_r
0000bb04 g     O .rwdata	00000004 _impure_ptr
0000ce48 g     O .bss	00000004 alt_argc
0000972c g     F .text	00000064 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000bb0c g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2
000097c0 g     F .text	00000050 alt_ic_isr_register
0000bb30 g       *ABS*	00000000 _edata
0000cfec g       *ABS*	00000000 _end
000081b4 g       *ABS*	00000000 __ram_exceptions_end
00008d3c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000098ac g     F .text	000000a0 alt_ic_irq_disable
0000a090 g     F .text	00000020 altera_nios2_qsys_irq_init
0000a3c0 g     F .text	00000020 exit
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000a7b4 g     F .text	00000020 _exit
00009294 g     F .text	00000154 alt_alarm_start
0000830c g     F .text	00000020 strlen
00009ca4 g     F .text	00000188 open
00009790 g     F .text	00000030 alt_icache_flush_all
0000bb24 g     O .rwdata	00000004 alt_priority_mask
00009810 g     F .text	0000009c alt_ic_irq_enable
0000bb28 g     O .rwdata	00000008 alt_alarm_list
000096c8 g     F .text	00000064 _do_ctors
000093e8 g     F .text	000000fc close
00008460 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08606d14 	ori	at,at,33204
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__reset-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    8044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    80fc:	0005313a 	rdctl	r2,ipending
    8100:	e0bffc15 	stw	r2,-16(fp)

  return active;
    8104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    8108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
    810c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8110:	00800044 	movi	r2,1
    8114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    8118:	e0ffff17 	ldw	r3,-4(fp)
    811c:	e0bffe17 	ldw	r2,-8(fp)
    8120:	1884703a 	and	r2,r3,r2
    8124:	1005003a 	cmpeq	r2,r2,zero
    8128:	1000161e 	bne	r2,zero,8184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	e0bffd17 	ldw	r2,-12(fp)
    8130:	00c00074 	movhi	r3,1
    8134:	18f39804 	addi	r3,r3,-12704
    8138:	100490fa 	slli	r2,r2,3
    813c:	10c5883a 	add	r2,r2,r3
    8140:	11400017 	ldw	r5,0(r2)
    8144:	e0bffd17 	ldw	r2,-12(fp)
    8148:	00c00074 	movhi	r3,1
    814c:	18f39804 	addi	r3,r3,-12704
    8150:	100490fa 	slli	r2,r2,3
    8154:	10c5883a 	add	r2,r2,r3
    8158:	10800104 	addi	r2,r2,4
    815c:	11000017 	ldw	r4,0(r2)
    8160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8164:	0005313a 	rdctl	r2,ipending
    8168:	e0bffb15 	stw	r2,-20(fp)

  return active;
    816c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    8170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
    8174:	e0bfff17 	ldw	r2,-4(fp)
    8178:	1004c03a 	cmpne	r2,r2,zero
    817c:	103fe31e 	bne	r2,zero,810c <alt_irq_handler+0x20>
    8180:	00000706 	br	81a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8184:	e0bffe17 	ldw	r2,-8(fp)
    8188:	1085883a 	add	r2,r2,r2
    818c:	e0bffe15 	stw	r2,-8(fp)
      i++;
    8190:	e0bffd17 	ldw	r2,-12(fp)
    8194:	10800044 	addi	r2,r2,1
    8198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    819c:	003fde06 	br	8118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a0:	e037883a 	mov	sp,fp
    81a4:	dfc00117 	ldw	ra,4(sp)
    81a8:	df000017 	ldw	fp,0(sp)
    81ac:	dec00204 	addi	sp,sp,8
    81b0:	f800283a 	ret

Disassembly of section .text:

000081b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    81b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    81b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    81bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    81c0:	00bffd16 	blt	zero,r2,81b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81c4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    81c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    81cc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81d0:	d68ec114 	ori	gp,gp,15108
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81d4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81d8:	10b39114 	ori	r2,r2,52804

    movhi r3, %hi(__bss_end)
    81dc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81e0:	18f3fb14 	ori	r3,r3,53228

    beq r2, r3, 1f
    81e4:	10c00326 	beq	r2,r3,81f4 <_start+0x40>

0:
    stw zero, (r2)
    81e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81f0:	10fffd36 	bltu	r2,r3,81e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81f4:	00084600 	call	8460 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81f8:	000854c0 	call	854c <alt_main>

000081fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81fc:	003fff06 	br	81fc <alt_after_alt_main>

00008200 <main>:

#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
int main()
{
    8200:	defffc04 	addi	sp,sp,-16
    8204:	dfc00315 	stw	ra,12(sp)
    8208:	df000215 	stw	fp,8(sp)
    820c:	df000204 	addi	fp,sp,8
    printf("Hello from Nios II!\n");
    8210:	01000074 	movhi	r4,1
    8214:	2129f604 	addi	r4,r4,-22568
    8218:	00082f80 	call	82f8 <puts>
    int count = 0;
    821c:	e03fff15 	stw	zero,-4(fp)
    int delay;
    while(1)
    {
        IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, count & 0x01);
    8220:	e0bfff17 	ldw	r2,-4(fp)
    8224:	10c0004c 	andi	r3,r2,1
    8228:	00800074 	movhi	r2,1
    822c:	10840004 	addi	r2,r2,4096
    8230:	10c00035 	stwio	r3,0(r2)
        delay = 0;
    8234:	e03ffe15 	stw	zero,-8(fp)
        while(delay < 2000000)
    8238:	00000306 	br	8248 <main+0x48>
        {
            delay++;
    823c:	e0bffe17 	ldw	r2,-8(fp)
    8240:	10800044 	addi	r2,r2,1
    8244:	e0bffe15 	stw	r2,-8(fp)
    int delay;
    while(1)
    {
        IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, count & 0x01);
        delay = 0;
        while(delay < 2000000)
    8248:	e0fffe17 	ldw	r3,-8(fp)
    824c:	008007f4 	movhi	r2,31
    8250:	10a11fc4 	addi	r2,r2,-31617
    8254:	10fff90e 	bge	r2,r3,823c <main+0x3c>
        {
            delay++;
        }
        count++;
    8258:	e0bfff17 	ldw	r2,-4(fp)
    825c:	10800044 	addi	r2,r2,1
    8260:	e0bfff15 	stw	r2,-4(fp)
    }
    8264:	003fee06 	br	8220 <main+0x20>

00008268 <_puts_r>:
    8268:	defffd04 	addi	sp,sp,-12
    826c:	dc000015 	stw	r16,0(sp)
    8270:	2021883a 	mov	r16,r4
    8274:	2809883a 	mov	r4,r5
    8278:	dfc00215 	stw	ra,8(sp)
    827c:	dc400115 	stw	r17,4(sp)
    8280:	2823883a 	mov	r17,r5
    8284:	000830c0 	call	830c <strlen>
    8288:	80c00217 	ldw	r3,8(r16)
    828c:	02000074 	movhi	r8,1
    8290:	4220cb04 	addi	r8,r8,-31956
    8294:	880d883a 	mov	r6,r17
    8298:	100f883a 	mov	r7,r2
    829c:	8009883a 	mov	r4,r16
    82a0:	180b883a 	mov	r5,r3
    82a4:	1a000115 	stw	r8,4(r3)
    82a8:	403ee83a 	callr	r8
    82ac:	047fffc4 	movi	r17,-1
    82b0:	8009883a 	mov	r4,r16
    82b4:	01800074 	movhi	r6,1
    82b8:	31a9fb04 	addi	r6,r6,-22548
    82bc:	01c00044 	movi	r7,1
    82c0:	1440071e 	bne	r2,r17,82e0 <_puts_r+0x78>
    82c4:	00ffffc4 	movi	r3,-1
    82c8:	1805883a 	mov	r2,r3
    82cc:	dfc00217 	ldw	ra,8(sp)
    82d0:	dc400117 	ldw	r17,4(sp)
    82d4:	dc000017 	ldw	r16,0(sp)
    82d8:	dec00304 	addi	sp,sp,12
    82dc:	f800283a 	ret
    82e0:	81400217 	ldw	r5,8(r16)
    82e4:	28c00117 	ldw	r3,4(r5)
    82e8:	183ee83a 	callr	r3
    82ec:	0007883a 	mov	r3,zero
    82f0:	147ff51e 	bne	r2,r17,82c8 <_puts_r+0x60>
    82f4:	003ff306 	br	82c4 <_puts_r+0x5c>

000082f8 <puts>:
    82f8:	00800074 	movhi	r2,1
    82fc:	10aec104 	addi	r2,r2,-17660
    8300:	200b883a 	mov	r5,r4
    8304:	11000017 	ldw	r4,0(r2)
    8308:	00082681 	jmpi	8268 <_puts_r>

0000830c <strlen>:
    830c:	20800007 	ldb	r2,0(r4)
    8310:	10000526 	beq	r2,zero,8328 <strlen+0x1c>
    8314:	2007883a 	mov	r3,r4
    8318:	18c00044 	addi	r3,r3,1
    831c:	18800007 	ldb	r2,0(r3)
    8320:	103ffd1e 	bne	r2,zero,8318 <strlen+0xc>
    8324:	1905c83a 	sub	r2,r3,r4
    8328:	f800283a 	ret

0000832c <__sfvwrite_small_dev>:
    832c:	2880000b 	ldhu	r2,0(r5)
    8330:	defffa04 	addi	sp,sp,-24
    8334:	dcc00315 	stw	r19,12(sp)
    8338:	1080020c 	andi	r2,r2,8
    833c:	dc800215 	stw	r18,8(sp)
    8340:	dc400115 	stw	r17,4(sp)
    8344:	dfc00515 	stw	ra,20(sp)
    8348:	dd000415 	stw	r20,16(sp)
    834c:	dc000015 	stw	r16,0(sp)
    8350:	2825883a 	mov	r18,r5
    8354:	2027883a 	mov	r19,r4
    8358:	3023883a 	mov	r17,r6
    835c:	10002026 	beq	r2,zero,83e0 <__sfvwrite_small_dev+0xb4>
    8360:	2940008f 	ldh	r5,2(r5)
    8364:	28000f16 	blt	r5,zero,83a4 <__sfvwrite_small_dev+0x78>
    8368:	01c01b0e 	bge	zero,r7,83d8 <__sfvwrite_small_dev+0xac>
    836c:	3821883a 	mov	r16,r7
    8370:	05010004 	movi	r20,1024
    8374:	00000206 	br	8380 <__sfvwrite_small_dev+0x54>
    8378:	0400170e 	bge	zero,r16,83d8 <__sfvwrite_small_dev+0xac>
    837c:	9140008f 	ldh	r5,2(r18)
    8380:	880d883a 	mov	r6,r17
    8384:	9809883a 	mov	r4,r19
    8388:	800f883a 	mov	r7,r16
    838c:	a400010e 	bge	r20,r16,8394 <__sfvwrite_small_dev+0x68>
    8390:	01c10004 	movi	r7,1024
    8394:	00083e80 	call	83e8 <_write_r>
    8398:	88a3883a 	add	r17,r17,r2
    839c:	80a1c83a 	sub	r16,r16,r2
    83a0:	00bff516 	blt	zero,r2,8378 <__sfvwrite_small_dev+0x4c>
    83a4:	9080000b 	ldhu	r2,0(r18)
    83a8:	00ffffc4 	movi	r3,-1
    83ac:	10801014 	ori	r2,r2,64
    83b0:	9080000d 	sth	r2,0(r18)
    83b4:	1805883a 	mov	r2,r3
    83b8:	dfc00517 	ldw	ra,20(sp)
    83bc:	dd000417 	ldw	r20,16(sp)
    83c0:	dcc00317 	ldw	r19,12(sp)
    83c4:	dc800217 	ldw	r18,8(sp)
    83c8:	dc400117 	ldw	r17,4(sp)
    83cc:	dc000017 	ldw	r16,0(sp)
    83d0:	dec00604 	addi	sp,sp,24
    83d4:	f800283a 	ret
    83d8:	0007883a 	mov	r3,zero
    83dc:	003ff506 	br	83b4 <__sfvwrite_small_dev+0x88>
    83e0:	00ffffc4 	movi	r3,-1
    83e4:	003ff306 	br	83b4 <__sfvwrite_small_dev+0x88>

000083e8 <_write_r>:
    83e8:	defffd04 	addi	sp,sp,-12
    83ec:	dc000015 	stw	r16,0(sp)
    83f0:	04000074 	movhi	r16,1
    83f4:	84339104 	addi	r16,r16,-12732
    83f8:	dc400115 	stw	r17,4(sp)
    83fc:	80000015 	stw	zero,0(r16)
    8400:	2023883a 	mov	r17,r4
    8404:	2809883a 	mov	r4,r5
    8408:	300b883a 	mov	r5,r6
    840c:	380d883a 	mov	r6,r7
    8410:	dfc00215 	stw	ra,8(sp)
    8414:	00085b80 	call	85b8 <write>
    8418:	1007883a 	mov	r3,r2
    841c:	00bfffc4 	movi	r2,-1
    8420:	18800626 	beq	r3,r2,843c <_write_r+0x54>
    8424:	1805883a 	mov	r2,r3
    8428:	dfc00217 	ldw	ra,8(sp)
    842c:	dc400117 	ldw	r17,4(sp)
    8430:	dc000017 	ldw	r16,0(sp)
    8434:	dec00304 	addi	sp,sp,12
    8438:	f800283a 	ret
    843c:	80800017 	ldw	r2,0(r16)
    8440:	103ff826 	beq	r2,zero,8424 <_write_r+0x3c>
    8444:	88800015 	stw	r2,0(r17)
    8448:	1805883a 	mov	r2,r3
    844c:	dfc00217 	ldw	ra,8(sp)
    8450:	dc400117 	ldw	r17,4(sp)
    8454:	dc000017 	ldw	r16,0(sp)
    8458:	dec00304 	addi	sp,sp,12
    845c:	f800283a 	ret

00008460 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8460:	defffe04 	addi	sp,sp,-8
    8464:	dfc00115 	stw	ra,4(sp)
    8468:	df000015 	stw	fp,0(sp)
    846c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8470:	01000074 	movhi	r4,1
    8474:	212ecc04 	addi	r4,r4,-17616
    8478:	01400074 	movhi	r5,1
    847c:	296a0704 	addi	r5,r5,-22500
    8480:	01800074 	movhi	r6,1
    8484:	31aecc04 	addi	r6,r6,-17616
    8488:	00084e00 	call	84e0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    848c:	01000074 	movhi	r4,1
    8490:	21200804 	addi	r4,r4,-32736
    8494:	01400074 	movhi	r5,1
    8498:	29600804 	addi	r5,r5,-32736
    849c:	01800074 	movhi	r6,1
    84a0:	31a06d04 	addi	r6,r6,-32332
    84a4:	00084e00 	call	84e0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    84a8:	01000074 	movhi	r4,1
    84ac:	2129f604 	addi	r4,r4,-22568
    84b0:	01400074 	movhi	r5,1
    84b4:	2969f604 	addi	r5,r5,-22568
    84b8:	01800074 	movhi	r6,1
    84bc:	31aa0704 	addi	r6,r6,-22500
    84c0:	00084e00 	call	84e0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    84c4:	00095440 	call	9544 <alt_dcache_flush_all>
  alt_icache_flush_all();
    84c8:	00097900 	call	9790 <alt_icache_flush_all>
}
    84cc:	e037883a 	mov	sp,fp
    84d0:	dfc00117 	ldw	ra,4(sp)
    84d4:	df000017 	ldw	fp,0(sp)
    84d8:	dec00204 	addi	sp,sp,8
    84dc:	f800283a 	ret

000084e0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    84e0:	defffc04 	addi	sp,sp,-16
    84e4:	df000315 	stw	fp,12(sp)
    84e8:	df000304 	addi	fp,sp,12
    84ec:	e13ffd15 	stw	r4,-12(fp)
    84f0:	e17ffe15 	stw	r5,-8(fp)
    84f4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    84f8:	e0fffe17 	ldw	r3,-8(fp)
    84fc:	e0bffd17 	ldw	r2,-12(fp)
    8500:	18800e26 	beq	r3,r2,853c <alt_load_section+0x5c>
  {
    while( to != end )
    8504:	00000a06 	br	8530 <alt_load_section+0x50>
    {
      *to++ = *from++;
    8508:	e0bffd17 	ldw	r2,-12(fp)
    850c:	10c00017 	ldw	r3,0(r2)
    8510:	e0bffe17 	ldw	r2,-8(fp)
    8514:	10c00015 	stw	r3,0(r2)
    8518:	e0bffe17 	ldw	r2,-8(fp)
    851c:	10800104 	addi	r2,r2,4
    8520:	e0bffe15 	stw	r2,-8(fp)
    8524:	e0bffd17 	ldw	r2,-12(fp)
    8528:	10800104 	addi	r2,r2,4
    852c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8530:	e0fffe17 	ldw	r3,-8(fp)
    8534:	e0bfff17 	ldw	r2,-4(fp)
    8538:	18bff31e 	bne	r3,r2,8508 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    853c:	e037883a 	mov	sp,fp
    8540:	df000017 	ldw	fp,0(sp)
    8544:	dec00104 	addi	sp,sp,4
    8548:	f800283a 	ret

0000854c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    854c:	defffd04 	addi	sp,sp,-12
    8550:	dfc00215 	stw	ra,8(sp)
    8554:	df000115 	stw	fp,4(sp)
    8558:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    855c:	0009883a 	mov	r4,zero
    8560:	00087380 	call	8738 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8564:	000876c0 	call	876c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8568:	01000074 	movhi	r4,1
    856c:	2129fc04 	addi	r4,r4,-22544
    8570:	01400074 	movhi	r5,1
    8574:	2969fc04 	addi	r5,r5,-22544
    8578:	01800074 	movhi	r6,1
    857c:	31a9fc04 	addi	r6,r6,-22544
    8580:	0009b500 	call	9b50 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8584:	00096c80 	call	96c8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8588:	01000074 	movhi	r4,1
    858c:	2125cb04 	addi	r4,r4,-26836
    8590:	000a3ac0 	call	a3ac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8594:	d124d117 	ldw	r4,-27836(gp)
    8598:	d164d217 	ldw	r5,-27832(gp)
    859c:	d1a4d317 	ldw	r6,-27828(gp)
    85a0:	00082000 	call	8200 <main>
    85a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    85a8:	01000044 	movi	r4,1
    85ac:	00093e80 	call	93e8 <close>
  exit (result);
    85b0:	e13fff17 	ldw	r4,-4(fp)
    85b4:	000a3c00 	call	a3c0 <exit>

000085b8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    85b8:	defff704 	addi	sp,sp,-36
    85bc:	dfc00815 	stw	ra,32(sp)
    85c0:	df000715 	stw	fp,28(sp)
    85c4:	df000704 	addi	fp,sp,28
    85c8:	e13ffb15 	stw	r4,-20(fp)
    85cc:	e17ffc15 	stw	r5,-16(fp)
    85d0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    85d4:	e0bffb17 	ldw	r2,-20(fp)
    85d8:	1004803a 	cmplt	r2,r2,zero
    85dc:	1000081e 	bne	r2,zero,8600 <write+0x48>
    85e0:	e0bffb17 	ldw	r2,-20(fp)
    85e4:	10800324 	muli	r2,r2,12
    85e8:	1007883a 	mov	r3,r2
    85ec:	00800074 	movhi	r2,1
    85f0:	10ae6104 	addi	r2,r2,-18044
    85f4:	1887883a 	add	r3,r3,r2
    85f8:	e0ffff15 	stw	r3,-4(fp)
    85fc:	00000106 	br	8604 <write+0x4c>
    8600:	e03fff15 	stw	zero,-4(fp)
    8604:	e0bfff17 	ldw	r2,-4(fp)
    8608:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    860c:	e0bffa17 	ldw	r2,-24(fp)
    8610:	1005003a 	cmpeq	r2,r2,zero
    8614:	1000241e 	bne	r2,zero,86a8 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    8618:	e0bffa17 	ldw	r2,-24(fp)
    861c:	10800217 	ldw	r2,8(r2)
    8620:	108000cc 	andi	r2,r2,3
    8624:	1005003a 	cmpeq	r2,r2,zero
    8628:	10001a1e 	bne	r2,zero,8694 <write+0xdc>
    862c:	e0bffa17 	ldw	r2,-24(fp)
    8630:	10800017 	ldw	r2,0(r2)
    8634:	10800617 	ldw	r2,24(r2)
    8638:	1005003a 	cmpeq	r2,r2,zero
    863c:	1000151e 	bne	r2,zero,8694 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    8640:	e0bffa17 	ldw	r2,-24(fp)
    8644:	10800017 	ldw	r2,0(r2)
    8648:	10800617 	ldw	r2,24(r2)
    864c:	e17ffc17 	ldw	r5,-16(fp)
    8650:	e1bffd17 	ldw	r6,-12(fp)
    8654:	e13ffa17 	ldw	r4,-24(fp)
    8658:	103ee83a 	callr	r2
    865c:	e0bff915 	stw	r2,-28(fp)
    8660:	e0bff917 	ldw	r2,-28(fp)
    8664:	1004403a 	cmpge	r2,r2,zero
    8668:	1000071e 	bne	r2,zero,8688 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    866c:	00086d80 	call	86d8 <alt_get_errno>
    8670:	e0fff917 	ldw	r3,-28(fp)
    8674:	00c7c83a 	sub	r3,zero,r3
    8678:	10c00015 	stw	r3,0(r2)
        return -1;
    867c:	00bfffc4 	movi	r2,-1
    8680:	e0bffe15 	stw	r2,-8(fp)
    8684:	00000e06 	br	86c0 <write+0x108>
      }
      return rval;
    8688:	e0bff917 	ldw	r2,-28(fp)
    868c:	e0bffe15 	stw	r2,-8(fp)
    8690:	00000b06 	br	86c0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    8694:	00086d80 	call	86d8 <alt_get_errno>
    8698:	1007883a 	mov	r3,r2
    869c:	00800344 	movi	r2,13
    86a0:	18800015 	stw	r2,0(r3)
    86a4:	00000406 	br	86b8 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    86a8:	00086d80 	call	86d8 <alt_get_errno>
    86ac:	1007883a 	mov	r3,r2
    86b0:	00801444 	movi	r2,81
    86b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    86b8:	00bfffc4 	movi	r2,-1
    86bc:	e0bffe15 	stw	r2,-8(fp)
    86c0:	e0bffe17 	ldw	r2,-8(fp)
}
    86c4:	e037883a 	mov	sp,fp
    86c8:	dfc00117 	ldw	ra,4(sp)
    86cc:	df000017 	ldw	fp,0(sp)
    86d0:	dec00204 	addi	sp,sp,8
    86d4:	f800283a 	ret

000086d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    86d8:	defffd04 	addi	sp,sp,-12
    86dc:	dfc00215 	stw	ra,8(sp)
    86e0:	df000115 	stw	fp,4(sp)
    86e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    86e8:	00800074 	movhi	r2,1
    86ec:	10aec804 	addi	r2,r2,-17632
    86f0:	10800017 	ldw	r2,0(r2)
    86f4:	1005003a 	cmpeq	r2,r2,zero
    86f8:	1000061e 	bne	r2,zero,8714 <alt_get_errno+0x3c>
    86fc:	00800074 	movhi	r2,1
    8700:	10aec804 	addi	r2,r2,-17632
    8704:	10800017 	ldw	r2,0(r2)
    8708:	103ee83a 	callr	r2
    870c:	e0bfff15 	stw	r2,-4(fp)
    8710:	00000306 	br	8720 <alt_get_errno+0x48>
    8714:	00800074 	movhi	r2,1
    8718:	10b39104 	addi	r2,r2,-12732
    871c:	e0bfff15 	stw	r2,-4(fp)
    8720:	e0bfff17 	ldw	r2,-4(fp)
}
    8724:	e037883a 	mov	sp,fp
    8728:	dfc00117 	ldw	ra,4(sp)
    872c:	df000017 	ldw	fp,0(sp)
    8730:	dec00204 	addi	sp,sp,8
    8734:	f800283a 	ret

00008738 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8738:	defffd04 	addi	sp,sp,-12
    873c:	dfc00215 	stw	ra,8(sp)
    8740:	df000115 	stw	fp,4(sp)
    8744:	df000104 	addi	fp,sp,4
    8748:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    874c:	000a0900 	call	a090 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8750:	00800044 	movi	r2,1
    8754:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8758:	e037883a 	mov	sp,fp
    875c:	dfc00117 	ldw	ra,4(sp)
    8760:	df000017 	ldw	fp,0(sp)
    8764:	dec00204 	addi	sp,sp,8
    8768:	f800283a 	ret

0000876c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    876c:	defffe04 	addi	sp,sp,-8
    8770:	dfc00115 	stw	ra,4(sp)
    8774:	df000015 	stw	fp,0(sp)
    8778:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    877c:	01000074 	movhi	r4,1
    8780:	212a4904 	addi	r4,r4,-22236
    8784:	000b883a 	mov	r5,zero
    8788:	000d883a 	mov	r6,zero
    878c:	00089300 	call	8930 <altera_avalon_jtag_uart_init>
    8790:	01000074 	movhi	r4,1
    8794:	212a3f04 	addi	r4,r4,-22276
    8798:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    879c:	e037883a 	mov	sp,fp
    87a0:	dfc00117 	ldw	ra,4(sp)
    87a4:	df000017 	ldw	fp,0(sp)
    87a8:	dec00204 	addi	sp,sp,8
    87ac:	f800283a 	ret

000087b0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    87b0:	defffd04 	addi	sp,sp,-12
    87b4:	dfc00215 	stw	ra,8(sp)
    87b8:	df000115 	stw	fp,4(sp)
    87bc:	df000104 	addi	fp,sp,4
    87c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    87c4:	e13fff17 	ldw	r4,-4(fp)
    87c8:	01400074 	movhi	r5,1
    87cc:	296ec504 	addi	r5,r5,-17644
    87d0:	00095b40 	call	95b4 <alt_dev_llist_insert>
}
    87d4:	e037883a 	mov	sp,fp
    87d8:	dfc00117 	ldw	ra,4(sp)
    87dc:	df000017 	ldw	fp,0(sp)
    87e0:	dec00204 	addi	sp,sp,8
    87e4:	f800283a 	ret

000087e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    87e8:	defffa04 	addi	sp,sp,-24
    87ec:	dfc00515 	stw	ra,20(sp)
    87f0:	df000415 	stw	fp,16(sp)
    87f4:	df000404 	addi	fp,sp,16
    87f8:	e13ffd15 	stw	r4,-12(fp)
    87fc:	e17ffe15 	stw	r5,-8(fp)
    8800:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8804:	e0bffd17 	ldw	r2,-12(fp)
    8808:	10800017 	ldw	r2,0(r2)
    880c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8810:	e0bffc17 	ldw	r2,-16(fp)
    8814:	11000a04 	addi	r4,r2,40
    8818:	e0bffd17 	ldw	r2,-12(fp)
    881c:	11c00217 	ldw	r7,8(r2)
    8820:	e17ffe17 	ldw	r5,-8(fp)
    8824:	e1bfff17 	ldw	r6,-4(fp)
    8828:	0008e300 	call	8e30 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    882c:	e037883a 	mov	sp,fp
    8830:	dfc00117 	ldw	ra,4(sp)
    8834:	df000017 	ldw	fp,0(sp)
    8838:	dec00204 	addi	sp,sp,8
    883c:	f800283a 	ret

00008840 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8840:	defffa04 	addi	sp,sp,-24
    8844:	dfc00515 	stw	ra,20(sp)
    8848:	df000415 	stw	fp,16(sp)
    884c:	df000404 	addi	fp,sp,16
    8850:	e13ffd15 	stw	r4,-12(fp)
    8854:	e17ffe15 	stw	r5,-8(fp)
    8858:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    885c:	e0bffd17 	ldw	r2,-12(fp)
    8860:	10800017 	ldw	r2,0(r2)
    8864:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8868:	e0bffc17 	ldw	r2,-16(fp)
    886c:	11000a04 	addi	r4,r2,40
    8870:	e0bffd17 	ldw	r2,-12(fp)
    8874:	11c00217 	ldw	r7,8(r2)
    8878:	e17ffe17 	ldw	r5,-8(fp)
    887c:	e1bfff17 	ldw	r6,-4(fp)
    8880:	00090540 	call	9054 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8884:	e037883a 	mov	sp,fp
    8888:	dfc00117 	ldw	ra,4(sp)
    888c:	df000017 	ldw	fp,0(sp)
    8890:	dec00204 	addi	sp,sp,8
    8894:	f800283a 	ret

00008898 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    8898:	defffc04 	addi	sp,sp,-16
    889c:	dfc00315 	stw	ra,12(sp)
    88a0:	df000215 	stw	fp,8(sp)
    88a4:	df000204 	addi	fp,sp,8
    88a8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    88ac:	e0bfff17 	ldw	r2,-4(fp)
    88b0:	10800017 	ldw	r2,0(r2)
    88b4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    88b8:	e0bffe17 	ldw	r2,-8(fp)
    88bc:	11000a04 	addi	r4,r2,40
    88c0:	e0bfff17 	ldw	r2,-4(fp)
    88c4:	11400217 	ldw	r5,8(r2)
    88c8:	0008cc80 	call	8cc8 <altera_avalon_jtag_uart_close>
}
    88cc:	e037883a 	mov	sp,fp
    88d0:	dfc00117 	ldw	ra,4(sp)
    88d4:	df000017 	ldw	fp,0(sp)
    88d8:	dec00204 	addi	sp,sp,8
    88dc:	f800283a 	ret

000088e0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    88e0:	defffa04 	addi	sp,sp,-24
    88e4:	dfc00515 	stw	ra,20(sp)
    88e8:	df000415 	stw	fp,16(sp)
    88ec:	df000404 	addi	fp,sp,16
    88f0:	e13ffd15 	stw	r4,-12(fp)
    88f4:	e17ffe15 	stw	r5,-8(fp)
    88f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    88fc:	e0bffd17 	ldw	r2,-12(fp)
    8900:	10800017 	ldw	r2,0(r2)
    8904:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    8908:	e0bffc17 	ldw	r2,-16(fp)
    890c:	11000a04 	addi	r4,r2,40
    8910:	e17ffe17 	ldw	r5,-8(fp)
    8914:	e1bfff17 	ldw	r6,-4(fp)
    8918:	0008d3c0 	call	8d3c <altera_avalon_jtag_uart_ioctl>
}
    891c:	e037883a 	mov	sp,fp
    8920:	dfc00117 	ldw	ra,4(sp)
    8924:	df000017 	ldw	fp,0(sp)
    8928:	dec00204 	addi	sp,sp,8
    892c:	f800283a 	ret

00008930 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    8930:	defffa04 	addi	sp,sp,-24
    8934:	dfc00515 	stw	ra,20(sp)
    8938:	df000415 	stw	fp,16(sp)
    893c:	df000404 	addi	fp,sp,16
    8940:	e13ffd15 	stw	r4,-12(fp)
    8944:	e17ffe15 	stw	r5,-8(fp)
    8948:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    894c:	e0fffd17 	ldw	r3,-12(fp)
    8950:	00800044 	movi	r2,1
    8954:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    8958:	e0bffd17 	ldw	r2,-12(fp)
    895c:	10800017 	ldw	r2,0(r2)
    8960:	11000104 	addi	r4,r2,4
    8964:	e0bffd17 	ldw	r2,-12(fp)
    8968:	10800817 	ldw	r2,32(r2)
    896c:	1007883a 	mov	r3,r2
    8970:	2005883a 	mov	r2,r4
    8974:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    8978:	e13ffe17 	ldw	r4,-8(fp)
    897c:	e17fff17 	ldw	r5,-4(fp)
    8980:	d8000015 	stw	zero,0(sp)
    8984:	01800074 	movhi	r6,1
    8988:	31a27c04 	addi	r6,r6,-30224
    898c:	e1fffd17 	ldw	r7,-12(fp)
    8990:	00097c00 	call	97c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    8994:	e0bffd17 	ldw	r2,-12(fp)
    8998:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    899c:	e0bffd17 	ldw	r2,-12(fp)
    89a0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    89a4:	00800074 	movhi	r2,1
    89a8:	10b39604 	addi	r2,r2,-12712
    89ac:	10800017 	ldw	r2,0(r2)
    89b0:	100b883a 	mov	r5,r2
    89b4:	01800074 	movhi	r6,1
    89b8:	31a30604 	addi	r6,r6,-29672
    89bc:	e1fffd17 	ldw	r7,-12(fp)
    89c0:	00092940 	call	9294 <alt_alarm_start>
    89c4:	1004403a 	cmpge	r2,r2,zero
    89c8:	1000041e 	bne	r2,zero,89dc <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    89cc:	e0fffd17 	ldw	r3,-12(fp)
    89d0:	00a00034 	movhi	r2,32768
    89d4:	10bfffc4 	addi	r2,r2,-1
    89d8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    89dc:	e037883a 	mov	sp,fp
    89e0:	dfc00117 	ldw	ra,4(sp)
    89e4:	df000017 	ldw	fp,0(sp)
    89e8:	dec00204 	addi	sp,sp,8
    89ec:	f800283a 	ret

000089f0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    89f0:	defff804 	addi	sp,sp,-32
    89f4:	df000715 	stw	fp,28(sp)
    89f8:	df000704 	addi	fp,sp,28
    89fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    8a00:	e0bfff17 	ldw	r2,-4(fp)
    8a04:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    8a08:	e0bffe17 	ldw	r2,-8(fp)
    8a0c:	10800017 	ldw	r2,0(r2)
    8a10:	e0bffd15 	stw	r2,-12(fp)
    8a14:	00000006 	br	8a18 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8a18:	e0bffd17 	ldw	r2,-12(fp)
    8a1c:	10800104 	addi	r2,r2,4
    8a20:	10800037 	ldwio	r2,0(r2)
    8a24:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    8a28:	e0bffc17 	ldw	r2,-16(fp)
    8a2c:	1080c00c 	andi	r2,r2,768
    8a30:	1005003a 	cmpeq	r2,r2,zero
    8a34:	1000741e 	bne	r2,zero,8c08 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    8a38:	e0bffc17 	ldw	r2,-16(fp)
    8a3c:	1080400c 	andi	r2,r2,256
    8a40:	1005003a 	cmpeq	r2,r2,zero
    8a44:	1000351e 	bne	r2,zero,8b1c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    8a48:	00800074 	movhi	r2,1
    8a4c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8a50:	e0bffe17 	ldw	r2,-8(fp)
    8a54:	10800a17 	ldw	r2,40(r2)
    8a58:	10800044 	addi	r2,r2,1
    8a5c:	1081ffcc 	andi	r2,r2,2047
    8a60:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    8a64:	e0bffe17 	ldw	r2,-8(fp)
    8a68:	10c00b17 	ldw	r3,44(r2)
    8a6c:	e0bffa17 	ldw	r2,-24(fp)
    8a70:	18801626 	beq	r3,r2,8acc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8a74:	e0bffd17 	ldw	r2,-12(fp)
    8a78:	10800037 	ldwio	r2,0(r2)
    8a7c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    8a80:	e0bffb17 	ldw	r2,-20(fp)
    8a84:	10a0000c 	andi	r2,r2,32768
    8a88:	1005003a 	cmpeq	r2,r2,zero
    8a8c:	10000f1e 	bne	r2,zero,8acc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8a90:	e0bffe17 	ldw	r2,-8(fp)
    8a94:	10c00a17 	ldw	r3,40(r2)
    8a98:	e0bffb17 	ldw	r2,-20(fp)
    8a9c:	1009883a 	mov	r4,r2
    8aa0:	e0bffe17 	ldw	r2,-8(fp)
    8aa4:	1885883a 	add	r2,r3,r2
    8aa8:	10800e04 	addi	r2,r2,56
    8aac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8ab0:	e0bffe17 	ldw	r2,-8(fp)
    8ab4:	10800a17 	ldw	r2,40(r2)
    8ab8:	10800044 	addi	r2,r2,1
    8abc:	10c1ffcc 	andi	r3,r2,2047
    8ac0:	e0bffe17 	ldw	r2,-8(fp)
    8ac4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    8ac8:	003fe106 	br	8a50 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    8acc:	e0bffb17 	ldw	r2,-20(fp)
    8ad0:	10bfffec 	andhi	r2,r2,65535
    8ad4:	1005003a 	cmpeq	r2,r2,zero
    8ad8:	1000101e 	bne	r2,zero,8b1c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8adc:	e0bffe17 	ldw	r2,-8(fp)
    8ae0:	10c00817 	ldw	r3,32(r2)
    8ae4:	00bfff84 	movi	r2,-2
    8ae8:	1886703a 	and	r3,r3,r2
    8aec:	e0bffe17 	ldw	r2,-8(fp)
    8af0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    8af4:	e0bffd17 	ldw	r2,-12(fp)
    8af8:	11000104 	addi	r4,r2,4
    8afc:	e0bffe17 	ldw	r2,-8(fp)
    8b00:	10800817 	ldw	r2,32(r2)
    8b04:	1007883a 	mov	r3,r2
    8b08:	2005883a 	mov	r2,r4
    8b0c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8b10:	e0bffd17 	ldw	r2,-12(fp)
    8b14:	10800104 	addi	r2,r2,4
    8b18:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    8b1c:	e0bffc17 	ldw	r2,-16(fp)
    8b20:	1080800c 	andi	r2,r2,512
    8b24:	1005003a 	cmpeq	r2,r2,zero
    8b28:	103fbb1e 	bne	r2,zero,8a18 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    8b2c:	e0bffc17 	ldw	r2,-16(fp)
    8b30:	10bfffec 	andhi	r2,r2,65535
    8b34:	1004d43a 	srli	r2,r2,16
    8b38:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    8b3c:	00001506 	br	8b94 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    8b40:	e13ffd17 	ldw	r4,-12(fp)
    8b44:	e0bffe17 	ldw	r2,-8(fp)
    8b48:	10c00d17 	ldw	r3,52(r2)
    8b4c:	e0bffe17 	ldw	r2,-8(fp)
    8b50:	1885883a 	add	r2,r3,r2
    8b54:	10820e04 	addi	r2,r2,2104
    8b58:	10800003 	ldbu	r2,0(r2)
    8b5c:	10c03fcc 	andi	r3,r2,255
    8b60:	18c0201c 	xori	r3,r3,128
    8b64:	18ffe004 	addi	r3,r3,-128
    8b68:	2005883a 	mov	r2,r4
    8b6c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8b70:	e0bffe17 	ldw	r2,-8(fp)
    8b74:	10800d17 	ldw	r2,52(r2)
    8b78:	10800044 	addi	r2,r2,1
    8b7c:	10c1ffcc 	andi	r3,r2,2047
    8b80:	e0bffe17 	ldw	r2,-8(fp)
    8b84:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    8b88:	e0bff917 	ldw	r2,-28(fp)
    8b8c:	10bfffc4 	addi	r2,r2,-1
    8b90:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    8b94:	e0bff917 	ldw	r2,-28(fp)
    8b98:	1005003a 	cmpeq	r2,r2,zero
    8b9c:	1000051e 	bne	r2,zero,8bb4 <altera_avalon_jtag_uart_irq+0x1c4>
    8ba0:	e0bffe17 	ldw	r2,-8(fp)
    8ba4:	10c00d17 	ldw	r3,52(r2)
    8ba8:	e0bffe17 	ldw	r2,-8(fp)
    8bac:	10800c17 	ldw	r2,48(r2)
    8bb0:	18bfe31e 	bne	r3,r2,8b40 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    8bb4:	e0bff917 	ldw	r2,-28(fp)
    8bb8:	1005003a 	cmpeq	r2,r2,zero
    8bbc:	103f961e 	bne	r2,zero,8a18 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    8bc0:	e0bffe17 	ldw	r2,-8(fp)
    8bc4:	10c00817 	ldw	r3,32(r2)
    8bc8:	00bfff44 	movi	r2,-3
    8bcc:	1886703a 	and	r3,r3,r2
    8bd0:	e0bffe17 	ldw	r2,-8(fp)
    8bd4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    8bd8:	e0bffe17 	ldw	r2,-8(fp)
    8bdc:	10800017 	ldw	r2,0(r2)
    8be0:	11000104 	addi	r4,r2,4
    8be4:	e0bffe17 	ldw	r2,-8(fp)
    8be8:	10800817 	ldw	r2,32(r2)
    8bec:	1007883a 	mov	r3,r2
    8bf0:	2005883a 	mov	r2,r4
    8bf4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8bf8:	e0bffd17 	ldw	r2,-12(fp)
    8bfc:	10800104 	addi	r2,r2,4
    8c00:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    8c04:	003f8406 	br	8a18 <altera_avalon_jtag_uart_irq+0x28>
}
    8c08:	e037883a 	mov	sp,fp
    8c0c:	df000017 	ldw	fp,0(sp)
    8c10:	dec00104 	addi	sp,sp,4
    8c14:	f800283a 	ret

00008c18 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    8c18:	defffc04 	addi	sp,sp,-16
    8c1c:	df000315 	stw	fp,12(sp)
    8c20:	df000304 	addi	fp,sp,12
    8c24:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    8c28:	e0bfff17 	ldw	r2,-4(fp)
    8c2c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    8c30:	e0bffe17 	ldw	r2,-8(fp)
    8c34:	10800017 	ldw	r2,0(r2)
    8c38:	10800104 	addi	r2,r2,4
    8c3c:	10800037 	ldwio	r2,0(r2)
    8c40:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    8c44:	e0bffd17 	ldw	r2,-12(fp)
    8c48:	1081000c 	andi	r2,r2,1024
    8c4c:	1005003a 	cmpeq	r2,r2,zero
    8c50:	10000c1e 	bne	r2,zero,8c84 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    8c54:	e0bffe17 	ldw	r2,-8(fp)
    8c58:	10800017 	ldw	r2,0(r2)
    8c5c:	11000104 	addi	r4,r2,4
    8c60:	e0bffe17 	ldw	r2,-8(fp)
    8c64:	10800817 	ldw	r2,32(r2)
    8c68:	10810014 	ori	r2,r2,1024
    8c6c:	1007883a 	mov	r3,r2
    8c70:	2005883a 	mov	r2,r4
    8c74:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    8c78:	e0bffe17 	ldw	r2,-8(fp)
    8c7c:	10000915 	stw	zero,36(r2)
    8c80:	00000a06 	br	8cac <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    8c84:	e0bffe17 	ldw	r2,-8(fp)
    8c88:	10c00917 	ldw	r3,36(r2)
    8c8c:	00a00034 	movhi	r2,32768
    8c90:	10bfff04 	addi	r2,r2,-4
    8c94:	10c00536 	bltu	r2,r3,8cac <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    8c98:	e0bffe17 	ldw	r2,-8(fp)
    8c9c:	10800917 	ldw	r2,36(r2)
    8ca0:	10c00044 	addi	r3,r2,1
    8ca4:	e0bffe17 	ldw	r2,-8(fp)
    8ca8:	10c00915 	stw	r3,36(r2)
    8cac:	00800074 	movhi	r2,1
    8cb0:	10b39604 	addi	r2,r2,-12712
    8cb4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    8cb8:	e037883a 	mov	sp,fp
    8cbc:	df000017 	ldw	fp,0(sp)
    8cc0:	dec00104 	addi	sp,sp,4
    8cc4:	f800283a 	ret

00008cc8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    8cc8:	defffc04 	addi	sp,sp,-16
    8ccc:	df000315 	stw	fp,12(sp)
    8cd0:	df000304 	addi	fp,sp,12
    8cd4:	e13ffd15 	stw	r4,-12(fp)
    8cd8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    8cdc:	00000706 	br	8cfc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    8ce0:	e0bffe17 	ldw	r2,-8(fp)
    8ce4:	1090000c 	andi	r2,r2,16384
    8ce8:	1005003a 	cmpeq	r2,r2,zero
    8cec:	1000031e 	bne	r2,zero,8cfc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    8cf0:	00bffd44 	movi	r2,-11
    8cf4:	e0bfff15 	stw	r2,-4(fp)
    8cf8:	00000b06 	br	8d28 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    8cfc:	e0bffd17 	ldw	r2,-12(fp)
    8d00:	10c00d17 	ldw	r3,52(r2)
    8d04:	e0bffd17 	ldw	r2,-12(fp)
    8d08:	10800c17 	ldw	r2,48(r2)
    8d0c:	18800526 	beq	r3,r2,8d24 <altera_avalon_jtag_uart_close+0x5c>
    8d10:	e0bffd17 	ldw	r2,-12(fp)
    8d14:	10c00917 	ldw	r3,36(r2)
    8d18:	e0bffd17 	ldw	r2,-12(fp)
    8d1c:	10800117 	ldw	r2,4(r2)
    8d20:	18bfef36 	bltu	r3,r2,8ce0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    8d24:	e03fff15 	stw	zero,-4(fp)
    8d28:	e0bfff17 	ldw	r2,-4(fp)
}
    8d2c:	e037883a 	mov	sp,fp
    8d30:	df000017 	ldw	fp,0(sp)
    8d34:	dec00104 	addi	sp,sp,4
    8d38:	f800283a 	ret

00008d3c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    8d3c:	defff804 	addi	sp,sp,-32
    8d40:	df000715 	stw	fp,28(sp)
    8d44:	df000704 	addi	fp,sp,28
    8d48:	e13ffb15 	stw	r4,-20(fp)
    8d4c:	e17ffc15 	stw	r5,-16(fp)
    8d50:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    8d54:	00bff9c4 	movi	r2,-25
    8d58:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    8d5c:	e0bffc17 	ldw	r2,-16(fp)
    8d60:	e0bfff15 	stw	r2,-4(fp)
    8d64:	e0ffff17 	ldw	r3,-4(fp)
    8d68:	189a8060 	cmpeqi	r2,r3,27137
    8d6c:	1000041e 	bne	r2,zero,8d80 <altera_avalon_jtag_uart_ioctl+0x44>
    8d70:	e0ffff17 	ldw	r3,-4(fp)
    8d74:	189a80a0 	cmpeqi	r2,r3,27138
    8d78:	10001b1e 	bne	r2,zero,8de8 <altera_avalon_jtag_uart_ioctl+0xac>
    8d7c:	00002706 	br	8e1c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    8d80:	e0bffb17 	ldw	r2,-20(fp)
    8d84:	10c00117 	ldw	r3,4(r2)
    8d88:	00a00034 	movhi	r2,32768
    8d8c:	10bfffc4 	addi	r2,r2,-1
    8d90:	18802226 	beq	r3,r2,8e1c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    8d94:	e0bffd17 	ldw	r2,-12(fp)
    8d98:	10800017 	ldw	r2,0(r2)
    8d9c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    8da0:	e0bff917 	ldw	r2,-28(fp)
    8da4:	10800090 	cmplti	r2,r2,2
    8da8:	1000071e 	bne	r2,zero,8dc8 <altera_avalon_jtag_uart_ioctl+0x8c>
    8dac:	e0fff917 	ldw	r3,-28(fp)
    8db0:	00a00034 	movhi	r2,32768
    8db4:	10bfffc4 	addi	r2,r2,-1
    8db8:	18800326 	beq	r3,r2,8dc8 <altera_avalon_jtag_uart_ioctl+0x8c>
    8dbc:	e0bff917 	ldw	r2,-28(fp)
    8dc0:	e0bffe15 	stw	r2,-8(fp)
    8dc4:	00000306 	br	8dd4 <altera_avalon_jtag_uart_ioctl+0x98>
    8dc8:	00e00034 	movhi	r3,32768
    8dcc:	18ffff84 	addi	r3,r3,-2
    8dd0:	e0fffe15 	stw	r3,-8(fp)
    8dd4:	e0bffb17 	ldw	r2,-20(fp)
    8dd8:	e0fffe17 	ldw	r3,-8(fp)
    8ddc:	10c00115 	stw	r3,4(r2)
      rc = 0;
    8de0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    8de4:	00000d06 	br	8e1c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    8de8:	e0bffb17 	ldw	r2,-20(fp)
    8dec:	10c00117 	ldw	r3,4(r2)
    8df0:	00a00034 	movhi	r2,32768
    8df4:	10bfffc4 	addi	r2,r2,-1
    8df8:	18800826 	beq	r3,r2,8e1c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    8dfc:	e13ffd17 	ldw	r4,-12(fp)
    8e00:	e0bffb17 	ldw	r2,-20(fp)
    8e04:	10c00917 	ldw	r3,36(r2)
    8e08:	e0bffb17 	ldw	r2,-20(fp)
    8e0c:	10800117 	ldw	r2,4(r2)
    8e10:	1885803a 	cmpltu	r2,r3,r2
    8e14:	20800015 	stw	r2,0(r4)
      rc = 0;
    8e18:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    8e1c:	e0bffa17 	ldw	r2,-24(fp)
}
    8e20:	e037883a 	mov	sp,fp
    8e24:	df000017 	ldw	fp,0(sp)
    8e28:	dec00104 	addi	sp,sp,4
    8e2c:	f800283a 	ret

00008e30 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    8e30:	defff204 	addi	sp,sp,-56
    8e34:	dfc00d15 	stw	ra,52(sp)
    8e38:	df000c15 	stw	fp,48(sp)
    8e3c:	df000c04 	addi	fp,sp,48
    8e40:	e13ffb15 	stw	r4,-20(fp)
    8e44:	e17ffc15 	stw	r5,-16(fp)
    8e48:	e1bffd15 	stw	r6,-12(fp)
    8e4c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    8e50:	e0bffc17 	ldw	r2,-16(fp)
    8e54:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    8e58:	00004806 	br	8f7c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    8e5c:	e0bffb17 	ldw	r2,-20(fp)
    8e60:	10800a17 	ldw	r2,40(r2)
    8e64:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    8e68:	e0bffb17 	ldw	r2,-20(fp)
    8e6c:	10800b17 	ldw	r2,44(r2)
    8e70:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    8e74:	e0fff717 	ldw	r3,-36(fp)
    8e78:	e0bff617 	ldw	r2,-40(fp)
    8e7c:	18800536 	bltu	r3,r2,8e94 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    8e80:	e0bff717 	ldw	r2,-36(fp)
    8e84:	e0fff617 	ldw	r3,-40(fp)
    8e88:	10c5c83a 	sub	r2,r2,r3
    8e8c:	e0bff815 	stw	r2,-32(fp)
    8e90:	00000406 	br	8ea4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    8e94:	00820004 	movi	r2,2048
    8e98:	e0fff617 	ldw	r3,-40(fp)
    8e9c:	10c5c83a 	sub	r2,r2,r3
    8ea0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    8ea4:	e0bff817 	ldw	r2,-32(fp)
    8ea8:	1005003a 	cmpeq	r2,r2,zero
    8eac:	10001f1e 	bne	r2,zero,8f2c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    8eb0:	e0fffd17 	ldw	r3,-12(fp)
    8eb4:	e0bff817 	ldw	r2,-32(fp)
    8eb8:	1880022e 	bgeu	r3,r2,8ec4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    8ebc:	e0bffd17 	ldw	r2,-12(fp)
    8ec0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    8ec4:	e0bffb17 	ldw	r2,-20(fp)
    8ec8:	10c00e04 	addi	r3,r2,56
    8ecc:	e0bff617 	ldw	r2,-40(fp)
    8ed0:	1887883a 	add	r3,r3,r2
    8ed4:	e0bffa17 	ldw	r2,-24(fp)
    8ed8:	1009883a 	mov	r4,r2
    8edc:	180b883a 	mov	r5,r3
    8ee0:	e1bff817 	ldw	r6,-32(fp)
    8ee4:	000a41c0 	call	a41c <memcpy>
      ptr   += n;
    8ee8:	e0fff817 	ldw	r3,-32(fp)
    8eec:	e0bffa17 	ldw	r2,-24(fp)
    8ef0:	10c5883a 	add	r2,r2,r3
    8ef4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    8ef8:	e0fffd17 	ldw	r3,-12(fp)
    8efc:	e0bff817 	ldw	r2,-32(fp)
    8f00:	1885c83a 	sub	r2,r3,r2
    8f04:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8f08:	e0fff617 	ldw	r3,-40(fp)
    8f0c:	e0bff817 	ldw	r2,-32(fp)
    8f10:	1885883a 	add	r2,r3,r2
    8f14:	10c1ffcc 	andi	r3,r2,2047
    8f18:	e0bffb17 	ldw	r2,-20(fp)
    8f1c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    8f20:	e0bffd17 	ldw	r2,-12(fp)
    8f24:	10800048 	cmpgei	r2,r2,1
    8f28:	103fcc1e 	bne	r2,zero,8e5c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    8f2c:	e0fffa17 	ldw	r3,-24(fp)
    8f30:	e0bffc17 	ldw	r2,-16(fp)
    8f34:	1880141e 	bne	r3,r2,8f88 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    8f38:	e0bffe17 	ldw	r2,-8(fp)
    8f3c:	1090000c 	andi	r2,r2,16384
    8f40:	1004c03a 	cmpne	r2,r2,zero
    8f44:	1000101e 	bne	r2,zero,8f88 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    8f48:	e0bffb17 	ldw	r2,-20(fp)
    8f4c:	10c00a17 	ldw	r3,40(r2)
    8f50:	e0bff717 	ldw	r2,-36(fp)
    8f54:	1880051e 	bne	r3,r2,8f6c <altera_avalon_jtag_uart_read+0x13c>
    8f58:	e0bffb17 	ldw	r2,-20(fp)
    8f5c:	10c00917 	ldw	r3,36(r2)
    8f60:	e0bffb17 	ldw	r2,-20(fp)
    8f64:	10800117 	ldw	r2,4(r2)
    8f68:	18bff736 	bltu	r3,r2,8f48 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    8f6c:	e0bffb17 	ldw	r2,-20(fp)
    8f70:	10c00a17 	ldw	r3,40(r2)
    8f74:	e0bff717 	ldw	r2,-36(fp)
    8f78:	18800326 	beq	r3,r2,8f88 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    8f7c:	e0bffd17 	ldw	r2,-12(fp)
    8f80:	10800048 	cmpgei	r2,r2,1
    8f84:	103fb51e 	bne	r2,zero,8e5c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    8f88:	e0fffa17 	ldw	r3,-24(fp)
    8f8c:	e0bffc17 	ldw	r2,-16(fp)
    8f90:	18801926 	beq	r3,r2,8ff8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8f94:	0005303a 	rdctl	r2,status
    8f98:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8f9c:	e0fff517 	ldw	r3,-44(fp)
    8fa0:	00bfff84 	movi	r2,-2
    8fa4:	1884703a 	and	r2,r3,r2
    8fa8:	1001703a 	wrctl	status,r2
  
  return context;
    8fac:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    8fb0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8fb4:	e0bffb17 	ldw	r2,-20(fp)
    8fb8:	10800817 	ldw	r2,32(r2)
    8fbc:	10c00054 	ori	r3,r2,1
    8fc0:	e0bffb17 	ldw	r2,-20(fp)
    8fc4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    8fc8:	e0bffb17 	ldw	r2,-20(fp)
    8fcc:	10800017 	ldw	r2,0(r2)
    8fd0:	11000104 	addi	r4,r2,4
    8fd4:	e0bffb17 	ldw	r2,-20(fp)
    8fd8:	10800817 	ldw	r2,32(r2)
    8fdc:	1007883a 	mov	r3,r2
    8fe0:	2005883a 	mov	r2,r4
    8fe4:	10c00035 	stwio	r3,0(r2)
    8fe8:	e0bff917 	ldw	r2,-28(fp)
    8fec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8ff0:	e0bff417 	ldw	r2,-48(fp)
    8ff4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    8ff8:	e0fffa17 	ldw	r3,-24(fp)
    8ffc:	e0bffc17 	ldw	r2,-16(fp)
    9000:	18800526 	beq	r3,r2,9018 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    9004:	e0fffa17 	ldw	r3,-24(fp)
    9008:	e0bffc17 	ldw	r2,-16(fp)
    900c:	1887c83a 	sub	r3,r3,r2
    9010:	e0ffff15 	stw	r3,-4(fp)
    9014:	00000906 	br	903c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    9018:	e0bffe17 	ldw	r2,-8(fp)
    901c:	1090000c 	andi	r2,r2,16384
    9020:	1005003a 	cmpeq	r2,r2,zero
    9024:	1000031e 	bne	r2,zero,9034 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    9028:	00bffd44 	movi	r2,-11
    902c:	e0bfff15 	stw	r2,-4(fp)
    9030:	00000206 	br	903c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    9034:	00bffec4 	movi	r2,-5
    9038:	e0bfff15 	stw	r2,-4(fp)
    903c:	e0bfff17 	ldw	r2,-4(fp)
}
    9040:	e037883a 	mov	sp,fp
    9044:	dfc00117 	ldw	ra,4(sp)
    9048:	df000017 	ldw	fp,0(sp)
    904c:	dec00204 	addi	sp,sp,8
    9050:	f800283a 	ret

00009054 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9054:	defff204 	addi	sp,sp,-56
    9058:	dfc00d15 	stw	ra,52(sp)
    905c:	df000c15 	stw	fp,48(sp)
    9060:	df000c04 	addi	fp,sp,48
    9064:	e13ffb15 	stw	r4,-20(fp)
    9068:	e17ffc15 	stw	r5,-16(fp)
    906c:	e1bffd15 	stw	r6,-12(fp)
    9070:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    9074:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    9078:	e0bffc17 	ldw	r2,-16(fp)
    907c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    9080:	00003a06 	br	916c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    9084:	e0bffb17 	ldw	r2,-20(fp)
    9088:	10800c17 	ldw	r2,48(r2)
    908c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    9090:	e0bffb17 	ldw	r2,-20(fp)
    9094:	10800d17 	ldw	r2,52(r2)
    9098:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    909c:	e0fffa17 	ldw	r3,-24(fp)
    90a0:	e0bff917 	ldw	r2,-28(fp)
    90a4:	1880062e 	bgeu	r3,r2,90c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    90a8:	e0fff917 	ldw	r3,-28(fp)
    90ac:	e0bffa17 	ldw	r2,-24(fp)
    90b0:	1885c83a 	sub	r2,r3,r2
    90b4:	10bfffc4 	addi	r2,r2,-1
    90b8:	e0bff815 	stw	r2,-32(fp)
    90bc:	00000c06 	br	90f0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    90c0:	e0bff917 	ldw	r2,-28(fp)
    90c4:	1005003a 	cmpeq	r2,r2,zero
    90c8:	1000051e 	bne	r2,zero,90e0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    90cc:	00820004 	movi	r2,2048
    90d0:	e0fffa17 	ldw	r3,-24(fp)
    90d4:	10c5c83a 	sub	r2,r2,r3
    90d8:	e0bff815 	stw	r2,-32(fp)
    90dc:	00000406 	br	90f0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    90e0:	0081ffc4 	movi	r2,2047
    90e4:	e0fffa17 	ldw	r3,-24(fp)
    90e8:	10c5c83a 	sub	r2,r2,r3
    90ec:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    90f0:	e0bff817 	ldw	r2,-32(fp)
    90f4:	1005003a 	cmpeq	r2,r2,zero
    90f8:	10001f1e 	bne	r2,zero,9178 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    90fc:	e0fffd17 	ldw	r3,-12(fp)
    9100:	e0bff817 	ldw	r2,-32(fp)
    9104:	1880022e 	bgeu	r3,r2,9110 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    9108:	e0bffd17 	ldw	r2,-12(fp)
    910c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    9110:	e0bffb17 	ldw	r2,-20(fp)
    9114:	10c20e04 	addi	r3,r2,2104
    9118:	e0bffa17 	ldw	r2,-24(fp)
    911c:	1885883a 	add	r2,r3,r2
    9120:	e0fffc17 	ldw	r3,-16(fp)
    9124:	1009883a 	mov	r4,r2
    9128:	180b883a 	mov	r5,r3
    912c:	e1bff817 	ldw	r6,-32(fp)
    9130:	000a41c0 	call	a41c <memcpy>
      ptr   += n;
    9134:	e0fff817 	ldw	r3,-32(fp)
    9138:	e0bffc17 	ldw	r2,-16(fp)
    913c:	10c5883a 	add	r2,r2,r3
    9140:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    9144:	e0fffd17 	ldw	r3,-12(fp)
    9148:	e0bff817 	ldw	r2,-32(fp)
    914c:	1885c83a 	sub	r2,r3,r2
    9150:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9154:	e0fffa17 	ldw	r3,-24(fp)
    9158:	e0bff817 	ldw	r2,-32(fp)
    915c:	1885883a 	add	r2,r3,r2
    9160:	10c1ffcc 	andi	r3,r2,2047
    9164:	e0bffb17 	ldw	r2,-20(fp)
    9168:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    916c:	e0bffd17 	ldw	r2,-12(fp)
    9170:	10800048 	cmpgei	r2,r2,1
    9174:	103fc31e 	bne	r2,zero,9084 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9178:	0005303a 	rdctl	r2,status
    917c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9180:	e0fff517 	ldw	r3,-44(fp)
    9184:	00bfff84 	movi	r2,-2
    9188:	1884703a 	and	r2,r3,r2
    918c:	1001703a 	wrctl	status,r2
  
  return context;
    9190:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    9194:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    9198:	e0bffb17 	ldw	r2,-20(fp)
    919c:	10800817 	ldw	r2,32(r2)
    91a0:	10c00094 	ori	r3,r2,2
    91a4:	e0bffb17 	ldw	r2,-20(fp)
    91a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    91ac:	e0bffb17 	ldw	r2,-20(fp)
    91b0:	10800017 	ldw	r2,0(r2)
    91b4:	11000104 	addi	r4,r2,4
    91b8:	e0bffb17 	ldw	r2,-20(fp)
    91bc:	10800817 	ldw	r2,32(r2)
    91c0:	1007883a 	mov	r3,r2
    91c4:	2005883a 	mov	r2,r4
    91c8:	10c00035 	stwio	r3,0(r2)
    91cc:	e0bff717 	ldw	r2,-36(fp)
    91d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    91d4:	e0bff417 	ldw	r2,-48(fp)
    91d8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    91dc:	e0bffd17 	ldw	r2,-12(fp)
    91e0:	10800050 	cmplti	r2,r2,1
    91e4:	1000111e 	bne	r2,zero,922c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    91e8:	e0bffe17 	ldw	r2,-8(fp)
    91ec:	1090000c 	andi	r2,r2,16384
    91f0:	1004c03a 	cmpne	r2,r2,zero
    91f4:	1000101e 	bne	r2,zero,9238 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    91f8:	e0bffb17 	ldw	r2,-20(fp)
    91fc:	10c00d17 	ldw	r3,52(r2)
    9200:	e0bff917 	ldw	r2,-28(fp)
    9204:	1880051e 	bne	r3,r2,921c <altera_avalon_jtag_uart_write+0x1c8>
    9208:	e0bffb17 	ldw	r2,-20(fp)
    920c:	10c00917 	ldw	r3,36(r2)
    9210:	e0bffb17 	ldw	r2,-20(fp)
    9214:	10800117 	ldw	r2,4(r2)
    9218:	18bff736 	bltu	r3,r2,91f8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    921c:	e0bffb17 	ldw	r2,-20(fp)
    9220:	10c00d17 	ldw	r3,52(r2)
    9224:	e0bff917 	ldw	r2,-28(fp)
    9228:	18800326 	beq	r3,r2,9238 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    922c:	e0bffd17 	ldw	r2,-12(fp)
    9230:	10800048 	cmpgei	r2,r2,1
    9234:	103fcd1e 	bne	r2,zero,916c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    9238:	e0fffc17 	ldw	r3,-16(fp)
    923c:	e0bff617 	ldw	r2,-40(fp)
    9240:	18800526 	beq	r3,r2,9258 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    9244:	e0fffc17 	ldw	r3,-16(fp)
    9248:	e0bff617 	ldw	r2,-40(fp)
    924c:	1887c83a 	sub	r3,r3,r2
    9250:	e0ffff15 	stw	r3,-4(fp)
    9254:	00000906 	br	927c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    9258:	e0bffe17 	ldw	r2,-8(fp)
    925c:	1090000c 	andi	r2,r2,16384
    9260:	1005003a 	cmpeq	r2,r2,zero
    9264:	1000031e 	bne	r2,zero,9274 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    9268:	00bffd44 	movi	r2,-11
    926c:	e0bfff15 	stw	r2,-4(fp)
    9270:	00000206 	br	927c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    9274:	00bffec4 	movi	r2,-5
    9278:	e0bfff15 	stw	r2,-4(fp)
    927c:	e0bfff17 	ldw	r2,-4(fp)
}
    9280:	e037883a 	mov	sp,fp
    9284:	dfc00117 	ldw	ra,4(sp)
    9288:	df000017 	ldw	fp,0(sp)
    928c:	dec00204 	addi	sp,sp,8
    9290:	f800283a 	ret

00009294 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    9294:	defff404 	addi	sp,sp,-48
    9298:	df000b15 	stw	fp,44(sp)
    929c:	df000b04 	addi	fp,sp,44
    92a0:	e13ffb15 	stw	r4,-20(fp)
    92a4:	e17ffc15 	stw	r5,-16(fp)
    92a8:	e1bffd15 	stw	r6,-12(fp)
    92ac:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    92b0:	e03ff915 	stw	zero,-28(fp)
    92b4:	00800074 	movhi	r2,1
    92b8:	10b39604 	addi	r2,r2,-12712
    92bc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    92c0:	1005003a 	cmpeq	r2,r2,zero
    92c4:	1000411e 	bne	r2,zero,93cc <alt_alarm_start+0x138>
  {
    if (alarm)
    92c8:	e0bffb17 	ldw	r2,-20(fp)
    92cc:	1005003a 	cmpeq	r2,r2,zero
    92d0:	10003b1e 	bne	r2,zero,93c0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    92d4:	e0fffb17 	ldw	r3,-20(fp)
    92d8:	e0bffd17 	ldw	r2,-12(fp)
    92dc:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    92e0:	e0fffb17 	ldw	r3,-20(fp)
    92e4:	e0bffe17 	ldw	r2,-8(fp)
    92e8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    92ec:	0005303a 	rdctl	r2,status
    92f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    92f4:	e0fff817 	ldw	r3,-32(fp)
    92f8:	00bfff84 	movi	r2,-2
    92fc:	1884703a 	and	r2,r3,r2
    9300:	1001703a 	wrctl	status,r2
  
  return context;
    9304:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    9308:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    930c:	00800074 	movhi	r2,1
    9310:	10b39704 	addi	r2,r2,-12708
    9314:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    9318:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    931c:	e0fffc17 	ldw	r3,-16(fp)
    9320:	e0bff917 	ldw	r2,-28(fp)
    9324:	1885883a 	add	r2,r3,r2
    9328:	10c00044 	addi	r3,r2,1
    932c:	e0bffb17 	ldw	r2,-20(fp)
    9330:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    9334:	e0bffb17 	ldw	r2,-20(fp)
    9338:	10c00217 	ldw	r3,8(r2)
    933c:	e0bff917 	ldw	r2,-28(fp)
    9340:	1880042e 	bgeu	r3,r2,9354 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    9344:	e0fffb17 	ldw	r3,-20(fp)
    9348:	00800044 	movi	r2,1
    934c:	18800405 	stb	r2,16(r3)
    9350:	00000206 	br	935c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    9354:	e0bffb17 	ldw	r2,-20(fp)
    9358:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    935c:	e0fffb17 	ldw	r3,-20(fp)
    9360:	00800074 	movhi	r2,1
    9364:	10aeca04 	addi	r2,r2,-17624
    9368:	e0bff615 	stw	r2,-40(fp)
    936c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9370:	e0fff717 	ldw	r3,-36(fp)
    9374:	e0bff617 	ldw	r2,-40(fp)
    9378:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    937c:	e0bff617 	ldw	r2,-40(fp)
    9380:	10c00017 	ldw	r3,0(r2)
    9384:	e0bff717 	ldw	r2,-36(fp)
    9388:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    938c:	e0bff617 	ldw	r2,-40(fp)
    9390:	10c00017 	ldw	r3,0(r2)
    9394:	e0bff717 	ldw	r2,-36(fp)
    9398:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    939c:	e0fff617 	ldw	r3,-40(fp)
    93a0:	e0bff717 	ldw	r2,-36(fp)
    93a4:	18800015 	stw	r2,0(r3)
    93a8:	e0bffa17 	ldw	r2,-24(fp)
    93ac:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    93b0:	e0bff517 	ldw	r2,-44(fp)
    93b4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    93b8:	e03fff15 	stw	zero,-4(fp)
    93bc:	00000506 	br	93d4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    93c0:	00bffa84 	movi	r2,-22
    93c4:	e0bfff15 	stw	r2,-4(fp)
    93c8:	00000206 	br	93d4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    93cc:	00bfde84 	movi	r2,-134
    93d0:	e0bfff15 	stw	r2,-4(fp)
    93d4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    93d8:	e037883a 	mov	sp,fp
    93dc:	df000017 	ldw	fp,0(sp)
    93e0:	dec00104 	addi	sp,sp,4
    93e4:	f800283a 	ret

000093e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    93e8:	defff804 	addi	sp,sp,-32
    93ec:	dfc00715 	stw	ra,28(sp)
    93f0:	df000615 	stw	fp,24(sp)
    93f4:	df000604 	addi	fp,sp,24
    93f8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    93fc:	e0bffc17 	ldw	r2,-16(fp)
    9400:	1004803a 	cmplt	r2,r2,zero
    9404:	1000081e 	bne	r2,zero,9428 <close+0x40>
    9408:	e0bffc17 	ldw	r2,-16(fp)
    940c:	10800324 	muli	r2,r2,12
    9410:	1007883a 	mov	r3,r2
    9414:	00800074 	movhi	r2,1
    9418:	10ae6104 	addi	r2,r2,-18044
    941c:	1887883a 	add	r3,r3,r2
    9420:	e0ffff15 	stw	r3,-4(fp)
    9424:	00000106 	br	942c <close+0x44>
    9428:	e03fff15 	stw	zero,-4(fp)
    942c:	e0bfff17 	ldw	r2,-4(fp)
    9430:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9434:	e0bffb17 	ldw	r2,-20(fp)
    9438:	1005003a 	cmpeq	r2,r2,zero
    943c:	10001d1e 	bne	r2,zero,94b4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9440:	e0bffb17 	ldw	r2,-20(fp)
    9444:	10800017 	ldw	r2,0(r2)
    9448:	10800417 	ldw	r2,16(r2)
    944c:	1005003a 	cmpeq	r2,r2,zero
    9450:	1000071e 	bne	r2,zero,9470 <close+0x88>
    9454:	e0bffb17 	ldw	r2,-20(fp)
    9458:	10800017 	ldw	r2,0(r2)
    945c:	10800417 	ldw	r2,16(r2)
    9460:	e13ffb17 	ldw	r4,-20(fp)
    9464:	103ee83a 	callr	r2
    9468:	e0bffe15 	stw	r2,-8(fp)
    946c:	00000106 	br	9474 <close+0x8c>
    9470:	e03ffe15 	stw	zero,-8(fp)
    9474:	e0bffe17 	ldw	r2,-8(fp)
    9478:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    947c:	e13ffc17 	ldw	r4,-16(fp)
    9480:	0009e8c0 	call	9e8c <alt_release_fd>
    if (rval < 0)
    9484:	e0bffa17 	ldw	r2,-24(fp)
    9488:	1004403a 	cmpge	r2,r2,zero
    948c:	1000071e 	bne	r2,zero,94ac <close+0xc4>
    {
      ALT_ERRNO = -rval;
    9490:	00094e40 	call	94e4 <alt_get_errno>
    9494:	e0fffa17 	ldw	r3,-24(fp)
    9498:	00c7c83a 	sub	r3,zero,r3
    949c:	10c00015 	stw	r3,0(r2)
      return -1;
    94a0:	00bfffc4 	movi	r2,-1
    94a4:	e0bffd15 	stw	r2,-12(fp)
    94a8:	00000806 	br	94cc <close+0xe4>
    }
    return 0;
    94ac:	e03ffd15 	stw	zero,-12(fp)
    94b0:	00000606 	br	94cc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    94b4:	00094e40 	call	94e4 <alt_get_errno>
    94b8:	1007883a 	mov	r3,r2
    94bc:	00801444 	movi	r2,81
    94c0:	18800015 	stw	r2,0(r3)
    return -1;
    94c4:	00bfffc4 	movi	r2,-1
    94c8:	e0bffd15 	stw	r2,-12(fp)
    94cc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    94d0:	e037883a 	mov	sp,fp
    94d4:	dfc00117 	ldw	ra,4(sp)
    94d8:	df000017 	ldw	fp,0(sp)
    94dc:	dec00204 	addi	sp,sp,8
    94e0:	f800283a 	ret

000094e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    94e4:	defffd04 	addi	sp,sp,-12
    94e8:	dfc00215 	stw	ra,8(sp)
    94ec:	df000115 	stw	fp,4(sp)
    94f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    94f4:	00800074 	movhi	r2,1
    94f8:	10aec804 	addi	r2,r2,-17632
    94fc:	10800017 	ldw	r2,0(r2)
    9500:	1005003a 	cmpeq	r2,r2,zero
    9504:	1000061e 	bne	r2,zero,9520 <alt_get_errno+0x3c>
    9508:	00800074 	movhi	r2,1
    950c:	10aec804 	addi	r2,r2,-17632
    9510:	10800017 	ldw	r2,0(r2)
    9514:	103ee83a 	callr	r2
    9518:	e0bfff15 	stw	r2,-4(fp)
    951c:	00000306 	br	952c <alt_get_errno+0x48>
    9520:	00800074 	movhi	r2,1
    9524:	10b39104 	addi	r2,r2,-12732
    9528:	e0bfff15 	stw	r2,-4(fp)
    952c:	e0bfff17 	ldw	r2,-4(fp)
}
    9530:	e037883a 	mov	sp,fp
    9534:	dfc00117 	ldw	ra,4(sp)
    9538:	df000017 	ldw	fp,0(sp)
    953c:	dec00204 	addi	sp,sp,8
    9540:	f800283a 	ret

00009544 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9544:	defffe04 	addi	sp,sp,-8
    9548:	df000115 	stw	fp,4(sp)
    954c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    9550:	e03fff15 	stw	zero,-4(fp)
    9554:	00000506 	br	956c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    9558:	e0bfff17 	ldw	r2,-4(fp)
    955c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    9560:	e0bfff17 	ldw	r2,-4(fp)
    9564:	10800804 	addi	r2,r2,32
    9568:	e0bfff15 	stw	r2,-4(fp)
    956c:	e0bfff17 	ldw	r2,-4(fp)
    9570:	10820030 	cmpltui	r2,r2,2048
    9574:	103ff81e 	bne	r2,zero,9558 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9578:	e037883a 	mov	sp,fp
    957c:	df000017 	ldw	fp,0(sp)
    9580:	dec00104 	addi	sp,sp,4
    9584:	f800283a 	ret

00009588 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9588:	defffc04 	addi	sp,sp,-16
    958c:	df000315 	stw	fp,12(sp)
    9590:	df000304 	addi	fp,sp,12
    9594:	e13ffd15 	stw	r4,-12(fp)
    9598:	e17ffe15 	stw	r5,-8(fp)
    959c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    95a0:	e0bfff17 	ldw	r2,-4(fp)
}
    95a4:	e037883a 	mov	sp,fp
    95a8:	df000017 	ldw	fp,0(sp)
    95ac:	dec00104 	addi	sp,sp,4
    95b0:	f800283a 	ret

000095b4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    95b4:	defff904 	addi	sp,sp,-28
    95b8:	dfc00615 	stw	ra,24(sp)
    95bc:	df000515 	stw	fp,20(sp)
    95c0:	df000504 	addi	fp,sp,20
    95c4:	e13ffd15 	stw	r4,-12(fp)
    95c8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    95cc:	e0bffd17 	ldw	r2,-12(fp)
    95d0:	1005003a 	cmpeq	r2,r2,zero
    95d4:	1000041e 	bne	r2,zero,95e8 <alt_dev_llist_insert+0x34>
    95d8:	e0bffd17 	ldw	r2,-12(fp)
    95dc:	10800217 	ldw	r2,8(r2)
    95e0:	1004c03a 	cmpne	r2,r2,zero
    95e4:	1000071e 	bne	r2,zero,9604 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    95e8:	00096680 	call	9668 <alt_get_errno>
    95ec:	1007883a 	mov	r3,r2
    95f0:	00800584 	movi	r2,22
    95f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    95f8:	00bffa84 	movi	r2,-22
    95fc:	e0bfff15 	stw	r2,-4(fp)
    9600:	00001306 	br	9650 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9604:	e0fffd17 	ldw	r3,-12(fp)
    9608:	e0bffe17 	ldw	r2,-8(fp)
    960c:	e0bffb15 	stw	r2,-20(fp)
    9610:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9614:	e0fffc17 	ldw	r3,-16(fp)
    9618:	e0bffb17 	ldw	r2,-20(fp)
    961c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    9620:	e0bffb17 	ldw	r2,-20(fp)
    9624:	10c00017 	ldw	r3,0(r2)
    9628:	e0bffc17 	ldw	r2,-16(fp)
    962c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9630:	e0bffb17 	ldw	r2,-20(fp)
    9634:	10c00017 	ldw	r3,0(r2)
    9638:	e0bffc17 	ldw	r2,-16(fp)
    963c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    9640:	e0fffb17 	ldw	r3,-20(fp)
    9644:	e0bffc17 	ldw	r2,-16(fp)
    9648:	18800015 	stw	r2,0(r3)

  return 0;  
    964c:	e03fff15 	stw	zero,-4(fp)
    9650:	e0bfff17 	ldw	r2,-4(fp)
}
    9654:	e037883a 	mov	sp,fp
    9658:	dfc00117 	ldw	ra,4(sp)
    965c:	df000017 	ldw	fp,0(sp)
    9660:	dec00204 	addi	sp,sp,8
    9664:	f800283a 	ret

00009668 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9668:	defffd04 	addi	sp,sp,-12
    966c:	dfc00215 	stw	ra,8(sp)
    9670:	df000115 	stw	fp,4(sp)
    9674:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9678:	00800074 	movhi	r2,1
    967c:	10aec804 	addi	r2,r2,-17632
    9680:	10800017 	ldw	r2,0(r2)
    9684:	1005003a 	cmpeq	r2,r2,zero
    9688:	1000061e 	bne	r2,zero,96a4 <alt_get_errno+0x3c>
    968c:	00800074 	movhi	r2,1
    9690:	10aec804 	addi	r2,r2,-17632
    9694:	10800017 	ldw	r2,0(r2)
    9698:	103ee83a 	callr	r2
    969c:	e0bfff15 	stw	r2,-4(fp)
    96a0:	00000306 	br	96b0 <alt_get_errno+0x48>
    96a4:	00800074 	movhi	r2,1
    96a8:	10b39104 	addi	r2,r2,-12732
    96ac:	e0bfff15 	stw	r2,-4(fp)
    96b0:	e0bfff17 	ldw	r2,-4(fp)
}
    96b4:	e037883a 	mov	sp,fp
    96b8:	dfc00117 	ldw	ra,4(sp)
    96bc:	df000017 	ldw	fp,0(sp)
    96c0:	dec00204 	addi	sp,sp,8
    96c4:	f800283a 	ret

000096c8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    96c8:	defffd04 	addi	sp,sp,-12
    96cc:	dfc00215 	stw	ra,8(sp)
    96d0:	df000115 	stw	fp,4(sp)
    96d4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    96d8:	00bfff04 	movi	r2,-4
    96dc:	00c00074 	movhi	r3,1
    96e0:	18e9f604 	addi	r3,r3,-22568
    96e4:	1885883a 	add	r2,r3,r2
    96e8:	e0bfff15 	stw	r2,-4(fp)
    96ec:	00000606 	br	9708 <_do_ctors+0x40>
        (*ctor) (); 
    96f0:	e0bfff17 	ldw	r2,-4(fp)
    96f4:	10800017 	ldw	r2,0(r2)
    96f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    96fc:	e0bfff17 	ldw	r2,-4(fp)
    9700:	10bfff04 	addi	r2,r2,-4
    9704:	e0bfff15 	stw	r2,-4(fp)
    9708:	e0ffff17 	ldw	r3,-4(fp)
    970c:	00800074 	movhi	r2,1
    9710:	10a9f504 	addi	r2,r2,-22572
    9714:	18bff62e 	bgeu	r3,r2,96f0 <_do_ctors+0x28>
        (*ctor) (); 
}
    9718:	e037883a 	mov	sp,fp
    971c:	dfc00117 	ldw	ra,4(sp)
    9720:	df000017 	ldw	fp,0(sp)
    9724:	dec00204 	addi	sp,sp,8
    9728:	f800283a 	ret

0000972c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    972c:	defffd04 	addi	sp,sp,-12
    9730:	dfc00215 	stw	ra,8(sp)
    9734:	df000115 	stw	fp,4(sp)
    9738:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    973c:	00bfff04 	movi	r2,-4
    9740:	00c00074 	movhi	r3,1
    9744:	18e9f604 	addi	r3,r3,-22568
    9748:	1885883a 	add	r2,r3,r2
    974c:	e0bfff15 	stw	r2,-4(fp)
    9750:	00000606 	br	976c <_do_dtors+0x40>
        (*dtor) (); 
    9754:	e0bfff17 	ldw	r2,-4(fp)
    9758:	10800017 	ldw	r2,0(r2)
    975c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9760:	e0bfff17 	ldw	r2,-4(fp)
    9764:	10bfff04 	addi	r2,r2,-4
    9768:	e0bfff15 	stw	r2,-4(fp)
    976c:	e0ffff17 	ldw	r3,-4(fp)
    9770:	00800074 	movhi	r2,1
    9774:	10a9f604 	addi	r2,r2,-22568
    9778:	18bff62e 	bgeu	r3,r2,9754 <_do_dtors+0x28>
        (*dtor) (); 
}
    977c:	e037883a 	mov	sp,fp
    9780:	dfc00117 	ldw	ra,4(sp)
    9784:	df000017 	ldw	fp,0(sp)
    9788:	dec00204 	addi	sp,sp,8
    978c:	f800283a 	ret

00009790 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9790:	defffe04 	addi	sp,sp,-8
    9794:	dfc00115 	stw	ra,4(sp)
    9798:	df000015 	stw	fp,0(sp)
    979c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    97a0:	0009883a 	mov	r4,zero
    97a4:	01440004 	movi	r5,4096
    97a8:	000a31c0 	call	a31c <alt_icache_flush>
#endif
}
    97ac:	e037883a 	mov	sp,fp
    97b0:	dfc00117 	ldw	ra,4(sp)
    97b4:	df000017 	ldw	fp,0(sp)
    97b8:	dec00204 	addi	sp,sp,8
    97bc:	f800283a 	ret

000097c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    97c0:	defff904 	addi	sp,sp,-28
    97c4:	dfc00615 	stw	ra,24(sp)
    97c8:	df000515 	stw	fp,20(sp)
    97cc:	df000504 	addi	fp,sp,20
    97d0:	e13ffc15 	stw	r4,-16(fp)
    97d4:	e17ffd15 	stw	r5,-12(fp)
    97d8:	e1bffe15 	stw	r6,-8(fp)
    97dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    97e0:	e0800217 	ldw	r2,8(fp)
    97e4:	d8800015 	stw	r2,0(sp)
    97e8:	e13ffc17 	ldw	r4,-16(fp)
    97ec:	e17ffd17 	ldw	r5,-12(fp)
    97f0:	e1bffe17 	ldw	r6,-8(fp)
    97f4:	e1ffff17 	ldw	r7,-4(fp)
    97f8:	00099940 	call	9994 <alt_iic_isr_register>
}  
    97fc:	e037883a 	mov	sp,fp
    9800:	dfc00117 	ldw	ra,4(sp)
    9804:	df000017 	ldw	fp,0(sp)
    9808:	dec00204 	addi	sp,sp,8
    980c:	f800283a 	ret

00009810 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    9810:	defff904 	addi	sp,sp,-28
    9814:	df000615 	stw	fp,24(sp)
    9818:	df000604 	addi	fp,sp,24
    981c:	e13ffe15 	stw	r4,-8(fp)
    9820:	e17fff15 	stw	r5,-4(fp)
    9824:	e0bfff17 	ldw	r2,-4(fp)
    9828:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    982c:	0005303a 	rdctl	r2,status
    9830:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9834:	e0fffb17 	ldw	r3,-20(fp)
    9838:	00bfff84 	movi	r2,-2
    983c:	1884703a 	and	r2,r3,r2
    9840:	1001703a 	wrctl	status,r2
  
  return context;
    9844:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9848:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    984c:	e0fffc17 	ldw	r3,-16(fp)
    9850:	00800044 	movi	r2,1
    9854:	10c4983a 	sll	r2,r2,r3
    9858:	1007883a 	mov	r3,r2
    985c:	00800074 	movhi	r2,1
    9860:	10b39504 	addi	r2,r2,-12716
    9864:	10800017 	ldw	r2,0(r2)
    9868:	1886b03a 	or	r3,r3,r2
    986c:	00800074 	movhi	r2,1
    9870:	10b39504 	addi	r2,r2,-12716
    9874:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9878:	00800074 	movhi	r2,1
    987c:	10b39504 	addi	r2,r2,-12716
    9880:	10800017 	ldw	r2,0(r2)
    9884:	100170fa 	wrctl	ienable,r2
    9888:	e0bffd17 	ldw	r2,-12(fp)
    988c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9890:	e0bffa17 	ldw	r2,-24(fp)
    9894:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9898:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    989c:	e037883a 	mov	sp,fp
    98a0:	df000017 	ldw	fp,0(sp)
    98a4:	dec00104 	addi	sp,sp,4
    98a8:	f800283a 	ret

000098ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    98ac:	defff904 	addi	sp,sp,-28
    98b0:	df000615 	stw	fp,24(sp)
    98b4:	df000604 	addi	fp,sp,24
    98b8:	e13ffe15 	stw	r4,-8(fp)
    98bc:	e17fff15 	stw	r5,-4(fp)
    98c0:	e0bfff17 	ldw	r2,-4(fp)
    98c4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    98c8:	0005303a 	rdctl	r2,status
    98cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    98d0:	e0fffb17 	ldw	r3,-20(fp)
    98d4:	00bfff84 	movi	r2,-2
    98d8:	1884703a 	and	r2,r3,r2
    98dc:	1001703a 	wrctl	status,r2
  
  return context;
    98e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    98e4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    98e8:	e0fffc17 	ldw	r3,-16(fp)
    98ec:	00800044 	movi	r2,1
    98f0:	10c4983a 	sll	r2,r2,r3
    98f4:	0084303a 	nor	r2,zero,r2
    98f8:	1007883a 	mov	r3,r2
    98fc:	00800074 	movhi	r2,1
    9900:	10b39504 	addi	r2,r2,-12716
    9904:	10800017 	ldw	r2,0(r2)
    9908:	1886703a 	and	r3,r3,r2
    990c:	00800074 	movhi	r2,1
    9910:	10b39504 	addi	r2,r2,-12716
    9914:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9918:	00800074 	movhi	r2,1
    991c:	10b39504 	addi	r2,r2,-12716
    9920:	10800017 	ldw	r2,0(r2)
    9924:	100170fa 	wrctl	ienable,r2
    9928:	e0bffd17 	ldw	r2,-12(fp)
    992c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9930:	e0bffa17 	ldw	r2,-24(fp)
    9934:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9938:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    993c:	e037883a 	mov	sp,fp
    9940:	df000017 	ldw	fp,0(sp)
    9944:	dec00104 	addi	sp,sp,4
    9948:	f800283a 	ret

0000994c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    994c:	defffc04 	addi	sp,sp,-16
    9950:	df000315 	stw	fp,12(sp)
    9954:	df000304 	addi	fp,sp,12
    9958:	e13ffe15 	stw	r4,-8(fp)
    995c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9960:	000530fa 	rdctl	r2,ienable
    9964:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9968:	e0ffff17 	ldw	r3,-4(fp)
    996c:	00800044 	movi	r2,1
    9970:	10c4983a 	sll	r2,r2,r3
    9974:	1007883a 	mov	r3,r2
    9978:	e0bffd17 	ldw	r2,-12(fp)
    997c:	1884703a 	and	r2,r3,r2
    9980:	1004c03a 	cmpne	r2,r2,zero
}
    9984:	e037883a 	mov	sp,fp
    9988:	df000017 	ldw	fp,0(sp)
    998c:	dec00104 	addi	sp,sp,4
    9990:	f800283a 	ret

00009994 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9994:	defff404 	addi	sp,sp,-48
    9998:	dfc00b15 	stw	ra,44(sp)
    999c:	df000a15 	stw	fp,40(sp)
    99a0:	df000a04 	addi	fp,sp,40
    99a4:	e13ffb15 	stw	r4,-20(fp)
    99a8:	e17ffc15 	stw	r5,-16(fp)
    99ac:	e1bffd15 	stw	r6,-12(fp)
    99b0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    99b4:	00bffa84 	movi	r2,-22
    99b8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    99bc:	e0bffc17 	ldw	r2,-16(fp)
    99c0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    99c4:	e0bff917 	ldw	r2,-28(fp)
    99c8:	10800808 	cmpgei	r2,r2,32
    99cc:	1000291e 	bne	r2,zero,9a74 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    99d0:	0005303a 	rdctl	r2,status
    99d4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    99d8:	e0fff717 	ldw	r3,-36(fp)
    99dc:	00bfff84 	movi	r2,-2
    99e0:	1884703a 	and	r2,r3,r2
    99e4:	1001703a 	wrctl	status,r2
  
  return context;
    99e8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    99ec:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    99f0:	e0bff917 	ldw	r2,-28(fp)
    99f4:	00c00074 	movhi	r3,1
    99f8:	18f39804 	addi	r3,r3,-12704
    99fc:	100490fa 	slli	r2,r2,3
    9a00:	10c7883a 	add	r3,r2,r3
    9a04:	e0bffd17 	ldw	r2,-12(fp)
    9a08:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    9a0c:	e0bff917 	ldw	r2,-28(fp)
    9a10:	00c00074 	movhi	r3,1
    9a14:	18f39804 	addi	r3,r3,-12704
    9a18:	100490fa 	slli	r2,r2,3
    9a1c:	10c5883a 	add	r2,r2,r3
    9a20:	10c00104 	addi	r3,r2,4
    9a24:	e0bffe17 	ldw	r2,-8(fp)
    9a28:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9a2c:	e0bffd17 	ldw	r2,-12(fp)
    9a30:	1005003a 	cmpeq	r2,r2,zero
    9a34:	1000051e 	bne	r2,zero,9a4c <alt_iic_isr_register+0xb8>
    9a38:	e17ff917 	ldw	r5,-28(fp)
    9a3c:	e13ffb17 	ldw	r4,-20(fp)
    9a40:	00098100 	call	9810 <alt_ic_irq_enable>
    9a44:	e0bfff15 	stw	r2,-4(fp)
    9a48:	00000406 	br	9a5c <alt_iic_isr_register+0xc8>
    9a4c:	e17ff917 	ldw	r5,-28(fp)
    9a50:	e13ffb17 	ldw	r4,-20(fp)
    9a54:	00098ac0 	call	98ac <alt_ic_irq_disable>
    9a58:	e0bfff15 	stw	r2,-4(fp)
    9a5c:	e0bfff17 	ldw	r2,-4(fp)
    9a60:	e0bffa15 	stw	r2,-24(fp)
    9a64:	e0bff817 	ldw	r2,-32(fp)
    9a68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9a6c:	e0bff617 	ldw	r2,-40(fp)
    9a70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    9a74:	e0bffa17 	ldw	r2,-24(fp)
}
    9a78:	e037883a 	mov	sp,fp
    9a7c:	dfc00117 	ldw	ra,4(sp)
    9a80:	df000017 	ldw	fp,0(sp)
    9a84:	dec00204 	addi	sp,sp,8
    9a88:	f800283a 	ret

00009a8c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9a8c:	defff904 	addi	sp,sp,-28
    9a90:	dfc00615 	stw	ra,24(sp)
    9a94:	df000515 	stw	fp,20(sp)
    9a98:	df000504 	addi	fp,sp,20
    9a9c:	e13ffc15 	stw	r4,-16(fp)
    9aa0:	e17ffd15 	stw	r5,-12(fp)
    9aa4:	e1bffe15 	stw	r6,-8(fp)
    9aa8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    9aac:	e13ffd17 	ldw	r4,-12(fp)
    9ab0:	e17ffe17 	ldw	r5,-8(fp)
    9ab4:	e1bfff17 	ldw	r6,-4(fp)
    9ab8:	0009ca40 	call	9ca4 <open>
    9abc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    9ac0:	e0bffb17 	ldw	r2,-20(fp)
    9ac4:	1004803a 	cmplt	r2,r2,zero
    9ac8:	10001c1e 	bne	r2,zero,9b3c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    9acc:	e0bffb17 	ldw	r2,-20(fp)
    9ad0:	00c00074 	movhi	r3,1
    9ad4:	18ee6104 	addi	r3,r3,-18044
    9ad8:	10800324 	muli	r2,r2,12
    9adc:	10c5883a 	add	r2,r2,r3
    9ae0:	10c00017 	ldw	r3,0(r2)
    9ae4:	e0bffc17 	ldw	r2,-16(fp)
    9ae8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9aec:	e0bffb17 	ldw	r2,-20(fp)
    9af0:	00c00074 	movhi	r3,1
    9af4:	18ee6104 	addi	r3,r3,-18044
    9af8:	10800324 	muli	r2,r2,12
    9afc:	10c5883a 	add	r2,r2,r3
    9b00:	10800104 	addi	r2,r2,4
    9b04:	10c00017 	ldw	r3,0(r2)
    9b08:	e0bffc17 	ldw	r2,-16(fp)
    9b0c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9b10:	e0bffb17 	ldw	r2,-20(fp)
    9b14:	00c00074 	movhi	r3,1
    9b18:	18ee6104 	addi	r3,r3,-18044
    9b1c:	10800324 	muli	r2,r2,12
    9b20:	10c5883a 	add	r2,r2,r3
    9b24:	10800204 	addi	r2,r2,8
    9b28:	10c00017 	ldw	r3,0(r2)
    9b2c:	e0bffc17 	ldw	r2,-16(fp)
    9b30:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9b34:	e13ffb17 	ldw	r4,-20(fp)
    9b38:	0009e8c0 	call	9e8c <alt_release_fd>
  }
} 
    9b3c:	e037883a 	mov	sp,fp
    9b40:	dfc00117 	ldw	ra,4(sp)
    9b44:	df000017 	ldw	fp,0(sp)
    9b48:	dec00204 	addi	sp,sp,8
    9b4c:	f800283a 	ret

00009b50 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9b50:	defffb04 	addi	sp,sp,-20
    9b54:	dfc00415 	stw	ra,16(sp)
    9b58:	df000315 	stw	fp,12(sp)
    9b5c:	df000304 	addi	fp,sp,12
    9b60:	e13ffd15 	stw	r4,-12(fp)
    9b64:	e17ffe15 	stw	r5,-8(fp)
    9b68:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9b6c:	01000074 	movhi	r4,1
    9b70:	212e6404 	addi	r4,r4,-18032
    9b74:	e17ffd17 	ldw	r5,-12(fp)
    9b78:	01800044 	movi	r6,1
    9b7c:	01c07fc4 	movi	r7,511
    9b80:	0009a8c0 	call	9a8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9b84:	01000074 	movhi	r4,1
    9b88:	212e6104 	addi	r4,r4,-18044
    9b8c:	e17ffe17 	ldw	r5,-8(fp)
    9b90:	000d883a 	mov	r6,zero
    9b94:	01c07fc4 	movi	r7,511
    9b98:	0009a8c0 	call	9a8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9b9c:	01000074 	movhi	r4,1
    9ba0:	212e6704 	addi	r4,r4,-18020
    9ba4:	e17fff17 	ldw	r5,-4(fp)
    9ba8:	01800044 	movi	r6,1
    9bac:	01c07fc4 	movi	r7,511
    9bb0:	0009a8c0 	call	9a8c <alt_open_fd>
}  
    9bb4:	e037883a 	mov	sp,fp
    9bb8:	dfc00117 	ldw	ra,4(sp)
    9bbc:	df000017 	ldw	fp,0(sp)
    9bc0:	dec00204 	addi	sp,sp,8
    9bc4:	f800283a 	ret

00009bc8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9bc8:	defffc04 	addi	sp,sp,-16
    9bcc:	df000315 	stw	fp,12(sp)
    9bd0:	df000304 	addi	fp,sp,12
    9bd4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9bd8:	e0bffe17 	ldw	r2,-8(fp)
    9bdc:	10800217 	ldw	r2,8(r2)
    9be0:	10d00034 	orhi	r3,r2,16384
    9be4:	e0bffe17 	ldw	r2,-8(fp)
    9be8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9bec:	e03ffd15 	stw	zero,-12(fp)
    9bf0:	00002006 	br	9c74 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9bf4:	e0bffd17 	ldw	r2,-12(fp)
    9bf8:	00c00074 	movhi	r3,1
    9bfc:	18ee6104 	addi	r3,r3,-18044
    9c00:	10800324 	muli	r2,r2,12
    9c04:	10c5883a 	add	r2,r2,r3
    9c08:	10c00017 	ldw	r3,0(r2)
    9c0c:	e0bffe17 	ldw	r2,-8(fp)
    9c10:	10800017 	ldw	r2,0(r2)
    9c14:	1880141e 	bne	r3,r2,9c68 <alt_file_locked+0xa0>
    9c18:	e0bffd17 	ldw	r2,-12(fp)
    9c1c:	00c00074 	movhi	r3,1
    9c20:	18ee6104 	addi	r3,r3,-18044
    9c24:	10800324 	muli	r2,r2,12
    9c28:	10c5883a 	add	r2,r2,r3
    9c2c:	10800204 	addi	r2,r2,8
    9c30:	10800017 	ldw	r2,0(r2)
    9c34:	1004403a 	cmpge	r2,r2,zero
    9c38:	10000b1e 	bne	r2,zero,9c68 <alt_file_locked+0xa0>
    9c3c:	e0bffd17 	ldw	r2,-12(fp)
    9c40:	10800324 	muli	r2,r2,12
    9c44:	1007883a 	mov	r3,r2
    9c48:	00800074 	movhi	r2,1
    9c4c:	10ae6104 	addi	r2,r2,-18044
    9c50:	1887883a 	add	r3,r3,r2
    9c54:	e0bffe17 	ldw	r2,-8(fp)
    9c58:	18800326 	beq	r3,r2,9c68 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9c5c:	00bffcc4 	movi	r2,-13
    9c60:	e0bfff15 	stw	r2,-4(fp)
    9c64:	00000a06 	br	9c90 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9c68:	e0bffd17 	ldw	r2,-12(fp)
    9c6c:	10800044 	addi	r2,r2,1
    9c70:	e0bffd15 	stw	r2,-12(fp)
    9c74:	00800074 	movhi	r2,1
    9c78:	10aec704 	addi	r2,r2,-17636
    9c7c:	10800017 	ldw	r2,0(r2)
    9c80:	1007883a 	mov	r3,r2
    9c84:	e0bffd17 	ldw	r2,-12(fp)
    9c88:	18bfda2e 	bgeu	r3,r2,9bf4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9c8c:	e03fff15 	stw	zero,-4(fp)
    9c90:	e0bfff17 	ldw	r2,-4(fp)
}
    9c94:	e037883a 	mov	sp,fp
    9c98:	df000017 	ldw	fp,0(sp)
    9c9c:	dec00104 	addi	sp,sp,4
    9ca0:	f800283a 	ret

00009ca4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9ca4:	defff404 	addi	sp,sp,-48
    9ca8:	dfc00b15 	stw	ra,44(sp)
    9cac:	df000a15 	stw	fp,40(sp)
    9cb0:	df000a04 	addi	fp,sp,40
    9cb4:	e13ffb15 	stw	r4,-20(fp)
    9cb8:	e17ffc15 	stw	r5,-16(fp)
    9cbc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9cc0:	00bfffc4 	movi	r2,-1
    9cc4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    9cc8:	00bffb44 	movi	r2,-19
    9ccc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    9cd0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9cd4:	e13ffb17 	ldw	r4,-20(fp)
    9cd8:	01400074 	movhi	r5,1
    9cdc:	296ec504 	addi	r5,r5,-17644
    9ce0:	000a0b00 	call	a0b0 <alt_find_dev>
    9ce4:	e0bffa15 	stw	r2,-24(fp)
    9ce8:	e0bffa17 	ldw	r2,-24(fp)
    9cec:	1004c03a 	cmpne	r2,r2,zero
    9cf0:	1000051e 	bne	r2,zero,9d08 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9cf4:	e13ffb17 	ldw	r4,-20(fp)
    9cf8:	000a1440 	call	a144 <alt_find_file>
    9cfc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    9d00:	00800044 	movi	r2,1
    9d04:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9d08:	e0bffa17 	ldw	r2,-24(fp)
    9d0c:	1005003a 	cmpeq	r2,r2,zero
    9d10:	1000301e 	bne	r2,zero,9dd4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9d14:	e13ffa17 	ldw	r4,-24(fp)
    9d18:	000a2640 	call	a264 <alt_get_fd>
    9d1c:	e0bff815 	stw	r2,-32(fp)
    9d20:	e0bff817 	ldw	r2,-32(fp)
    9d24:	1004403a 	cmpge	r2,r2,zero
    9d28:	1000031e 	bne	r2,zero,9d38 <open+0x94>
    {
      status = index;
    9d2c:	e0bff817 	ldw	r2,-32(fp)
    9d30:	e0bff715 	stw	r2,-36(fp)
    9d34:	00002906 	br	9ddc <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    9d38:	e0bff817 	ldw	r2,-32(fp)
    9d3c:	10800324 	muli	r2,r2,12
    9d40:	1007883a 	mov	r3,r2
    9d44:	00800074 	movhi	r2,1
    9d48:	10ae6104 	addi	r2,r2,-18044
    9d4c:	1885883a 	add	r2,r3,r2
    9d50:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9d54:	e0fffc17 	ldw	r3,-16(fp)
    9d58:	00900034 	movhi	r2,16384
    9d5c:	10bfffc4 	addi	r2,r2,-1
    9d60:	1886703a 	and	r3,r3,r2
    9d64:	e0bff917 	ldw	r2,-28(fp)
    9d68:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9d6c:	e0bff617 	ldw	r2,-40(fp)
    9d70:	1004c03a 	cmpne	r2,r2,zero
    9d74:	1000061e 	bne	r2,zero,9d90 <open+0xec>
    9d78:	e13ff917 	ldw	r4,-28(fp)
    9d7c:	0009bc80 	call	9bc8 <alt_file_locked>
    9d80:	e0bff715 	stw	r2,-36(fp)
    9d84:	e0bff717 	ldw	r2,-36(fp)
    9d88:	1004803a 	cmplt	r2,r2,zero
    9d8c:	1000131e 	bne	r2,zero,9ddc <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9d90:	e0bffa17 	ldw	r2,-24(fp)
    9d94:	10800317 	ldw	r2,12(r2)
    9d98:	1005003a 	cmpeq	r2,r2,zero
    9d9c:	1000091e 	bne	r2,zero,9dc4 <open+0x120>
    9da0:	e0bffa17 	ldw	r2,-24(fp)
    9da4:	10800317 	ldw	r2,12(r2)
    9da8:	e13ff917 	ldw	r4,-28(fp)
    9dac:	e17ffb17 	ldw	r5,-20(fp)
    9db0:	e1bffc17 	ldw	r6,-16(fp)
    9db4:	e1fffd17 	ldw	r7,-12(fp)
    9db8:	103ee83a 	callr	r2
    9dbc:	e0bfff15 	stw	r2,-4(fp)
    9dc0:	00000106 	br	9dc8 <open+0x124>
    9dc4:	e03fff15 	stw	zero,-4(fp)
    9dc8:	e0bfff17 	ldw	r2,-4(fp)
    9dcc:	e0bff715 	stw	r2,-36(fp)
    9dd0:	00000206 	br	9ddc <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9dd4:	00bffb44 	movi	r2,-19
    9dd8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9ddc:	e0bff717 	ldw	r2,-36(fp)
    9de0:	1004403a 	cmpge	r2,r2,zero
    9de4:	1000091e 	bne	r2,zero,9e0c <open+0x168>
  {
    alt_release_fd (index);  
    9de8:	e13ff817 	ldw	r4,-32(fp)
    9dec:	0009e8c0 	call	9e8c <alt_release_fd>
    ALT_ERRNO = -status;
    9df0:	0009e2c0 	call	9e2c <alt_get_errno>
    9df4:	e0fff717 	ldw	r3,-36(fp)
    9df8:	00c7c83a 	sub	r3,zero,r3
    9dfc:	10c00015 	stw	r3,0(r2)
    return -1;
    9e00:	00bfffc4 	movi	r2,-1
    9e04:	e0bffe15 	stw	r2,-8(fp)
    9e08:	00000206 	br	9e14 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    9e0c:	e0bff817 	ldw	r2,-32(fp)
    9e10:	e0bffe15 	stw	r2,-8(fp)
    9e14:	e0bffe17 	ldw	r2,-8(fp)
}
    9e18:	e037883a 	mov	sp,fp
    9e1c:	dfc00117 	ldw	ra,4(sp)
    9e20:	df000017 	ldw	fp,0(sp)
    9e24:	dec00204 	addi	sp,sp,8
    9e28:	f800283a 	ret

00009e2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9e2c:	defffd04 	addi	sp,sp,-12
    9e30:	dfc00215 	stw	ra,8(sp)
    9e34:	df000115 	stw	fp,4(sp)
    9e38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9e3c:	00800074 	movhi	r2,1
    9e40:	10aec804 	addi	r2,r2,-17632
    9e44:	10800017 	ldw	r2,0(r2)
    9e48:	1005003a 	cmpeq	r2,r2,zero
    9e4c:	1000061e 	bne	r2,zero,9e68 <alt_get_errno+0x3c>
    9e50:	00800074 	movhi	r2,1
    9e54:	10aec804 	addi	r2,r2,-17632
    9e58:	10800017 	ldw	r2,0(r2)
    9e5c:	103ee83a 	callr	r2
    9e60:	e0bfff15 	stw	r2,-4(fp)
    9e64:	00000306 	br	9e74 <alt_get_errno+0x48>
    9e68:	00800074 	movhi	r2,1
    9e6c:	10b39104 	addi	r2,r2,-12732
    9e70:	e0bfff15 	stw	r2,-4(fp)
    9e74:	e0bfff17 	ldw	r2,-4(fp)
}
    9e78:	e037883a 	mov	sp,fp
    9e7c:	dfc00117 	ldw	ra,4(sp)
    9e80:	df000017 	ldw	fp,0(sp)
    9e84:	dec00204 	addi	sp,sp,8
    9e88:	f800283a 	ret

00009e8c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9e8c:	defffe04 	addi	sp,sp,-8
    9e90:	df000115 	stw	fp,4(sp)
    9e94:	df000104 	addi	fp,sp,4
    9e98:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    9e9c:	e0bfff17 	ldw	r2,-4(fp)
    9ea0:	108000d0 	cmplti	r2,r2,3
    9ea4:	10000d1e 	bne	r2,zero,9edc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    9ea8:	e0bfff17 	ldw	r2,-4(fp)
    9eac:	00c00074 	movhi	r3,1
    9eb0:	18ee6104 	addi	r3,r3,-18044
    9eb4:	10800324 	muli	r2,r2,12
    9eb8:	10c5883a 	add	r2,r2,r3
    9ebc:	10800204 	addi	r2,r2,8
    9ec0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9ec4:	e0bfff17 	ldw	r2,-4(fp)
    9ec8:	00c00074 	movhi	r3,1
    9ecc:	18ee6104 	addi	r3,r3,-18044
    9ed0:	10800324 	muli	r2,r2,12
    9ed4:	10c5883a 	add	r2,r2,r3
    9ed8:	10000015 	stw	zero,0(r2)
  }
}
    9edc:	e037883a 	mov	sp,fp
    9ee0:	df000017 	ldw	fp,0(sp)
    9ee4:	dec00104 	addi	sp,sp,4
    9ee8:	f800283a 	ret

00009eec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    9eec:	defffa04 	addi	sp,sp,-24
    9ef0:	df000515 	stw	fp,20(sp)
    9ef4:	df000504 	addi	fp,sp,20
    9ef8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9efc:	0005303a 	rdctl	r2,status
    9f00:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f04:	e0fffd17 	ldw	r3,-12(fp)
    9f08:	00bfff84 	movi	r2,-2
    9f0c:	1884703a 	and	r2,r3,r2
    9f10:	1001703a 	wrctl	status,r2
  
  return context;
    9f14:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    9f18:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    9f1c:	e0bfff17 	ldw	r2,-4(fp)
    9f20:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    9f24:	e0bffc17 	ldw	r2,-16(fp)
    9f28:	10c00017 	ldw	r3,0(r2)
    9f2c:	e0bffc17 	ldw	r2,-16(fp)
    9f30:	10800117 	ldw	r2,4(r2)
    9f34:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    9f38:	e0bffc17 	ldw	r2,-16(fp)
    9f3c:	10c00117 	ldw	r3,4(r2)
    9f40:	e0bffc17 	ldw	r2,-16(fp)
    9f44:	10800017 	ldw	r2,0(r2)
    9f48:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    9f4c:	e0fffc17 	ldw	r3,-16(fp)
    9f50:	e0bffc17 	ldw	r2,-16(fp)
    9f54:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    9f58:	e0fffc17 	ldw	r3,-16(fp)
    9f5c:	e0bffc17 	ldw	r2,-16(fp)
    9f60:	18800015 	stw	r2,0(r3)
    9f64:	e0bffe17 	ldw	r2,-8(fp)
    9f68:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f6c:	e0bffb17 	ldw	r2,-20(fp)
    9f70:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    9f74:	e037883a 	mov	sp,fp
    9f78:	df000017 	ldw	fp,0(sp)
    9f7c:	dec00104 	addi	sp,sp,4
    9f80:	f800283a 	ret

00009f84 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    9f84:	defffb04 	addi	sp,sp,-20
    9f88:	dfc00415 	stw	ra,16(sp)
    9f8c:	df000315 	stw	fp,12(sp)
    9f90:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    9f94:	d0a00917 	ldw	r2,-32732(gp)
    9f98:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    9f9c:	d0a4d617 	ldw	r2,-27816(gp)
    9fa0:	10800044 	addi	r2,r2,1
    9fa4:	d0a4d615 	stw	r2,-27816(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    9fa8:	00003106 	br	a070 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    9fac:	e0bffe17 	ldw	r2,-8(fp)
    9fb0:	10800017 	ldw	r2,0(r2)
    9fb4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    9fb8:	e0bffe17 	ldw	r2,-8(fp)
    9fbc:	10800403 	ldbu	r2,16(r2)
    9fc0:	10803fcc 	andi	r2,r2,255
    9fc4:	1005003a 	cmpeq	r2,r2,zero
    9fc8:	1000051e 	bne	r2,zero,9fe0 <alt_tick+0x5c>
    9fcc:	d0a4d617 	ldw	r2,-27816(gp)
    9fd0:	1004c03a 	cmpne	r2,r2,zero
    9fd4:	1000021e 	bne	r2,zero,9fe0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    9fd8:	e0bffe17 	ldw	r2,-8(fp)
    9fdc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    9fe0:	e0bffe17 	ldw	r2,-8(fp)
    9fe4:	10c00217 	ldw	r3,8(r2)
    9fe8:	d0a4d617 	ldw	r2,-27816(gp)
    9fec:	10c01e36 	bltu	r2,r3,a068 <alt_tick+0xe4>
    9ff0:	e0bffe17 	ldw	r2,-8(fp)
    9ff4:	10800403 	ldbu	r2,16(r2)
    9ff8:	10803fcc 	andi	r2,r2,255
    9ffc:	1004c03a 	cmpne	r2,r2,zero
    a000:	1000191e 	bne	r2,zero,a068 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    a004:	e0bffe17 	ldw	r2,-8(fp)
    a008:	10c00317 	ldw	r3,12(r2)
    a00c:	e0bffe17 	ldw	r2,-8(fp)
    a010:	11000517 	ldw	r4,20(r2)
    a014:	183ee83a 	callr	r3
    a018:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a01c:	e0bffd17 	ldw	r2,-12(fp)
    a020:	1004c03a 	cmpne	r2,r2,zero
    a024:	1000031e 	bne	r2,zero,a034 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    a028:	e13ffe17 	ldw	r4,-8(fp)
    a02c:	0009eec0 	call	9eec <alt_alarm_stop>
    a030:	00000d06 	br	a068 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    a034:	e0bffe17 	ldw	r2,-8(fp)
    a038:	10c00217 	ldw	r3,8(r2)
    a03c:	e0bffd17 	ldw	r2,-12(fp)
    a040:	1887883a 	add	r3,r3,r2
    a044:	e0bffe17 	ldw	r2,-8(fp)
    a048:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a04c:	e0bffe17 	ldw	r2,-8(fp)
    a050:	10c00217 	ldw	r3,8(r2)
    a054:	d0a4d617 	ldw	r2,-27816(gp)
    a058:	1880032e 	bgeu	r3,r2,a068 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    a05c:	e0fffe17 	ldw	r3,-8(fp)
    a060:	00800044 	movi	r2,1
    a064:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    a068:	e0bfff17 	ldw	r2,-4(fp)
    a06c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a070:	d0e00904 	addi	r3,gp,-32732
    a074:	e0bffe17 	ldw	r2,-8(fp)
    a078:	10ffcc1e 	bne	r2,r3,9fac <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    a07c:	e037883a 	mov	sp,fp
    a080:	dfc00117 	ldw	ra,4(sp)
    a084:	df000017 	ldw	fp,0(sp)
    a088:	dec00204 	addi	sp,sp,8
    a08c:	f800283a 	ret

0000a090 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    a090:	deffff04 	addi	sp,sp,-4
    a094:	df000015 	stw	fp,0(sp)
    a098:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a09c:	000170fa 	wrctl	ienable,zero
}
    a0a0:	e037883a 	mov	sp,fp
    a0a4:	df000017 	ldw	fp,0(sp)
    a0a8:	dec00104 	addi	sp,sp,4
    a0ac:	f800283a 	ret

0000a0b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a0b0:	defff904 	addi	sp,sp,-28
    a0b4:	dfc00615 	stw	ra,24(sp)
    a0b8:	df000515 	stw	fp,20(sp)
    a0bc:	df000504 	addi	fp,sp,20
    a0c0:	e13ffd15 	stw	r4,-12(fp)
    a0c4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a0c8:	e0bffe17 	ldw	r2,-8(fp)
    a0cc:	10800017 	ldw	r2,0(r2)
    a0d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a0d4:	e13ffd17 	ldw	r4,-12(fp)
    a0d8:	000830c0 	call	830c <strlen>
    a0dc:	10800044 	addi	r2,r2,1
    a0e0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a0e4:	00000d06 	br	a11c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a0e8:	e0bffc17 	ldw	r2,-16(fp)
    a0ec:	11000217 	ldw	r4,8(r2)
    a0f0:	e1bffb17 	ldw	r6,-20(fp)
    a0f4:	e17ffd17 	ldw	r5,-12(fp)
    a0f8:	000a3e00 	call	a3e0 <memcmp>
    a0fc:	1004c03a 	cmpne	r2,r2,zero
    a100:	1000031e 	bne	r2,zero,a110 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a104:	e0bffc17 	ldw	r2,-16(fp)
    a108:	e0bfff15 	stw	r2,-4(fp)
    a10c:	00000706 	br	a12c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a110:	e0bffc17 	ldw	r2,-16(fp)
    a114:	10800017 	ldw	r2,0(r2)
    a118:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a11c:	e0fffe17 	ldw	r3,-8(fp)
    a120:	e0bffc17 	ldw	r2,-16(fp)
    a124:	10fff01e 	bne	r2,r3,a0e8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a128:	e03fff15 	stw	zero,-4(fp)
    a12c:	e0bfff17 	ldw	r2,-4(fp)
}
    a130:	e037883a 	mov	sp,fp
    a134:	dfc00117 	ldw	ra,4(sp)
    a138:	df000017 	ldw	fp,0(sp)
    a13c:	dec00204 	addi	sp,sp,8
    a140:	f800283a 	ret

0000a144 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a144:	defffa04 	addi	sp,sp,-24
    a148:	dfc00515 	stw	ra,20(sp)
    a14c:	df000415 	stw	fp,16(sp)
    a150:	df000404 	addi	fp,sp,16
    a154:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a158:	00800074 	movhi	r2,1
    a15c:	10aec304 	addi	r2,r2,-17652
    a160:	10800017 	ldw	r2,0(r2)
    a164:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a168:	00003306 	br	a238 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    a16c:	e0bffd17 	ldw	r2,-12(fp)
    a170:	11000217 	ldw	r4,8(r2)
    a174:	000830c0 	call	830c <strlen>
    a178:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    a17c:	e0bffd17 	ldw	r2,-12(fp)
    a180:	10c00217 	ldw	r3,8(r2)
    a184:	e0bffc17 	ldw	r2,-16(fp)
    a188:	1885883a 	add	r2,r3,r2
    a18c:	10bfffc4 	addi	r2,r2,-1
    a190:	10800003 	ldbu	r2,0(r2)
    a194:	10803fcc 	andi	r2,r2,255
    a198:	1080201c 	xori	r2,r2,128
    a19c:	10bfe004 	addi	r2,r2,-128
    a1a0:	10800bd8 	cmpnei	r2,r2,47
    a1a4:	1000031e 	bne	r2,zero,a1b4 <alt_find_file+0x70>
    {
      len -= 1;
    a1a8:	e0bffc17 	ldw	r2,-16(fp)
    a1ac:	10bfffc4 	addi	r2,r2,-1
    a1b0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a1b4:	e0bffc17 	ldw	r2,-16(fp)
    a1b8:	1007883a 	mov	r3,r2
    a1bc:	e0bffe17 	ldw	r2,-8(fp)
    a1c0:	1885883a 	add	r2,r3,r2
    a1c4:	10800003 	ldbu	r2,0(r2)
    a1c8:	10803fcc 	andi	r2,r2,255
    a1cc:	1080201c 	xori	r2,r2,128
    a1d0:	10bfe004 	addi	r2,r2,-128
    a1d4:	10800be0 	cmpeqi	r2,r2,47
    a1d8:	10000a1e 	bne	r2,zero,a204 <alt_find_file+0xc0>
    a1dc:	e0bffc17 	ldw	r2,-16(fp)
    a1e0:	1007883a 	mov	r3,r2
    a1e4:	e0bffe17 	ldw	r2,-8(fp)
    a1e8:	1885883a 	add	r2,r3,r2
    a1ec:	10800003 	ldbu	r2,0(r2)
    a1f0:	10803fcc 	andi	r2,r2,255
    a1f4:	1080201c 	xori	r2,r2,128
    a1f8:	10bfe004 	addi	r2,r2,-128
    a1fc:	1004c03a 	cmpne	r2,r2,zero
    a200:	10000a1e 	bne	r2,zero,a22c <alt_find_file+0xe8>
    a204:	e0bffd17 	ldw	r2,-12(fp)
    a208:	11000217 	ldw	r4,8(r2)
    a20c:	e1bffc17 	ldw	r6,-16(fp)
    a210:	e17ffe17 	ldw	r5,-8(fp)
    a214:	000a3e00 	call	a3e0 <memcmp>
    a218:	1004c03a 	cmpne	r2,r2,zero
    a21c:	1000031e 	bne	r2,zero,a22c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a220:	e0bffd17 	ldw	r2,-12(fp)
    a224:	e0bfff15 	stw	r2,-4(fp)
    a228:	00000806 	br	a24c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    a22c:	e0bffd17 	ldw	r2,-12(fp)
    a230:	10800017 	ldw	r2,0(r2)
    a234:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a238:	00c00074 	movhi	r3,1
    a23c:	18eec304 	addi	r3,r3,-17652
    a240:	e0bffd17 	ldw	r2,-12(fp)
    a244:	10ffc91e 	bne	r2,r3,a16c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a248:	e03fff15 	stw	zero,-4(fp)
    a24c:	e0bfff17 	ldw	r2,-4(fp)
}
    a250:	e037883a 	mov	sp,fp
    a254:	dfc00117 	ldw	ra,4(sp)
    a258:	df000017 	ldw	fp,0(sp)
    a25c:	dec00204 	addi	sp,sp,8
    a260:	f800283a 	ret

0000a264 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a264:	defffc04 	addi	sp,sp,-16
    a268:	df000315 	stw	fp,12(sp)
    a26c:	df000304 	addi	fp,sp,12
    a270:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    a274:	00bffa04 	movi	r2,-24
    a278:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a27c:	e03ffe15 	stw	zero,-8(fp)
    a280:	00001e06 	br	a2fc <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    a284:	e0bffe17 	ldw	r2,-8(fp)
    a288:	00c00074 	movhi	r3,1
    a28c:	18ee6104 	addi	r3,r3,-18044
    a290:	10800324 	muli	r2,r2,12
    a294:	10c5883a 	add	r2,r2,r3
    a298:	10800017 	ldw	r2,0(r2)
    a29c:	1004c03a 	cmpne	r2,r2,zero
    a2a0:	1000131e 	bne	r2,zero,a2f0 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    a2a4:	e0bffe17 	ldw	r2,-8(fp)
    a2a8:	00c00074 	movhi	r3,1
    a2ac:	18ee6104 	addi	r3,r3,-18044
    a2b0:	10800324 	muli	r2,r2,12
    a2b4:	10c7883a 	add	r3,r2,r3
    a2b8:	e0bfff17 	ldw	r2,-4(fp)
    a2bc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    a2c0:	00800074 	movhi	r2,1
    a2c4:	10aec704 	addi	r2,r2,-17636
    a2c8:	10c00017 	ldw	r3,0(r2)
    a2cc:	e0bffe17 	ldw	r2,-8(fp)
    a2d0:	1880040e 	bge	r3,r2,a2e4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    a2d4:	00c00074 	movhi	r3,1
    a2d8:	18eec704 	addi	r3,r3,-17636
    a2dc:	e0bffe17 	ldw	r2,-8(fp)
    a2e0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    a2e4:	e0bffe17 	ldw	r2,-8(fp)
    a2e8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    a2ec:	00000606 	br	a308 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a2f0:	e0bffe17 	ldw	r2,-8(fp)
    a2f4:	10800044 	addi	r2,r2,1
    a2f8:	e0bffe15 	stw	r2,-8(fp)
    a2fc:	e0bffe17 	ldw	r2,-8(fp)
    a300:	10800810 	cmplti	r2,r2,32
    a304:	103fdf1e 	bne	r2,zero,a284 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a308:	e0bffd17 	ldw	r2,-12(fp)
}
    a30c:	e037883a 	mov	sp,fp
    a310:	df000017 	ldw	fp,0(sp)
    a314:	dec00104 	addi	sp,sp,4
    a318:	f800283a 	ret

0000a31c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    a31c:	defffb04 	addi	sp,sp,-20
    a320:	df000415 	stw	fp,16(sp)
    a324:	df000404 	addi	fp,sp,16
    a328:	e13ffe15 	stw	r4,-8(fp)
    a32c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    a330:	e0bfff17 	ldw	r2,-4(fp)
    a334:	10840070 	cmpltui	r2,r2,4097
    a338:	1000021e 	bne	r2,zero,a344 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    a33c:	00840004 	movi	r2,4096
    a340:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    a344:	e0fffe17 	ldw	r3,-8(fp)
    a348:	e0bfff17 	ldw	r2,-4(fp)
    a34c:	1885883a 	add	r2,r3,r2
    a350:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a354:	e0bffe17 	ldw	r2,-8(fp)
    a358:	e0bffd15 	stw	r2,-12(fp)
    a35c:	00000506 	br	a374 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    a360:	e0bffd17 	ldw	r2,-12(fp)
    a364:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a368:	e0bffd17 	ldw	r2,-12(fp)
    a36c:	10800804 	addi	r2,r2,32
    a370:	e0bffd15 	stw	r2,-12(fp)
    a374:	e0fffd17 	ldw	r3,-12(fp)
    a378:	e0bffc17 	ldw	r2,-16(fp)
    a37c:	18bff836 	bltu	r3,r2,a360 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    a380:	e0bffe17 	ldw	r2,-8(fp)
    a384:	108007cc 	andi	r2,r2,31
    a388:	1005003a 	cmpeq	r2,r2,zero
    a38c:	1000021e 	bne	r2,zero,a398 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    a390:	e0bffd17 	ldw	r2,-12(fp)
    a394:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    a398:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    a39c:	e037883a 	mov	sp,fp
    a3a0:	df000017 	ldw	fp,0(sp)
    a3a4:	dec00104 	addi	sp,sp,4
    a3a8:	f800283a 	ret

0000a3ac <atexit>:
    a3ac:	200b883a 	mov	r5,r4
    a3b0:	000d883a 	mov	r6,zero
    a3b4:	0009883a 	mov	r4,zero
    a3b8:	000f883a 	mov	r7,zero
    a3bc:	000a4481 	jmpi	a448 <__register_exitproc>

0000a3c0 <exit>:
    a3c0:	defffe04 	addi	sp,sp,-8
    a3c4:	dc400015 	stw	r17,0(sp)
    a3c8:	000b883a 	mov	r5,zero
    a3cc:	2023883a 	mov	r17,r4
    a3d0:	dfc00115 	stw	ra,4(sp)
    a3d4:	000a5b80 	call	a5b8 <__call_exitprocs>
    a3d8:	8809883a 	mov	r4,r17
    a3dc:	000a7b40 	call	a7b4 <_exit>

0000a3e0 <memcmp>:
    a3e0:	31ffffc4 	addi	r7,r6,-1
    a3e4:	3000061e 	bne	r6,zero,a400 <memcmp+0x20>
    a3e8:	00000a06 	br	a414 <memcmp+0x34>
    a3ec:	39ffffc4 	addi	r7,r7,-1
    a3f0:	00bfffc4 	movi	r2,-1
    a3f4:	21000044 	addi	r4,r4,1
    a3f8:	29400044 	addi	r5,r5,1
    a3fc:	38800526 	beq	r7,r2,a414 <memcmp+0x34>
    a400:	20c00003 	ldbu	r3,0(r4)
    a404:	28800003 	ldbu	r2,0(r5)
    a408:	18bff826 	beq	r3,r2,a3ec <memcmp+0xc>
    a40c:	1885c83a 	sub	r2,r3,r2
    a410:	f800283a 	ret
    a414:	0005883a 	mov	r2,zero
    a418:	f800283a 	ret

0000a41c <memcpy>:
    a41c:	2011883a 	mov	r8,r4
    a420:	30000726 	beq	r6,zero,a440 <memcpy+0x24>
    a424:	000f883a 	mov	r7,zero
    a428:	29c5883a 	add	r2,r5,r7
    a42c:	11000003 	ldbu	r4,0(r2)
    a430:	41c7883a 	add	r3,r8,r7
    a434:	39c00044 	addi	r7,r7,1
    a438:	19000005 	stb	r4,0(r3)
    a43c:	39bffa1e 	bne	r7,r6,a428 <memcpy+0xc>
    a440:	4005883a 	mov	r2,r8
    a444:	f800283a 	ret

0000a448 <__register_exitproc>:
    a448:	defff904 	addi	sp,sp,-28
    a44c:	00800074 	movhi	r2,1
    a450:	10aec204 	addi	r2,r2,-17656
    a454:	dc400115 	stw	r17,4(sp)
    a458:	14400017 	ldw	r17,0(r2)
    a45c:	dc000015 	stw	r16,0(sp)
    a460:	dd400515 	stw	r21,20(sp)
    a464:	8c000c17 	ldw	r16,48(r17)
    a468:	dd000415 	stw	r20,16(sp)
    a46c:	dcc00315 	stw	r19,12(sp)
    a470:	dc800215 	stw	r18,8(sp)
    a474:	dfc00615 	stw	ra,24(sp)
    a478:	2025883a 	mov	r18,r4
    a47c:	282b883a 	mov	r21,r5
    a480:	3029883a 	mov	r20,r6
    a484:	3827883a 	mov	r19,r7
    a488:	80002626 	beq	r16,zero,a524 <__register_exitproc+0xdc>
    a48c:	81400117 	ldw	r5,4(r16)
    a490:	008007c4 	movi	r2,31
    a494:	11403716 	blt	r2,r5,a574 <__register_exitproc+0x12c>
    a498:	90002026 	beq	r18,zero,a51c <__register_exitproc+0xd4>
    a49c:	81802217 	ldw	r6,136(r16)
    a4a0:	30002926 	beq	r6,zero,a548 <__register_exitproc+0x100>
    a4a4:	81400117 	ldw	r5,4(r16)
    a4a8:	00c00044 	movi	r3,1
    a4ac:	31004017 	ldw	r4,256(r6)
    a4b0:	1946983a 	sll	r3,r3,r5
    a4b4:	2945883a 	add	r2,r5,r5
    a4b8:	1085883a 	add	r2,r2,r2
    a4bc:	1185883a 	add	r2,r2,r6
    a4c0:	20c8b03a 	or	r4,r4,r3
    a4c4:	14c02015 	stw	r19,128(r2)
    a4c8:	15000015 	stw	r20,0(r2)
    a4cc:	00800084 	movi	r2,2
    a4d0:	31004015 	stw	r4,256(r6)
    a4d4:	90801826 	beq	r18,r2,a538 <__register_exitproc+0xf0>
    a4d8:	2945883a 	add	r2,r5,r5
    a4dc:	1085883a 	add	r2,r2,r2
    a4e0:	1405883a 	add	r2,r2,r16
    a4e4:	28c00044 	addi	r3,r5,1
    a4e8:	0009883a 	mov	r4,zero
    a4ec:	15400215 	stw	r21,8(r2)
    a4f0:	80c00115 	stw	r3,4(r16)
    a4f4:	2005883a 	mov	r2,r4
    a4f8:	dfc00617 	ldw	ra,24(sp)
    a4fc:	dd400517 	ldw	r21,20(sp)
    a500:	dd000417 	ldw	r20,16(sp)
    a504:	dcc00317 	ldw	r19,12(sp)
    a508:	dc800217 	ldw	r18,8(sp)
    a50c:	dc400117 	ldw	r17,4(sp)
    a510:	dc000017 	ldw	r16,0(sp)
    a514:	dec00704 	addi	sp,sp,28
    a518:	f800283a 	ret
    a51c:	81400117 	ldw	r5,4(r16)
    a520:	003fed06 	br	a4d8 <__register_exitproc+0x90>
    a524:	00800074 	movhi	r2,1
    a528:	10b3d804 	addi	r2,r2,-12448
    a52c:	1021883a 	mov	r16,r2
    a530:	88800c15 	stw	r2,48(r17)
    a534:	003fd506 	br	a48c <__register_exitproc+0x44>
    a538:	30804117 	ldw	r2,260(r6)
    a53c:	10c4b03a 	or	r2,r2,r3
    a540:	30804115 	stw	r2,260(r6)
    a544:	003fe406 	br	a4d8 <__register_exitproc+0x90>
    a548:	00800034 	movhi	r2,0
    a54c:	10800004 	addi	r2,r2,0
    a550:	10000b26 	beq	r2,zero,a580 <__register_exitproc+0x138>
    a554:	01004204 	movi	r4,264
    a558:	103ee83a 	callr	r2
    a55c:	10000826 	beq	r2,zero,a580 <__register_exitproc+0x138>
    a560:	100d883a 	mov	r6,r2
    a564:	10004015 	stw	zero,256(r2)
    a568:	10004115 	stw	zero,260(r2)
    a56c:	80802215 	stw	r2,136(r16)
    a570:	003fcc06 	br	a4a4 <__register_exitproc+0x5c>
    a574:	00800034 	movhi	r2,0
    a578:	10800004 	addi	r2,r2,0
    a57c:	1000021e 	bne	r2,zero,a588 <__register_exitproc+0x140>
    a580:	013fffc4 	movi	r4,-1
    a584:	003fdb06 	br	a4f4 <__register_exitproc+0xac>
    a588:	01002304 	movi	r4,140
    a58c:	103ee83a 	callr	r2
    a590:	1007883a 	mov	r3,r2
    a594:	103ffa26 	beq	r2,zero,a580 <__register_exitproc+0x138>
    a598:	88800c17 	ldw	r2,48(r17)
    a59c:	1821883a 	mov	r16,r3
    a5a0:	18000115 	stw	zero,4(r3)
    a5a4:	18800015 	stw	r2,0(r3)
    a5a8:	88c00c15 	stw	r3,48(r17)
    a5ac:	903fdb26 	beq	r18,zero,a51c <__register_exitproc+0xd4>
    a5b0:	003fba06 	br	a49c <__register_exitproc+0x54>

0000a5b4 <register_fini>:
    a5b4:	f800283a 	ret

0000a5b8 <__call_exitprocs>:
    a5b8:	defff304 	addi	sp,sp,-52
    a5bc:	00800074 	movhi	r2,1
    a5c0:	10aec204 	addi	r2,r2,-17656
    a5c4:	df000b15 	stw	fp,44(sp)
    a5c8:	17000017 	ldw	fp,0(r2)
    a5cc:	00800034 	movhi	r2,0
    a5d0:	10800004 	addi	r2,r2,0
    a5d4:	1005003a 	cmpeq	r2,r2,zero
    a5d8:	d8800215 	stw	r2,8(sp)
    a5dc:	e0800c04 	addi	r2,fp,48
    a5e0:	dd800915 	stw	r22,36(sp)
    a5e4:	dd400815 	stw	r21,32(sp)
    a5e8:	dfc00c15 	stw	ra,48(sp)
    a5ec:	ddc00a15 	stw	r23,40(sp)
    a5f0:	dd000715 	stw	r20,28(sp)
    a5f4:	dcc00615 	stw	r19,24(sp)
    a5f8:	dc800515 	stw	r18,20(sp)
    a5fc:	dc400415 	stw	r17,16(sp)
    a600:	dc000315 	stw	r16,12(sp)
    a604:	282d883a 	mov	r22,r5
    a608:	d9000115 	stw	r4,4(sp)
    a60c:	d8800015 	stw	r2,0(sp)
    a610:	282b003a 	cmpeq	r21,r5,zero
    a614:	e4400c17 	ldw	r17,48(fp)
    a618:	88001226 	beq	r17,zero,a664 <__call_exitprocs+0xac>
    a61c:	ddc00017 	ldw	r23,0(sp)
    a620:	88800117 	ldw	r2,4(r17)
    a624:	8c802217 	ldw	r18,136(r17)
    a628:	143fffc4 	addi	r16,r2,-1
    a62c:	80000b16 	blt	r16,zero,a65c <__call_exitprocs+0xa4>
    a630:	9027003a 	cmpeq	r19,r18,zero
    a634:	a800171e 	bne	r21,zero,a694 <__call_exitprocs+0xdc>
    a638:	9800051e 	bne	r19,zero,a650 <__call_exitprocs+0x98>
    a63c:	8409883a 	add	r4,r16,r16
    a640:	2105883a 	add	r2,r4,r4
    a644:	1485883a 	add	r2,r2,r18
    a648:	10c02017 	ldw	r3,128(r2)
    a64c:	b0c01226 	beq	r22,r3,a698 <__call_exitprocs+0xe0>
    a650:	843fffc4 	addi	r16,r16,-1
    a654:	00bfffc4 	movi	r2,-1
    a658:	80bff61e 	bne	r16,r2,a634 <__call_exitprocs+0x7c>
    a65c:	d8800217 	ldw	r2,8(sp)
    a660:	10003226 	beq	r2,zero,a72c <__call_exitprocs+0x174>
    a664:	dfc00c17 	ldw	ra,48(sp)
    a668:	df000b17 	ldw	fp,44(sp)
    a66c:	ddc00a17 	ldw	r23,40(sp)
    a670:	dd800917 	ldw	r22,36(sp)
    a674:	dd400817 	ldw	r21,32(sp)
    a678:	dd000717 	ldw	r20,28(sp)
    a67c:	dcc00617 	ldw	r19,24(sp)
    a680:	dc800517 	ldw	r18,20(sp)
    a684:	dc400417 	ldw	r17,16(sp)
    a688:	dc000317 	ldw	r16,12(sp)
    a68c:	dec00d04 	addi	sp,sp,52
    a690:	f800283a 	ret
    a694:	8409883a 	add	r4,r16,r16
    a698:	88c00117 	ldw	r3,4(r17)
    a69c:	2105883a 	add	r2,r4,r4
    a6a0:	1445883a 	add	r2,r2,r17
    a6a4:	18ffffc4 	addi	r3,r3,-1
    a6a8:	11800217 	ldw	r6,8(r2)
    a6ac:	1c001826 	beq	r3,r16,a710 <__call_exitprocs+0x158>
    a6b0:	10000215 	stw	zero,8(r2)
    a6b4:	303fe626 	beq	r6,zero,a650 <__call_exitprocs+0x98>
    a6b8:	8d000117 	ldw	r20,4(r17)
    a6bc:	9800121e 	bne	r19,zero,a708 <__call_exitprocs+0x150>
    a6c0:	00c00044 	movi	r3,1
    a6c4:	1c06983a 	sll	r3,r3,r16
    a6c8:	90804017 	ldw	r2,256(r18)
    a6cc:	1884703a 	and	r2,r3,r2
    a6d0:	10000d26 	beq	r2,zero,a708 <__call_exitprocs+0x150>
    a6d4:	90804117 	ldw	r2,260(r18)
    a6d8:	1884703a 	and	r2,r3,r2
    a6dc:	10000e1e 	bne	r2,zero,a718 <__call_exitprocs+0x160>
    a6e0:	2105883a 	add	r2,r4,r4
    a6e4:	1485883a 	add	r2,r2,r18
    a6e8:	11400017 	ldw	r5,0(r2)
    a6ec:	d9000117 	ldw	r4,4(sp)
    a6f0:	303ee83a 	callr	r6
    a6f4:	88800117 	ldw	r2,4(r17)
    a6f8:	a0bfc61e 	bne	r20,r2,a614 <__call_exitprocs+0x5c>
    a6fc:	b8800017 	ldw	r2,0(r23)
    a700:	147fd326 	beq	r2,r17,a650 <__call_exitprocs+0x98>
    a704:	003fc306 	br	a614 <__call_exitprocs+0x5c>
    a708:	303ee83a 	callr	r6
    a70c:	003ff906 	br	a6f4 <__call_exitprocs+0x13c>
    a710:	8c000115 	stw	r16,4(r17)
    a714:	003fe706 	br	a6b4 <__call_exitprocs+0xfc>
    a718:	2105883a 	add	r2,r4,r4
    a71c:	1485883a 	add	r2,r2,r18
    a720:	11000017 	ldw	r4,0(r2)
    a724:	303ee83a 	callr	r6
    a728:	003ff206 	br	a6f4 <__call_exitprocs+0x13c>
    a72c:	88800117 	ldw	r2,4(r17)
    a730:	10000b1e 	bne	r2,zero,a760 <__call_exitprocs+0x1a8>
    a734:	89000017 	ldw	r4,0(r17)
    a738:	20000a26 	beq	r4,zero,a764 <__call_exitprocs+0x1ac>
    a73c:	b9000015 	stw	r4,0(r23)
    a740:	90000226 	beq	r18,zero,a74c <__call_exitprocs+0x194>
    a744:	9009883a 	mov	r4,r18
    a748:	00000000 	call	0 <__reset-0x8000>
    a74c:	8809883a 	mov	r4,r17
    a750:	00000000 	call	0 <__reset-0x8000>
    a754:	bc400017 	ldw	r17,0(r23)
    a758:	883fb11e 	bne	r17,zero,a620 <__call_exitprocs+0x68>
    a75c:	003fc106 	br	a664 <__call_exitprocs+0xac>
    a760:	89000017 	ldw	r4,0(r17)
    a764:	882f883a 	mov	r23,r17
    a768:	2023883a 	mov	r17,r4
    a76c:	883fac1e 	bne	r17,zero,a620 <__call_exitprocs+0x68>
    a770:	003fbc06 	br	a664 <__call_exitprocs+0xac>

0000a774 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    a774:	defffd04 	addi	sp,sp,-12
    a778:	df000215 	stw	fp,8(sp)
    a77c:	df000204 	addi	fp,sp,8
    a780:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    a784:	e0bfff17 	ldw	r2,-4(fp)
    a788:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a78c:	e0bffe17 	ldw	r2,-8(fp)
    a790:	1005003a 	cmpeq	r2,r2,zero
    a794:	1000021e 	bne	r2,zero,a7a0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    a798:	002af070 	cmpltui	zero,zero,43969
    a79c:	00000106 	br	a7a4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    a7a0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    a7a4:	e037883a 	mov	sp,fp
    a7a8:	df000017 	ldw	fp,0(sp)
    a7ac:	dec00104 	addi	sp,sp,4
    a7b0:	f800283a 	ret

0000a7b4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a7b4:	defffd04 	addi	sp,sp,-12
    a7b8:	dfc00215 	stw	ra,8(sp)
    a7bc:	df000115 	stw	fp,4(sp)
    a7c0:	df000104 	addi	fp,sp,4
    a7c4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    a7c8:	e13fff17 	ldw	r4,-4(fp)
    a7cc:	000a7740 	call	a774 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a7d0:	003fff06 	br	a7d0 <_exit+0x1c>
    a7d4:	0000a5b4 	movhi	zero,662
