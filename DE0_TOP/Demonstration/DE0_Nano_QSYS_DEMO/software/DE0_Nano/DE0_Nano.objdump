
DE0_Nano.elf:     file format elf32-littlenios2
DE0_Nano.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00015fd0 memsz 0x00015fd0 flags r-x
    LOAD off    0x00016ff0 vaddr 0x02015ff0 paddr 0x02017c68 align 2**12
         filesz 0x00001c78 memsz 0x00001c78 flags rw-
    LOAD off    0x000198e0 vaddr 0x020198e0 paddr 0x020198e0 align 2**12
         filesz 0x00000000 memsz 0x000003f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015468  020001b4  020001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000009d4  0201561c  0201561c  0001661c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c78  02015ff0  02017c68  00016ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003f0  020198e0  020198e0  000198e0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00018c68  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001218  00000000  00000000  00018c90  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001e10  00000000  00000000  00019ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00033971  00000000  00000000  0001bcb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b540  00000000  00000000  0004f629  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001dc65  00000000  00000000  0005ab69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002780  00000000  00000000  000787d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002d68  00000000  00000000  0007af50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000128a3  00000000  00000000  0007dcb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0009055c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ba0  00000000  00000000  000905c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00095392  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00095395  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00095398  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00095399  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009539a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0009539e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000953a2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000953a6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000953af  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000953b8  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  000953c1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000046  00000000  00000000  000953ce  2**0
                  CONTENTS, READONLY
 29 .jdi          0000513b  00000000  00000000  00095414  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000937dd  00000000  00000000  0009a54f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b4 l    d  .text	00000000 .text
0201561c l    d  .rodata	00000000 .rodata
02015ff0 l    d  .rwdata	00000000 .rwdata
020198e0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
020001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
02015ff0 l     O .rwdata	00000120 szTestList
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 accelerometer_adxl345_spi.c
00000000 l    df *ABS*	00000000 adc_spi_read.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 terasic_spi.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
02002e90 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0200415c l     F .text	00000058 __sprint_r
02015b2e l     O .rodata	00000010 blanks.3452
02015b1e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
02015b46 l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
02015c69 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
02007940 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0200933c l     F .text	00000058 std
02009448 l     F .text	00000008 __fp_lock
02009450 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
02016518 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
02017c34 l     O .rwdata	00000004 charset
02015e10 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
02015f58 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
0200c0c0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0200c4f0 l     F .text	00000048 match
02016938 l     O .rwdata	00000014 fpi.1950
02015f74 l     O .rodata	00000028 tinytens
02016924 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0200ebe8 l     F .text	00000024 htinit
0200ec74 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0200f4dc l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
02010668 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0201150c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
02011628 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
020117f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
02011ad8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
02011bb8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
02011d14 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
02011f40 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02017c5c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
020123b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
02016af4 l     O .rwdata	000000c8 epcs
02016bbc l     O .rwdata	00001060 jtag_uart
020124a8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0201256c l     F .text	00000288 alt_epcs_flash_query
02012534 l     F .text	00000038 alt_flash_device_register
020127f4 l     F .text	00000108 alt_epcs_flash_memcmp
02012c7c l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
020130cc l     F .text	00000228 altera_avalon_jtag_uart_irq
020132f4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
02013970 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
02013bc8 l     F .text	00000038 epcs_await_wip_released
02013c00 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02014498 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02014950 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
02014a8c l     F .text	000000dc alt_file_locked
02014cf0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
02015404 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
020155b8 l     F .text	00000040 alt_sim_halt
0200ad20 g     F .text	00000094 _mprec_log10
020008b0 g     F .text	00000104 I2C_Read
02012b7c g     F .text	00000090 alt_epcs_flash_get_info
0200ae0c g     F .text	00000088 __any_on
0200f770 g     F .text	00000070 _isatty_r
02015f30 g     O .rodata	00000028 __mprec_tinytens
02011d74 g     F .text	0000006c alt_main
02003f48 g     F .text	000000a0 _puts_r
02019a40 g     O .bss	00000100 alt_irq
0200f7e0 g     F .text	00000078 _lseek_r
02017c68 g       *ABS*	00000000 __flash_rwdata_start
02010b6c g     F .text	00000088 __eqdf2
02019cd0 g       *ABS*	00000000 __alt_heap_start
02003ed0 g     F .text	00000044 printf
0200118c g     F .text	000000d0 ADXL345_SPI_Init
0200c2f0 g     F .text	00000068 __sseek
020093a4 g     F .text	000000a4 __sinit
0200a2e4 g     F .text	00000084 _setlocale_r
020094a4 g     F .text	00000068 __sfmoreglue
0200e898 g     F .text	0000001c ungetc
02011e00 g     F .text	00000020 __malloc_unlock
0200c538 g     F .text	000014e4 _strtod_r
02000234 g     F .text	00000074 EnableKeyInterrupt
0200a79c g     F .text	000000e0 memmove
020002a8 g     F .text	00000098 ShowMenu
02009494 g     F .text	00000010 _cleanup
0200ae94 g     F .text	000000bc _Balloc
02010c7c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
02013ad0 g     F .text	000000f8 epcs_sector_erase
02000d20 g     F .text	00000124 i2c_write
02000000 g     F .entry	0000001c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
0200eb74 g     F .text	00000074 _fstat_r
020198f0 g     O .bss	00000004 errno
02002e58 g     F .text	00000038 __make_dp
02007704 g     F .text	00000024 __svfscanf
0201131c g     F .text	0000002c __make_fp
02019908 g     O .bss	00000004 alt_argv
0201fc1c g       *ABS*	00000000 _gp
02012260 g     F .text	00000030 usleep
02000f90 g     F .text	00000178 i2c_data_verify
02001e14 g     F .text	000005b0 FLASH_Verify
02001648 g     F .text	000000d0 Flash_Open
02016974 g     O .rwdata	00000180 alt_fd_list
02001770 g     F .text	0000013c Flash_GetBlockInfo
02013dd4 g     F .text	00000064 epcs_write_status_register
020145c0 g     F .text	00000094 alt_find_dev
0200a6fc g     F .text	000000a0 memcpy
0200f528 g     F .text	00000248 __hexnan
02009488 g     F .text	0000000c _cleanup_r
02010e9c g     F .text	000000f8 __floatsidf
02014a14 g     F .text	00000078 alt_io_redirect
02010d8c g     F .text	00000088 __ltdf2
0201561c g       *ABS*	00000000 __DTOR_END__
02003fe8 g     F .text	00000014 puts
0200a598 g     F .text	00000040 mbrtowc
02001434 g     F .text	00000044 ADXL345_SPI_IdRead
02012d10 g     F .text	0000011c alt_epcs_flash_write_block
0200067c g     F .text	000000dc DEMO_EEPROM
02007728 g     F .text	00000068 _vfscanf_r
0200ac70 g     F .text	000000b0 __ratio
0201350c g     F .text	00000224 altera_avalon_jtag_uart_read
0200377c g     F .text	00000014 malloc
02003f14 g     F .text	00000034 _printf_r
02002fcc g     F .text	00000008 __udivsi3
02011a18 g     F .text	000000c0 isatty
0200a294 g     F .text	0000002c iswspace
02015e40 g     O .rodata	000000c8 __mprec_tens
0200a2c0 g     F .text	00000008 __locale_charset
0200f8d0 g     F .text	000000a4 __fixunsdfsi
02015180 g     F .text	00000090 alt_icache_flush
02000ac4 g     F .text	0000015c I2C_MultipleRead
020198e4 g     O .bss	00000004 __malloc_top_pad
0200e30c g     F .text	00000024 strtoul
02017c30 g     O .rwdata	00000004 __mb_cur_max
0200a2c8 g     F .text	0000000c _localeconv_r
0200e330 g     F .text	000002f0 _strtoull_r
0200b58c g     F .text	0000003c __i2b
02009c78 g     F .text	0000049c __sfvwrite_r
02003ffc g     F .text	00000070 _sbrk_r
0200f858 g     F .text	00000078 _read_r
0201156c g     F .text	00000078 alt_dcache_flush
02016918 g     O .rwdata	0000000c __lc_ctype
02017c48 g     O .rwdata	00000004 alt_max_fd
02003630 g     F .text	00000138 __unpack_d
0200ea50 g     F .text	00000110 _fclose_r
02009308 g     F .text	00000034 fflush
020198e8 g     O .bss	00000004 __malloc_max_sbrked_mem
02000570 g     F .text	0000010c DEMO_ADC
02011858 g     F .text	000001c0 alt_irq_register
02001478 g     F .text	00000104 ADC_Read
02002728 g     F .text	00000054 __extendsfdf2
02010af8 g     F .text	00000074 __adddf3
02010500 g     F .text	00000078 __nesf2
02012c0c g     F .text	00000070 alt_epcs_flash_erase_block
0200ab50 g     F .text	00000120 __b2d
0200ff50 g     F .text	000005b0 __umoddi3
02011c24 g     F .text	000000f0 lseek
02017c2c g     O .rwdata	00000004 _global_impure_ptr
0200125c g     F .text	000000a4 ADXL345_SPI_WaitDataReady
020140ec g     F .text	00000058 epcs_exit_4_bytes_mode
0200b908 g     F .text	000005f4 _realloc_r
02019cd0 g       *ABS*	00000000 __bss_end
02014858 g     F .text	000000f8 alt_iic_isr_register
02012154 g     F .text	0000010c alt_tick
02019940 g     O .bss	00000100 __hexdig
0200f974 g     F .text	000005dc __udivdi3
02015f08 g     O .rodata	00000028 __mprec_bigtens
0200b7e8 g     F .text	00000120 __s2b
020110e0 g     F .text	00000194 __floatunsidf
0200aa70 g     F .text	00000060 __mcmp
02017c24 g     O .rwdata	00000004 __ctype_ptr
02009470 g     F .text	00000018 __fp_lock_all
02014810 g     F .text	00000048 alt_ic_irq_enabled
020007d8 g     F .text	000000d8 I2C_Write
020120bc g     F .text	00000098 alt_alarm_stop
0200dda0 g     F .text	00000024 strtol
02019900 g     O .bss	00000004 alt_irq_active
020000ec g     F .exceptions	000000c8 alt_irq_handler
0201694c g     O .rwdata	00000028 alt_dev_null
02003254 g     F .text	000000c8 __unpack_f
02000c20 g     F .text	00000088 i2c_start
020115e4 g     F .text	00000044 alt_dcache_flush_all
0200a93c g     F .text	00000070 __hi0bits
02000758 g     F .text	00000080 DEMO_EPCS
02010f94 g     F .text	000000d8 __fixdfsi
0200db40 g     F .text	0000001c strtod
02017c68 g       *ABS*	00000000 __ram_rwdata_end
02017c40 g     O .rwdata	00000008 alt_dev_list
02012290 g     F .text	00000120 write
02010578 g     F .text	00000078 __gtsf2
02015ff0 g       *ABS*	00000000 __ram_rodata_end
02011724 g     F .text	000000d4 fstat
02010e14 g     F .text	00000088 __ledf2
0200b6c8 g     F .text	00000120 __pow5mult
020198f4 g     O .bss	00000004 __nlocale_changed
02002fd4 g     F .text	00000008 __umodsi3
0200406c g     F .text	00000034 _scanf_r
02013fa8 g     F .text	0000006c epcs_read_electronic_signature
020018ac g     F .text	000000b8 Flash_Read
02019cd0 g       *ABS*	00000000 end
020030f4 g     F .text	00000160 __pack_f
0201300c g     F .text	000000c0 altera_avalon_jtag_uart_init
02015618 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0200258c g     F .text	00000158 SPI_MultipleRead
020139e0 g     F .text	00000090 alt_avalon_timer_sc_init
02003074 g     F .text	00000080 __clzsi2
02013730 g     F .text	00000240 altera_avalon_jtag_uart_write
02001718 g     F .text	00000058 Flash_Close
02009394 g     F .text	00000004 __sfp_lock_acquire
0200a618 g     F .text	000000e4 memchr
020041b4 g     F .text	00001eac ___vfprintf_internal_r
0200c288 g     F .text	00000060 _sprintf_r
02009964 g     F .text	00000314 _free_r
02015408 g     F .text	000001b0 __call_exitprocs
020198f8 g     O .bss	00000004 __mlocale_changed
02017c20 g     O .rwdata	00000004 __malloc_sbrk_base
020001b4 g     F .text	0000004c _start
02019910 g     O .bss	00000004 _alt_tick_rate
0200ddc4 g     F .text	00000318 _strtoll_r
0200b258 g     F .text	0000014c __lshift
02014d70 g     F .text	00000238 alt_avalon_spi_command
02019914 g     O .bss	00000004 _alt_nticks
02011e20 g     F .text	00000120 read
02012444 g     F .text	00000064 alt_sys_init
020152d0 g     F .text	00000134 __register_exitproc
02001368 g     F .text	000000cc ADXL345_SPI_XYZ_Read
0200b3a4 g     F .text	000001e8 __multiply
020133a4 g     F .text	00000074 altera_avalon_jtag_uart_close
02015ff0 g       *ABS*	00000000 __ram_rwdata_start
0201561c g       *ABS*	00000000 __ram_rodata_start
02019918 g     O .bss	00000028 __malloc_current_mallinfo
0200af50 g     F .text	0000017c __d2b
02013a70 g     F .text	00000060 epcs_read_status_register
02012ec4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0200e0dc g     F .text	00000230 _strtoul_r
020150c8 g     F .text	000000b8 alt_get_fd
02014298 g     F .text	0000014c alt_busy_sleep
02011348 g     F .text	000000c8 __fpcmp_parts_d
0200e9e0 g     F .text	00000070 _close_r
02014014 g     F .text	00000080 epcs_read_device_id
0201525c g     F .text	00000074 memcmp
02012f74 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
02001108 g     F .text	00000084 I2C_Verify
02019cd0 g       *ABS*	00000000 __alt_stack_base
02012fbc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02007804 g     F .text	0000013c __swsetup_r
02002c00 g     F .text	00000258 __divdf3
0200950c g     F .text	000000f0 __sfp
02001ca8 g     F .text	00000084 Flash_GetBlockCount
0200adb4 g     F .text	00000058 __copybits
02016110 g     O .rwdata	00000408 __malloc_av_
020093a0 g     F .text	00000004 __sinit_lock_release
02000ca8 g     F .text	00000078 i2c_stop
0200283c g     F .text	000003c4 __muldf3
0200c3d4 g     F .text	00000060 __sread
020097f8 g     F .text	00000040 fread
02014fa8 g     F .text	00000120 alt_find_file
020143e4 g     F .text	000000b4 alt_dev_llist_insert
02011de0 g     F .text	00000020 __malloc_lock
02012000 g     F .text	000000bc sbrk
0200910c g     F .text	000001fc _fflush_r
0200e92c g     F .text	000000b4 _calloc_r
02017c50 g     O .rwdata	00000008 alt_flash_dev_list
0200157c g     F .text	000000cc Flash_InfoDump
020198e0 g       *ABS*	00000000 __bss_start
020198e0 g     O .bss	00000004 bKeyPressed
0200a87c g     F .text	00000098 memset
02000340 g     F .text	000000c8 main
0201990c g     O .bss	00000004 alt_envp
020198ec g     O .bss	00000004 __malloc_max_total_mem
02012f1c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
02000e44 g     F .text	0000014c i2c_read
020105f0 g     F .text	00000078 __ltsf2
020095fc g     F .text	000001fc _fread_r
0200c2e8 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0200eb60 g     F .text	00000014 fclose
0200db5c g     F .text	00000244 _strtol_r
0201106c g     F .text	00000074 __truncdfsf2
02019b40 g     O .bss	00000190 _atexit0
02007b58 g     F .text	000015b4 _dtoa_r
02003790 g     F .text	00000740 _malloc_r
02017c4c g     O .rwdata	00000004 alt_errno
0200e620 g     F .text	000000dc __submore
0200a1dc g     F .text	000000b8 _fwalk
0200a5d8 g     F .text	00000040 _mbtowc_r
02002f0c g     F .text	00000060 __divsi3
020159a8 g     O .rodata	00000014 __thenan_df
02009838 g     F .text	0000012c _malloc_trim_r
0201561c g       *ABS*	00000000 __CTOR_END__
020128fc g     F .text	00000280 alt_epcs_flash_write
0200c434 g     F .text	000000bc strcmp
0201561c g       *ABS*	00000000 __flash_rodata_start
0201561c g       *ABS*	00000000 __DTOR_LIST__
02010bf4 g     F .text	00000088 __nedf2
02012410 g     F .text	00000034 alt_irq_init
02011fa0 g     F .text	00000060 alt_release_fd
02002548 g     F .text	00000044 SPI_Write
0200c214 g     F .text	00000074 sprintf
020159bc g     O .rodata	00000100 __clz_tab
02001d2c g     F .text	000000e8 Flash_Size
020198fc g     O .bss	00000004 _PathLocale
0200da1c g     F .text	00000124 strtof
02015210 g     F .text	00000014 atexit
0200e8b4 g     F .text	00000078 _write_r
02000408 g     F .text	00000168 DEMO_ACCELEROMETER
0200a368 g     F .text	0000001c setlocale
020040a0 g     F .text	00000048 scanf
0200c20c g     F .text	00000008 nanf
02017c28 g     O .rwdata	00000004 _impure_ptr
02019904 g     O .bss	00000004 alt_argc
0200a518 g     F .text	00000080 _mbrtowc_r
0201455c g     F .text	00000064 _do_dtors
0200befc g     F .text	000001c4 __srefill_r
02000020 g       .exceptions	00000000 alt_irq_entry
0200aad0 g     F .text	00000080 __ulp
0200c0dc g     F .text	00000040 __isinfd
02009458 g     F .text	00000018 __fp_unlock_all
020009b4 g     F .text	00000110 I2C_MultipleWrite
02017c38 g     O .rwdata	00000008 alt_fs_list
02000020 g       *ABS*	00000000 __ram_exceptions_start
0200a2d4 g     F .text	00000010 localeconv
02013c38 g     F .text	0000014c epcs_read_buffer
020124e0 g     F .text	00000054 alt_epcs_flash_init
02014684 g     F .text	00000050 alt_ic_isr_register
0200ec0c g     F .text	00000068 __hexdig_init
02017c68 g       *ABS*	00000000 _edata
02019cd0 g       *ABS*	00000000 _end
02011654 g     F .text	0000007c alt_flash_open_dev
020001b4 g       *ABS*	00000000 __ram_exceptions_end
02007790 g     F .text	00000074 vfscanf
02013418 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
02014770 g     F .text	000000a0 alt_ic_irq_disable
02014094 g     F .text	00000058 epcs_enter_4_bytes_mode
02001964 g     F .text	00000250 Flash_Write
0200c358 g     F .text	0000007c __swrite
02017c1c g     O .rwdata	00000004 __malloc_trim_threshold
02014d50 g     F .text	00000020 altera_nios2_qsys_irq_init
02015224 g     F .text	00000038 exit
0200a114 g     F .text	000000c8 _fwalk_reent
0200277c g     F .text	000000c0 __floatunsisf
0200b0cc g     F .text	0000018c __mdiff
020116d0 g     F .text	00000054 alt_flash_close_dev
02002f6c g     F .text	00000060 __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02009398 g     F .text	00000004 __sfp_lock_release
02000000 g       *ABS*	00000000 __alt_mem_sdram
02001300 g     F .text	00000068 ADXL345_SPI_IsDataReady
0200c14c g     F .text	000000c0 __sccl
02015b68 g     O .rodata	00000101 _ctype_
02002410 g     F .text	00000138 SPI_MultipleWrite
02011274 g     F .text	000000a8 __fpcmp_parts_f
020155f8 g     F .text	00000020 _exit
0200c11c g     F .text	00000030 __isnand
02014144 g     F .text	00000154 alt_alarm_start
02002fdc g     F .text	00000098 __muldi3
0200a384 g     F .text	00000194 __smakebuf_r
020040e8 g     F .text	00000074 strlen
02013d84 g     F .text	00000050 epcs_write_enable
02014b68 g     F .text	00000188 open
02010d04 g     F .text	00000088 __gedf2
0200ed24 g     F .text	000007b8 __gethex
02014654 g     F .text	00000030 alt_icache_flush_all
020023c4 g     F .text	0000004c SPI_Init
02017c58 g     O .rwdata	00000004 alt_priority_mask
020146d4 g     F .text	0000009c alt_ic_irq_enable
02006060 g     F .text	00000024 __vfprintf_internal
05000000 g       *ABS*	00000000 __alt_mem_epcs
02010a78 g     F .text	00000080 __subdf3
02012e2c g     F .text	00000098 alt_epcs_flash_read
020026e4 g     F .text	00000044 SPI_Read
0200a9ac g     F .text	000000c4 __lo0bits
02001bb4 g     F .text	000000f4 Flash_Erase
02006084 g     F .text	00001680 __svfscanf_r
02017c60 g     O .rwdata	00000008 alt_alarm_list
0200e6fc g     F .text	0000019c _ungetc_r
020144f8 g     F .text	00000064 _do_ctors
02000200 g     F .text	00000034 KEY_ISR
02011410 g     F .text	000000fc close
02011b38 g     F .text	00000080 alt_load
0200331c g     F .text	00000314 __pack_d
02003768 g     F .text	00000014 free
0200939c g     F .text	00000004 __sinit_lock_acquire
02013e38 g     F .text	00000170 epcs_write_buffer
0200b5c8 g     F .text	00000100 __multadd
0200a914 g     F .text	00000028 _Bfree



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00810014 	movui	r2,1024
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08406d14 	ori	at,at,436
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <__alt_mem_sdram-0x2000000>

Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20000fc:	0005313a 	rdctl	r2,ipending
 2000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 200010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000110:	00800044 	movi	r2,1
 2000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2000118:	e0ffff17 	ldw	r3,-4(fp)
 200011c:	e0bffe17 	ldw	r2,-8(fp)
 2000120:	1884703a 	and	r2,r3,r2
 2000124:	1005003a 	cmpeq	r2,r2,zero
 2000128:	1000161e 	bne	r2,zero,2000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	00c080b4 	movhi	r3,514
 2000134:	18e69004 	addi	r3,r3,-26048
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	10c5883a 	add	r2,r2,r3
 2000140:	11400017 	ldw	r5,0(r2)
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	00c080b4 	movhi	r3,514
 200014c:	18e69004 	addi	r3,r3,-26048
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	10c5883a 	add	r2,r2,r3
 2000158:	10800104 	addi	r2,r2,4
 200015c:	11000017 	ldw	r4,0(r2)
 2000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000164:	0005313a 	rdctl	r2,ipending
 2000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 200016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000174:	e0bfff17 	ldw	r2,-4(fp)
 2000178:	1004c03a 	cmpne	r2,r2,zero
 200017c:	103fe31e 	bne	r2,zero,200010c <alt_irq_handler+0x20>
 2000180:	00000706 	br	20001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000184:	e0bffe17 	ldw	r2,-8(fp)
 2000188:	1085883a 	add	r2,r2,r2
 200018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000190:	e0bffd17 	ldw	r2,-12(fp)
 2000194:	10800044 	addi	r2,r2,1
 2000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 200019c:	003fde06 	br	2000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a0:	e037883a 	mov	sp,fp
 20001a4:	dfc00117 	ldw	ra,4(sp)
 20001a8:	df000017 	ldw	fp,0(sp)
 20001ac:	dec00204 	addi	sp,sp,8
 20001b0:	f800283a 	ret

Disassembly of section .text:

020001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 20001b4:	00808014 	movui	r2,512
#endif

0:
    initd 0(r2)
 20001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 20001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 20001c0:	00bffd16 	blt	zero,r2,20001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001c4:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 20001cc:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 20001d0:	d6bf0714 	ori	gp,gp,64540
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001d4:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 20001d8:	10a63814 	ori	r2,r2,39136

    movhi r3, %hi(__bss_end)
 20001dc:	00c08074 	movhi	r3,513
    ori r3, r3, %lo(__bss_end)
 20001e0:	18e73414 	ori	r3,r3,40144

    beq r2, r3, 1f
 20001e4:	10c00326 	beq	r2,r3,20001f4 <_start+0x40>

0:
    stw zero, (r2)
 20001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001f0:	10fffd36 	bltu	r2,r3,20001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 20001f4:	2011b380 	call	2011b38 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001f8:	2011d740 	call	2011d74 <alt_main>

020001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001fc:	003fff06 	br	20001fc <alt_after_alt_main>

02000200 <KEY_ISR>:


bool bKeyPressed = FALSE;

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void KEY_ISR(void* context){
 2000200:	defffe04 	addi	sp,sp,-8
 2000204:	df000115 	stw	fp,4(sp)
 2000208:	df000104 	addi	fp,sp,4
 200020c:	e13fff15 	stw	r4,-4(fp)

        bKeyPressed = TRUE;
 2000210:	00800044 	movi	r2,1
 2000214:	d0a73115 	stw	r2,-25404(gp)

        // clear interrupt flag
        IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0);
 2000218:	00810034 	movhi	r2,1024
 200021c:	10800b04 	addi	r2,r2,44
 2000220:	10000035 	stwio	zero,0(r2)

}
 2000224:	e037883a 	mov	sp,fp
 2000228:	df000017 	ldw	fp,0(sp)
 200022c:	dec00104 	addi	sp,sp,4
 2000230:	f800283a 	ret

02000234 <EnableKeyInterrupt>:
        // clear interrupt flag
//        IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0);
//    }
//}

void EnableKeyInterrupt(void){
 2000234:	defffd04 	addi	sp,sp,-12
 2000238:	dfc00215 	stw	ra,8(sp)
 200023c:	df000115 	stw	fp,4(sp)
 2000240:	df000104 	addi	fp,sp,4
    int error;
    
    // enable interrupt, 2-keybutton
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE,0x03);
 2000244:	00c10034 	movhi	r3,1024
 2000248:	18c00a04 	addi	r3,r3,40
 200024c:	008000c4 	movi	r2,3
 2000250:	18800035 	stwio	r2,0(r3)
    
    // clear capture flag
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0);
 2000254:	00810034 	movhi	r2,1024
 2000258:	10800b04 	addi	r2,r2,44
 200025c:	10000035 	stwio	zero,0(r2)
    //

    bKeyPressed = FALSE;
 2000260:	d0273115 	stw	zero,-25404(gp)
    // register interrupt isr    
    error = alt_irq_register (KEY_IRQ, 0, KEY_ISR);
 2000264:	01000044 	movi	r4,1
 2000268:	000b883a 	mov	r5,zero
 200026c:	01808034 	movhi	r6,512
 2000270:	31808004 	addi	r6,r6,512
 2000274:	20118580 	call	2011858 <alt_irq_register>
 2000278:	e0bfff15 	stw	r2,-4(fp)
    if (error)
 200027c:	e0bfff17 	ldw	r2,-4(fp)
 2000280:	1005003a 	cmpeq	r2,r2,zero
 2000284:	1000031e 	bne	r2,zero,2000294 <EnableKeyInterrupt+0x60>
        printf("Failed to register interrut\r\n");
 2000288:	01008074 	movhi	r4,513
 200028c:	21158704 	addi	r4,r4,22044
 2000290:	2003fe80 	call	2003fe8 <puts>
    
}
 2000294:	e037883a 	mov	sp,fp
 2000298:	dfc00117 	ldw	ra,4(sp)
 200029c:	df000017 	ldw	fp,0(sp)
 20002a0:	dec00204 	addi	sp,sp,8
 20002a4:	f800283a 	ret

020002a8 <ShowMenu>:




void ShowMenu(void){
 20002a8:	defffc04 	addi	sp,sp,-16
 20002ac:	dfc00315 	stw	ra,12(sp)
 20002b0:	df000215 	stw	fp,8(sp)
 20002b4:	df000204 	addi	fp,sp,8
    int i,num;
    printf("---------------------------------\r\n");
 20002b8:	01008074 	movhi	r4,513
 20002bc:	21158f04 	addi	r4,r4,22076
 20002c0:	2003fe80 	call	2003fe8 <puts>
    printf("- Selection function:\r\n");
 20002c4:	01008074 	movhi	r4,513
 20002c8:	21159804 	addi	r4,r4,22112
 20002cc:	2003fe80 	call	2003fe8 <puts>
    num = sizeof(szTestList)/sizeof(szTestList[0]);
 20002d0:	00800104 	movi	r2,4
 20002d4:	e0bffe15 	stw	r2,-8(fp)
    for(i=0;i<num;i++){
 20002d8:	e03fff15 	stw	zero,-4(fp)
 20002dc:	00000d06 	br	2000314 <ShowMenu+0x6c>
        printf("- [%d]%s\r\n", i, szTestList[i].szName);
 20002e0:	e0bfff17 	ldw	r2,-4(fp)
 20002e4:	10801224 	muli	r2,r2,72
 20002e8:	10c00104 	addi	r3,r2,4
 20002ec:	00808074 	movhi	r2,513
 20002f0:	1097fc04 	addi	r2,r2,24560
 20002f4:	188d883a 	add	r6,r3,r2
 20002f8:	01008074 	movhi	r4,513
 20002fc:	21159e04 	addi	r4,r4,22136
 2000300:	e17fff17 	ldw	r5,-4(fp)
 2000304:	2003ed00 	call	2003ed0 <printf>
void ShowMenu(void){
    int i,num;
    printf("---------------------------------\r\n");
    printf("- Selection function:\r\n");
    num = sizeof(szTestList)/sizeof(szTestList[0]);
    for(i=0;i<num;i++){
 2000308:	e0bfff17 	ldw	r2,-4(fp)
 200030c:	10800044 	addi	r2,r2,1
 2000310:	e0bfff15 	stw	r2,-4(fp)
 2000314:	e0ffff17 	ldw	r3,-4(fp)
 2000318:	e0bffe17 	ldw	r2,-8(fp)
 200031c:	18bff016 	blt	r3,r2,20002e0 <ShowMenu+0x38>
        printf("- [%d]%s\r\n", i, szTestList[i].szName);
    }    
    printf("---------------------------------\r\n");
 2000320:	01008074 	movhi	r4,513
 2000324:	21158f04 	addi	r4,r4,22076
 2000328:	2003fe80 	call	2003fe8 <puts>
}
 200032c:	e037883a 	mov	sp,fp
 2000330:	dfc00117 	ldw	ra,4(sp)
 2000334:	df000017 	ldw	fp,0(sp)
 2000338:	dec00204 	addi	sp,sp,8
 200033c:	f800283a 	ret

02000340 <main>:



int main(void)
{
 2000340:	defffc04 	addi	sp,sp,-16
 2000344:	dfc00315 	stw	ra,12(sp)
 2000348:	df000215 	stw	fp,8(sp)
 200034c:	df000204 	addi	fp,sp,8

    int sel;
    int nNum;
    
    
    nNum = sizeof(szTestList)/sizeof(szTestList[0]);
 2000350:	00800104 	movi	r2,4
 2000354:	e0bffe15 	stw	r2,-8(fp)
    printf("DE-Nano Demo\r\n");
 2000358:	01008074 	movhi	r4,513
 200035c:	2115a104 	addi	r4,r4,22148
 2000360:	2003fe80 	call	2003fe8 <puts>
    
    // enble key interrupt
    EnableKeyInterrupt();  
 2000364:	20002340 	call	2000234 <EnableKeyInterrupt>
    
    while(1){
        ShowMenu();
 2000368:	20002a80 	call	20002a8 <ShowMenu>
        printf("Select:");
 200036c:	01008074 	movhi	r4,513
 2000370:	2115a504 	addi	r4,r4,22164
 2000374:	2003ed00 	call	2003ed0 <printf>
        scanf("%d", &sel);
 2000378:	e17fff04 	addi	r5,fp,-4
 200037c:	01008074 	movhi	r4,513
 2000380:	2115a704 	addi	r4,r4,22172
 2000384:	20040a00 	call	20040a0 <scanf>
        if (sel >= 0 && sel < nNum){
 2000388:	e0bfff17 	ldw	r2,-4(fp)
 200038c:	1004803a 	cmplt	r2,r2,zero
 2000390:	1000161e 	bne	r2,zero,20003ec <main+0xac>
 2000394:	e0ffff17 	ldw	r3,-4(fp)
 2000398:	e0bffe17 	ldw	r2,-8(fp)
 200039c:	1880130e 	bge	r3,r2,20003ec <main+0xac>
            bKeyPressed = FALSE;
 20003a0:	d0273115 	stw	zero,-25404(gp)
            printf("Demo %s\r\n",szTestList[sel].szName); 
 20003a4:	e0bfff17 	ldw	r2,-4(fp)
 20003a8:	10801224 	muli	r2,r2,72
 20003ac:	10c00104 	addi	r3,r2,4
 20003b0:	00808074 	movhi	r2,513
 20003b4:	1097fc04 	addi	r2,r2,24560
 20003b8:	188b883a 	add	r5,r3,r2
 20003bc:	01008074 	movhi	r4,513
 20003c0:	2115a804 	addi	r4,r4,22176
 20003c4:	2003ed00 	call	2003ed0 <printf>
            szTestList[sel].Func();
 20003c8:	e0bfff17 	ldw	r2,-4(fp)
 20003cc:	00c08074 	movhi	r3,513
 20003d0:	18d7fc04 	addi	r3,r3,24560
 20003d4:	10801224 	muli	r2,r2,72
 20003d8:	10c5883a 	add	r2,r2,r3
 20003dc:	10801104 	addi	r2,r2,68
 20003e0:	10800017 	ldw	r2,0(r2)
 20003e4:	103ee83a 	callr	r2
    
    while(1){
        ShowMenu();
        printf("Select:");
        scanf("%d", &sel);
        if (sel >= 0 && sel < nNum){
 20003e8:	00000306 	br	20003f8 <main+0xb8>
            bKeyPressed = FALSE;
            printf("Demo %s\r\n",szTestList[sel].szName); 
            szTestList[sel].Func();
        }else{
            printf("Invalid Selection\r\n");
 20003ec:	01008074 	movhi	r4,513
 20003f0:	2115ab04 	addi	r4,r4,22188
 20003f4:	2003fe80 	call	2003fe8 <puts>
        }
        sel++;
 20003f8:	e0bfff17 	ldw	r2,-4(fp)
 20003fc:	10800044 	addi	r2,r2,1
 2000400:	e0bfff15 	stw	r2,-4(fp)

    }
 2000404:	003fd806 	br	2000368 <main+0x28>

02000408 <DEMO_ACCELEROMETER>:
    
       
}


void DEMO_ACCELEROMETER(void){
 2000408:	defffa04 	addi	sp,sp,-24
 200040c:	dfc00515 	stw	ra,20(sp)
 2000410:	df000415 	stw	fp,16(sp)
 2000414:	df000404 	addi	fp,sp,16
    bool bSuccess;
    alt_16 szXYZ[3];
    alt_u8 id;
    const int mg_per_digi = 4;
 2000418:	00800104 	movi	r2,4
 200041c:	e0bffc15 	stw	r2,-16(fp)

    // release i2c pio pin 
    //IOWR_ALTERA_AVALON_PIO_DIRECTION(I2C_SCL_BASE, ALTERA_AVALON_PIO_DIRECTION_OUTPUT);    
    //IOWR_ALTERA_AVALON_PIO_DIRECTION(I2C_SDA_BASE, ALTERA_AVALON_PIO_DIRECTION_INPUT);
    IOWR(SELECT_I2C_CLK_BASE, 0, 0x00);
 2000420:	00810034 	movhi	r2,1024
 2000424:	10801804 	addi	r2,r2,96
 2000428:	10000035 	stwio	zero,0(r2)
    
    // configure accelerometer as +-2g and start measure
    bSuccess = ADXL345_SPI_Init(GSENSOR_SPI_BASE);
 200042c:	01014034 	movhi	r4,1280
 2000430:	21020004 	addi	r4,r4,2048
 2000434:	200118c0 	call	200118c <ADXL345_SPI_Init>
 2000438:	e0bffd15 	stw	r2,-12(fp)
    if (bSuccess){
 200043c:	e0bffd17 	ldw	r2,-12(fp)
 2000440:	1005003a 	cmpeq	r2,r2,zero
 2000444:	10000d1e 	bne	r2,zero,200047c <DEMO_ACCELEROMETER+0x74>
        // dump chip id
        bSuccess = ADXL345_SPI_IdRead(GSENSOR_SPI_BASE, &id);
 2000448:	e17fff84 	addi	r5,fp,-2
 200044c:	01014034 	movhi	r4,1280
 2000450:	21020004 	addi	r4,r4,2048
 2000454:	20014340 	call	2001434 <ADXL345_SPI_IdRead>
 2000458:	e0bffd15 	stw	r2,-12(fp)
        if (bSuccess)
 200045c:	e0bffd17 	ldw	r2,-12(fp)
 2000460:	1005003a 	cmpeq	r2,r2,zero
 2000464:	1000051e 	bne	r2,zero,200047c <DEMO_ACCELEROMETER+0x74>
            printf("id=%02Xh\r\n", id);
 2000468:	e0bfff83 	ldbu	r2,-2(fp)
 200046c:	11403fcc 	andi	r5,r2,255
 2000470:	01008074 	movhi	r4,513
 2000474:	2115b004 	addi	r4,r4,22208
 2000478:	2003ed00 	call	2003ed0 <printf>
    }        
    
    if (bSuccess)
 200047c:	e0bffd17 	ldw	r2,-12(fp)
 2000480:	1005003a 	cmpeq	r2,r2,zero
 2000484:	1000291e 	bne	r2,zero,200052c <DEMO_ACCELEROMETER+0x124>
        printf("Monitor Accerometer Value. Press KEY0 or KEY1 to terminal the monitor process.\r\n");
 2000488:	01008074 	movhi	r4,513
 200048c:	2115b304 	addi	r4,r4,22220
 2000490:	2003fe80 	call	2003fe8 <puts>
    
    while(bSuccess && !bKeyPressed){
 2000494:	00002506 	br	200052c <DEMO_ACCELEROMETER+0x124>
        if (ADXL345_SPI_IsDataReady(GSENSOR_SPI_BASE)){
 2000498:	01014034 	movhi	r4,1280
 200049c:	21020004 	addi	r4,r4,2048
 20004a0:	20013000 	call	2001300 <ADXL345_SPI_IsDataReady>
 20004a4:	1005003a 	cmpeq	r2,r2,zero
 20004a8:	1000201e 	bne	r2,zero,200052c <DEMO_ACCELEROMETER+0x124>
            bSuccess = ADXL345_SPI_XYZ_Read(GSENSOR_SPI_BASE, szXYZ);
 20004ac:	e17ffe04 	addi	r5,fp,-8
 20004b0:	01014034 	movhi	r4,1280
 20004b4:	21020004 	addi	r4,r4,2048
 20004b8:	20013680 	call	2001368 <ADXL345_SPI_XYZ_Read>
 20004bc:	e0bffd15 	stw	r2,-12(fp)
            if (bSuccess){
 20004c0:	e0bffd17 	ldw	r2,-12(fp)
 20004c4:	1005003a 	cmpeq	r2,r2,zero
 20004c8:	1000181e 	bne	r2,zero,200052c <DEMO_ACCELEROMETER+0x124>
                printf("X=%d mg, Y=%d mg, Z=%d mg\r\n", szXYZ[0]*mg_per_digi, szXYZ[1]*mg_per_digi, szXYZ[2]*mg_per_digi);
 20004cc:	e0bffe0b 	ldhu	r2,-8(fp)
 20004d0:	10ffffcc 	andi	r3,r2,65535
 20004d4:	18e0001c 	xori	r3,r3,32768
 20004d8:	18e00004 	addi	r3,r3,-32768
 20004dc:	e0bffc17 	ldw	r2,-16(fp)
 20004e0:	188b383a 	mul	r5,r3,r2
 20004e4:	e0bffe8b 	ldhu	r2,-6(fp)
 20004e8:	10ffffcc 	andi	r3,r2,65535
 20004ec:	18e0001c 	xori	r3,r3,32768
 20004f0:	18e00004 	addi	r3,r3,-32768
 20004f4:	e0bffc17 	ldw	r2,-16(fp)
 20004f8:	188d383a 	mul	r6,r3,r2
 20004fc:	e0bfff0b 	ldhu	r2,-4(fp)
 2000500:	10ffffcc 	andi	r3,r2,65535
 2000504:	18e0001c 	xori	r3,r3,32768
 2000508:	18e00004 	addi	r3,r3,-32768
 200050c:	e0bffc17 	ldw	r2,-16(fp)
 2000510:	188f383a 	mul	r7,r3,r2
 2000514:	01008074 	movhi	r4,513
 2000518:	2115c704 	addi	r4,r4,22300
 200051c:	2003ed00 	call	2003ed0 <printf>
                // show raw data, 
                //printf("X=%04x, Y=%04x, Z=%04x\r\n", (alt_u16)szXYZ[0], (alt_u16)szXYZ[1],(alt_u16)szXYZ[2]);
                usleep(1000*1000);
 2000520:	010003f4 	movhi	r4,15
 2000524:	21109004 	addi	r4,r4,16960
 2000528:	20122600 	call	2012260 <usleep>
    }        
    
    if (bSuccess)
        printf("Monitor Accerometer Value. Press KEY0 or KEY1 to terminal the monitor process.\r\n");
    
    while(bSuccess && !bKeyPressed){
 200052c:	e0bffd17 	ldw	r2,-12(fp)
 2000530:	1005003a 	cmpeq	r2,r2,zero
 2000534:	1000031e 	bne	r2,zero,2000544 <DEMO_ACCELEROMETER+0x13c>
 2000538:	d0a73117 	ldw	r2,-25404(gp)
 200053c:	1005003a 	cmpeq	r2,r2,zero
 2000540:	103fd51e 	bne	r2,zero,2000498 <DEMO_ACCELEROMETER+0x90>
                usleep(1000*1000);
            }
        }
    }
    
    if (!bSuccess)
 2000544:	e0bffd17 	ldw	r2,-12(fp)
 2000548:	1004c03a 	cmpne	r2,r2,zero
 200054c:	1000031e 	bne	r2,zero,200055c <DEMO_ACCELEROMETER+0x154>
        printf("Failed to access accelerometer\r\n");
 2000550:	01008074 	movhi	r4,513
 2000554:	2115ce04 	addi	r4,r4,22328
 2000558:	2003fe80 	call	2003fe8 <puts>
    
}
 200055c:	e037883a 	mov	sp,fp
 2000560:	dfc00117 	ldw	ra,4(sp)
 2000564:	df000017 	ldw	fp,0(sp)
 2000568:	dec00204 	addi	sp,sp,8
 200056c:	f800283a 	ret

02000570 <DEMO_ADC>:

void DEMO_ADC(void){
 2000570:	defffb04 	addi	sp,sp,-20
 2000574:	dfc00415 	stw	ra,16(sp)
 2000578:	df000315 	stw	fp,12(sp)
 200057c:	df000304 	addi	fp,sp,12
    int ch = 0, next_ch=0;
 2000580:	e03fff15 	stw	zero,-4(fp)
 2000584:	e03ffe15 	stw	zero,-8(fp)
    alt_u16 data16;
    
    printf("Monitor ADC Value. Press KEY0 or KEY1 to terminal the monitor process.\r\n");
 2000588:	01008074 	movhi	r4,513
 200058c:	2115d604 	addi	r4,r4,22360
 2000590:	2003fe80 	call	2003fe8 <puts>
    ADC_Read(next_ch);
 2000594:	e0bffe17 	ldw	r2,-8(fp)
 2000598:	11003fcc 	andi	r4,r2,255
 200059c:	20014780 	call	2001478 <ADC_Read>
    while(!bKeyPressed){
 20005a0:	00002e06 	br	200065c <DEMO_ADC+0xec>
        next_ch++;
 20005a4:	e0bffe17 	ldw	r2,-8(fp)
 20005a8:	10800044 	addi	r2,r2,1
 20005ac:	e0bffe15 	stw	r2,-8(fp)
        if (next_ch >= 8)
 20005b0:	e0bffe17 	ldw	r2,-8(fp)
 20005b4:	10800210 	cmplti	r2,r2,8
 20005b8:	1000011e 	bne	r2,zero,20005c0 <DEMO_ADC+0x50>
            next_ch = 0;        
 20005bc:	e03ffe15 	stw	zero,-8(fp)
        data16 = ADC_Read(next_ch); // 12-bits resolution
 20005c0:	e0bffe17 	ldw	r2,-8(fp)
 20005c4:	11003fcc 	andi	r4,r2,255
 20005c8:	20014780 	call	2001478 <ADC_Read>
 20005cc:	e0bffd0d 	sth	r2,-12(fp)
        printf("CH%d=%.2f V\r\n", ch, (float)data16 * 3.3 / 4095.0);
 20005d0:	e13ffd0b 	ldhu	r4,-12(fp)
 20005d4:	200277c0 	call	200277c <__floatunsisf>
 20005d8:	1009883a 	mov	r4,r2
 20005dc:	20027280 	call	2002728 <__extendsfdf2>
 20005e0:	100b883a 	mov	r5,r2
 20005e4:	180d883a 	mov	r6,r3
 20005e8:	2809883a 	mov	r4,r5
 20005ec:	300b883a 	mov	r5,r6
 20005f0:	019999b4 	movhi	r6,26214
 20005f4:	31999984 	addi	r6,r6,26214
 20005f8:	01d002b4 	movhi	r7,16394
 20005fc:	39d99984 	addi	r7,r7,26214
 2000600:	200283c0 	call	200283c <__muldf3>
 2000604:	1009883a 	mov	r4,r2
 2000608:	180b883a 	mov	r5,r3
 200060c:	2005883a 	mov	r2,r4
 2000610:	2807883a 	mov	r3,r5
 2000614:	1009883a 	mov	r4,r2
 2000618:	180b883a 	mov	r5,r3
 200061c:	000d883a 	mov	r6,zero
 2000620:	01d02c34 	movhi	r7,16560
 2000624:	39ff8004 	addi	r7,r7,-512
 2000628:	2002c000 	call	2002c00 <__divdf3>
 200062c:	1009883a 	mov	r4,r2
 2000630:	180b883a 	mov	r5,r3
 2000634:	2005883a 	mov	r2,r4
 2000638:	2807883a 	mov	r3,r5
 200063c:	01008074 	movhi	r4,513
 2000640:	2115e804 	addi	r4,r4,22432
 2000644:	e17fff17 	ldw	r5,-4(fp)
 2000648:	100d883a 	mov	r6,r2
 200064c:	180f883a 	mov	r7,r3
 2000650:	2003ed00 	call	2003ed0 <printf>
        ch = next_ch;
 2000654:	e0bffe17 	ldw	r2,-8(fp)
 2000658:	e0bfff15 	stw	r2,-4(fp)
    int ch = 0, next_ch=0;
    alt_u16 data16;
    
    printf("Monitor ADC Value. Press KEY0 or KEY1 to terminal the monitor process.\r\n");
    ADC_Read(next_ch);
    while(!bKeyPressed){
 200065c:	d0a73117 	ldw	r2,-25404(gp)
 2000660:	1005003a 	cmpeq	r2,r2,zero
 2000664:	103fcf1e 	bne	r2,zero,20005a4 <DEMO_ADC+0x34>
        data16 = ADC_Read(next_ch); // 12-bits resolution
        printf("CH%d=%.2f V\r\n", ch, (float)data16 * 3.3 / 4095.0);
        ch = next_ch;
        
    }        
}
 2000668:	e037883a 	mov	sp,fp
 200066c:	dfc00117 	ldw	ra,4(sp)
 2000670:	df000017 	ldw	fp,0(sp)
 2000674:	dec00204 	addi	sp,sp,8
 2000678:	f800283a 	ret

0200067c <DEMO_EEPROM>:

void DEMO_EEPROM(void){
 200067c:	defff504 	addi	sp,sp,-44
 2000680:	dfc00a15 	stw	ra,40(sp)
 2000684:	df000915 	stw	fp,36(sp)
 2000688:	df000904 	addi	fp,sp,36
    alt_u8 szBuf[16];
    int i,Num;
    const alt_u8 DeviceAddr = 0xA0;
 200068c:	00bfe804 	movi	r2,-96
 2000690:	e0bff945 	stb	r2,-27(fp)
    const alt_u8 ControlAddr = 00;
 2000694:	e03ff905 	stb	zero,-28(fp)
    
    // set clock as output
    //IOWR_ALTERA_AVALON_PIO_DIRECTION(I2C_SCL_BASE, ALTERA_AVALON_PIO_DIRECTION_OUTPUT);
    IOWR(SELECT_I2C_CLK_BASE, 0, 0x01);
 2000698:	00c10034 	movhi	r3,1024
 200069c:	18c01804 	addi	r3,r3,96
 20006a0:	00800044 	movi	r2,1
 20006a4:	18800035 	stwio	r2,0(r3)
    
    if (I2C_MultipleRead(I2C_SCL_BASE, I2C_SDA_BASE, DeviceAddr, ControlAddr, szBuf, sizeof(szBuf))){
 20006a8:	e0bff943 	ldbu	r2,-27(fp)
 20006ac:	11803fcc 	andi	r6,r2,255
 20006b0:	3180201c 	xori	r6,r6,128
 20006b4:	31bfe004 	addi	r6,r6,-128
 20006b8:	e1fff903 	ldbu	r7,-28(fp)
 20006bc:	e0bffc04 	addi	r2,fp,-16
 20006c0:	d8800015 	stw	r2,0(sp)
 20006c4:	00800404 	movi	r2,16
 20006c8:	d8800115 	stw	r2,4(sp)
 20006cc:	01014034 	movhi	r4,1280
 20006d0:	21021404 	addi	r4,r4,2128
 20006d4:	01414034 	movhi	r5,1280
 20006d8:	29421004 	addi	r5,r5,2112
 20006dc:	2000ac40 	call	2000ac4 <I2C_MultipleRead>
 20006e0:	1005003a 	cmpeq	r2,r2,zero
 20006e4:	1000141e 	bne	r2,zero,2000738 <DEMO_EEPROM+0xbc>
        Num = sizeof(szBuf)/sizeof(szBuf[0]); 
 20006e8:	00800404 	movi	r2,16
 20006ec:	e0bffa15 	stw	r2,-24(fp)
        for(i=0;i<Num;i++){
 20006f0:	e03ffb15 	stw	zero,-20(fp)
 20006f4:	00000c06 	br	2000728 <DEMO_EEPROM+0xac>
            printf("Addr[%02d] = %02xh\r\n", i, szBuf[i]);
 20006f8:	e0fffb17 	ldw	r3,-20(fp)
 20006fc:	e0bffc04 	addi	r2,fp,-16
 2000700:	10c5883a 	add	r2,r2,r3
 2000704:	10800003 	ldbu	r2,0(r2)
 2000708:	11803fcc 	andi	r6,r2,255
 200070c:	01008074 	movhi	r4,513
 2000710:	2115ec04 	addi	r4,r4,22448
 2000714:	e17ffb17 	ldw	r5,-20(fp)
 2000718:	2003ed00 	call	2003ed0 <printf>
    //IOWR_ALTERA_AVALON_PIO_DIRECTION(I2C_SCL_BASE, ALTERA_AVALON_PIO_DIRECTION_OUTPUT);
    IOWR(SELECT_I2C_CLK_BASE, 0, 0x01);
    
    if (I2C_MultipleRead(I2C_SCL_BASE, I2C_SDA_BASE, DeviceAddr, ControlAddr, szBuf, sizeof(szBuf))){
        Num = sizeof(szBuf)/sizeof(szBuf[0]); 
        for(i=0;i<Num;i++){
 200071c:	e0bffb17 	ldw	r2,-20(fp)
 2000720:	10800044 	addi	r2,r2,1
 2000724:	e0bffb15 	stw	r2,-20(fp)
 2000728:	e0fffb17 	ldw	r3,-20(fp)
 200072c:	e0bffa17 	ldw	r2,-24(fp)
 2000730:	18bff116 	blt	r3,r2,20006f8 <DEMO_EEPROM+0x7c>
 2000734:	00000306 	br	2000744 <DEMO_EEPROM+0xc8>
            printf("Addr[%02d] = %02xh\r\n", i, szBuf[i]);
        }
    }else{
        printf("Failed to access EEPROM\r\n");
 2000738:	01008074 	movhi	r4,513
 200073c:	2115f204 	addi	r4,r4,22472
 2000740:	2003fe80 	call	2003fe8 <puts>
    }

    
}
 2000744:	e037883a 	mov	sp,fp
 2000748:	dfc00117 	ldw	ra,4(sp)
 200074c:	df000017 	ldw	fp,0(sp)
 2000750:	dec00204 	addi	sp,sp,8
 2000754:	f800283a 	ret

02000758 <DEMO_EPCS>:

void DEMO_EPCS(void){
 2000758:	defffb04 	addi	sp,sp,-20
 200075c:	dfc00415 	stw	ra,16(sp)
 2000760:	df000315 	stw	fp,12(sp)
 2000764:	df000304 	addi	fp,sp,12
    alt_u32 MemSize;
    MemSize = Flash_Size(EPCS_NAME);
 2000768:	01008074 	movhi	r4,513
 200076c:	2115f904 	addi	r4,r4,22500
 2000770:	2001d2c0 	call	2001d2c <Flash_Size>
 2000774:	e0bffd15 	stw	r2,-12(fp)
    printf("EPCS Size:%d Bytes (%d MB)\r\n", (int)MemSize, (int)MemSize/1024/1024);
 2000778:	e0bffd17 	ldw	r2,-12(fp)
 200077c:	e0bffe15 	stw	r2,-8(fp)
 2000780:	e0bffd17 	ldw	r2,-12(fp)
 2000784:	e0bfff15 	stw	r2,-4(fp)
 2000788:	e0ffff17 	ldw	r3,-4(fp)
 200078c:	1804403a 	cmpge	r2,r3,zero
 2000790:	1000051e 	bne	r2,zero,20007a8 <DEMO_EPCS+0x50>
 2000794:	00800434 	movhi	r2,16
 2000798:	10bfffc4 	addi	r2,r2,-1
 200079c:	e0ffff17 	ldw	r3,-4(fp)
 20007a0:	1887883a 	add	r3,r3,r2
 20007a4:	e0ffff15 	stw	r3,-4(fp)
 20007a8:	e0ffff17 	ldw	r3,-4(fp)
 20007ac:	1805d53a 	srai	r2,r3,20
 20007b0:	100d883a 	mov	r6,r2
 20007b4:	01008074 	movhi	r4,513
 20007b8:	2115fc04 	addi	r4,r4,22512
 20007bc:	e17ffe17 	ldw	r5,-8(fp)
 20007c0:	2003ed00 	call	2003ed0 <printf>
    
}
 20007c4:	e037883a 	mov	sp,fp
 20007c8:	dfc00117 	ldw	ra,4(sp)
 20007cc:	df000017 	ldw	fp,0(sp)
 20007d0:	dec00204 	addi	sp,sp,8
 20007d4:	f800283a 	ret

020007d8 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 20007d8:	defff804 	addi	sp,sp,-32
 20007dc:	dfc00715 	stw	ra,28(sp)
 20007e0:	df000615 	stw	fp,24(sp)
 20007e4:	df000604 	addi	fp,sp,24
 20007e8:	e13ffb15 	stw	r4,-20(fp)
 20007ec:	e17ffc15 	stw	r5,-16(fp)
 20007f0:	e0800217 	ldw	r2,8(fp)
 20007f4:	e1bffd05 	stb	r6,-12(fp)
 20007f8:	e1fffe05 	stb	r7,-8(fp)
 20007fc:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 2000800:	00800044 	movi	r2,1
 2000804:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 2000808:	e13ffb17 	ldw	r4,-20(fp)
 200080c:	e17ffc17 	ldw	r5,-16(fp)
 2000810:	2000c200 	call	2000c20 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2000814:	e0bffd03 	ldbu	r2,-12(fp)
 2000818:	11803fcc 	andi	r6,r2,255
 200081c:	e13ffb17 	ldw	r4,-20(fp)
 2000820:	e17ffc17 	ldw	r5,-16(fp)
 2000824:	2000d200 	call	2000d20 <i2c_write>
 2000828:	1004c03a 	cmpne	r2,r2,zero
 200082c:	1000011e 	bne	r2,zero,2000834 <I2C_Write+0x5c>
        bSuccess = FALSE;
 2000830:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2000834:	e0bffa17 	ldw	r2,-24(fp)
 2000838:	1005003a 	cmpeq	r2,r2,zero
 200083c:	1000071e 	bne	r2,zero,200085c <I2C_Write+0x84>
 2000840:	e1bffe03 	ldbu	r6,-8(fp)
 2000844:	e13ffb17 	ldw	r4,-20(fp)
 2000848:	e17ffc17 	ldw	r5,-16(fp)
 200084c:	2000d200 	call	2000d20 <i2c_write>
 2000850:	1004c03a 	cmpne	r2,r2,zero
 2000854:	1000011e 	bne	r2,zero,200085c <I2C_Write+0x84>
        bSuccess = FALSE;
 2000858:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 200085c:	e0bffa17 	ldw	r2,-24(fp)
 2000860:	1005003a 	cmpeq	r2,r2,zero
 2000864:	1000071e 	bne	r2,zero,2000884 <I2C_Write+0xac>
 2000868:	e1bfff03 	ldbu	r6,-4(fp)
 200086c:	e13ffb17 	ldw	r4,-20(fp)
 2000870:	e17ffc17 	ldw	r5,-16(fp)
 2000874:	2000d200 	call	2000d20 <i2c_write>
 2000878:	1004c03a 	cmpne	r2,r2,zero
 200087c:	1000011e 	bne	r2,zero,2000884 <I2C_Write+0xac>
        bSuccess = FALSE;
 2000880:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 2000884:	e13ffb17 	ldw	r4,-20(fp)
 2000888:	e17ffc17 	ldw	r5,-16(fp)
 200088c:	2000ca80 	call	2000ca8 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 2000890:	0106d604 	movi	r4,7000
 2000894:	20122600 	call	2012260 <usleep>
    
    return bSuccess;
 2000898:	e0bffa17 	ldw	r2,-24(fp)

    
}
 200089c:	e037883a 	mov	sp,fp
 20008a0:	dfc00117 	ldw	ra,4(sp)
 20008a4:	df000017 	ldw	fp,0(sp)
 20008a8:	dec00204 	addi	sp,sp,8
 20008ac:	f800283a 	ret

020008b0 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 20008b0:	defff904 	addi	sp,sp,-28
 20008b4:	dfc00615 	stw	ra,24(sp)
 20008b8:	df000515 	stw	fp,20(sp)
 20008bc:	df000504 	addi	fp,sp,20
 20008c0:	e13ffc15 	stw	r4,-16(fp)
 20008c4:	e17ffd15 	stw	r5,-12(fp)
 20008c8:	e1bffe05 	stb	r6,-8(fp)
 20008cc:	e1ffff05 	stb	r7,-4(fp)
    bool bSuccess = TRUE;
 20008d0:	00800044 	movi	r2,1
 20008d4:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 20008d8:	e13ffc17 	ldw	r4,-16(fp)
 20008dc:	e17ffd17 	ldw	r5,-12(fp)
 20008e0:	2000c200 	call	2000c20 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 20008e4:	e0bffe03 	ldbu	r2,-8(fp)
 20008e8:	11803fcc 	andi	r6,r2,255
 20008ec:	e13ffc17 	ldw	r4,-16(fp)
 20008f0:	e17ffd17 	ldw	r5,-12(fp)
 20008f4:	2000d200 	call	2000d20 <i2c_write>
 20008f8:	1004c03a 	cmpne	r2,r2,zero
 20008fc:	1000011e 	bne	r2,zero,2000904 <I2C_Read+0x54>
        bSuccess = FALSE;
 2000900:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2000904:	e0bffb17 	ldw	r2,-20(fp)
 2000908:	1005003a 	cmpeq	r2,r2,zero
 200090c:	1000071e 	bne	r2,zero,200092c <I2C_Read+0x7c>
 2000910:	e1bfff03 	ldbu	r6,-4(fp)
 2000914:	e13ffc17 	ldw	r4,-16(fp)
 2000918:	e17ffd17 	ldw	r5,-12(fp)
 200091c:	2000d200 	call	2000d20 <i2c_write>
 2000920:	1004c03a 	cmpne	r2,r2,zero
 2000924:	1000011e 	bne	r2,zero,200092c <I2C_Read+0x7c>
        bSuccess = FALSE;
 2000928:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
 200092c:	e13ffc17 	ldw	r4,-16(fp)
 2000930:	e17ffd17 	ldw	r5,-12(fp)
 2000934:	2000c200 	call	2000c20 <i2c_start>
    DeviceAddr |= 1; // Read
 2000938:	e0bffe03 	ldbu	r2,-8(fp)
 200093c:	10800054 	ori	r2,r2,1
 2000940:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 2000944:	e0bffb17 	ldw	r2,-20(fp)
 2000948:	1005003a 	cmpeq	r2,r2,zero
 200094c:	1000081e 	bne	r2,zero,2000970 <I2C_Read+0xc0>
 2000950:	e0bffe03 	ldbu	r2,-8(fp)
 2000954:	11803fcc 	andi	r6,r2,255
 2000958:	e13ffc17 	ldw	r4,-16(fp)
 200095c:	e17ffd17 	ldw	r5,-12(fp)
 2000960:	2000d200 	call	2000d20 <i2c_write>
 2000964:	1004c03a 	cmpne	r2,r2,zero
 2000968:	1000011e 	bne	r2,zero,2000970 <I2C_Read+0xc0>
        bSuccess = FALSE;
 200096c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 2000970:	e0bffb17 	ldw	r2,-20(fp)
 2000974:	1005003a 	cmpeq	r2,r2,zero
 2000978:	1000051e 	bne	r2,zero,2000990 <I2C_Read+0xe0>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 200097c:	e13ffc17 	ldw	r4,-16(fp)
 2000980:	e17ffd17 	ldw	r5,-12(fp)
 2000984:	e1800217 	ldw	r6,8(fp)
 2000988:	000f883a 	mov	r7,zero
 200098c:	2000e440 	call	2000e44 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 2000990:	e13ffc17 	ldw	r4,-16(fp)
 2000994:	e17ffd17 	ldw	r5,-12(fp)
 2000998:	2000ca80 	call	2000ca8 <i2c_stop>
    
    return bSuccess;
 200099c:	e0bffb17 	ldw	r2,-20(fp)
}
 20009a0:	e037883a 	mov	sp,fp
 20009a4:	dfc00117 	ldw	ra,4(sp)
 20009a8:	df000017 	ldw	fp,0(sp)
 20009ac:	dec00204 	addi	sp,sp,8
 20009b0:	f800283a 	ret

020009b4 <I2C_MultipleWrite>:


bool I2C_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pData, alt_u16 len){
 20009b4:	defff704 	addi	sp,sp,-36
 20009b8:	dfc00815 	stw	ra,32(sp)
 20009bc:	df000715 	stw	fp,28(sp)
 20009c0:	df000704 	addi	fp,sp,28
 20009c4:	e13ffb15 	stw	r4,-20(fp)
 20009c8:	e17ffc15 	stw	r5,-16(fp)
 20009cc:	e0800317 	ldw	r2,12(fp)
 20009d0:	e1bffd05 	stb	r6,-12(fp)
 20009d4:	e1fffe05 	stb	r7,-8(fp)
 20009d8:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 20009dc:	00800044 	movi	r2,1
 20009e0:	e0bffa15 	stw	r2,-24(fp)
    int i;

    i2c_start(clk_base, data_base);
 20009e4:	e13ffb17 	ldw	r4,-20(fp)
 20009e8:	e17ffc17 	ldw	r5,-16(fp)
 20009ec:	2000c200 	call	2000c20 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 20009f0:	e0bffd03 	ldbu	r2,-12(fp)
 20009f4:	11803fcc 	andi	r6,r2,255
 20009f8:	e13ffb17 	ldw	r4,-20(fp)
 20009fc:	e17ffc17 	ldw	r5,-16(fp)
 2000a00:	2000d200 	call	2000d20 <i2c_write>
 2000a04:	1004c03a 	cmpne	r2,r2,zero
 2000a08:	1000011e 	bne	r2,zero,2000a10 <I2C_MultipleWrite+0x5c>
        bSuccess = FALSE;
 2000a0c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2000a10:	e0bffa17 	ldw	r2,-24(fp)
 2000a14:	1005003a 	cmpeq	r2,r2,zero
 2000a18:	1000071e 	bne	r2,zero,2000a38 <I2C_MultipleWrite+0x84>
 2000a1c:	e1bffe03 	ldbu	r6,-8(fp)
 2000a20:	e13ffb17 	ldw	r4,-20(fp)
 2000a24:	e17ffc17 	ldw	r5,-16(fp)
 2000a28:	2000d200 	call	2000d20 <i2c_write>
 2000a2c:	1004c03a 	cmpne	r2,r2,zero
 2000a30:	1000011e 	bne	r2,zero,2000a38 <I2C_MultipleWrite+0x84>
        bSuccess = FALSE;
 2000a34:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess){
 2000a38:	e0bffa17 	ldw	r2,-24(fp)
 2000a3c:	1005003a 	cmpeq	r2,r2,zero
 2000a40:	1000151e 	bne	r2,zero,2000a98 <I2C_MultipleWrite+0xe4>
        for(i=0;i<len && bSuccess;i++){
 2000a44:	e03ff915 	stw	zero,-28(fp)
 2000a48:	00000d06 	br	2000a80 <I2C_MultipleWrite+0xcc>
            bSuccess = i2c_write(clk_base, data_base, *pData);
 2000a4c:	e0800217 	ldw	r2,8(fp)
 2000a50:	10800003 	ldbu	r2,0(r2)
 2000a54:	11803fcc 	andi	r6,r2,255
 2000a58:	e13ffb17 	ldw	r4,-20(fp)
 2000a5c:	e17ffc17 	ldw	r5,-16(fp)
 2000a60:	2000d200 	call	2000d20 <i2c_write>
 2000a64:	e0bffa15 	stw	r2,-24(fp)
            pData++;
 2000a68:	e0800217 	ldw	r2,8(fp)
 2000a6c:	10800044 	addi	r2,r2,1
 2000a70:	e0800215 	stw	r2,8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 2000a74:	e0bff917 	ldw	r2,-28(fp)
 2000a78:	10800044 	addi	r2,r2,1
 2000a7c:	e0bff915 	stw	r2,-28(fp)
 2000a80:	e0ffff0b 	ldhu	r3,-4(fp)
 2000a84:	e0bff917 	ldw	r2,-28(fp)
 2000a88:	10c0030e 	bge	r2,r3,2000a98 <I2C_MultipleWrite+0xe4>
 2000a8c:	e0bffa17 	ldw	r2,-24(fp)
 2000a90:	1004c03a 	cmpne	r2,r2,zero
 2000a94:	103fed1e 	bne	r2,zero,2000a4c <I2C_MultipleWrite+0x98>
            pData++;
        }
        if (!bSuccess)         
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 2000a98:	e13ffb17 	ldw	r4,-20(fp)
 2000a9c:	e17ffc17 	ldw	r5,-16(fp)
 2000aa0:	2000ca80 	call	2000ca8 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 2000aa4:	0106d604 	movi	r4,7000
 2000aa8:	20122600 	call	2012260 <usleep>
    
    return bSuccess;
 2000aac:	e0bffa17 	ldw	r2,-24(fp)

    
}
 2000ab0:	e037883a 	mov	sp,fp
 2000ab4:	dfc00117 	ldw	ra,4(sp)
 2000ab8:	df000017 	ldw	fp,0(sp)
 2000abc:	dec00204 	addi	sp,sp,8
 2000ac0:	f800283a 	ret

02000ac4 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
 2000ac4:	defff704 	addi	sp,sp,-36
 2000ac8:	dfc00815 	stw	ra,32(sp)
 2000acc:	df000715 	stw	fp,28(sp)
 2000ad0:	df000704 	addi	fp,sp,28
 2000ad4:	e13ffb15 	stw	r4,-20(fp)
 2000ad8:	e17ffc15 	stw	r5,-16(fp)
 2000adc:	e0800317 	ldw	r2,12(fp)
 2000ae0:	e1bffd05 	stb	r6,-12(fp)
 2000ae4:	e1fffe05 	stb	r7,-8(fp)
 2000ae8:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 2000aec:	00800044 	movi	r2,1
 2000af0:	e0bff915 	stw	r2,-28(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 2000af4:	e13ffb17 	ldw	r4,-20(fp)
 2000af8:	e17ffc17 	ldw	r5,-16(fp)
 2000afc:	2000c200 	call	2000c20 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2000b00:	e0bffd03 	ldbu	r2,-12(fp)
 2000b04:	11803fcc 	andi	r6,r2,255
 2000b08:	e13ffb17 	ldw	r4,-20(fp)
 2000b0c:	e17ffc17 	ldw	r5,-16(fp)
 2000b10:	2000d200 	call	2000d20 <i2c_write>
 2000b14:	1004c03a 	cmpne	r2,r2,zero
 2000b18:	1000011e 	bne	r2,zero,2000b20 <I2C_MultipleRead+0x5c>
        bSuccess = FALSE;
 2000b1c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2000b20:	e0bff917 	ldw	r2,-28(fp)
 2000b24:	1005003a 	cmpeq	r2,r2,zero
 2000b28:	1000071e 	bne	r2,zero,2000b48 <I2C_MultipleRead+0x84>
 2000b2c:	e1bffe03 	ldbu	r6,-8(fp)
 2000b30:	e13ffb17 	ldw	r4,-20(fp)
 2000b34:	e17ffc17 	ldw	r5,-16(fp)
 2000b38:	2000d200 	call	2000d20 <i2c_write>
 2000b3c:	1004c03a 	cmpne	r2,r2,zero
 2000b40:	1000011e 	bne	r2,zero,2000b48 <I2C_MultipleRead+0x84>
        bSuccess = FALSE;
 2000b44:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
 2000b48:	e0bff917 	ldw	r2,-28(fp)
 2000b4c:	1005003a 	cmpeq	r2,r2,zero
 2000b50:	1000031e 	bne	r2,zero,2000b60 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
 2000b54:	e13ffb17 	ldw	r4,-20(fp)
 2000b58:	e17ffc17 	ldw	r5,-16(fp)
 2000b5c:	2000c200 	call	2000c20 <i2c_start>
    DeviceAddr |= 1; // Read
 2000b60:	e0bffd03 	ldbu	r2,-12(fp)
 2000b64:	10800054 	ori	r2,r2,1
 2000b68:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 2000b6c:	e0bff917 	ldw	r2,-28(fp)
 2000b70:	1005003a 	cmpeq	r2,r2,zero
 2000b74:	1000081e 	bne	r2,zero,2000b98 <I2C_MultipleRead+0xd4>
 2000b78:	e0bffd03 	ldbu	r2,-12(fp)
 2000b7c:	11803fcc 	andi	r6,r2,255
 2000b80:	e13ffb17 	ldw	r4,-20(fp)
 2000b84:	e17ffc17 	ldw	r5,-16(fp)
 2000b88:	2000d200 	call	2000d20 <i2c_write>
 2000b8c:	1004c03a 	cmpne	r2,r2,zero
 2000b90:	1000011e 	bne	r2,zero,2000b98 <I2C_MultipleRead+0xd4>
        bSuccess = FALSE;
 2000b94:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 2000b98:	e0bff917 	ldw	r2,-28(fp)
 2000b9c:	1005003a 	cmpeq	r2,r2,zero
 2000ba0:	1000161e 	bne	r2,zero,2000bfc <I2C_MultipleRead+0x138>
        for(i=0;i<len && bSuccess;i++){
 2000ba4:	e03ffa15 	stw	zero,-24(fp)
 2000ba8:	00000e06 	br	2000be4 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
 2000bac:	e0bfff0b 	ldhu	r2,-4(fp)
 2000bb0:	10ffffc4 	addi	r3,r2,-1
 2000bb4:	e0bffa17 	ldw	r2,-24(fp)
 2000bb8:	188ec03a 	cmpne	r7,r3,r2
 2000bbc:	e13ffb17 	ldw	r4,-20(fp)
 2000bc0:	e17ffc17 	ldw	r5,-16(fp)
 2000bc4:	e1800217 	ldw	r6,8(fp)
 2000bc8:	2000e440 	call	2000e44 <i2c_read>
            pBuf++;
 2000bcc:	e0800217 	ldw	r2,8(fp)
 2000bd0:	10800044 	addi	r2,r2,1
 2000bd4:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 2000bd8:	e0bffa17 	ldw	r2,-24(fp)
 2000bdc:	10800044 	addi	r2,r2,1
 2000be0:	e0bffa15 	stw	r2,-24(fp)
 2000be4:	e0ffff0b 	ldhu	r3,-4(fp)
 2000be8:	e0bffa17 	ldw	r2,-24(fp)
 2000bec:	10c0030e 	bge	r2,r3,2000bfc <I2C_MultipleRead+0x138>
 2000bf0:	e0bff917 	ldw	r2,-28(fp)
 2000bf4:	1004c03a 	cmpne	r2,r2,zero
 2000bf8:	103fec1e 	bne	r2,zero,2000bac <I2C_MultipleRead+0xe8>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
 2000bfc:	e13ffb17 	ldw	r4,-20(fp)
 2000c00:	e17ffc17 	ldw	r5,-16(fp)
 2000c04:	2000ca80 	call	2000ca8 <i2c_stop>
    
    return bSuccess;    
 2000c08:	e0bff917 	ldw	r2,-28(fp)
    
}
 2000c0c:	e037883a 	mov	sp,fp
 2000c10:	dfc00117 	ldw	ra,4(sp)
 2000c14:	df000017 	ldw	fp,0(sp)
 2000c18:	dec00204 	addi	sp,sp,8
 2000c1c:	f800283a 	ret

02000c20 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 2000c20:	defffc04 	addi	sp,sp,-16
 2000c24:	dfc00315 	stw	ra,12(sp)
 2000c28:	df000215 	stw	fp,8(sp)
 2000c2c:	df000204 	addi	fp,sp,8
 2000c30:	e13ffe15 	stw	r4,-8(fp)
 2000c34:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 2000c38:	e0bfff17 	ldw	r2,-4(fp)
 2000c3c:	10800104 	addi	r2,r2,4
 2000c40:	1007883a 	mov	r3,r2
 2000c44:	00800044 	movi	r2,1
 2000c48:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
 2000c4c:	e0bfff17 	ldw	r2,-4(fp)
 2000c50:	1007883a 	mov	r3,r2
 2000c54:	00800044 	movi	r2,1
 2000c58:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base);
 2000c5c:	e0bffe17 	ldw	r2,-8(fp)
 2000c60:	1007883a 	mov	r3,r2
 2000c64:	00800044 	movi	r2,1
 2000c68:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;
 2000c6c:	01000044 	movi	r4,1
 2000c70:	20122600 	call	2012260 <usleep>
     
    SDA_LOW(data_base); // data low
 2000c74:	e0bfff17 	ldw	r2,-4(fp)
 2000c78:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; 
 2000c7c:	01000044 	movi	r4,1
 2000c80:	20122600 	call	2012260 <usleep>
    SCL_LOW(clk_base); // clock low
 2000c84:	e0bffe17 	ldw	r2,-8(fp)
 2000c88:	10000035 	stwio	zero,0(r2)
    SCL_DELAY;
 2000c8c:	01000044 	movi	r4,1
 2000c90:	20122600 	call	2012260 <usleep>
}
 2000c94:	e037883a 	mov	sp,fp
 2000c98:	dfc00117 	ldw	ra,4(sp)
 2000c9c:	df000017 	ldw	fp,0(sp)
 2000ca0:	dec00204 	addi	sp,sp,8
 2000ca4:	f800283a 	ret

02000ca8 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 2000ca8:	defffc04 	addi	sp,sp,-16
 2000cac:	dfc00315 	stw	ra,12(sp)
 2000cb0:	df000215 	stw	fp,8(sp)
 2000cb4:	df000204 	addi	fp,sp,8
 2000cb8:	e13ffe15 	stw	r4,-8(fp)
 2000cbc:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 2000cc0:	e0bfff17 	ldw	r2,-4(fp)
 2000cc4:	10800104 	addi	r2,r2,4
 2000cc8:	1007883a 	mov	r3,r2
 2000ccc:	00800044 	movi	r2,1
 2000cd0:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
 2000cd4:	e0bfff17 	ldw	r2,-4(fp)
 2000cd8:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
 2000cdc:	e0bffe17 	ldw	r2,-8(fp)
 2000ce0:	1007883a 	mov	r3,r2
 2000ce4:	00800044 	movi	r2,1
 2000ce8:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high long delay
 2000cec:	01000044 	movi	r4,1
 2000cf0:	20122600 	call	2012260 <usleep>
    SDA_HIGH(data_base); // data high
 2000cf4:	e0bfff17 	ldw	r2,-4(fp)
 2000cf8:	1007883a 	mov	r3,r2
 2000cfc:	00800044 	movi	r2,1
 2000d00:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // data high delay
 2000d04:	01000044 	movi	r4,1
 2000d08:	20122600 	call	2012260 <usleep>
    

    
}
 2000d0c:	e037883a 	mov	sp,fp
 2000d10:	dfc00117 	ldw	ra,4(sp)
 2000d14:	df000017 	ldw	fp,0(sp)
 2000d18:	dec00204 	addi	sp,sp,8
 2000d1c:	f800283a 	ret

02000d20 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 2000d20:	defff804 	addi	sp,sp,-32
 2000d24:	dfc00715 	stw	ra,28(sp)
 2000d28:	df000615 	stw	fp,24(sp)
 2000d2c:	df000604 	addi	fp,sp,24
 2000d30:	e13ffd15 	stw	r4,-12(fp)
 2000d34:	e17ffe15 	stw	r5,-8(fp)
 2000d38:	e1bfff05 	stb	r6,-4(fp)
    alt_u8 Mask = 0x80;
 2000d3c:	00bfe004 	movi	r2,-128
 2000d40:	e0bffc05 	stb	r2,-16(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 2000d44:	e0bffe17 	ldw	r2,-8(fp)
 2000d48:	10800104 	addi	r2,r2,4
 2000d4c:	1007883a 	mov	r3,r2
 2000d50:	00800044 	movi	r2,1
 2000d54:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
 2000d58:	e03ffa15 	stw	zero,-24(fp)
 2000d5c:	00001f06 	br	2000ddc <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 2000d60:	e0bffd17 	ldw	r2,-12(fp)
 2000d64:	10000035 	stwio	zero,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 2000d68:	e0ffff03 	ldbu	r3,-4(fp)
 2000d6c:	e0bffc03 	ldbu	r2,-16(fp)
 2000d70:	1884703a 	and	r2,r3,r2
 2000d74:	10803fcc 	andi	r2,r2,255
 2000d78:	1005003a 	cmpeq	r2,r2,zero
 2000d7c:	1000051e 	bne	r2,zero,2000d94 <i2c_write+0x74>
            SDA_HIGH(data_base);
 2000d80:	e0bffe17 	ldw	r2,-8(fp)
 2000d84:	1007883a 	mov	r3,r2
 2000d88:	00800044 	movi	r2,1
 2000d8c:	18800035 	stwio	r2,0(r3)
 2000d90:	00000206 	br	2000d9c <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
 2000d94:	e0bffe17 	ldw	r2,-8(fp)
 2000d98:	10000035 	stwio	zero,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 2000d9c:	e0bffc03 	ldbu	r2,-16(fp)
 2000da0:	1004d07a 	srli	r2,r2,1
 2000da4:	e0bffc05 	stb	r2,-16(fp)
        // clock high
        SCL_HIGH(clk_base);
 2000da8:	e0bffd17 	ldw	r2,-12(fp)
 2000dac:	1007883a 	mov	r3,r2
 2000db0:	00800044 	movi	r2,1
 2000db4:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
 2000db8:	01000044 	movi	r4,1
 2000dbc:	20122600 	call	2012260 <usleep>
        SCL_LOW(clk_base);
 2000dc0:	e0bffd17 	ldw	r2,-12(fp)
 2000dc4:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
 2000dc8:	01000044 	movi	r4,1
 2000dcc:	20122600 	call	2012260 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 2000dd0:	e0bffa17 	ldw	r2,-24(fp)
 2000dd4:	10800044 	addi	r2,r2,1
 2000dd8:	e0bffa15 	stw	r2,-24(fp)
 2000ddc:	e0bffa17 	ldw	r2,-24(fp)
 2000de0:	10800210 	cmplti	r2,r2,8
 2000de4:	103fde1e 	bne	r2,zero,2000d60 <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 2000de8:	e0bffe17 	ldw	r2,-8(fp)
 2000dec:	10800104 	addi	r2,r2,4
 2000df0:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
 2000df4:	e0bffd17 	ldw	r2,-12(fp)
 2000df8:	1007883a 	mov	r3,r2
 2000dfc:	00800044 	movi	r2,1
 2000e00:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;  // clock high delay
 2000e04:	01000044 	movi	r4,1
 2000e08:	20122600 	call	2012260 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 2000e0c:	e0bffe17 	ldw	r2,-8(fp)
 2000e10:	10800037 	ldwio	r2,0(r2)
 2000e14:	1005003a 	cmpeq	r2,r2,zero
 2000e18:	e0bffb15 	stw	r2,-20(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 2000e1c:	e0bffd17 	ldw	r2,-12(fp)
 2000e20:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 2000e24:	01000044 	movi	r4,1
 2000e28:	20122600 	call	2012260 <usleep>
    return bAck;
 2000e2c:	e0bffb17 	ldw	r2,-20(fp)
}    
 2000e30:	e037883a 	mov	sp,fp
 2000e34:	dfc00117 	ldw	ra,4(sp)
 2000e38:	df000017 	ldw	fp,0(sp)
 2000e3c:	dec00204 	addi	sp,sp,8
 2000e40:	f800283a 	ret

02000e44 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 2000e44:	defff804 	addi	sp,sp,-32
 2000e48:	dfc00715 	stw	ra,28(sp)
 2000e4c:	df000615 	stw	fp,24(sp)
 2000e50:	df000604 	addi	fp,sp,24
 2000e54:	e13ffc15 	stw	r4,-16(fp)
 2000e58:	e17ffd15 	stw	r5,-12(fp)
 2000e5c:	e1bffe15 	stw	r6,-8(fp)
 2000e60:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 2000e64:	e03ffb05 	stb	zero,-20(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 2000e68:	e0bffd17 	ldw	r2,-12(fp)
 2000e6c:	10800104 	addi	r2,r2,4
 2000e70:	10000035 	stwio	zero,0(r2)
    SCL_LOW(clk_base); // clock low
 2000e74:	e0bffc17 	ldw	r2,-16(fp)
 2000e78:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 2000e7c:	01000044 	movi	r4,1
 2000e80:	20122600 	call	2012260 <usleep>

    for(i=0;i<8;i++){
 2000e84:	e03ffa15 	stw	zero,-24(fp)
 2000e88:	00001706 	br	2000ee8 <i2c_read+0xa4>
        Data <<= 1;
 2000e8c:	e0bffb03 	ldbu	r2,-20(fp)
 2000e90:	1085883a 	add	r2,r2,r2
 2000e94:	e0bffb05 	stb	r2,-20(fp)
        SCL_HIGH(clk_base);  // clock high
 2000e98:	e0bffc17 	ldw	r2,-16(fp)
 2000e9c:	1007883a 	mov	r3,r2
 2000ea0:	00800044 	movi	r2,1
 2000ea4:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
 2000ea8:	01000044 	movi	r4,1
 2000eac:	20122600 	call	2012260 <usleep>
        if (SDA_READ(data_base))  // read data   
 2000eb0:	e0bffd17 	ldw	r2,-12(fp)
 2000eb4:	10800037 	ldwio	r2,0(r2)
 2000eb8:	1005003a 	cmpeq	r2,r2,zero
 2000ebc:	1000031e 	bne	r2,zero,2000ecc <i2c_read+0x88>
            Data |= 0x01;
 2000ec0:	e0bffb03 	ldbu	r2,-20(fp)
 2000ec4:	10800054 	ori	r2,r2,1
 2000ec8:	e0bffb05 	stb	r2,-20(fp)
        SCL_LOW(clk_base);  // clock log  
 2000ecc:	e0bffc17 	ldw	r2,-16(fp)
 2000ed0:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
 2000ed4:	01000044 	movi	r4,1
 2000ed8:	20122600 	call	2012260 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 2000edc:	e0bffa17 	ldw	r2,-24(fp)
 2000ee0:	10800044 	addi	r2,r2,1
 2000ee4:	e0bffa15 	stw	r2,-24(fp)
 2000ee8:	e0bffa17 	ldw	r2,-24(fp)
 2000eec:	10800210 	cmplti	r2,r2,8
 2000ef0:	103fe61e 	bne	r2,zero,2000e8c <i2c_read+0x48>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 2000ef4:	e0bffc17 	ldw	r2,-16(fp)
 2000ef8:	10000035 	stwio	zero,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 2000efc:	e0bffd17 	ldw	r2,-12(fp)
 2000f00:	10800104 	addi	r2,r2,4
 2000f04:	1007883a 	mov	r3,r2
 2000f08:	00800044 	movi	r2,1
 2000f0c:	18800035 	stwio	r2,0(r3)
    if (bAck)
 2000f10:	e0bfff17 	ldw	r2,-4(fp)
 2000f14:	1005003a 	cmpeq	r2,r2,zero
 2000f18:	1000031e 	bne	r2,zero,2000f28 <i2c_read+0xe4>
        SDA_LOW(data_base);
 2000f1c:	e0bffd17 	ldw	r2,-12(fp)
 2000f20:	10000035 	stwio	zero,0(r2)
 2000f24:	00000406 	br	2000f38 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
 2000f28:	e0bffd17 	ldw	r2,-12(fp)
 2000f2c:	1007883a 	mov	r3,r2
 2000f30:	00800044 	movi	r2,1
 2000f34:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base); // clock high
 2000f38:	e0bffc17 	ldw	r2,-16(fp)
 2000f3c:	1007883a 	mov	r3,r2
 2000f40:	00800044 	movi	r2,1
 2000f44:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high  delay
 2000f48:	01000044 	movi	r4,1
 2000f4c:	20122600 	call	2012260 <usleep>
    SCL_LOW(clk_base); // clock low
 2000f50:	e0bffc17 	ldw	r2,-16(fp)
 2000f54:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 2000f58:	01000044 	movi	r4,1
 2000f5c:	20122600 	call	2012260 <usleep>
    SDA_LOW(data_base);  // data low
 2000f60:	e0bffd17 	ldw	r2,-12(fp)
 2000f64:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // data low delay
 2000f68:	01000044 	movi	r4,1
 2000f6c:	20122600 	call	2012260 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 2000f70:	e0fffe17 	ldw	r3,-8(fp)
 2000f74:	e0bffb03 	ldbu	r2,-20(fp)
 2000f78:	18800005 	stb	r2,0(r3)
}
 2000f7c:	e037883a 	mov	sp,fp
 2000f80:	dfc00117 	ldw	ra,4(sp)
 2000f84:	df000017 	ldw	fp,0(sp)
 2000f88:	dec00204 	addi	sp,sp,8
 2000f8c:	f800283a 	ret

02000f90 <i2c_data_verify>:

//==========================================================
// function for verify

bool i2c_data_verify(alt_u32 scl_base, alt_u32 sda_base, alt_u8 ControlAddr){
 2000f90:	defff704 	addi	sp,sp,-36
 2000f94:	dfc00815 	stw	ra,32(sp)
 2000f98:	df000715 	stw	fp,28(sp)
 2000f9c:	df000704 	addi	fp,sp,28
 2000fa0:	e13ffd15 	stw	r4,-12(fp)
 2000fa4:	e17ffe15 	stw	r5,-8(fp)
 2000fa8:	e1bfff05 	stb	r6,-4(fp)
    bool bPass;
    const alt_8 DeviceAddr = 0xA0;
 2000fac:	00bfe804 	movi	r2,-96
 2000fb0:	e0bffa45 	stb	r2,-23(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2000fb4:	008080b4 	movhi	r2,514
 2000fb8:	10a64504 	addi	r2,r2,-26348
 2000fbc:	10800017 	ldw	r2,0(r2)
    alt_u8 OrgData, TestData, Data;
    
    TestData = alt_nticks();
 2000fc0:	e0bffa05 	stb	r2,-24(fp)
    if (TestData == 0)
 2000fc4:	e0bffa03 	ldbu	r2,-24(fp)
 2000fc8:	1004c03a 	cmpne	r2,r2,zero
 2000fcc:	1000021e 	bne	r2,zero,2000fd8 <i2c_data_verify+0x48>
        TestData = 0x12;
 2000fd0:	00800484 	movi	r2,18
 2000fd4:	e0bffa05 	stb	r2,-24(fp)
    
    bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &OrgData);
 2000fd8:	e1bffa47 	ldb	r6,-23(fp)
 2000fdc:	e1ffff03 	ldbu	r7,-4(fp)
 2000fe0:	e0bffc04 	addi	r2,fp,-16
 2000fe4:	d8800015 	stw	r2,0(sp)
 2000fe8:	e13ffd17 	ldw	r4,-12(fp)
 2000fec:	e17ffe17 	ldw	r5,-8(fp)
 2000ff0:	20008b00 	call	20008b0 <I2C_Read>
 2000ff4:	e0bffb15 	stw	r2,-20(fp)
    if (bPass) // write
 2000ff8:	e0bffb17 	ldw	r2,-20(fp)
 2000ffc:	1005003a 	cmpeq	r2,r2,zero
 2001000:	1000081e 	bne	r2,zero,2001024 <i2c_data_verify+0x94>
        bPass = I2C_Write(scl_base, sda_base, DeviceAddr, ControlAddr, TestData);
 2001004:	e1bffa47 	ldb	r6,-23(fp)
 2001008:	e1ffff03 	ldbu	r7,-4(fp)
 200100c:	e0bffa03 	ldbu	r2,-24(fp)
 2001010:	d8800015 	stw	r2,0(sp)
 2001014:	e13ffd17 	ldw	r4,-12(fp)
 2001018:	e17ffe17 	ldw	r5,-8(fp)
 200101c:	20007d80 	call	20007d8 <I2C_Write>
 2001020:	e0bffb15 	stw	r2,-20(fp)
    if (bPass) // read        
 2001024:	e0bffb17 	ldw	r2,-20(fp)
 2001028:	1005003a 	cmpeq	r2,r2,zero
 200102c:	1000081e 	bne	r2,zero,2001050 <i2c_data_verify+0xc0>
        bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &Data);
 2001030:	e1bffa47 	ldb	r6,-23(fp)
 2001034:	e1ffff03 	ldbu	r7,-4(fp)
 2001038:	e0bffc44 	addi	r2,fp,-15
 200103c:	d8800015 	stw	r2,0(sp)
 2001040:	e13ffd17 	ldw	r4,-12(fp)
 2001044:	e17ffe17 	ldw	r5,-8(fp)
 2001048:	20008b00 	call	20008b0 <I2C_Read>
 200104c:	e0bffb15 	stw	r2,-20(fp)
    if (bPass && (Data != TestData)) // verify
 2001050:	e0bffb17 	ldw	r2,-20(fp)
 2001054:	1005003a 	cmpeq	r2,r2,zero
 2001058:	1000051e 	bne	r2,zero,2001070 <i2c_data_verify+0xe0>
 200105c:	e0bffc43 	ldbu	r2,-15(fp)
 2001060:	10c03fcc 	andi	r3,r2,255
 2001064:	e0bffa03 	ldbu	r2,-24(fp)
 2001068:	18800126 	beq	r3,r2,2001070 <i2c_data_verify+0xe0>
        bPass = FALSE;        
 200106c:	e03ffb15 	stw	zero,-20(fp)
    // restore        
    if (bPass) // write back
 2001070:	e0bffb17 	ldw	r2,-20(fp)
 2001074:	1005003a 	cmpeq	r2,r2,zero
 2001078:	1000091e 	bne	r2,zero,20010a0 <i2c_data_verify+0x110>
        bPass = I2C_Write(scl_base, sda_base, DeviceAddr, ControlAddr, OrgData);
 200107c:	e1bffa47 	ldb	r6,-23(fp)
 2001080:	e1ffff03 	ldbu	r7,-4(fp)
 2001084:	e0bffc03 	ldbu	r2,-16(fp)
 2001088:	10803fcc 	andi	r2,r2,255
 200108c:	d8800015 	stw	r2,0(sp)
 2001090:	e13ffd17 	ldw	r4,-12(fp)
 2001094:	e17ffe17 	ldw	r5,-8(fp)
 2001098:	20007d80 	call	20007d8 <I2C_Write>
 200109c:	e0bffb15 	stw	r2,-20(fp)
    if (bPass) // read        
 20010a0:	e0bffb17 	ldw	r2,-20(fp)
 20010a4:	1005003a 	cmpeq	r2,r2,zero
 20010a8:	1000081e 	bne	r2,zero,20010cc <i2c_data_verify+0x13c>
        bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &Data);
 20010ac:	e1bffa47 	ldb	r6,-23(fp)
 20010b0:	e1ffff03 	ldbu	r7,-4(fp)
 20010b4:	e0bffc44 	addi	r2,fp,-15
 20010b8:	d8800015 	stw	r2,0(sp)
 20010bc:	e13ffd17 	ldw	r4,-12(fp)
 20010c0:	e17ffe17 	ldw	r5,-8(fp)
 20010c4:	20008b00 	call	20008b0 <I2C_Read>
 20010c8:	e0bffb15 	stw	r2,-20(fp)
    if (bPass && (Data != OrgData)) // verify
 20010cc:	e0bffb17 	ldw	r2,-20(fp)
 20010d0:	1005003a 	cmpeq	r2,r2,zero
 20010d4:	1000061e 	bne	r2,zero,20010f0 <i2c_data_verify+0x160>
 20010d8:	e0bffc43 	ldbu	r2,-15(fp)
 20010dc:	e0fffc03 	ldbu	r3,-16(fp)
 20010e0:	11003fcc 	andi	r4,r2,255
 20010e4:	18803fcc 	andi	r2,r3,255
 20010e8:	20800126 	beq	r4,r2,20010f0 <i2c_data_verify+0x160>
        bPass = FALSE; 
 20010ec:	e03ffb15 	stw	zero,-20(fp)
        
    return bPass;
 20010f0:	e0bffb17 	ldw	r2,-20(fp)
}
 20010f4:	e037883a 	mov	sp,fp
 20010f8:	dfc00117 	ldw	ra,4(sp)
 20010fc:	df000017 	ldw	fp,0(sp)
 2001100:	dec00204 	addi	sp,sp,8
 2001104:	f800283a 	ret

02001108 <I2C_Verify>:




bool I2C_Verify(alt_u32 scl_base, alt_u32 sda_base, alt_u32 size){
 2001108:	defffa04 	addi	sp,sp,-24
 200110c:	dfc00515 	stw	ra,20(sp)
 2001110:	df000415 	stw	fp,16(sp)
 2001114:	df000404 	addi	fp,sp,16
 2001118:	e13ffd15 	stw	r4,-12(fp)
 200111c:	e17ffe15 	stw	r5,-8(fp)
 2001120:	e1bfff15 	stw	r6,-4(fp)
    bool bPass;
    if (size <= 256){
 2001124:	e0bfff17 	ldw	r2,-4(fp)
 2001128:	10804068 	cmpgeui	r2,r2,257
 200112c:	1000101e 	bne	r2,zero,2001170 <I2C_Verify+0x68>
        // less or equal to 256 Bytes
        bPass = i2c_data_verify(scl_base, sda_base, 0);
 2001130:	e13ffd17 	ldw	r4,-12(fp)
 2001134:	e17ffe17 	ldw	r5,-8(fp)
 2001138:	000d883a 	mov	r6,zero
 200113c:	2000f900 	call	2000f90 <i2c_data_verify>
 2001140:	e0bffc15 	stw	r2,-16(fp)
        if (bPass)
 2001144:	e0bffc17 	ldw	r2,-16(fp)
 2001148:	1005003a 	cmpeq	r2,r2,zero
 200114c:	1000091e 	bne	r2,zero,2001174 <I2C_Verify+0x6c>
            bPass = i2c_data_verify(scl_base, sda_base, size-1);
 2001150:	e0bfff17 	ldw	r2,-4(fp)
 2001154:	10bfffc4 	addi	r2,r2,-1
 2001158:	11803fcc 	andi	r6,r2,255
 200115c:	e13ffd17 	ldw	r4,-12(fp)
 2001160:	e17ffe17 	ldw	r5,-8(fp)
 2001164:	2000f900 	call	2000f90 <i2c_data_verify>
 2001168:	e0bffc15 	stw	r2,-16(fp)
 200116c:	00000106 	br	2001174 <I2C_Verify+0x6c>
    }else{
        bPass = FALSE;
 2001170:	e03ffc15 	stw	zero,-16(fp)
        bPass = i2cl_data_verify(scl_base, sda_base, 0);
        if (bPass)
            bPass = i2cl_data_verify(scl_base, sda_base, size-1);
            */
    }
    return bPass;
 2001174:	e0bffc17 	ldw	r2,-16(fp)
}
 2001178:	e037883a 	mov	sp,fp
 200117c:	dfc00117 	ldw	ra,4(sp)
 2001180:	df000017 	ldw	fp,0(sp)
 2001184:	dec00204 	addi	sp,sp,8
 2001188:	f800283a 	ret

0200118c <ADXL345_SPI_Init>:

#define DATA_READY_TIMEOUT  (alt_ticks_per_second()/3)



bool ADXL345_SPI_Init(alt_u32 device_base){
 200118c:	defffc04 	addi	sp,sp,-16
 2001190:	dfc00315 	stw	ra,12(sp)
 2001194:	df000215 	stw	fp,8(sp)
 2001198:	df000204 	addi	fp,sp,8
 200119c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    
    // clear fifo
    SPI_Init(device_base);
 20011a0:	e13fff17 	ldw	r4,-4(fp)
 20011a4:	20023c40 	call	20023c4 <SPI_Init>
   
    // 3-wire spi
    bSuccess = SPI_Write(device_base, ADXL345_REG_DATA_FORMAT, XL345_SPI3WIRE);
 20011a8:	e13fff17 	ldw	r4,-4(fp)
 20011ac:	01400c44 	movi	r5,49
 20011b0:	01801004 	movi	r6,64
 20011b4:	20025480 	call	2002548 <SPI_Write>
 20011b8:	e0bffe15 	stw	r2,-8(fp)
 
    // clear fifo   
    SPI_Init(device_base);
 20011bc:	e13fff17 	ldw	r4,-4(fp)
 20011c0:	20023c40 	call	20023c4 <SPI_Init>
        
    //Output Data Rate: 40Hz
    if (bSuccess){
 20011c4:	e0bffe17 	ldw	r2,-8(fp)
 20011c8:	1005003a 	cmpeq	r2,r2,zero
 20011cc:	1000051e 	bne	r2,zero,20011e4 <ADXL345_SPI_Init+0x58>
        bSuccess = SPI_Write(device_base, ADXL345_REG_BW_RATE, XL345_RATE_400); // 400 MHZ
 20011d0:	e13fff17 	ldw	r4,-4(fp)
 20011d4:	01400b04 	movi	r5,44
 20011d8:	01800304 	movi	r6,12
 20011dc:	20025480 	call	2002548 <SPI_Write>
 20011e0:	e0bffe15 	stw	r2,-8(fp)
    }
    
            
        
    //INT_Enable: Data Ready
    if (bSuccess){   
 20011e4:	e0bffe17 	ldw	r2,-8(fp)
 20011e8:	1005003a 	cmpeq	r2,r2,zero
 20011ec:	1000051e 	bne	r2,zero,2001204 <ADXL345_SPI_Init+0x78>
        bSuccess = SPI_Write(device_base, ADXL345_REG_INT_ENALBE, XL345_DATAREADY);
 20011f0:	e13fff17 	ldw	r4,-4(fp)
 20011f4:	01400b84 	movi	r5,46
 20011f8:	01802004 	movi	r6,128
 20011fc:	20025480 	call	2002548 <SPI_Write>
 2001200:	e0bffe15 	stw	r2,-8(fp)
    }
    
    // stop measure
    if (bSuccess){
 2001204:	e0bffe17 	ldw	r2,-8(fp)
 2001208:	1005003a 	cmpeq	r2,r2,zero
 200120c:	1000051e 	bne	r2,zero,2001224 <ADXL345_SPI_Init+0x98>
        bSuccess = SPI_Write(device_base, ADXL345_REG_POWER_CTL, XL345_STANDBY);
 2001210:	e13fff17 	ldw	r4,-4(fp)
 2001214:	01400b44 	movi	r5,45
 2001218:	000d883a 	mov	r6,zero
 200121c:	20025480 	call	2002548 <SPI_Write>
 2001220:	e0bffe15 	stw	r2,-8(fp)
    }

    // start measure
    if (bSuccess){
 2001224:	e0bffe17 	ldw	r2,-8(fp)
 2001228:	1005003a 	cmpeq	r2,r2,zero
 200122c:	1000051e 	bne	r2,zero,2001244 <ADXL345_SPI_Init+0xb8>
        bSuccess = SPI_Write(device_base, ADXL345_REG_POWER_CTL, XL345_MEASURE);
 2001230:	e13fff17 	ldw	r4,-4(fp)
 2001234:	01400b44 	movi	r5,45
 2001238:	01800204 	movi	r6,8
 200123c:	20025480 	call	2002548 <SPI_Write>
 2001240:	e0bffe15 	stw	r2,-8(fp)
        
    }
    
            
    return bSuccess;    
 2001244:	e0bffe17 	ldw	r2,-8(fp)
        
}
 2001248:	e037883a 	mov	sp,fp
 200124c:	dfc00117 	ldw	ra,4(sp)
 2001250:	df000017 	ldw	fp,0(sp)
 2001254:	dec00204 	addi	sp,sp,8
 2001258:	f800283a 	ret

0200125c <ADXL345_SPI_WaitDataReady>:


    
bool ADXL345_SPI_WaitDataReady(alt_u32 device_base){
 200125c:	defffa04 	addi	sp,sp,-24
 2001260:	dfc00515 	stw	ra,20(sp)
 2001264:	df000415 	stw	fp,16(sp)
 2001268:	dc000315 	stw	r16,12(sp)
 200126c:	df000304 	addi	fp,sp,12
 2001270:	e13fff15 	stw	r4,-4(fp)
 2001274:	008080b4 	movhi	r2,514
 2001278:	10a64504 	addi	r2,r2,-26348
 200127c:	10800017 	ldw	r2,0(r2)
    bool bDataReady;
    alt_u32 TimeStart;
    
    TimeStart = alt_nticks();
 2001280:	e0bffd15 	stw	r2,-12(fp)
    do{
        bDataReady = ADXL345_SPI_IsDataReady(device_base);
 2001284:	e13fff17 	ldw	r4,-4(fp)
 2001288:	20013000 	call	2001300 <ADXL345_SPI_IsDataReady>
 200128c:	e0bffe15 	stw	r2,-8(fp)
        if (!bDataReady)
 2001290:	e0bffe17 	ldw	r2,-8(fp)
 2001294:	1004c03a 	cmpne	r2,r2,zero
 2001298:	1000021e 	bne	r2,zero,20012a4 <ADXL345_SPI_WaitDataReady+0x48>
            usleep(500); 
 200129c:	01007d04 	movi	r4,500
 20012a0:	20122600 	call	2012260 <usleep>
    }while (!bDataReady && ( (alt_nticks() - TimeStart) < DATA_READY_TIMEOUT) );
 20012a4:	e0bffe17 	ldw	r2,-8(fp)
 20012a8:	1004c03a 	cmpne	r2,r2,zero
 20012ac:	10000d1e 	bne	r2,zero,20012e4 <ADXL345_SPI_WaitDataReady+0x88>
 20012b0:	008080b4 	movhi	r2,514
 20012b4:	10a64504 	addi	r2,r2,-26348
 20012b8:	10800017 	ldw	r2,0(r2)
 20012bc:	1007883a 	mov	r3,r2
 20012c0:	e0bffd17 	ldw	r2,-12(fp)
 20012c4:	18a1c83a 	sub	r16,r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 20012c8:	008080b4 	movhi	r2,514
 20012cc:	10a64404 	addi	r2,r2,-26352
 20012d0:	10800017 	ldw	r2,0(r2)
 20012d4:	1009883a 	mov	r4,r2
 20012d8:	014000c4 	movi	r5,3
 20012dc:	2002fcc0 	call	2002fcc <__udivsi3>
 20012e0:	80bfe836 	bltu	r16,r2,2001284 <ADXL345_SPI_WaitDataReady+0x28>
    
    return bDataReady;
 20012e4:	e0bffe17 	ldw	r2,-8(fp)
        
}    
 20012e8:	e037883a 	mov	sp,fp
 20012ec:	dfc00217 	ldw	ra,8(sp)
 20012f0:	df000117 	ldw	fp,4(sp)
 20012f4:	dc000017 	ldw	r16,0(sp)
 20012f8:	dec00304 	addi	sp,sp,12
 20012fc:	f800283a 	ret

02001300 <ADXL345_SPI_IsDataReady>:

bool ADXL345_SPI_IsDataReady(alt_u32 device_base){
 2001300:	defffb04 	addi	sp,sp,-20
 2001304:	dfc00415 	stw	ra,16(sp)
 2001308:	df000315 	stw	fp,12(sp)
 200130c:	df000304 	addi	fp,sp,12
 2001310:	e13fff15 	stw	r4,-4(fp)
    bool bReady = FALSE;
 2001314:	e03ffd15 	stw	zero,-12(fp)
    alt_u8 data8;
    
    if (SPI_Read(device_base, ADXL345_REG_INT_SOURCE,&data8)){
 2001318:	e1bffe04 	addi	r6,fp,-8
 200131c:	e13fff17 	ldw	r4,-4(fp)
 2001320:	01400c04 	movi	r5,48
 2001324:	20026e40 	call	20026e4 <SPI_Read>
 2001328:	1005003a 	cmpeq	r2,r2,zero
 200132c:	1000081e 	bne	r2,zero,2001350 <ADXL345_SPI_IsDataReady+0x50>
        if (data8 & XL345_DATAREADY)
 2001330:	e0bffe03 	ldbu	r2,-8(fp)
 2001334:	10803fcc 	andi	r2,r2,255
 2001338:	1080201c 	xori	r2,r2,128
 200133c:	10bfe004 	addi	r2,r2,-128
 2001340:	1004403a 	cmpge	r2,r2,zero
 2001344:	1000021e 	bne	r2,zero,2001350 <ADXL345_SPI_IsDataReady+0x50>
            bReady = TRUE;
 2001348:	00800044 	movi	r2,1
 200134c:	e0bffd15 	stw	r2,-12(fp)
    }            
    
    return bReady;
 2001350:	e0bffd17 	ldw	r2,-12(fp)
}
 2001354:	e037883a 	mov	sp,fp
 2001358:	dfc00117 	ldw	ra,4(sp)
 200135c:	df000017 	ldw	fp,0(sp)
 2001360:	dec00204 	addi	sp,sp,8
 2001364:	f800283a 	ret

02001368 <ADXL345_SPI_XYZ_Read>:



bool ADXL345_SPI_XYZ_Read(alt_u32 device_base, alt_u16 szData16[3]){
 2001368:	defff904 	addi	sp,sp,-28
 200136c:	dfc00615 	stw	ra,24(sp)
 2001370:	df000515 	stw	fp,20(sp)
 2001374:	df000504 	addi	fp,sp,20
 2001378:	e13ffe15 	stw	r4,-8(fp)
 200137c:	e17fff15 	stw	r5,-4(fp)
    bool bPass;
    alt_u8 szData8[6];
    bPass = SPI_MultipleRead(device_base, 0x32, (alt_u8 *)&szData8, sizeof(szData8));
 2001380:	e1bffc04 	addi	r6,fp,-16
 2001384:	e13ffe17 	ldw	r4,-8(fp)
 2001388:	01400c84 	movi	r5,50
 200138c:	01c00184 	movi	r7,6
 2001390:	200258c0 	call	200258c <SPI_MultipleRead>
 2001394:	e0bffb15 	stw	r2,-20(fp)
    if (bPass){
 2001398:	e0bffb17 	ldw	r2,-20(fp)
 200139c:	1005003a 	cmpeq	r2,r2,zero
 20013a0:	10001e1e 	bne	r2,zero,200141c <ADXL345_SPI_XYZ_Read+0xb4>
        szData16[0] = (szData8[1] << 8) | szData8[0]; 
 20013a4:	e0bffc43 	ldbu	r2,-15(fp)
 20013a8:	10803fcc 	andi	r2,r2,255
 20013ac:	1004923a 	slli	r2,r2,8
 20013b0:	1007883a 	mov	r3,r2
 20013b4:	e0bffc03 	ldbu	r2,-16(fp)
 20013b8:	10803fcc 	andi	r2,r2,255
 20013bc:	1884b03a 	or	r2,r3,r2
 20013c0:	1007883a 	mov	r3,r2
 20013c4:	e0bfff17 	ldw	r2,-4(fp)
 20013c8:	10c0000d 	sth	r3,0(r2)
        szData16[1] = (szData8[3] << 8) | szData8[2];
 20013cc:	e0bfff17 	ldw	r2,-4(fp)
 20013d0:	11000084 	addi	r4,r2,2
 20013d4:	e0bffcc3 	ldbu	r2,-13(fp)
 20013d8:	10803fcc 	andi	r2,r2,255
 20013dc:	1004923a 	slli	r2,r2,8
 20013e0:	1007883a 	mov	r3,r2
 20013e4:	e0bffc83 	ldbu	r2,-14(fp)
 20013e8:	10803fcc 	andi	r2,r2,255
 20013ec:	1884b03a 	or	r2,r3,r2
 20013f0:	2080000d 	sth	r2,0(r4)
        szData16[2] = (szData8[5] << 8) | szData8[4];
 20013f4:	e0bfff17 	ldw	r2,-4(fp)
 20013f8:	11000104 	addi	r4,r2,4
 20013fc:	e0bffd43 	ldbu	r2,-11(fp)
 2001400:	10803fcc 	andi	r2,r2,255
 2001404:	1004923a 	slli	r2,r2,8
 2001408:	1007883a 	mov	r3,r2
 200140c:	e0bffd03 	ldbu	r2,-12(fp)
 2001410:	10803fcc 	andi	r2,r2,255
 2001414:	1884b03a 	or	r2,r3,r2
 2001418:	2080000d 	sth	r2,0(r4)
    }        
    
    return bPass;
 200141c:	e0bffb17 	ldw	r2,-20(fp)
}
 2001420:	e037883a 	mov	sp,fp
 2001424:	dfc00117 	ldw	ra,4(sp)
 2001428:	df000017 	ldw	fp,0(sp)
 200142c:	dec00204 	addi	sp,sp,8
 2001430:	f800283a 	ret

02001434 <ADXL345_SPI_IdRead>:

bool ADXL345_SPI_IdRead(alt_u32 device_base, alt_u8 *pId){
 2001434:	defffb04 	addi	sp,sp,-20
 2001438:	dfc00415 	stw	ra,16(sp)
 200143c:	df000315 	stw	fp,12(sp)
 2001440:	df000304 	addi	fp,sp,12
 2001444:	e13ffe15 	stw	r4,-8(fp)
 2001448:	e17fff15 	stw	r5,-4(fp)
    bool bPass;
    bPass = SPI_Read(device_base, ADXL345_REG_DEVID, pId);
 200144c:	e13ffe17 	ldw	r4,-8(fp)
 2001450:	000b883a 	mov	r5,zero
 2001454:	e1bfff17 	ldw	r6,-4(fp)
 2001458:	20026e40 	call	20026e4 <SPI_Read>
 200145c:	e0bffd15 	stw	r2,-12(fp)
    
    return bPass;
 2001460:	e0bffd17 	ldw	r2,-12(fp)
}
 2001464:	e037883a 	mov	sp,fp
 2001468:	dfc00117 	ldw	ra,4(sp)
 200146c:	df000017 	ldw	fp,0(sp)
 2001470:	dec00204 	addi	sp,sp,8
 2001474:	f800283a 	ret

02001478 <ADC_Read>:
#include "adc_spi_read.h"

#define START_FLAG  0x8000
#define DONE_FLAG   0x8000

alt_u16 ADC_Read(alt_u8 NextChannel){
 2001478:	defff904 	addi	sp,sp,-28
 200147c:	dfc00615 	stw	ra,24(sp)
 2001480:	df000515 	stw	fp,20(sp)
 2001484:	df000504 	addi	fp,sp,20
 2001488:	e13fff05 	stb	r4,-4(fp)
    alt_u16 Data16, DigitalValue = 0;
 200148c:	e03ffe0d 	sth	zero,-8(fp)
    bool bDone = FALSE;
 2001490:	e03ffd15 	stw	zero,-12(fp)
    const int nMaxWait = 1000;
 2001494:	0080fa04 	movi	r2,1000
 2001498:	e0bffc15 	stw	r2,-16(fp)
    int nWaitCnt = 0;
 200149c:	e03ffb15 	stw	zero,-20(fp)
    
    // start
    Data16 = NextChannel;
 20014a0:	e0bfff03 	ldbu	r2,-4(fp)
 20014a4:	e0bffe8d 	sth	r2,-6(fp)
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
 20014a8:	e0fffe8b 	ldhu	r3,-6(fp)
 20014ac:	00818034 	movhi	r2,1536
 20014b0:	10840604 	addi	r2,r2,4120
 20014b4:	10c00035 	stwio	r3,0(r2)
    Data16 |= START_FLAG;
 20014b8:	e0fffe8b 	ldhu	r3,-6(fp)
 20014bc:	00a00004 	movi	r2,-32768
 20014c0:	1884b03a 	or	r2,r3,r2
 20014c4:	e0bffe8d 	sth	r2,-6(fp)
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
 20014c8:	e0fffe8b 	ldhu	r3,-6(fp)
 20014cc:	00818034 	movhi	r2,1536
 20014d0:	10840604 	addi	r2,r2,4120
 20014d4:	10c00035 	stwio	r3,0(r2)
    usleep(10000); // wait 10ms
 20014d8:	0109c404 	movi	r4,10000
 20014dc:	20122600 	call	2012260 <usleep>
    
    // wait done
    while(!bDone && nWaitCnt++ <= nMaxWait){
 20014e0:	00000a06 	br	200150c <ADC_Read+0x94>
        Data16 = IORD(ADC_SPI_READ_BASE,0);
 20014e4:	00818034 	movhi	r2,1536
 20014e8:	10840604 	addi	r2,r2,4120
 20014ec:	10800037 	ldwio	r2,0(r2)
 20014f0:	e0bffe8d 	sth	r2,-6(fp)
        bDone = (Data16 & DONE_FLAG)?TRUE:FALSE;
 20014f4:	e0bffe8b 	ldhu	r2,-6(fp)
 20014f8:	10bfffcc 	andi	r2,r2,65535
 20014fc:	10a0001c 	xori	r2,r2,32768
 2001500:	10a00004 	addi	r2,r2,-32768
 2001504:	1004d7fa 	srli	r2,r2,31
 2001508:	e0bffd15 	stw	r2,-12(fp)
    Data16 |= START_FLAG;
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
    usleep(10000); // wait 10ms
    
    // wait done
    while(!bDone && nWaitCnt++ <= nMaxWait){
 200150c:	e0bffd17 	ldw	r2,-12(fp)
 2001510:	1004c03a 	cmpne	r2,r2,zero
 2001514:	10000a1e 	bne	r2,zero,2001540 <ADC_Read+0xc8>
 2001518:	e0fffb17 	ldw	r3,-20(fp)
 200151c:	e0bffc17 	ldw	r2,-16(fp)
 2001520:	10c4403a 	cmpge	r2,r2,r3
 2001524:	1007883a 	mov	r3,r2
 2001528:	e0bffb17 	ldw	r2,-20(fp)
 200152c:	10800044 	addi	r2,r2,1
 2001530:	e0bffb15 	stw	r2,-20(fp)
 2001534:	18803fcc 	andi	r2,r3,255
 2001538:	1004c03a 	cmpne	r2,r2,zero
 200153c:	103fe91e 	bne	r2,zero,20014e4 <ADC_Read+0x6c>
        Data16 = IORD(ADC_SPI_READ_BASE,0);
        bDone = (Data16 & DONE_FLAG)?TRUE:FALSE;
    }
    
    if (bDone)
 2001540:	e0bffd17 	ldw	r2,-12(fp)
 2001544:	1005003a 	cmpeq	r2,r2,zero
 2001548:	1000031e 	bne	r2,zero,2001558 <ADC_Read+0xe0>
        DigitalValue = Data16 & 0xFFF; // 12 bits
 200154c:	e0bffe8b 	ldhu	r2,-6(fp)
 2001550:	1083ffcc 	andi	r2,r2,4095
 2001554:	e0bffe0d 	sth	r2,-8(fp)
    
    // stop
    IOWR(ADC_SPI_READ_BASE, 0, 0);
 2001558:	00818034 	movhi	r2,1536
 200155c:	10840604 	addi	r2,r2,4120
 2001560:	10000035 	stwio	zero,0(r2)
    
    return DigitalValue;
 2001564:	e0bffe0b 	ldhu	r2,-8(fp)
}
 2001568:	e037883a 	mov	sp,fp
 200156c:	dfc00117 	ldw	ra,4(sp)
 2001570:	df000017 	ldw	fp,0(sp)
 2001574:	dec00204 	addi	sp,sp,8
 2001578:	f800283a 	ret

0200157c <Flash_InfoDump>:
    int number_of_regions_flash;
}FLASH_INFO;



bool Flash_InfoDump(char *pFlashName){
 200157c:	defff304 	addi	sp,sp,-52
 2001580:	dfc00c15 	stw	ra,48(sp)
 2001584:	df000b15 	stw	fp,44(sp)
 2001588:	df000b04 	addi	fp,sp,44
 200158c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
 2001590:	e03ffc15 	stw	zero,-16(fp)
    alt_flash_fd* fd;
    int number_of_regions;
    int ret_code;
    /* Set write_data to all 0xa */
    FLASH_DEBUG(("Flash_InfoDump\r\n"));
    fd = alt_flash_open_dev(pFlashName);
 2001594:	e13fff17 	ldw	r4,-4(fp)
 2001598:	20116540 	call	2011654 <alt_flash_open_dev>
 200159c:	e0bffa15 	stw	r2,-24(fp)
    if (fd){
 20015a0:	e0bffa17 	ldw	r2,-24(fp)
 20015a4:	1005003a 	cmpeq	r2,r2,zero
 20015a8:	1000211e 	bne	r2,zero,2001630 <Flash_InfoDump+0xb4>
 20015ac:	e0bffa17 	ldw	r2,-24(fp)
 20015b0:	e0bff515 	stw	r2,-44(fp)
 20015b4:	e0bffd04 	addi	r2,fp,-12
 20015b8:	e0bff615 	stw	r2,-40(fp)
 20015bc:	e0bffe04 	addi	r2,fp,-8
 20015c0:	e0bff715 	stw	r2,-36(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
 20015c4:	e0bff517 	ldw	r2,-44(fp)
 20015c8:	10800717 	ldw	r2,28(r2)
 20015cc:	e13ff517 	ldw	r4,-44(fp)
 20015d0:	e17ff617 	ldw	r5,-40(fp)
 20015d4:	e1bff717 	ldw	r6,-36(fp)
 20015d8:	103ee83a 	callr	r2
        ret_code = alt_get_flash_info(fd,&regions,&number_of_regions);
 20015dc:	e0bff915 	stw	r2,-28(fp)
        if (ret_code == 0){
 20015e0:	e0bff917 	ldw	r2,-28(fp)
 20015e4:	1004c03a 	cmpne	r2,r2,zero
 20015e8:	10000f1e 	bne	r2,zero,2001628 <Flash_InfoDump+0xac>
            int i;
            bSuccess = TRUE;
 20015ec:	00800044 	movi	r2,1
 20015f0:	e0bffc15 	stw	r2,-16(fp)
            nextreg = regions;
 20015f4:	e0bffd17 	ldw	r2,-12(fp)
 20015f8:	e0bffb15 	stw	r2,-20(fp)
            FLASH_DEBUG(("number_of_regsion:%d\r\n", number_of_regions));
            for(i=0;i<number_of_regions;i++){
 20015fc:	e03ff815 	stw	zero,-32(fp)
 2001600:	00000606 	br	200161c <Flash_InfoDump+0xa0>
                FLASH_DEBUG(("regsion[%d]\r\n", i));
                FLASH_DEBUG(("  offset:%d\r\n", nextreg->offset));
                FLASH_DEBUG(("  region_size:%d\r\n", nextreg->region_size));
                FLASH_DEBUG(("  number_of_blocks:%d\r\n", nextreg->number_of_blocks));
                FLASH_DEBUG(("  block_size;:%d\r\n", nextreg->block_size));
                nextreg++;
 2001604:	e0bffb17 	ldw	r2,-20(fp)
 2001608:	10800404 	addi	r2,r2,16
 200160c:	e0bffb15 	stw	r2,-20(fp)
        if (ret_code == 0){
            int i;
            bSuccess = TRUE;
            nextreg = regions;
            FLASH_DEBUG(("number_of_regsion:%d\r\n", number_of_regions));
            for(i=0;i<number_of_regions;i++){
 2001610:	e0bff817 	ldw	r2,-32(fp)
 2001614:	10800044 	addi	r2,r2,1
 2001618:	e0bff815 	stw	r2,-32(fp)
 200161c:	e0fffe17 	ldw	r3,-8(fp)
 2001620:	e0bff817 	ldw	r2,-32(fp)
 2001624:	10fff716 	blt	r2,r3,2001604 <Flash_InfoDump+0x88>
                nextreg++;
            }                
        }else{
            FLASH_DEBUG(("alt_get_flash_info error, ret_code:%d fail\r\n", ret_code));
        }
        alt_flash_close_dev(fd);
 2001628:	e13ffa17 	ldw	r4,-24(fp)
 200162c:	20116d00 	call	20116d0 <alt_flash_close_dev>
    }
    
    if (!bSuccess)        
        FLASH_DEBUG(("Flash_InfoDump fail\r\n"));

    return bSuccess;
 2001630:	e0bffc17 	ldw	r2,-16(fp)
    
}
 2001634:	e037883a 	mov	sp,fp
 2001638:	dfc00117 	ldw	ra,4(sp)
 200163c:	df000017 	ldw	fp,0(sp)
 2001640:	dec00204 	addi	sp,sp,8
 2001644:	f800283a 	ret

02001648 <Flash_Open>:



FLASH_HANDLE Flash_Open(char *pFlashName){
 2001648:	defff704 	addi	sp,sp,-36
 200164c:	dfc00815 	stw	ra,32(sp)
 2001650:	df000715 	stw	fp,28(sp)
 2001654:	df000704 	addi	fp,sp,28
 2001658:	e13fff15 	stw	r4,-4(fp)
    int error_code;
    bool bSuccess = FALSE;
 200165c:	e03ffd15 	stw	zero,-12(fp)
    FLASH_INFO *pFlash=NULL;
 2001660:	e03ffc15 	stw	zero,-16(fp)
    
    pFlash = (FLASH_INFO *)malloc(sizeof(FLASH_INFO));
 2001664:	01000304 	movi	r4,12
 2001668:	200377c0 	call	200377c <malloc>
 200166c:	e0bffc15 	stw	r2,-16(fp)
    pFlash->fd_flash = alt_flash_open_dev(pFlashName);
 2001670:	e13fff17 	ldw	r4,-4(fp)
 2001674:	20116540 	call	2011654 <alt_flash_open_dev>
 2001678:	1007883a 	mov	r3,r2
 200167c:	e0bffc17 	ldw	r2,-16(fp)
 2001680:	10c00015 	stw	r3,0(r2)
    if (pFlash->fd_flash){
 2001684:	e0bffc17 	ldw	r2,-16(fp)
 2001688:	10800017 	ldw	r2,0(r2)
 200168c:	1005003a 	cmpeq	r2,r2,zero
 2001690:	1000151e 	bne	r2,zero,20016e8 <Flash_Open+0xa0>
        error_code = alt_get_flash_info(pFlash->fd_flash,&pFlash->regions_flash,&pFlash->number_of_regions_flash);
 2001694:	e0bffc17 	ldw	r2,-16(fp)
 2001698:	10c00017 	ldw	r3,0(r2)
 200169c:	e0bffc17 	ldw	r2,-16(fp)
 20016a0:	11000104 	addi	r4,r2,4
 20016a4:	e0bffc17 	ldw	r2,-16(fp)
 20016a8:	10800204 	addi	r2,r2,8
 20016ac:	e0fff915 	stw	r3,-28(fp)
 20016b0:	e13ffa15 	stw	r4,-24(fp)
 20016b4:	e0bffb15 	stw	r2,-20(fp)
 20016b8:	e0bff917 	ldw	r2,-28(fp)
 20016bc:	10800717 	ldw	r2,28(r2)
 20016c0:	e13ff917 	ldw	r4,-28(fp)
 20016c4:	e17ffa17 	ldw	r5,-24(fp)
 20016c8:	e1bffb17 	ldw	r6,-20(fp)
 20016cc:	103ee83a 	callr	r2
 20016d0:	e0bffe15 	stw	r2,-8(fp)
        if (error_code == 0){
 20016d4:	e0bffe17 	ldw	r2,-8(fp)
 20016d8:	1004c03a 	cmpne	r2,r2,zero
 20016dc:	1000021e 	bne	r2,zero,20016e8 <Flash_Open+0xa0>
            bSuccess = TRUE;
 20016e0:	00800044 	movi	r2,1
 20016e4:	e0bffd15 	stw	r2,-12(fp)
        }            
    }
    
    if (!bSuccess){
 20016e8:	e0bffd17 	ldw	r2,-12(fp)
 20016ec:	1004c03a 	cmpne	r2,r2,zero
 20016f0:	1000031e 	bne	r2,zero,2001700 <Flash_Open+0xb8>
        free(pFlash);
 20016f4:	e13ffc17 	ldw	r4,-16(fp)
 20016f8:	20037680 	call	2003768 <free>
        pFlash= NULL;
 20016fc:	e03ffc15 	stw	zero,-16(fp)
    }        
    return pFlash;
 2001700:	e0bffc17 	ldw	r2,-16(fp)
            
}
 2001704:	e037883a 	mov	sp,fp
 2001708:	dfc00117 	ldw	ra,4(sp)
 200170c:	df000017 	ldw	fp,0(sp)
 2001710:	dec00204 	addi	sp,sp,8
 2001714:	f800283a 	ret

02001718 <Flash_Close>:

bool Flash_Close(FLASH_HANDLE Handle){
 2001718:	defffc04 	addi	sp,sp,-16
 200171c:	dfc00315 	stw	ra,12(sp)
 2001720:	df000215 	stw	fp,8(sp)
 2001724:	df000204 	addi	fp,sp,8
 2001728:	e13fff15 	stw	r4,-4(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 200172c:	e0bfff17 	ldw	r2,-4(fp)
 2001730:	e0bffe15 	stw	r2,-8(fp)
    if (pFlash->fd_flash){
 2001734:	e0bffe17 	ldw	r2,-8(fp)
 2001738:	10800017 	ldw	r2,0(r2)
 200173c:	1005003a 	cmpeq	r2,r2,zero
 2001740:	1000031e 	bne	r2,zero,2001750 <Flash_Close+0x38>
        alt_flash_close_dev(pFlash->fd_flash);
 2001744:	e0bffe17 	ldw	r2,-8(fp)
 2001748:	11000017 	ldw	r4,0(r2)
 200174c:	20116d00 	call	20116d0 <alt_flash_close_dev>
    }
    free(Handle);
 2001750:	e13fff17 	ldw	r4,-4(fp)
 2001754:	20037680 	call	2003768 <free>
    return TRUE;
 2001758:	00800044 	movi	r2,1
}
 200175c:	e037883a 	mov	sp,fp
 2001760:	dfc00117 	ldw	ra,4(sp)
 2001764:	df000017 	ldw	fp,0(sp)
 2001768:	dec00204 	addi	sp,sp,8
 200176c:	f800283a 	ret

02001770 <Flash_GetBlockInfo>:

bool Flash_GetBlockInfo(FLASH_HANDLE Handle, alt_u16 block_index, alt_32 *poffset, alt_32 *psize){
 2001770:	defff204 	addi	sp,sp,-56
 2001774:	df000d15 	stw	fp,52(sp)
 2001778:	df000d04 	addi	fp,sp,52
 200177c:	e13ffb15 	stw	r4,-20(fp)
 2001780:	e1bffd15 	stw	r6,-12(fp)
 2001784:	e1fffe15 	stw	r7,-8(fp)
 2001788:	e17ffc0d 	sth	r5,-16(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 200178c:	e0bffb17 	ldw	r2,-20(fp)
 2001790:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 offset=0, length;        
 2001794:	e03ff915 	stw	zero,-28(fp)
    int r, i, block_count=0;
 2001798:	e03ff515 	stw	zero,-44(fp)
    flash_region *nextreg = pFlash->regions_flash;
 200179c:	e0bffa17 	ldw	r2,-24(fp)
 20017a0:	10800117 	ldw	r2,4(r2)
 20017a4:	e0bff415 	stw	r2,-48(fp)
    bool bFind = FALSE;
 20017a8:	e03ff315 	stw	zero,-52(fp)
    
    if (!pFlash->fd_flash)
 20017ac:	e0bffa17 	ldw	r2,-24(fp)
 20017b0:	10800017 	ldw	r2,0(r2)
 20017b4:	1004c03a 	cmpne	r2,r2,zero
 20017b8:	1000021e 	bne	r2,zero,20017c4 <Flash_GetBlockInfo+0x54>
        return FALSE;
 20017bc:	e03fff15 	stw	zero,-4(fp)
 20017c0:	00003506 	br	2001898 <Flash_GetBlockInfo+0x128>
    
    
    for(r=0;r<pFlash->number_of_regions_flash && !bFind;r++){
 20017c4:	e03ff715 	stw	zero,-36(fp)
 20017c8:	00002106 	br	2001850 <Flash_GetBlockInfo+0xe0>
        for(i=0;i<nextreg->number_of_blocks;i++){
 20017cc:	e03ff615 	stw	zero,-40(fp)
 20017d0:	00001506 	br	2001828 <Flash_GetBlockInfo+0xb8>
            if (block_count == block_index){
 20017d4:	e0fffc0b 	ldhu	r3,-16(fp)
 20017d8:	e0bff517 	ldw	r2,-44(fp)
 20017dc:	1880061e 	bne	r3,r2,20017f8 <Flash_GetBlockInfo+0x88>
                bFind = TRUE;
 20017e0:	00800044 	movi	r2,1
 20017e4:	e0bff315 	stw	r2,-52(fp)
                length = nextreg->block_size;
 20017e8:	e0bff417 	ldw	r2,-48(fp)
 20017ec:	10800317 	ldw	r2,12(r2)
 20017f0:	e0bff815 	stw	r2,-32(fp)
 20017f4:	00000906 	br	200181c <Flash_GetBlockInfo+0xac>
            }else{
                offset += nextreg->block_size;
 20017f8:	e0bff417 	ldw	r2,-48(fp)
 20017fc:	10800317 	ldw	r2,12(r2)
 2001800:	1007883a 	mov	r3,r2
 2001804:	e0bff917 	ldw	r2,-28(fp)
 2001808:	10c5883a 	add	r2,r2,r3
 200180c:	e0bff915 	stw	r2,-28(fp)
                block_count++;
 2001810:	e0bff517 	ldw	r2,-44(fp)
 2001814:	10800044 	addi	r2,r2,1
 2001818:	e0bff515 	stw	r2,-44(fp)
    if (!pFlash->fd_flash)
        return FALSE;
    
    
    for(r=0;r<pFlash->number_of_regions_flash && !bFind;r++){
        for(i=0;i<nextreg->number_of_blocks;i++){
 200181c:	e0bff617 	ldw	r2,-40(fp)
 2001820:	10800044 	addi	r2,r2,1
 2001824:	e0bff615 	stw	r2,-40(fp)
 2001828:	e0bff417 	ldw	r2,-48(fp)
 200182c:	10c00217 	ldw	r3,8(r2)
 2001830:	e0bff617 	ldw	r2,-40(fp)
 2001834:	10ffe716 	blt	r2,r3,20017d4 <Flash_GetBlockInfo+0x64>
            }else{
                offset += nextreg->block_size;
                block_count++;
            }
        }
        nextreg++;
 2001838:	e0bff417 	ldw	r2,-48(fp)
 200183c:	10800404 	addi	r2,r2,16
 2001840:	e0bff415 	stw	r2,-48(fp)
    
    if (!pFlash->fd_flash)
        return FALSE;
    
    
    for(r=0;r<pFlash->number_of_regions_flash && !bFind;r++){
 2001844:	e0bff717 	ldw	r2,-36(fp)
 2001848:	10800044 	addi	r2,r2,1
 200184c:	e0bff715 	stw	r2,-36(fp)
 2001850:	e0bffa17 	ldw	r2,-24(fp)
 2001854:	10c00217 	ldw	r3,8(r2)
 2001858:	e0bff717 	ldw	r2,-36(fp)
 200185c:	10c0030e 	bge	r2,r3,200186c <Flash_GetBlockInfo+0xfc>
 2001860:	e0bff317 	ldw	r2,-52(fp)
 2001864:	1005003a 	cmpeq	r2,r2,zero
 2001868:	103fd81e 	bne	r2,zero,20017cc <Flash_GetBlockInfo+0x5c>
                block_count++;
            }
        }
        nextreg++;
    }    
    if (bFind){
 200186c:	e0bff317 	ldw	r2,-52(fp)
 2001870:	1005003a 	cmpeq	r2,r2,zero
 2001874:	1000061e 	bne	r2,zero,2001890 <Flash_GetBlockInfo+0x120>
        *poffset = offset;
 2001878:	e0fff917 	ldw	r3,-28(fp)
 200187c:	e0bffd17 	ldw	r2,-12(fp)
 2001880:	10c00015 	stw	r3,0(r2)
        *psize = length;
 2001884:	e0fff817 	ldw	r3,-32(fp)
 2001888:	e0bffe17 	ldw	r2,-8(fp)
 200188c:	10c00015 	stw	r3,0(r2)
    }
    
    return bFind;
 2001890:	e0bff317 	ldw	r2,-52(fp)
 2001894:	e0bfff15 	stw	r2,-4(fp)
 2001898:	e0bfff17 	ldw	r2,-4(fp)
    
}
 200189c:	e037883a 	mov	sp,fp
 20018a0:	df000017 	ldw	fp,0(sp)
 20018a4:	dec00104 	addi	sp,sp,4
 20018a8:	f800283a 	ret

020018ac <Flash_Read>:

bool Flash_Read(FLASH_HANDLE Handle, alt_u32 offset, alt_u8 *szBuf, alt_u32 size){
 20018ac:	defff304 	addi	sp,sp,-52
 20018b0:	dfc00c15 	stw	ra,48(sp)
 20018b4:	df000b15 	stw	fp,44(sp)
 20018b8:	df000b04 	addi	fp,sp,44
 20018bc:	e13ffb15 	stw	r4,-20(fp)
 20018c0:	e17ffc15 	stw	r5,-16(fp)
 20018c4:	e1bffd15 	stw	r6,-12(fp)
 20018c8:	e1fffe15 	stw	r7,-8(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 20018cc:	e0bffb17 	ldw	r2,-20(fp)
 20018d0:	e0bffa15 	stw	r2,-24(fp)
    int error_code;
    if (!pFlash->fd_flash)
 20018d4:	e0bffa17 	ldw	r2,-24(fp)
 20018d8:	10800017 	ldw	r2,0(r2)
 20018dc:	1004c03a 	cmpne	r2,r2,zero
 20018e0:	1000021e 	bne	r2,zero,20018ec <Flash_Read+0x40>
        return FALSE;
 20018e4:	e03fff15 	stw	zero,-4(fp)
 20018e8:	00001806 	br	200194c <Flash_Read+0xa0>
    error_code = alt_read_flash(pFlash->fd_flash, offset, szBuf, size);
 20018ec:	e0bffa17 	ldw	r2,-24(fp)
 20018f0:	10800017 	ldw	r2,0(r2)
 20018f4:	e0fffc17 	ldw	r3,-16(fp)
 20018f8:	e13ffe17 	ldw	r4,-8(fp)
 20018fc:	e0bff515 	stw	r2,-44(fp)
 2001900:	e0fff615 	stw	r3,-40(fp)
 2001904:	e0bffd17 	ldw	r2,-12(fp)
 2001908:	e0bff715 	stw	r2,-36(fp)
 200190c:	e13ff815 	stw	r4,-32(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
 2001910:	e0bff517 	ldw	r2,-44(fp)
 2001914:	10800617 	ldw	r2,24(r2)
 2001918:	e13ff517 	ldw	r4,-44(fp)
 200191c:	e17ff617 	ldw	r5,-40(fp)
 2001920:	e1bff717 	ldw	r6,-36(fp)
 2001924:	e1fff817 	ldw	r7,-32(fp)
 2001928:	103ee83a 	callr	r2
 200192c:	e0bff915 	stw	r2,-28(fp)
    if (error_code == 0)
 2001930:	e0bff917 	ldw	r2,-28(fp)
 2001934:	1004c03a 	cmpne	r2,r2,zero
 2001938:	1000031e 	bne	r2,zero,2001948 <Flash_Read+0x9c>
        return TRUE;
 200193c:	00800044 	movi	r2,1
 2001940:	e0bfff15 	stw	r2,-4(fp)
 2001944:	00000106 	br	200194c <Flash_Read+0xa0>
    return FALSE;                    
 2001948:	e03fff15 	stw	zero,-4(fp)
 200194c:	e0bfff17 	ldw	r2,-4(fp)
    
}
 2001950:	e037883a 	mov	sp,fp
 2001954:	dfc00117 	ldw	ra,4(sp)
 2001958:	df000017 	ldw	fp,0(sp)
 200195c:	dec00204 	addi	sp,sp,8
 2001960:	f800283a 	ret

02001964 <Flash_Write>:

bool Flash_Write(FLASH_HANDLE Handle, alt_u32 offset, alt_u8 *szData, alt_u32 size){
 2001964:	deffe804 	addi	sp,sp,-96
 2001968:	dfc01715 	stw	ra,92(sp)
 200196c:	df001615 	stw	fp,88(sp)
 2001970:	df001604 	addi	fp,sp,88
 2001974:	e13ffb15 	stw	r4,-20(fp)
 2001978:	e17ffc15 	stw	r5,-16(fp)
 200197c:	e1bffd15 	stw	r6,-12(fp)
 2001980:	e1fffe15 	stw	r7,-8(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 2001984:	e0bffb17 	ldw	r2,-20(fp)
 2001988:	e0bffa15 	stw	r2,-24(fp)
    bool bSuccess = TRUE;
 200198c:	00800044 	movi	r2,1
 2001990:	e0bff915 	stw	r2,-28(fp)
    int error_code;
    
    if (!pFlash->fd_flash)
 2001994:	e0bffa17 	ldw	r2,-24(fp)
 2001998:	10800017 	ldw	r2,0(r2)
 200199c:	1004c03a 	cmpne	r2,r2,zero
 20019a0:	1000021e 	bne	r2,zero,20019ac <Flash_Write+0x48>
        return FALSE;
 20019a4:	e03fff15 	stw	zero,-4(fp)
 20019a8:	00007c06 	br	2001b9c <Flash_Write+0x238>
    }else{
        FLASH_DEBUG(("alt_write_flash fail, error_code=%d\r\n", error_code));
    }    
#else
    int block_offset, block_size, write_count, this_write_size, r, i;//, first_offset;        
    flash_region *nextreg = pFlash->regions_flash;
 20019ac:	e0bffa17 	ldw	r2,-24(fp)
 20019b0:	10800117 	ldw	r2,4(r2)
 20019b4:	e0bff115 	stw	r2,-60(fp)

    
    block_offset = 0;
 20019b8:	e03ff715 	stw	zero,-36(fp)
    write_count = 0;
 20019bc:	e03ff515 	stw	zero,-44(fp)
    for(r=0;r<pFlash->number_of_regions_flash && bSuccess;r++){
 20019c0:	e03ff315 	stw	zero,-52(fp)
 20019c4:	00006c06 	br	2001b78 <Flash_Write+0x214>
        for(i=0;i<nextreg->number_of_blocks && bSuccess;i++){
 20019c8:	e03ff215 	stw	zero,-56(fp)
 20019cc:	00005d06 	br	2001b44 <Flash_Write+0x1e0>
            block_size = nextreg->block_size;
 20019d0:	e0bff117 	ldw	r2,-60(fp)
 20019d4:	10800317 	ldw	r2,12(r2)
 20019d8:	e0bff615 	stw	r2,-40(fp)
//            FLASH_DEBUG(("block_offset=%d, block_size=%d\r\n", block_offset, block_size));
//            if ((offset >= block_offset) && ((offset+size) <= (block_offset + block_size))){
            if (((offset+write_count) >= block_offset) && (write_count < size)){
 20019dc:	e0fff517 	ldw	r3,-44(fp)
 20019e0:	e0bffc17 	ldw	r2,-16(fp)
 20019e4:	1887883a 	add	r3,r3,r2
 20019e8:	e0bff717 	ldw	r2,-36(fp)
 20019ec:	18804e36 	bltu	r3,r2,2001b28 <Flash_Write+0x1c4>
 20019f0:	e0fff517 	ldw	r3,-44(fp)
 20019f4:	e0bffe17 	ldw	r2,-8(fp)
 20019f8:	18804b2e 	bgeu	r3,r2,2001b28 <Flash_Write+0x1c4>
                // write
                this_write_size = size - write_count;
 20019fc:	e0fff517 	ldw	r3,-44(fp)
 2001a00:	e0bffe17 	ldw	r2,-8(fp)
 2001a04:	10c5c83a 	sub	r2,r2,r3
 2001a08:	e0bff415 	stw	r2,-48(fp)
                if (write_count == 0){
 2001a0c:	e0bff517 	ldw	r2,-44(fp)
 2001a10:	1004c03a 	cmpne	r2,r2,zero
 2001a14:	1000101e 	bne	r2,zero,2001a58 <Flash_Write+0xf4>
                    // first block
                    if (this_write_size > (block_offset + block_size - offset))
 2001a18:	e13ff417 	ldw	r4,-48(fp)
 2001a1c:	e0fff717 	ldw	r3,-36(fp)
 2001a20:	e0bff617 	ldw	r2,-40(fp)
 2001a24:	1885883a 	add	r2,r3,r2
 2001a28:	1007883a 	mov	r3,r2
 2001a2c:	e0bffc17 	ldw	r2,-16(fp)
 2001a30:	1885c83a 	sub	r2,r3,r2
 2001a34:	11000d2e 	bgeu	r2,r4,2001a6c <Flash_Write+0x108>
                        this_write_size = block_offset + block_size - offset;
 2001a38:	e0fff717 	ldw	r3,-36(fp)
 2001a3c:	e0bff617 	ldw	r2,-40(fp)
 2001a40:	1885883a 	add	r2,r3,r2
 2001a44:	1007883a 	mov	r3,r2
 2001a48:	e0bffc17 	ldw	r2,-16(fp)
 2001a4c:	1885c83a 	sub	r2,r3,r2
 2001a50:	e0bff415 	stw	r2,-48(fp)
 2001a54:	00000506 	br	2001a6c <Flash_Write+0x108>
                }else{
                    // block aligement
                    if (this_write_size > block_size)
 2001a58:	e0fff417 	ldw	r3,-48(fp)
 2001a5c:	e0bff617 	ldw	r2,-40(fp)
 2001a60:	10c0020e 	bge	r2,r3,2001a6c <Flash_Write+0x108>
                        this_write_size = block_size;
 2001a64:	e0bff617 	ldw	r2,-40(fp)
 2001a68:	e0bff415 	stw	r2,-48(fp)
                }        
                error_code = alt_write_flash_block(pFlash->fd_flash, block_offset, offset+write_count, szData+write_count, this_write_size);
 2001a6c:	e0bffa17 	ldw	r2,-24(fp)
 2001a70:	11000017 	ldw	r4,0(r2)
 2001a74:	e0fff517 	ldw	r3,-44(fp)
 2001a78:	e0bffc17 	ldw	r2,-16(fp)
 2001a7c:	1885883a 	add	r2,r3,r2
 2001a80:	100b883a 	mov	r5,r2
 2001a84:	e0bff517 	ldw	r2,-44(fp)
 2001a88:	1007883a 	mov	r3,r2
 2001a8c:	e0bffd17 	ldw	r2,-12(fp)
 2001a90:	1887883a 	add	r3,r3,r2
 2001a94:	e13feb15 	stw	r4,-84(fp)
 2001a98:	e0bff717 	ldw	r2,-36(fp)
 2001a9c:	e0bfec15 	stw	r2,-80(fp)
 2001aa0:	e17fed15 	stw	r5,-76(fp)
 2001aa4:	e0ffee15 	stw	r3,-72(fp)
 2001aa8:	e0bff417 	ldw	r2,-48(fp)
 2001aac:	e0bfef15 	stw	r2,-68(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
 2001ab0:	e0bfeb17 	ldw	r2,-84(fp)
 2001ab4:	10c00917 	ldw	r3,36(r2)
 2001ab8:	e0bfef17 	ldw	r2,-68(fp)
 2001abc:	d8800015 	stw	r2,0(sp)
 2001ac0:	e13feb17 	ldw	r4,-84(fp)
 2001ac4:	e17fec17 	ldw	r5,-80(fp)
 2001ac8:	e1bfed17 	ldw	r6,-76(fp)
 2001acc:	e1ffee17 	ldw	r7,-72(fp)
 2001ad0:	183ee83a 	callr	r3
 2001ad4:	e0bff015 	stw	r2,-64(fp)

  if(!ret_code)
 2001ad8:	e0bff017 	ldw	r2,-64(fp)
 2001adc:	1004c03a 	cmpne	r2,r2,zero
 2001ae0:	1000071e 	bne	r2,zero,2001b00 <Flash_Write+0x19c>
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
 2001ae4:	e0bfeb17 	ldw	r2,-84(fp)
 2001ae8:	10800a17 	ldw	r2,40(r2)
 2001aec:	1007883a 	mov	r3,r2
 2001af0:	e0bfed17 	ldw	r2,-76(fp)
 2001af4:	1889883a 	add	r4,r3,r2
 2001af8:	e17fef17 	ldw	r5,-68(fp)
 2001afc:	201156c0 	call	201156c <alt_dcache_flush>

  return ret_code;
 2001b00:	e0bff017 	ldw	r2,-64(fp)
 2001b04:	e0bff815 	stw	r2,-32(fp)
                //FLASH_DEBUG(("alt_write_flash_block, block_offset:%d, offset:%d, len:%d, this block_size:%d\r\n", block_offset, offset+write_count, this_write_size, block_size));
                if (error_code != 0){
 2001b08:	e0bff817 	ldw	r2,-32(fp)
 2001b0c:	1005003a 	cmpeq	r2,r2,zero
 2001b10:	1000011e 	bne	r2,zero,2001b18 <Flash_Write+0x1b4>
                    bSuccess = FALSE;
 2001b14:	e03ff915 	stw	zero,-28(fp)
                    FLASH_DEBUG(("alt_write_flash_block fail, error_code=%d\r\n", error_code));
                }    
                write_count += this_write_size;
 2001b18:	e0bff517 	ldw	r2,-44(fp)
 2001b1c:	e0fff417 	ldw	r3,-48(fp)
 2001b20:	10c5883a 	add	r2,r2,r3
 2001b24:	e0bff515 	stw	r2,-44(fp)
            }
            block_offset += block_size;
 2001b28:	e0fff717 	ldw	r3,-36(fp)
 2001b2c:	e0bff617 	ldw	r2,-40(fp)
 2001b30:	1885883a 	add	r2,r3,r2
 2001b34:	e0bff715 	stw	r2,-36(fp)

    
    block_offset = 0;
    write_count = 0;
    for(r=0;r<pFlash->number_of_regions_flash && bSuccess;r++){
        for(i=0;i<nextreg->number_of_blocks && bSuccess;i++){
 2001b38:	e0bff217 	ldw	r2,-56(fp)
 2001b3c:	10800044 	addi	r2,r2,1
 2001b40:	e0bff215 	stw	r2,-56(fp)
 2001b44:	e0bff117 	ldw	r2,-60(fp)
 2001b48:	10c00217 	ldw	r3,8(r2)
 2001b4c:	e0bff217 	ldw	r2,-56(fp)
 2001b50:	10c0030e 	bge	r2,r3,2001b60 <Flash_Write+0x1fc>
 2001b54:	e0bff917 	ldw	r2,-28(fp)
 2001b58:	1004c03a 	cmpne	r2,r2,zero
 2001b5c:	103f9c1e 	bne	r2,zero,20019d0 <Flash_Write+0x6c>
                }    
                write_count += this_write_size;
            }
            block_offset += block_size;
        }
        nextreg++;
 2001b60:	e0bff117 	ldw	r2,-60(fp)
 2001b64:	10800404 	addi	r2,r2,16
 2001b68:	e0bff115 	stw	r2,-60(fp)
    flash_region *nextreg = pFlash->regions_flash;

    
    block_offset = 0;
    write_count = 0;
    for(r=0;r<pFlash->number_of_regions_flash && bSuccess;r++){
 2001b6c:	e0bff317 	ldw	r2,-52(fp)
 2001b70:	10800044 	addi	r2,r2,1
 2001b74:	e0bff315 	stw	r2,-52(fp)
 2001b78:	e0bffa17 	ldw	r2,-24(fp)
 2001b7c:	10c00217 	ldw	r3,8(r2)
 2001b80:	e0bff317 	ldw	r2,-52(fp)
 2001b84:	10c0030e 	bge	r2,r3,2001b94 <Flash_Write+0x230>
 2001b88:	e0bff917 	ldw	r2,-28(fp)
 2001b8c:	1004c03a 	cmpne	r2,r2,zero
 2001b90:	103f8d1e 	bne	r2,zero,20019c8 <Flash_Write+0x64>
    error_code = alt_write_flash(fd_flash, offset, szData, size); // it will erase flash block content before write data
//    error_code = alt_write_flash_block(fd_flash, offset, offset+size, szData, size); // it will preserve flash content
    if (error_code == 0)
        return TRUE;
*/        
    return bSuccess;                    
 2001b94:	e0bff917 	ldw	r2,-28(fp)
 2001b98:	e0bfff15 	stw	r2,-4(fp)
 2001b9c:	e0bfff17 	ldw	r2,-4(fp)
}
 2001ba0:	e037883a 	mov	sp,fp
 2001ba4:	dfc00117 	ldw	ra,4(sp)
 2001ba8:	df000017 	ldw	fp,0(sp)
 2001bac:	dec00204 	addi	sp,sp,8
 2001bb0:	f800283a 	ret

02001bb4 <Flash_Erase>:

bool Flash_Erase(FLASH_HANDLE Handle, alt_u16 block_index){
 2001bb4:	defff204 	addi	sp,sp,-56
 2001bb8:	dfc00d15 	stw	ra,52(sp)
 2001bbc:	df000c15 	stw	fp,48(sp)
 2001bc0:	df000c04 	addi	fp,sp,48
 2001bc4:	e13ffd15 	stw	r4,-12(fp)
 2001bc8:	e17ffe0d 	sth	r5,-8(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 2001bcc:	e0bffd17 	ldw	r2,-12(fp)
 2001bd0:	e0bffa15 	stw	r2,-24(fp)
    if (!pFlash->fd_flash)
 2001bd4:	e0bffa17 	ldw	r2,-24(fp)
 2001bd8:	10800017 	ldw	r2,0(r2)
 2001bdc:	1004c03a 	cmpne	r2,r2,zero
 2001be0:	1000021e 	bne	r2,zero,2001bec <Flash_Erase+0x38>
        return FALSE;
 2001be4:	e03fff15 	stw	zero,-4(fp)
 2001be8:	00002906 	br	2001c90 <Flash_Erase+0xdc>
    alt_u32 offset;
    alt_u32 length;        
    int error_code;
    bool bSuccess = FALSE;
 2001bec:	e03ff815 	stw	zero,-32(fp)

    
    if (Flash_GetBlockInfo(Handle, block_index, &offset, &length)){
 2001bf0:	e17ffe0b 	ldhu	r5,-8(fp)
 2001bf4:	e1bffb04 	addi	r6,fp,-20
 2001bf8:	e1fffc04 	addi	r7,fp,-16
 2001bfc:	e13ffd17 	ldw	r4,-12(fp)
 2001c00:	20017700 	call	2001770 <Flash_GetBlockInfo>
 2001c04:	1005003a 	cmpeq	r2,r2,zero
 2001c08:	10001f1e 	bne	r2,zero,2001c88 <Flash_Erase+0xd4>
        error_code = alt_erase_flash_block(pFlash->fd_flash, offset, length);
 2001c0c:	e0bffa17 	ldw	r2,-24(fp)
 2001c10:	10c00017 	ldw	r3,0(r2)
 2001c14:	e0bffb17 	ldw	r2,-20(fp)
 2001c18:	1009883a 	mov	r4,r2
 2001c1c:	e0bffc17 	ldw	r2,-16(fp)
 2001c20:	e0fff415 	stw	r3,-48(fp)
 2001c24:	e13ff515 	stw	r4,-44(fp)
 2001c28:	e0bff615 	stw	r2,-40(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
 2001c2c:	e0bff417 	ldw	r2,-48(fp)
 2001c30:	10800817 	ldw	r2,32(r2)
 2001c34:	e13ff417 	ldw	r4,-48(fp)
 2001c38:	e17ff517 	ldw	r5,-44(fp)
 2001c3c:	103ee83a 	callr	r2
 2001c40:	e0bff715 	stw	r2,-36(fp)
  
  if(!ret_code)
 2001c44:	e0bff717 	ldw	r2,-36(fp)
 2001c48:	1004c03a 	cmpne	r2,r2,zero
 2001c4c:	1000071e 	bne	r2,zero,2001c6c <Flash_Erase+0xb8>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
 2001c50:	e0bff417 	ldw	r2,-48(fp)
 2001c54:	10800a17 	ldw	r2,40(r2)
 2001c58:	1007883a 	mov	r3,r2
 2001c5c:	e0bff517 	ldw	r2,-44(fp)
 2001c60:	1889883a 	add	r4,r3,r2
 2001c64:	e17ff617 	ldw	r5,-40(fp)
 2001c68:	201156c0 	call	201156c <alt_dcache_flush>

  return ret_code;
 2001c6c:	e0bff717 	ldw	r2,-36(fp)
 2001c70:	e0bff915 	stw	r2,-28(fp)
        //DEBUG_FLASH("Erase block[%d], offset=%Xh, lenght=%Xh", block_no, offset, length);
        if (error_code == 0)
 2001c74:	e0bff917 	ldw	r2,-28(fp)
 2001c78:	1004c03a 	cmpne	r2,r2,zero
 2001c7c:	1000021e 	bne	r2,zero,2001c88 <Flash_Erase+0xd4>
            bSuccess = TRUE;
 2001c80:	00800044 	movi	r2,1
 2001c84:	e0bff815 	stw	r2,-32(fp)
    }        
    
    return bSuccess;    
 2001c88:	e0bff817 	ldw	r2,-32(fp)
 2001c8c:	e0bfff15 	stw	r2,-4(fp)
 2001c90:	e0bfff17 	ldw	r2,-4(fp)
}
 2001c94:	e037883a 	mov	sp,fp
 2001c98:	dfc00117 	ldw	ra,4(sp)
 2001c9c:	df000017 	ldw	fp,0(sp)
 2001ca0:	dec00204 	addi	sp,sp,8
 2001ca4:	f800283a 	ret

02001ca8 <Flash_GetBlockCount>:

alt_u16 Flash_GetBlockCount(FLASH_HANDLE Handle){
 2001ca8:	defffa04 	addi	sp,sp,-24
 2001cac:	df000515 	stw	fp,20(sp)
 2001cb0:	df000504 	addi	fp,sp,20
 2001cb4:	e13fff15 	stw	r4,-4(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;    
 2001cb8:	e0bfff17 	ldw	r2,-4(fp)
 2001cbc:	e0bffe15 	stw	r2,-8(fp)
    alt_u16 no=0;
 2001cc0:	e03ffd0d 	sth	zero,-12(fp)
    flash_region *nextreg = pFlash->regions_flash;
 2001cc4:	e0bffe17 	ldw	r2,-8(fp)
 2001cc8:	10800117 	ldw	r2,4(r2)
 2001ccc:	e0bffc15 	stw	r2,-16(fp)
    int r;
    for(r=0;r<pFlash->number_of_regions_flash;r++){
 2001cd0:	e03ffb15 	stw	zero,-20(fp)
 2001cd4:	00000c06 	br	2001d08 <Flash_GetBlockCount+0x60>
        no += nextreg->number_of_blocks;
 2001cd8:	e0bffc17 	ldw	r2,-16(fp)
 2001cdc:	10800217 	ldw	r2,8(r2)
 2001ce0:	1007883a 	mov	r3,r2
 2001ce4:	e0bffd0b 	ldhu	r2,-12(fp)
 2001ce8:	10c5883a 	add	r2,r2,r3
 2001cec:	e0bffd0d 	sth	r2,-12(fp)
        nextreg++;
 2001cf0:	e0bffc17 	ldw	r2,-16(fp)
 2001cf4:	10800404 	addi	r2,r2,16
 2001cf8:	e0bffc15 	stw	r2,-16(fp)
alt_u16 Flash_GetBlockCount(FLASH_HANDLE Handle){
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;    
    alt_u16 no=0;
    flash_region *nextreg = pFlash->regions_flash;
    int r;
    for(r=0;r<pFlash->number_of_regions_flash;r++){
 2001cfc:	e0bffb17 	ldw	r2,-20(fp)
 2001d00:	10800044 	addi	r2,r2,1
 2001d04:	e0bffb15 	stw	r2,-20(fp)
 2001d08:	e0bffe17 	ldw	r2,-8(fp)
 2001d0c:	10c00217 	ldw	r3,8(r2)
 2001d10:	e0bffb17 	ldw	r2,-20(fp)
 2001d14:	10fff016 	blt	r2,r3,2001cd8 <Flash_GetBlockCount+0x30>
        no += nextreg->number_of_blocks;
        nextreg++;
    }
    return no;
 2001d18:	e0bffd0b 	ldhu	r2,-12(fp)
}
 2001d1c:	e037883a 	mov	sp,fp
 2001d20:	df000017 	ldw	fp,0(sp)
 2001d24:	dec00104 	addi	sp,sp,4
 2001d28:	f800283a 	ret

02001d2c <Flash_Size>:


alt_u32 Flash_Size(char *pFlashName){
 2001d2c:	defff304 	addi	sp,sp,-52
 2001d30:	dfc00c15 	stw	ra,48(sp)
 2001d34:	df000b15 	stw	fp,44(sp)
 2001d38:	df000b04 	addi	fp,sp,44
 2001d3c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 FlashSize = 0;
 2001d40:	e03ffc15 	stw	zero,-16(fp)
    flash_region *regions, *nextreg;
    alt_flash_fd* fd;
    int number_of_regions;
    int ret_code, i;
    /* Set write_data to all 0xa */
    fd = alt_flash_open_dev(pFlashName);
 2001d44:	e13fff17 	ldw	r4,-4(fp)
 2001d48:	20116540 	call	2011654 <alt_flash_open_dev>
 2001d4c:	e0bffa15 	stw	r2,-24(fp)
    if (fd){
 2001d50:	e0bffa17 	ldw	r2,-24(fp)
 2001d54:	1005003a 	cmpeq	r2,r2,zero
 2001d58:	1000281e 	bne	r2,zero,2001dfc <Flash_Size+0xd0>
 2001d5c:	e0bffa17 	ldw	r2,-24(fp)
 2001d60:	e0bff515 	stw	r2,-44(fp)
 2001d64:	e0bffd04 	addi	r2,fp,-12
 2001d68:	e0bff615 	stw	r2,-40(fp)
 2001d6c:	e0bffe04 	addi	r2,fp,-8
 2001d70:	e0bff715 	stw	r2,-36(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
 2001d74:	e0bff517 	ldw	r2,-44(fp)
 2001d78:	10800717 	ldw	r2,28(r2)
 2001d7c:	e13ff517 	ldw	r4,-44(fp)
 2001d80:	e17ff617 	ldw	r5,-40(fp)
 2001d84:	e1bff717 	ldw	r6,-36(fp)
 2001d88:	103ee83a 	callr	r2
        ret_code = alt_get_flash_info(fd,&regions,&number_of_regions);
 2001d8c:	e0bff915 	stw	r2,-28(fp)
        if (ret_code == 0 && number_of_regions >= 1){
 2001d90:	e0bff917 	ldw	r2,-28(fp)
 2001d94:	1004c03a 	cmpne	r2,r2,zero
 2001d98:	1000161e 	bne	r2,zero,2001df4 <Flash_Size+0xc8>
 2001d9c:	e0bffe17 	ldw	r2,-8(fp)
 2001da0:	10800050 	cmplti	r2,r2,1
 2001da4:	1000131e 	bne	r2,zero,2001df4 <Flash_Size+0xc8>
            nextreg = regions;
 2001da8:	e0bffd17 	ldw	r2,-12(fp)
 2001dac:	e0bffb15 	stw	r2,-20(fp)
            for(i=0;i<number_of_regions;i++){
 2001db0:	e03ff815 	stw	zero,-32(fp)
 2001db4:	00000c06 	br	2001de8 <Flash_Size+0xbc>
                FlashSize += nextreg->region_size;
 2001db8:	e0bffb17 	ldw	r2,-20(fp)
 2001dbc:	10800117 	ldw	r2,4(r2)
 2001dc0:	1007883a 	mov	r3,r2
 2001dc4:	e0bffc17 	ldw	r2,-16(fp)
 2001dc8:	10c5883a 	add	r2,r2,r3
 2001dcc:	e0bffc15 	stw	r2,-16(fp)
                nextreg++;
 2001dd0:	e0bffb17 	ldw	r2,-20(fp)
 2001dd4:	10800404 	addi	r2,r2,16
 2001dd8:	e0bffb15 	stw	r2,-20(fp)
    fd = alt_flash_open_dev(pFlashName);
    if (fd){
        ret_code = alt_get_flash_info(fd,&regions,&number_of_regions);
        if (ret_code == 0 && number_of_regions >= 1){
            nextreg = regions;
            for(i=0;i<number_of_regions;i++){
 2001ddc:	e0bff817 	ldw	r2,-32(fp)
 2001de0:	10800044 	addi	r2,r2,1
 2001de4:	e0bff815 	stw	r2,-32(fp)
 2001de8:	e0fffe17 	ldw	r3,-8(fp)
 2001dec:	e0bff817 	ldw	r2,-32(fp)
 2001df0:	10fff116 	blt	r2,r3,2001db8 <Flash_Size+0x8c>
                FlashSize += nextreg->region_size;
                nextreg++;
            }
        }
        alt_flash_close_dev(fd);
 2001df4:	e13ffa17 	ldw	r4,-24(fp)
 2001df8:	20116d00 	call	20116d0 <alt_flash_close_dev>
    }
    return FlashSize;
 2001dfc:	e0bffc17 	ldw	r2,-16(fp)
}    
 2001e00:	e037883a 	mov	sp,fp
 2001e04:	dfc00117 	ldw	ra,4(sp)
 2001e08:	df000017 	ldw	fp,0(sp)
 2001e0c:	dec00204 	addi	sp,sp,8
 2001e10:	f800283a 	ret

02001e14 <FLASH_Verify>:



// bQuick=TRUE: just check first and last block 
bool FLASH_Verify(char *pFlashName, alt_u8 InitValue, bool bShowMessage, bool bQuickVerify){
 2001e14:	deffea04 	addi	sp,sp,-88
 2001e18:	dfc01515 	stw	ra,84(sp)
 2001e1c:	df001415 	stw	fp,80(sp)
 2001e20:	df001404 	addi	fp,sp,80
 2001e24:	e13ffb15 	stw	r4,-20(fp)
 2001e28:	e1bffd15 	stw	r6,-12(fp)
 2001e2c:	e1fffe15 	stw	r7,-8(fp)
 2001e30:	e17ffc05 	stb	r5,-16(fp)
    bool bPass = TRUE;
 2001e34:	00800044 	movi	r2,1
 2001e38:	e0bff815 	stw	r2,-32(fp)
    int i, k, BlockNum;
    FLASH_HANDLE hFlash;
    alt_u32 Offset, Size;
    alt_u8 *pBuf, Cnt;
    const int nBufSize = 8*1024; // 16K
 2001e3c:	00880004 	movi	r2,8192
 2001e40:	e0bff115 	stw	r2,-60(fp)
    int nWriteSizeSum, nWriteSize;
    int nReadSizeSum, nReadSize;
    
    hFlash = Flash_Open(pFlashName);
 2001e44:	e13ffb17 	ldw	r4,-20(fp)
 2001e48:	20016480 	call	2001648 <Flash_Open>
 2001e4c:	e0bff415 	stw	r2,-48(fp)
    if (!hFlash){
 2001e50:	e0bff417 	ldw	r2,-48(fp)
 2001e54:	1004c03a 	cmpne	r2,r2,zero
 2001e58:	1000081e 	bne	r2,zero,2001e7c <FLASH_Verify+0x68>
        if (bShowMessage)
 2001e5c:	e0bffd17 	ldw	r2,-12(fp)
 2001e60:	1005003a 	cmpeq	r2,r2,zero
 2001e64:	1000031e 	bne	r2,zero,2001e74 <FLASH_Verify+0x60>
            printf("Failed to open flash.\r\n");
 2001e68:	01008074 	movhi	r4,513
 2001e6c:	21160404 	addi	r4,r4,22544
 2001e70:	2003fe80 	call	2003fe8 <puts>
        return FALSE;
 2001e74:	e03fff15 	stw	zero,-4(fp)
 2001e78:	00014c06 	br	20023ac <FLASH_Verify+0x598>
    }        
        
        
    BlockNum = Flash_GetBlockCount(hFlash);
 2001e7c:	e13ff417 	ldw	r4,-48(fp)
 2001e80:	2001ca80 	call	2001ca8 <Flash_GetBlockCount>
 2001e84:	10bfffcc 	andi	r2,r2,65535
 2001e88:	e0bff515 	stw	r2,-44(fp)
    
    //===== alloc buffer
    pBuf = (alt_u8 *)malloc(nBufSize);
 2001e8c:	e13ff117 	ldw	r4,-60(fp)
 2001e90:	200377c0 	call	200377c <malloc>
 2001e94:	e0bff315 	stw	r2,-52(fp)
    if (!pBuf){
 2001e98:	e0bff317 	ldw	r2,-52(fp)
 2001e9c:	1004c03a 	cmpne	r2,r2,zero
 2001ea0:	1000081e 	bne	r2,zero,2001ec4 <FLASH_Verify+0xb0>
        if (bShowMessage)
 2001ea4:	e0bffd17 	ldw	r2,-12(fp)
 2001ea8:	1005003a 	cmpeq	r2,r2,zero
 2001eac:	1000031e 	bne	r2,zero,2001ebc <FLASH_Verify+0xa8>
            printf("[Error] Failed to alloc memory.\r\n");
 2001eb0:	01008074 	movhi	r4,513
 2001eb4:	21160a04 	addi	r4,r4,22568
 2001eb8:	2003fe80 	call	2003fe8 <puts>
        return FALSE;
 2001ebc:	e03fff15 	stw	zero,-4(fp)
 2001ec0:	00013a06 	br	20023ac <FLASH_Verify+0x598>
    }        
    
    
    //===== erase
    for(i=0;i<BlockNum && bPass;i++){
 2001ec4:	e03ff715 	stw	zero,-36(fp)
 2001ec8:	00002306 	br	2001f58 <FLASH_Verify+0x144>
        if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
 2001ecc:	e0bffe17 	ldw	r2,-8(fp)
 2001ed0:	1005003a 	cmpeq	r2,r2,zero
 2001ed4:	1000071e 	bne	r2,zero,2001ef4 <FLASH_Verify+0xe0>
 2001ed8:	e0bff717 	ldw	r2,-36(fp)
 2001edc:	1005003a 	cmpeq	r2,r2,zero
 2001ee0:	1000041e 	bne	r2,zero,2001ef4 <FLASH_Verify+0xe0>
 2001ee4:	e0bff517 	ldw	r2,-44(fp)
 2001ee8:	10ffffc4 	addi	r3,r2,-1
 2001eec:	e0bff717 	ldw	r2,-36(fp)
 2001ef0:	1880161e 	bne	r3,r2,2001f4c <FLASH_Verify+0x138>
            continue;
        bPass = Flash_Erase(hFlash, i);
 2001ef4:	e0bff717 	ldw	r2,-36(fp)
 2001ef8:	117fffcc 	andi	r5,r2,65535
 2001efc:	e13ff417 	ldw	r4,-48(fp)
 2001f00:	2001bb40 	call	2001bb4 <Flash_Erase>
 2001f04:	e0bff815 	stw	r2,-32(fp)
        if (bShowMessage){
 2001f08:	e0bffd17 	ldw	r2,-12(fp)
 2001f0c:	1005003a 	cmpeq	r2,r2,zero
 2001f10:	10000e1e 	bne	r2,zero,2001f4c <FLASH_Verify+0x138>
            if (!bPass)
 2001f14:	e0bff817 	ldw	r2,-32(fp)
 2001f18:	1004c03a 	cmpne	r2,r2,zero
 2001f1c:	1000061e 	bne	r2,zero,2001f38 <FLASH_Verify+0x124>
                printf("[Error] Failed to erase flash block %d/%d\r\n.\r\n", i, BlockNum);
 2001f20:	01008074 	movhi	r4,513
 2001f24:	21161304 	addi	r4,r4,22604
 2001f28:	e17ff717 	ldw	r5,-36(fp)
 2001f2c:	e1bff517 	ldw	r6,-44(fp)
 2001f30:	2003ed00 	call	2003ed0 <printf>
 2001f34:	00000506 	br	2001f4c <FLASH_Verify+0x138>
            else
                printf("Erase Block %d/%d\r\n", i, BlockNum);
 2001f38:	01008074 	movhi	r4,513
 2001f3c:	21161f04 	addi	r4,r4,22652
 2001f40:	e17ff717 	ldw	r5,-36(fp)
 2001f44:	e1bff517 	ldw	r6,-44(fp)
 2001f48:	2003ed00 	call	2003ed0 <printf>
        return FALSE;
    }        
    
    
    //===== erase
    for(i=0;i<BlockNum && bPass;i++){
 2001f4c:	e0bff717 	ldw	r2,-36(fp)
 2001f50:	10800044 	addi	r2,r2,1
 2001f54:	e0bff715 	stw	r2,-36(fp)
 2001f58:	e0fff717 	ldw	r3,-36(fp)
 2001f5c:	e0bff517 	ldw	r2,-44(fp)
 2001f60:	1880030e 	bge	r3,r2,2001f70 <FLASH_Verify+0x15c>
 2001f64:	e0bff817 	ldw	r2,-32(fp)
 2001f68:	1004c03a 	cmpne	r2,r2,zero
 2001f6c:	103fd71e 	bne	r2,zero,2001ecc <FLASH_Verify+0xb8>
                printf("Erase Block %d/%d\r\n", i, BlockNum);
        }            
    }        
    
    //===== write
    if (bPass){
 2001f70:	e0bff817 	ldw	r2,-32(fp)
 2001f74:	1005003a 	cmpeq	r2,r2,zero
 2001f78:	1000681e 	bne	r2,zero,200211c <FLASH_Verify+0x308>
        Cnt = InitValue;
 2001f7c:	e0bffc03 	ldbu	r2,-16(fp)
 2001f80:	e0bff205 	stb	r2,-56(fp)
        for(i=0;i<BlockNum && bPass;i++){
 2001f84:	e03ff715 	stw	zero,-36(fp)
 2001f88:	00005e06 	br	2002104 <FLASH_Verify+0x2f0>
            if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
 2001f8c:	e0bffe17 	ldw	r2,-8(fp)
 2001f90:	1005003a 	cmpeq	r2,r2,zero
 2001f94:	1000071e 	bne	r2,zero,2001fb4 <FLASH_Verify+0x1a0>
 2001f98:	e0bff717 	ldw	r2,-36(fp)
 2001f9c:	1005003a 	cmpeq	r2,r2,zero
 2001fa0:	1000041e 	bne	r2,zero,2001fb4 <FLASH_Verify+0x1a0>
 2001fa4:	e0bff517 	ldw	r2,-44(fp)
 2001fa8:	10ffffc4 	addi	r3,r2,-1
 2001fac:	e0bff717 	ldw	r2,-36(fp)
 2001fb0:	1880511e 	bne	r3,r2,20020f8 <FLASH_Verify+0x2e4>
                continue;
            
            bPass = Flash_GetBlockInfo(hFlash, i, &Offset, &Size);
 2001fb4:	e0bff717 	ldw	r2,-36(fp)
 2001fb8:	117fffcc 	andi	r5,r2,65535
 2001fbc:	e1bff904 	addi	r6,fp,-28
 2001fc0:	e1fffa04 	addi	r7,fp,-24
 2001fc4:	e13ff417 	ldw	r4,-48(fp)
 2001fc8:	20017700 	call	2001770 <Flash_GetBlockInfo>
 2001fcc:	e0bff815 	stw	r2,-32(fp)
            if (!bPass)
 2001fd0:	e0bff817 	ldw	r2,-32(fp)
 2001fd4:	1005003a 	cmpeq	r2,r2,zero
 2001fd8:	1000471e 	bne	r2,zero,20020f8 <FLASH_Verify+0x2e4>
                continue;
                
            if (bShowMessage)            
 2001fdc:	e0bffd17 	ldw	r2,-12(fp)
 2001fe0:	1005003a 	cmpeq	r2,r2,zero
 2001fe4:	1000071e 	bne	r2,zero,2002004 <FLASH_Verify+0x1f0>
                printf("Write Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
 2001fe8:	e0bffa17 	ldw	r2,-24(fp)
 2001fec:	100f883a 	mov	r7,r2
 2001ff0:	01008074 	movhi	r4,513
 2001ff4:	21162404 	addi	r4,r4,22672
 2001ff8:	e17ff717 	ldw	r5,-36(fp)
 2001ffc:	e1bff517 	ldw	r6,-44(fp)
 2002000:	2003ed00 	call	2003ed0 <printf>
            nWriteSizeSum = 0;
 2002004:	e03ff015 	stw	zero,-64(fp)
            while(nWriteSizeSum < Size && bPass){
 2002008:	00003506 	br	20020e0 <FLASH_Verify+0x2cc>
                // cal write size
                nWriteSize = nBufSize;
 200200c:	e0bff117 	ldw	r2,-60(fp)
 2002010:	e0bfef15 	stw	r2,-68(fp)
                if (nWriteSize > (Size - nWriteSizeSum))
 2002014:	e13fef17 	ldw	r4,-68(fp)
 2002018:	e0fffa17 	ldw	r3,-24(fp)
 200201c:	e0bff017 	ldw	r2,-64(fp)
 2002020:	1885c83a 	sub	r2,r3,r2
 2002024:	1100042e 	bgeu	r2,r4,2002038 <FLASH_Verify+0x224>
                    nWriteSize = Size - nWriteSizeSum;
 2002028:	e0bffa17 	ldw	r2,-24(fp)
 200202c:	e0fff017 	ldw	r3,-64(fp)
 2002030:	10c5c83a 	sub	r2,r2,r3
 2002034:	e0bfef15 	stw	r2,-68(fp)
                // fill data
                for(k=0;k<nWriteSize;k++){
 2002038:	e03ff615 	stw	zero,-40(fp)
 200203c:	00000c06 	br	2002070 <FLASH_Verify+0x25c>
                    *(pBuf+k) = Cnt++;
 2002040:	e0bff617 	ldw	r2,-40(fp)
 2002044:	1007883a 	mov	r3,r2
 2002048:	e0bff317 	ldw	r2,-52(fp)
 200204c:	1887883a 	add	r3,r3,r2
 2002050:	e0bff203 	ldbu	r2,-56(fp)
 2002054:	18800005 	stb	r2,0(r3)
 2002058:	e0bff203 	ldbu	r2,-56(fp)
 200205c:	10800044 	addi	r2,r2,1
 2002060:	e0bff205 	stb	r2,-56(fp)
                // cal write size
                nWriteSize = nBufSize;
                if (nWriteSize > (Size - nWriteSizeSum))
                    nWriteSize = Size - nWriteSizeSum;
                // fill data
                for(k=0;k<nWriteSize;k++){
 2002064:	e0bff617 	ldw	r2,-40(fp)
 2002068:	10800044 	addi	r2,r2,1
 200206c:	e0bff615 	stw	r2,-40(fp)
 2002070:	e0fff617 	ldw	r3,-40(fp)
 2002074:	e0bfef17 	ldw	r2,-68(fp)
 2002078:	18bff116 	blt	r3,r2,2002040 <FLASH_Verify+0x22c>
                    *(pBuf+k) = Cnt++;
                }                     
                // write data block
                bPass = Flash_Write(hFlash, Offset+nWriteSizeSum, pBuf, nWriteSize);
 200207c:	e0fff917 	ldw	r3,-28(fp)
 2002080:	e0bff017 	ldw	r2,-64(fp)
 2002084:	188b883a 	add	r5,r3,r2
 2002088:	e1ffef17 	ldw	r7,-68(fp)
 200208c:	e13ff417 	ldw	r4,-48(fp)
 2002090:	e1bff317 	ldw	r6,-52(fp)
 2002094:	20019640 	call	2001964 <Flash_Write>
 2002098:	e0bff815 	stw	r2,-32(fp)
                if (bShowMessage && !bPass)            
 200209c:	e0bffd17 	ldw	r2,-12(fp)
 20020a0:	1005003a 	cmpeq	r2,r2,zero
 20020a4:	1000081e 	bne	r2,zero,20020c8 <FLASH_Verify+0x2b4>
 20020a8:	e0bff817 	ldw	r2,-32(fp)
 20020ac:	1004c03a 	cmpne	r2,r2,zero
 20020b0:	1000051e 	bne	r2,zero,20020c8 <FLASH_Verify+0x2b4>
                    printf("[Error] Write Block[%d/%d] NG\r\n", i, BlockNum);
 20020b4:	01008074 	movhi	r4,513
 20020b8:	21162c04 	addi	r4,r4,22704
 20020bc:	e17ff717 	ldw	r5,-36(fp)
 20020c0:	e1bff517 	ldw	r6,-44(fp)
 20020c4:	2003ed00 	call	2003ed0 <printf>
                //
                usleep(20*1000);
 20020c8:	01138804 	movi	r4,20000
 20020cc:	20122600 	call	2012260 <usleep>
                //
                nWriteSizeSum += nWriteSize;
 20020d0:	e0bff017 	ldw	r2,-64(fp)
 20020d4:	e0ffef17 	ldw	r3,-68(fp)
 20020d8:	10c5883a 	add	r2,r2,r3
 20020dc:	e0bff015 	stw	r2,-64(fp)
                continue;
                
            if (bShowMessage)            
                printf("Write Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
            nWriteSizeSum = 0;
            while(nWriteSizeSum < Size && bPass){
 20020e0:	e0fff017 	ldw	r3,-64(fp)
 20020e4:	e0bffa17 	ldw	r2,-24(fp)
 20020e8:	1880032e 	bgeu	r3,r2,20020f8 <FLASH_Verify+0x2e4>
 20020ec:	e0bff817 	ldw	r2,-32(fp)
 20020f0:	1004c03a 	cmpne	r2,r2,zero
 20020f4:	103fc51e 	bne	r2,zero,200200c <FLASH_Verify+0x1f8>
    }        
    
    //===== write
    if (bPass){
        Cnt = InitValue;
        for(i=0;i<BlockNum && bPass;i++){
 20020f8:	e0bff717 	ldw	r2,-36(fp)
 20020fc:	10800044 	addi	r2,r2,1
 2002100:	e0bff715 	stw	r2,-36(fp)
 2002104:	e0fff717 	ldw	r3,-36(fp)
 2002108:	e0bff517 	ldw	r2,-44(fp)
 200210c:	1880030e 	bge	r3,r2,200211c <FLASH_Verify+0x308>
 2002110:	e0bff817 	ldw	r2,-32(fp)
 2002114:	1004c03a 	cmpne	r2,r2,zero
 2002118:	103f9c1e 	bne	r2,zero,2001f8c <FLASH_Verify+0x178>
                nWriteSizeSum += nWriteSize;
            }
        }
    }
  
    if (bPass){
 200211c:	e0bff817 	ldw	r2,-32(fp)
 2002120:	1005003a 	cmpeq	r2,r2,zero
 2002124:	1000071e 	bne	r2,zero,2002144 <FLASH_Verify+0x330>
        if (bShowMessage)      
 2002128:	e0bffd17 	ldw	r2,-12(fp)
 200212c:	1005003a 	cmpeq	r2,r2,zero
 2002130:	1000031e 	bne	r2,zero,2002140 <FLASH_Verify+0x32c>
            printf("alt_dcache_flush_all\r\n");
 2002134:	01008074 	movhi	r4,513
 2002138:	21163404 	addi	r4,r4,22736
 200213c:	2003fe80 	call	2003fe8 <puts>
        alt_dcache_flush_all();
 2002140:	20115e40 	call	20115e4 <alt_dcache_flush_all>
    }        
      
    //===== read & verify
    if (bPass){
 2002144:	e0bff817 	ldw	r2,-32(fp)
 2002148:	1005003a 	cmpeq	r2,r2,zero
 200214c:	10008b1e 	bne	r2,zero,200237c <FLASH_Verify+0x568>
        Cnt = InitValue;
 2002150:	e0bffc03 	ldbu	r2,-16(fp)
 2002154:	e0bff205 	stb	r2,-56(fp)
        for(i=0;i<BlockNum && bPass;i++){
 2002158:	e03ff715 	stw	zero,-36(fp)
 200215c:	00008106 	br	2002364 <FLASH_Verify+0x550>
            if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
 2002160:	e0bffe17 	ldw	r2,-8(fp)
 2002164:	1005003a 	cmpeq	r2,r2,zero
 2002168:	1000071e 	bne	r2,zero,2002188 <FLASH_Verify+0x374>
 200216c:	e0bff717 	ldw	r2,-36(fp)
 2002170:	1005003a 	cmpeq	r2,r2,zero
 2002174:	1000041e 	bne	r2,zero,2002188 <FLASH_Verify+0x374>
 2002178:	e0bff517 	ldw	r2,-44(fp)
 200217c:	10ffffc4 	addi	r3,r2,-1
 2002180:	e0bff717 	ldw	r2,-36(fp)
 2002184:	1880741e 	bne	r3,r2,2002358 <FLASH_Verify+0x544>
                continue;
            
            bPass = Flash_GetBlockInfo(hFlash, i, &Offset, &Size);
 2002188:	e0bff717 	ldw	r2,-36(fp)
 200218c:	117fffcc 	andi	r5,r2,65535
 2002190:	e1bff904 	addi	r6,fp,-28
 2002194:	e1fffa04 	addi	r7,fp,-24
 2002198:	e13ff417 	ldw	r4,-48(fp)
 200219c:	20017700 	call	2001770 <Flash_GetBlockInfo>
 20021a0:	e0bff815 	stw	r2,-32(fp)
            if (!bPass){
 20021a4:	e0bff817 	ldw	r2,-32(fp)
 20021a8:	1004c03a 	cmpne	r2,r2,zero
 20021ac:	1000081e 	bne	r2,zero,20021d0 <FLASH_Verify+0x3bc>
                if (bShowMessage)      
 20021b0:	e0bffd17 	ldw	r2,-12(fp)
 20021b4:	1005003a 	cmpeq	r2,r2,zero
 20021b8:	1000671e 	bne	r2,zero,2002358 <FLASH_Verify+0x544>
                    printf("[Error] Flash_GetBlockInfo at block %d\r\n", i);
 20021bc:	01008074 	movhi	r4,513
 20021c0:	21163a04 	addi	r4,r4,22760
 20021c4:	e17ff717 	ldw	r5,-36(fp)
 20021c8:	2003ed00 	call	2003ed0 <printf>
                continue;
 20021cc:	00006206 	br	2002358 <FLASH_Verify+0x544>
            }    
            if (bShowMessage)            
 20021d0:	e0bffd17 	ldw	r2,-12(fp)
 20021d4:	1005003a 	cmpeq	r2,r2,zero
 20021d8:	1000071e 	bne	r2,zero,20021f8 <FLASH_Verify+0x3e4>
                printf("Read Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
 20021dc:	e0bffa17 	ldw	r2,-24(fp)
 20021e0:	100f883a 	mov	r7,r2
 20021e4:	01008074 	movhi	r4,513
 20021e8:	21164504 	addi	r4,r4,22804
 20021ec:	e17ff717 	ldw	r5,-36(fp)
 20021f0:	e1bff517 	ldw	r6,-44(fp)
 20021f4:	2003ed00 	call	2003ed0 <printf>
            nReadSizeSum = 0;
 20021f8:	e03fee15 	stw	zero,-72(fp)
            while(nReadSizeSum < Size && bPass){
 20021fc:	00005006 	br	2002340 <FLASH_Verify+0x52c>
                // cal write size
                nReadSize = nBufSize;
 2002200:	e0bff117 	ldw	r2,-60(fp)
 2002204:	e0bfed15 	stw	r2,-76(fp)
                if (nReadSize > (Size - nReadSizeSum))
 2002208:	e13fed17 	ldw	r4,-76(fp)
 200220c:	e0fffa17 	ldw	r3,-24(fp)
 2002210:	e0bfee17 	ldw	r2,-72(fp)
 2002214:	1885c83a 	sub	r2,r3,r2
 2002218:	1100042e 	bgeu	r2,r4,200222c <FLASH_Verify+0x418>
                    nReadSize = Size - nReadSizeSum;
 200221c:	e0bffa17 	ldw	r2,-24(fp)
 2002220:	e0ffee17 	ldw	r3,-72(fp)
 2002224:	10c5c83a 	sub	r2,r2,r3
 2002228:	e0bfed15 	stw	r2,-76(fp)
                    
                // read data block
                bPass = Flash_Read(hFlash, Offset+nReadSizeSum, pBuf, nReadSize);
 200222c:	e0fff917 	ldw	r3,-28(fp)
 2002230:	e0bfee17 	ldw	r2,-72(fp)
 2002234:	188b883a 	add	r5,r3,r2
 2002238:	e1ffed17 	ldw	r7,-76(fp)
 200223c:	e13ff417 	ldw	r4,-48(fp)
 2002240:	e1bff317 	ldw	r6,-52(fp)
 2002244:	20018ac0 	call	20018ac <Flash_Read>
 2002248:	e0bff815 	stw	r2,-32(fp)
                if (!bPass){
 200224c:	e0bff817 	ldw	r2,-32(fp)
 2002250:	1004c03a 	cmpne	r2,r2,zero
 2002254:	10000c1e 	bne	r2,zero,2002288 <FLASH_Verify+0x474>
                    if (bShowMessage)      
 2002258:	e0bffd17 	ldw	r2,-12(fp)
 200225c:	1005003a 	cmpeq	r2,r2,zero
 2002260:	1000331e 	bne	r2,zero,2002330 <FLASH_Verify+0x51c>
                        printf("[Error] Flash_Read fail at block-offset %d-%d\r\n", i, (int)Offset+nReadSizeSum);
 2002264:	e0bff917 	ldw	r2,-28(fp)
 2002268:	1007883a 	mov	r3,r2
 200226c:	e0bfee17 	ldw	r2,-72(fp)
 2002270:	188d883a 	add	r6,r3,r2
 2002274:	01008074 	movhi	r4,513
 2002278:	21164d04 	addi	r4,r4,22836
 200227c:	e17ff717 	ldw	r5,-36(fp)
 2002280:	2003ed00 	call	2003ed0 <printf>
 2002284:	00002a06 	br	2002330 <FLASH_Verify+0x51c>
                }else{
                    // verify
                    // verify data
                    for(k=0;k<nReadSize && bPass;k++){
 2002288:	e03ff615 	stw	zero,-40(fp)
 200228c:	00002206 	br	2002318 <FLASH_Verify+0x504>
                        if (*(pBuf+k) != Cnt){
 2002290:	e0bff617 	ldw	r2,-40(fp)
 2002294:	1007883a 	mov	r3,r2
 2002298:	e0bff317 	ldw	r2,-52(fp)
 200229c:	1885883a 	add	r2,r3,r2
 20022a0:	10800003 	ldbu	r2,0(r2)
 20022a4:	10c03fcc 	andi	r3,r2,255
 20022a8:	e0bff203 	ldbu	r2,-56(fp)
 20022ac:	18801426 	beq	r3,r2,2002300 <FLASH_Verify+0x4ec>
                            if (bShowMessage)      
 20022b0:	e0bffd17 	ldw	r2,-12(fp)
 20022b4:	1005003a 	cmpeq	r2,r2,zero
 20022b8:	10000f1e 	bne	r2,zero,20022f8 <FLASH_Verify+0x4e4>
                                printf("[Error] Verify fail, block:%d, index:%d, read=%Xh, expected=%Xh\r\n", i, nReadSizeSum+k, *(pBuf+k), Cnt);
 20022bc:	e0ffee17 	ldw	r3,-72(fp)
 20022c0:	e0bff617 	ldw	r2,-40(fp)
 20022c4:	188d883a 	add	r6,r3,r2
 20022c8:	e0bff617 	ldw	r2,-40(fp)
 20022cc:	1007883a 	mov	r3,r2
 20022d0:	e0bff317 	ldw	r2,-52(fp)
 20022d4:	1885883a 	add	r2,r3,r2
 20022d8:	10800003 	ldbu	r2,0(r2)
 20022dc:	11c03fcc 	andi	r7,r2,255
 20022e0:	e0bff203 	ldbu	r2,-56(fp)
 20022e4:	d8800015 	stw	r2,0(sp)
 20022e8:	01008074 	movhi	r4,513
 20022ec:	21165904 	addi	r4,r4,22884
 20022f0:	e17ff717 	ldw	r5,-36(fp)
 20022f4:	2003ed00 	call	2003ed0 <printf>
                            bPass = FALSE;
 20022f8:	e03ff815 	stw	zero,-32(fp)
 20022fc:	00000306 	br	200230c <FLASH_Verify+0x4f8>
                        }else{    
                            Cnt++;
 2002300:	e0bff203 	ldbu	r2,-56(fp)
 2002304:	10800044 	addi	r2,r2,1
 2002308:	e0bff205 	stb	r2,-56(fp)
                    if (bShowMessage)      
                        printf("[Error] Flash_Read fail at block-offset %d-%d\r\n", i, (int)Offset+nReadSizeSum);
                }else{
                    // verify
                    // verify data
                    for(k=0;k<nReadSize && bPass;k++){
 200230c:	e0bff617 	ldw	r2,-40(fp)
 2002310:	10800044 	addi	r2,r2,1
 2002314:	e0bff615 	stw	r2,-40(fp)
 2002318:	e0fff617 	ldw	r3,-40(fp)
 200231c:	e0bfed17 	ldw	r2,-76(fp)
 2002320:	1880030e 	bge	r3,r2,2002330 <FLASH_Verify+0x51c>
 2002324:	e0bff817 	ldw	r2,-32(fp)
 2002328:	1004c03a 	cmpne	r2,r2,zero
 200232c:	103fd81e 	bne	r2,zero,2002290 <FLASH_Verify+0x47c>
                            Cnt++;
                        }
                    }                     
                }                        
                //
                nReadSizeSum += nReadSize;
 2002330:	e0bfee17 	ldw	r2,-72(fp)
 2002334:	e0ffed17 	ldw	r3,-76(fp)
 2002338:	10c5883a 	add	r2,r2,r3
 200233c:	e0bfee15 	stw	r2,-72(fp)
                continue;
            }    
            if (bShowMessage)            
                printf("Read Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
            nReadSizeSum = 0;
            while(nReadSizeSum < Size && bPass){
 2002340:	e0ffee17 	ldw	r3,-72(fp)
 2002344:	e0bffa17 	ldw	r2,-24(fp)
 2002348:	1880032e 	bgeu	r3,r2,2002358 <FLASH_Verify+0x544>
 200234c:	e0bff817 	ldw	r2,-32(fp)
 2002350:	1004c03a 	cmpne	r2,r2,zero
 2002354:	103faa1e 	bne	r2,zero,2002200 <FLASH_Verify+0x3ec>
    }        
      
    //===== read & verify
    if (bPass){
        Cnt = InitValue;
        for(i=0;i<BlockNum && bPass;i++){
 2002358:	e0bff717 	ldw	r2,-36(fp)
 200235c:	10800044 	addi	r2,r2,1
 2002360:	e0bff715 	stw	r2,-36(fp)
 2002364:	e0fff717 	ldw	r3,-36(fp)
 2002368:	e0bff517 	ldw	r2,-44(fp)
 200236c:	1880030e 	bge	r3,r2,200237c <FLASH_Verify+0x568>
 2002370:	e0bff817 	ldw	r2,-32(fp)
 2002374:	1004c03a 	cmpne	r2,r2,zero
 2002378:	103f791e 	bne	r2,zero,2002160 <FLASH_Verify+0x34c>
                nReadSizeSum += nReadSize;
            }
        }  
    }
    
    if (pBuf)
 200237c:	e0bff317 	ldw	r2,-52(fp)
 2002380:	1005003a 	cmpeq	r2,r2,zero
 2002384:	1000021e 	bne	r2,zero,2002390 <FLASH_Verify+0x57c>
        free(pBuf);
 2002388:	e13ff317 	ldw	r4,-52(fp)
 200238c:	20037680 	call	2003768 <free>
    
    if (hFlash)
 2002390:	e0bff417 	ldw	r2,-48(fp)
 2002394:	1005003a 	cmpeq	r2,r2,zero
 2002398:	1000021e 	bne	r2,zero,20023a4 <FLASH_Verify+0x590>
        Flash_Close(hFlash);
 200239c:	e13ff417 	ldw	r4,-48(fp)
 20023a0:	20017180 	call	2001718 <Flash_Close>
    
    //
    return bPass;
 20023a4:	e0bff817 	ldw	r2,-32(fp)
 20023a8:	e0bfff15 	stw	r2,-4(fp)
 20023ac:	e0bfff17 	ldw	r2,-4(fp)
}
 20023b0:	e037883a 	mov	sp,fp
 20023b4:	dfc00117 	ldw	ra,4(sp)
 20023b8:	df000017 	ldw	fp,0(sp)
 20023bc:	dec00204 	addi	sp,sp,8
 20023c0:	f800283a 	ret

020023c4 <SPI_Init>:

typedef enum{
        SPI_STATUS_FLAG_DONE = 0x01
}SPI_STATUS_FLAG;

void SPI_Init(alt_u32 spi_base){
 20023c4:	defffe04 	addi	sp,sp,-8
 20023c8:	df000115 	stw	fp,4(sp)
 20023cc:	df000104 	addi	fp,sp,4
 20023d0:	e13fff15 	stw	r4,-4(fp)
    // clear fifo
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 20023d4:	e0bfff17 	ldw	r2,-4(fp)
 20023d8:	10800104 	addi	r2,r2,4
 20023dc:	10000035 	stwio	zero,0(r2)
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_CLEAR_FIFO);
 20023e0:	e0bfff17 	ldw	r2,-4(fp)
 20023e4:	10800104 	addi	r2,r2,4
 20023e8:	1007883a 	mov	r3,r2
 20023ec:	00800104 	movi	r2,4
 20023f0:	18800035 	stwio	r2,0(r3)
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 20023f4:	e0bfff17 	ldw	r2,-4(fp)
 20023f8:	10800104 	addi	r2,r2,4
 20023fc:	10000035 	stwio	zero,0(r2)
   
}
 2002400:	e037883a 	mov	sp,fp
 2002404:	df000017 	ldw	fp,0(sp)
 2002408:	dec00104 	addi	sp,sp,4
 200240c:	f800283a 	ret

02002410 <SPI_MultipleWrite>:


bool SPI_MultipleWrite(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 szData[], alt_u8 nByteNum){
 2002410:	defff504 	addi	sp,sp,-44
 2002414:	dfc00a15 	stw	ra,40(sp)
 2002418:	df000915 	stw	fp,36(sp)
 200241c:	df000904 	addi	fp,sp,36
 2002420:	e13ffb15 	stw	r4,-20(fp)
 2002424:	e1bffd15 	stw	r6,-12(fp)
 2002428:	e17ffc05 	stb	r5,-16(fp)
 200242c:	e1fffe05 	stb	r7,-8(fp)
    alt_u8 Status;
    const int nMaxTry = 100;
 2002430:	00801904 	movi	r2,100
 2002434:	e0bff915 	stw	r2,-28(fp)
    int nTryCnt = 0;
 2002438:	e03ff815 	stw	zero,-32(fp)
    int i;
    
    // make sure processs is stoped, and set write flag
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 200243c:	e0bffb17 	ldw	r2,-20(fp)
 2002440:	10800104 	addi	r2,r2,4
 2002444:	10000035 	stwio	zero,0(r2)
    
    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
 2002448:	e0bffb17 	ldw	r2,-20(fp)
 200244c:	10800204 	addi	r2,r2,8
 2002450:	e0fffc03 	ldbu	r3,-16(fp)
 2002454:	10c00035 	stwio	r3,0(r2)
    
    // write data to fifo
    for(i=0;i<nByteNum;i++)
 2002458:	e03ff715 	stw	zero,-36(fp)
 200245c:	00000c06 	br	2002490 <SPI_MultipleWrite+0x80>
        IOWR(spi_base, SPI_REG_DATA, szData[i]);
 2002460:	e13ffb17 	ldw	r4,-20(fp)
 2002464:	e0bff717 	ldw	r2,-36(fp)
 2002468:	1007883a 	mov	r3,r2
 200246c:	e0bffd17 	ldw	r2,-12(fp)
 2002470:	1885883a 	add	r2,r3,r2
 2002474:	10800003 	ldbu	r2,0(r2)
 2002478:	10c03fcc 	andi	r3,r2,255
 200247c:	2005883a 	mov	r2,r4
 2002480:	10c00035 	stwio	r3,0(r2)
    
    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
    
    // write data to fifo
    for(i=0;i<nByteNum;i++)
 2002484:	e0bff717 	ldw	r2,-36(fp)
 2002488:	10800044 	addi	r2,r2,1
 200248c:	e0bff715 	stw	r2,-36(fp)
 2002490:	e0fffe03 	ldbu	r3,-8(fp)
 2002494:	e0bff717 	ldw	r2,-36(fp)
 2002498:	10fff116 	blt	r2,r3,2002460 <SPI_MultipleWrite+0x50>
        IOWR(spi_base, SPI_REG_DATA, szData[i]);
    
    // start
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_STATR);
 200249c:	e0bffb17 	ldw	r2,-20(fp)
 20024a0:	10800104 	addi	r2,r2,4
 20024a4:	1007883a 	mov	r3,r2
 20024a8:	00800044 	movi	r2,1
 20024ac:	18800035 	stwio	r2,0(r3)
    
    // check status
    usleep(10);
 20024b0:	01000284 	movi	r4,10
 20024b4:	20122600 	call	2012260 <usleep>
    do{    
        Status = IORD(spi_base, SPI_REG_CTRL_STATUS);
 20024b8:	e0bffb17 	ldw	r2,-20(fp)
 20024bc:	10800104 	addi	r2,r2,4
 20024c0:	10800037 	ldwio	r2,0(r2)
 20024c4:	e0bffa05 	stb	r2,-24(fp)
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
 20024c8:	e0bffa03 	ldbu	r2,-24(fp)
 20024cc:	1080004c 	andi	r2,r2,1
 20024d0:	1004c03a 	cmpne	r2,r2,zero
 20024d4:	10000a1e 	bne	r2,zero,2002500 <SPI_MultipleWrite+0xf0>
 20024d8:	e0fff817 	ldw	r3,-32(fp)
 20024dc:	e0bff917 	ldw	r2,-28(fp)
 20024e0:	1884803a 	cmplt	r2,r3,r2
 20024e4:	1007883a 	mov	r3,r2
 20024e8:	e0bff817 	ldw	r2,-32(fp)
 20024ec:	10800044 	addi	r2,r2,1
 20024f0:	e0bff815 	stw	r2,-32(fp)
 20024f4:	18803fcc 	andi	r2,r3,255
 20024f8:	1004c03a 	cmpne	r2,r2,zero
 20024fc:	103fee1e 	bne	r2,zero,20024b8 <SPI_MultipleWrite+0xa8>
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
 2002500:	e0bffb17 	ldw	r2,-20(fp)
 2002504:	10800104 	addi	r2,r2,4
 2002508:	10000035 	stwio	zero,0(r2)
    
    if (Status & SPI_STATUS_FLAG_DONE)
 200250c:	e0bffa03 	ldbu	r2,-24(fp)
 2002510:	1080004c 	andi	r2,r2,1
 2002514:	10803fcc 	andi	r2,r2,255
 2002518:	1005003a 	cmpeq	r2,r2,zero
 200251c:	1000031e 	bne	r2,zero,200252c <SPI_MultipleWrite+0x11c>
        return TRUE;
 2002520:	00800044 	movi	r2,1
 2002524:	e0bfff15 	stw	r2,-4(fp)
 2002528:	00000106 	br	2002530 <SPI_MultipleWrite+0x120>
    
    return FALSE;
 200252c:	e03fff15 	stw	zero,-4(fp)
 2002530:	e0bfff17 	ldw	r2,-4(fp)
}
 2002534:	e037883a 	mov	sp,fp
 2002538:	dfc00117 	ldw	ra,4(sp)
 200253c:	df000017 	ldw	fp,0(sp)
 2002540:	dec00204 	addi	sp,sp,8
 2002544:	f800283a 	ret

02002548 <SPI_Write>:

bool SPI_Write(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 Value){
 2002548:	defffb04 	addi	sp,sp,-20
 200254c:	dfc00415 	stw	ra,16(sp)
 2002550:	df000315 	stw	fp,12(sp)
 2002554:	df000304 	addi	fp,sp,12
 2002558:	e13ffd15 	stw	r4,-12(fp)
 200255c:	e17ffe05 	stb	r5,-8(fp)
 2002560:	e1bfff05 	stb	r6,-4(fp)
    return SPI_MultipleWrite(spi_base, RegIndex, &Value, 1);
 2002564:	e17ffe03 	ldbu	r5,-8(fp)
 2002568:	e1bfff04 	addi	r6,fp,-4
 200256c:	e13ffd17 	ldw	r4,-12(fp)
 2002570:	01c00044 	movi	r7,1
 2002574:	20024100 	call	2002410 <SPI_MultipleWrite>
}    
 2002578:	e037883a 	mov	sp,fp
 200257c:	dfc00117 	ldw	ra,4(sp)
 2002580:	df000017 	ldw	fp,0(sp)
 2002584:	dec00204 	addi	sp,sp,8
 2002588:	f800283a 	ret

0200258c <SPI_MultipleRead>:

bool SPI_MultipleRead(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 szBuf[], alt_u8 nByteNum){
 200258c:	defff504 	addi	sp,sp,-44
 2002590:	dfc00a15 	stw	ra,40(sp)
 2002594:	df000915 	stw	fp,36(sp)
 2002598:	df000904 	addi	fp,sp,36
 200259c:	e13ffb15 	stw	r4,-20(fp)
 20025a0:	e1bffd15 	stw	r6,-12(fp)
 20025a4:	e17ffc05 	stb	r5,-16(fp)
 20025a8:	e1fffe05 	stb	r7,-8(fp)
    alt_u8 Status, Value8;
    const int nMaxTry = 100;
 20025ac:	00801904 	movi	r2,100
 20025b0:	e0bff915 	stw	r2,-28(fp)
    int nTryCnt = 0;
 20025b4:	e03ff815 	stw	zero,-32(fp)
    int i;
    
    // make sure processs is stoped, and set read flag
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLGA_REG_READ);
 20025b8:	e0bffb17 	ldw	r2,-20(fp)
 20025bc:	10800104 	addi	r2,r2,4
 20025c0:	1007883a 	mov	r3,r2
 20025c4:	00800084 	movi	r2,2
 20025c8:	18800035 	stwio	r2,0(r3)
    

    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
 20025cc:	e0bffb17 	ldw	r2,-20(fp)
 20025d0:	10800204 	addi	r2,r2,8
 20025d4:	e0fffc03 	ldbu	r3,-16(fp)
 20025d8:	10c00035 	stwio	r3,0(r2)

    // set read byte count
    IOWR(spi_base, SPI_REG_READ_NUM, nByteNum-1);
 20025dc:	e0bffb17 	ldw	r2,-20(fp)
 20025e0:	11000304 	addi	r4,r2,12
 20025e4:	e0bffe03 	ldbu	r2,-8(fp)
 20025e8:	10ffffc4 	addi	r3,r2,-1
 20025ec:	2005883a 	mov	r2,r4
 20025f0:	10c00035 	stwio	r3,0(r2)
    
    // start
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_STATR | SPI_FLGA_REG_READ);
 20025f4:	e0bffb17 	ldw	r2,-20(fp)
 20025f8:	10800104 	addi	r2,r2,4
 20025fc:	1007883a 	mov	r3,r2
 2002600:	008000c4 	movi	r2,3
 2002604:	18800035 	stwio	r2,0(r3)
    
    // check status
    usleep(10);
 2002608:	01000284 	movi	r4,10
 200260c:	20122600 	call	2012260 <usleep>
    do{    
        Status = IORD(spi_base, SPI_REG_CTRL_STATUS);
 2002610:	e0bffb17 	ldw	r2,-20(fp)
 2002614:	10800104 	addi	r2,r2,4
 2002618:	10800037 	ldwio	r2,0(r2)
 200261c:	e0bffa45 	stb	r2,-23(fp)
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
 2002620:	e0bffa43 	ldbu	r2,-23(fp)
 2002624:	1080004c 	andi	r2,r2,1
 2002628:	1004c03a 	cmpne	r2,r2,zero
 200262c:	10000a1e 	bne	r2,zero,2002658 <SPI_MultipleRead+0xcc>
 2002630:	e0fff817 	ldw	r3,-32(fp)
 2002634:	e0bff917 	ldw	r2,-28(fp)
 2002638:	1884803a 	cmplt	r2,r3,r2
 200263c:	1007883a 	mov	r3,r2
 2002640:	e0bff817 	ldw	r2,-32(fp)
 2002644:	10800044 	addi	r2,r2,1
 2002648:	e0bff815 	stw	r2,-32(fp)
 200264c:	18803fcc 	andi	r2,r3,255
 2002650:	1004c03a 	cmpne	r2,r2,zero
 2002654:	103fee1e 	bne	r2,zero,2002610 <SPI_MultipleRead+0x84>
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
 2002658:	e0bffb17 	ldw	r2,-20(fp)
 200265c:	10800104 	addi	r2,r2,4
 2002660:	10000035 	stwio	zero,0(r2)
    
    if (Status & SPI_STATUS_FLAG_DONE){
 2002664:	e0bffa43 	ldbu	r2,-23(fp)
 2002668:	1080004c 	andi	r2,r2,1
 200266c:	10803fcc 	andi	r2,r2,255
 2002670:	1005003a 	cmpeq	r2,r2,zero
 2002674:	1000141e 	bne	r2,zero,20026c8 <SPI_MultipleRead+0x13c>
        for(i=0;i<nByteNum;i++){
 2002678:	e03ff715 	stw	zero,-36(fp)
 200267c:	00000c06 	br	20026b0 <SPI_MultipleRead+0x124>
            Value8 = IORD(spi_base, SPI_REG_DATA);
 2002680:	e0bffb17 	ldw	r2,-20(fp)
 2002684:	10800037 	ldwio	r2,0(r2)
 2002688:	e0bffa05 	stb	r2,-24(fp)
            szBuf[i] = Value8;
 200268c:	e0bff717 	ldw	r2,-36(fp)
 2002690:	1007883a 	mov	r3,r2
 2002694:	e0bffd17 	ldw	r2,-12(fp)
 2002698:	1887883a 	add	r3,r3,r2
 200269c:	e0bffa03 	ldbu	r2,-24(fp)
 20026a0:	18800005 	stb	r2,0(r3)
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
    
    if (Status & SPI_STATUS_FLAG_DONE){
        for(i=0;i<nByteNum;i++){
 20026a4:	e0bff717 	ldw	r2,-36(fp)
 20026a8:	10800044 	addi	r2,r2,1
 20026ac:	e0bff715 	stw	r2,-36(fp)
 20026b0:	e0fffe03 	ldbu	r3,-8(fp)
 20026b4:	e0bff717 	ldw	r2,-36(fp)
 20026b8:	10fff116 	blt	r2,r3,2002680 <SPI_MultipleRead+0xf4>
            Value8 = IORD(spi_base, SPI_REG_DATA);
            szBuf[i] = Value8;
        }
        return TRUE;
 20026bc:	00800044 	movi	r2,1
 20026c0:	e0bfff15 	stw	r2,-4(fp)
 20026c4:	00000106 	br	20026cc <SPI_MultipleRead+0x140>
    }        
    return FALSE;
 20026c8:	e03fff15 	stw	zero,-4(fp)
 20026cc:	e0bfff17 	ldw	r2,-4(fp)
}
 20026d0:	e037883a 	mov	sp,fp
 20026d4:	dfc00117 	ldw	ra,4(sp)
 20026d8:	df000017 	ldw	fp,0(sp)
 20026dc:	dec00204 	addi	sp,sp,8
 20026e0:	f800283a 	ret

020026e4 <SPI_Read>:

bool SPI_Read(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 *pBuf){
 20026e4:	defffb04 	addi	sp,sp,-20
 20026e8:	dfc00415 	stw	ra,16(sp)
 20026ec:	df000315 	stw	fp,12(sp)
 20026f0:	df000304 	addi	fp,sp,12
 20026f4:	e13ffd15 	stw	r4,-12(fp)
 20026f8:	e1bfff15 	stw	r6,-4(fp)
 20026fc:	e17ffe05 	stb	r5,-8(fp)
    return SPI_MultipleRead(spi_base, RegIndex, pBuf, 1);
 2002700:	e17ffe03 	ldbu	r5,-8(fp)
 2002704:	e13ffd17 	ldw	r4,-12(fp)
 2002708:	e1bfff17 	ldw	r6,-4(fp)
 200270c:	01c00044 	movi	r7,1
 2002710:	200258c0 	call	200258c <SPI_MultipleRead>
}
 2002714:	e037883a 	mov	sp,fp
 2002718:	dfc00117 	ldw	ra,4(sp)
 200271c:	df000017 	ldw	fp,0(sp)
 2002720:	dec00204 	addi	sp,sp,8
 2002724:	f800283a 	ret

02002728 <__extendsfdf2>:
 2002728:	defff904 	addi	sp,sp,-28
 200272c:	d9000115 	stw	r4,4(sp)
 2002730:	d9400204 	addi	r5,sp,8
 2002734:	d9000104 	addi	r4,sp,4
 2002738:	dfc00615 	stw	ra,24(sp)
 200273c:	20032540 	call	2003254 <__unpack_f>
 2002740:	d9c00517 	ldw	r7,20(sp)
 2002744:	0011883a 	mov	r8,zero
 2002748:	400697ba 	slli	r3,r8,30
 200274c:	3812d0ba 	srli	r9,r7,2
 2002750:	380497ba 	slli	r2,r7,30
 2002754:	d9000217 	ldw	r4,8(sp)
 2002758:	d9400317 	ldw	r5,12(sp)
 200275c:	d9800417 	ldw	r6,16(sp)
 2002760:	48c6b03a 	or	r3,r9,r3
 2002764:	100f883a 	mov	r7,r2
 2002768:	d8c00015 	stw	r3,0(sp)
 200276c:	2002e580 	call	2002e58 <__make_dp>
 2002770:	dfc00617 	ldw	ra,24(sp)
 2002774:	dec00704 	addi	sp,sp,28
 2002778:	f800283a 	ret

0200277c <__floatunsisf>:
 200277c:	defff904 	addi	sp,sp,-28
 2002780:	dc400515 	stw	r17,20(sp)
 2002784:	dc000415 	stw	r16,16(sp)
 2002788:	dfc00615 	stw	ra,24(sp)
 200278c:	04400784 	movi	r17,30
 2002790:	2021883a 	mov	r16,r4
 2002794:	d8000115 	stw	zero,4(sp)
 2002798:	2000091e 	bne	r4,zero,20027c0 <__floatunsisf+0x44>
 200279c:	00800084 	movi	r2,2
 20027a0:	d8800015 	stw	r2,0(sp)
 20027a4:	d809883a 	mov	r4,sp
 20027a8:	20030f40 	call	20030f4 <__pack_f>
 20027ac:	dfc00617 	ldw	ra,24(sp)
 20027b0:	dc400517 	ldw	r17,20(sp)
 20027b4:	dc000417 	ldw	r16,16(sp)
 20027b8:	dec00704 	addi	sp,sp,28
 20027bc:	f800283a 	ret
 20027c0:	008000c4 	movi	r2,3
 20027c4:	d9000315 	stw	r4,12(sp)
 20027c8:	d8800015 	stw	r2,0(sp)
 20027cc:	dc400215 	stw	r17,8(sp)
 20027d0:	20030740 	call	2003074 <__clzsi2>
 20027d4:	117fffc4 	addi	r5,r2,-1
 20027d8:	0147c83a 	sub	r3,zero,r5
 20027dc:	00800044 	movi	r2,1
 20027e0:	10c4983a 	sll	r2,r2,r3
 20027e4:	80c6d83a 	srl	r3,r16,r3
 20027e8:	8949c83a 	sub	r4,r17,r5
 20027ec:	10bfffc4 	addi	r2,r2,-1
 20027f0:	8084703a 	and	r2,r16,r2
 20027f4:	1004c03a 	cmpne	r2,r2,zero
 20027f8:	1886b03a 	or	r3,r3,r2
 20027fc:	28000c16 	blt	r5,zero,2002830 <__floatunsisf+0xb4>
 2002800:	8144983a 	sll	r2,r16,r5
 2002804:	8947c83a 	sub	r3,r17,r5
 2002808:	283fe626 	beq	r5,zero,20027a4 <__floatunsisf+0x28>
 200280c:	d809883a 	mov	r4,sp
 2002810:	d8800315 	stw	r2,12(sp)
 2002814:	d8c00215 	stw	r3,8(sp)
 2002818:	20030f40 	call	20030f4 <__pack_f>
 200281c:	dfc00617 	ldw	ra,24(sp)
 2002820:	dc400517 	ldw	r17,20(sp)
 2002824:	dc000417 	ldw	r16,16(sp)
 2002828:	dec00704 	addi	sp,sp,28
 200282c:	f800283a 	ret
 2002830:	d8c00315 	stw	r3,12(sp)
 2002834:	d9000215 	stw	r4,8(sp)
 2002838:	003fda06 	br	20027a4 <__floatunsisf+0x28>

0200283c <__muldf3>:
 200283c:	deffe004 	addi	sp,sp,-128
 2002840:	dc401815 	stw	r17,96(sp)
 2002844:	dc400404 	addi	r17,sp,16
 2002848:	2011883a 	mov	r8,r4
 200284c:	2813883a 	mov	r9,r5
 2002850:	dc001715 	stw	r16,92(sp)
 2002854:	d809883a 	mov	r4,sp
 2002858:	880b883a 	mov	r5,r17
 200285c:	dc000904 	addi	r16,sp,36
 2002860:	dfc01f15 	stw	ra,124(sp)
 2002864:	da400115 	stw	r9,4(sp)
 2002868:	d9c00315 	stw	r7,12(sp)
 200286c:	da000015 	stw	r8,0(sp)
 2002870:	d9800215 	stw	r6,8(sp)
 2002874:	ddc01e15 	stw	r23,120(sp)
 2002878:	dd801d15 	stw	r22,116(sp)
 200287c:	dd401c15 	stw	r21,112(sp)
 2002880:	dd001b15 	stw	r20,108(sp)
 2002884:	dcc01a15 	stw	r19,104(sp)
 2002888:	dc801915 	stw	r18,100(sp)
 200288c:	20036300 	call	2003630 <__unpack_d>
 2002890:	d9000204 	addi	r4,sp,8
 2002894:	800b883a 	mov	r5,r16
 2002898:	20036300 	call	2003630 <__unpack_d>
 200289c:	d9000417 	ldw	r4,16(sp)
 20028a0:	00800044 	movi	r2,1
 20028a4:	1100102e 	bgeu	r2,r4,20028e8 <__muldf3+0xac>
 20028a8:	d8c00917 	ldw	r3,36(sp)
 20028ac:	10c0062e 	bgeu	r2,r3,20028c8 <__muldf3+0x8c>
 20028b0:	00800104 	movi	r2,4
 20028b4:	20800a26 	beq	r4,r2,20028e0 <__muldf3+0xa4>
 20028b8:	1880cc26 	beq	r3,r2,2002bec <__muldf3+0x3b0>
 20028bc:	00800084 	movi	r2,2
 20028c0:	20800926 	beq	r4,r2,20028e8 <__muldf3+0xac>
 20028c4:	1880191e 	bne	r3,r2,200292c <__muldf3+0xf0>
 20028c8:	d8c00a17 	ldw	r3,40(sp)
 20028cc:	d8800517 	ldw	r2,20(sp)
 20028d0:	8009883a 	mov	r4,r16
 20028d4:	10c4c03a 	cmpne	r2,r2,r3
 20028d8:	d8800a15 	stw	r2,40(sp)
 20028dc:	00000706 	br	20028fc <__muldf3+0xc0>
 20028e0:	00800084 	movi	r2,2
 20028e4:	1880c326 	beq	r3,r2,2002bf4 <__muldf3+0x3b8>
 20028e8:	d8800517 	ldw	r2,20(sp)
 20028ec:	d8c00a17 	ldw	r3,40(sp)
 20028f0:	8809883a 	mov	r4,r17
 20028f4:	10c4c03a 	cmpne	r2,r2,r3
 20028f8:	d8800515 	stw	r2,20(sp)
 20028fc:	200331c0 	call	200331c <__pack_d>
 2002900:	dfc01f17 	ldw	ra,124(sp)
 2002904:	ddc01e17 	ldw	r23,120(sp)
 2002908:	dd801d17 	ldw	r22,116(sp)
 200290c:	dd401c17 	ldw	r21,112(sp)
 2002910:	dd001b17 	ldw	r20,108(sp)
 2002914:	dcc01a17 	ldw	r19,104(sp)
 2002918:	dc801917 	ldw	r18,100(sp)
 200291c:	dc401817 	ldw	r17,96(sp)
 2002920:	dc001717 	ldw	r16,92(sp)
 2002924:	dec02004 	addi	sp,sp,128
 2002928:	f800283a 	ret
 200292c:	dd800717 	ldw	r22,28(sp)
 2002930:	dc800c17 	ldw	r18,48(sp)
 2002934:	002b883a 	mov	r21,zero
 2002938:	0023883a 	mov	r17,zero
 200293c:	a80b883a 	mov	r5,r21
 2002940:	b00d883a 	mov	r6,r22
 2002944:	880f883a 	mov	r7,r17
 2002948:	ddc00817 	ldw	r23,32(sp)
 200294c:	dcc00d17 	ldw	r19,52(sp)
 2002950:	9009883a 	mov	r4,r18
 2002954:	2002fdc0 	call	2002fdc <__muldi3>
 2002958:	001b883a 	mov	r13,zero
 200295c:	680f883a 	mov	r7,r13
 2002960:	b009883a 	mov	r4,r22
 2002964:	000b883a 	mov	r5,zero
 2002968:	980d883a 	mov	r6,r19
 200296c:	b82d883a 	mov	r22,r23
 2002970:	002f883a 	mov	r23,zero
 2002974:	db401615 	stw	r13,88(sp)
 2002978:	d8801315 	stw	r2,76(sp)
 200297c:	d8c01415 	stw	r3,80(sp)
 2002980:	dcc01515 	stw	r19,84(sp)
 2002984:	2002fdc0 	call	2002fdc <__muldi3>
 2002988:	b00d883a 	mov	r6,r22
 200298c:	000b883a 	mov	r5,zero
 2002990:	9009883a 	mov	r4,r18
 2002994:	b80f883a 	mov	r7,r23
 2002998:	1021883a 	mov	r16,r2
 200299c:	1823883a 	mov	r17,r3
 20029a0:	2002fdc0 	call	2002fdc <__muldi3>
 20029a4:	8085883a 	add	r2,r16,r2
 20029a8:	140d803a 	cmpltu	r6,r2,r16
 20029ac:	88c7883a 	add	r3,r17,r3
 20029b0:	30cd883a 	add	r6,r6,r3
 20029b4:	1029883a 	mov	r20,r2
 20029b8:	302b883a 	mov	r21,r6
 20029bc:	da801317 	ldw	r10,76(sp)
 20029c0:	dac01417 	ldw	r11,80(sp)
 20029c4:	db001517 	ldw	r12,84(sp)
 20029c8:	db401617 	ldw	r13,88(sp)
 20029cc:	3440612e 	bgeu	r6,r17,2002b54 <__muldf3+0x318>
 20029d0:	0009883a 	mov	r4,zero
 20029d4:	5105883a 	add	r2,r10,r4
 20029d8:	128d803a 	cmpltu	r6,r2,r10
 20029dc:	5d07883a 	add	r3,r11,r20
 20029e0:	30cd883a 	add	r6,r6,r3
 20029e4:	0021883a 	mov	r16,zero
 20029e8:	04400044 	movi	r17,1
 20029ec:	1025883a 	mov	r18,r2
 20029f0:	3027883a 	mov	r19,r6
 20029f4:	32c06236 	bltu	r6,r11,2002b80 <__muldf3+0x344>
 20029f8:	59807a26 	beq	r11,r6,2002be4 <__muldf3+0x3a8>
 20029fc:	680b883a 	mov	r5,r13
 2002a00:	b80f883a 	mov	r7,r23
 2002a04:	6009883a 	mov	r4,r12
 2002a08:	b00d883a 	mov	r6,r22
 2002a0c:	2002fdc0 	call	2002fdc <__muldi3>
 2002a10:	1009883a 	mov	r4,r2
 2002a14:	000f883a 	mov	r7,zero
 2002a18:	1545883a 	add	r2,r2,r21
 2002a1c:	1111803a 	cmpltu	r8,r2,r4
 2002a20:	19c7883a 	add	r3,r3,r7
 2002a24:	40c7883a 	add	r3,r8,r3
 2002a28:	88cb883a 	add	r5,r17,r3
 2002a2c:	d8c00617 	ldw	r3,24(sp)
 2002a30:	8089883a 	add	r4,r16,r2
 2002a34:	d8800b17 	ldw	r2,44(sp)
 2002a38:	18c00104 	addi	r3,r3,4
 2002a3c:	240d803a 	cmpltu	r6,r4,r16
 2002a40:	10c7883a 	add	r3,r2,r3
 2002a44:	2013883a 	mov	r9,r4
 2002a48:	d8800a17 	ldw	r2,40(sp)
 2002a4c:	d9000517 	ldw	r4,20(sp)
 2002a50:	314d883a 	add	r6,r6,r5
 2002a54:	3015883a 	mov	r10,r6
 2002a58:	2088c03a 	cmpne	r4,r4,r2
 2002a5c:	00880034 	movhi	r2,8192
 2002a60:	10bfffc4 	addi	r2,r2,-1
 2002a64:	d9000f15 	stw	r4,60(sp)
 2002a68:	d8c01015 	stw	r3,64(sp)
 2002a6c:	1180162e 	bgeu	r2,r6,2002ac8 <__muldf3+0x28c>
 2002a70:	1811883a 	mov	r8,r3
 2002a74:	101f883a 	mov	r15,r2
 2002a78:	980497fa 	slli	r2,r19,31
 2002a7c:	9016d07a 	srli	r11,r18,1
 2002a80:	500697fa 	slli	r3,r10,31
 2002a84:	480cd07a 	srli	r6,r9,1
 2002a88:	500ed07a 	srli	r7,r10,1
 2002a8c:	12d6b03a 	or	r11,r2,r11
 2002a90:	00800044 	movi	r2,1
 2002a94:	198cb03a 	or	r6,r3,r6
 2002a98:	4888703a 	and	r4,r9,r2
 2002a9c:	9818d07a 	srli	r12,r19,1
 2002aa0:	001b883a 	mov	r13,zero
 2002aa4:	03a00034 	movhi	r14,32768
 2002aa8:	3013883a 	mov	r9,r6
 2002aac:	3815883a 	mov	r10,r7
 2002ab0:	4091883a 	add	r8,r8,r2
 2002ab4:	20000226 	beq	r4,zero,2002ac0 <__muldf3+0x284>
 2002ab8:	5b64b03a 	or	r18,r11,r13
 2002abc:	63a6b03a 	or	r19,r12,r14
 2002ac0:	7abfed36 	bltu	r15,r10,2002a78 <__muldf3+0x23c>
 2002ac4:	da001015 	stw	r8,64(sp)
 2002ac8:	00840034 	movhi	r2,4096
 2002acc:	10bfffc4 	addi	r2,r2,-1
 2002ad0:	12801436 	bltu	r2,r10,2002b24 <__muldf3+0x2e8>
 2002ad4:	da001017 	ldw	r8,64(sp)
 2002ad8:	101f883a 	mov	r15,r2
 2002adc:	4a45883a 	add	r2,r9,r9
 2002ae0:	124d803a 	cmpltu	r6,r2,r9
 2002ae4:	5287883a 	add	r3,r10,r10
 2002ae8:	9497883a 	add	r11,r18,r18
 2002aec:	5c8f803a 	cmpltu	r7,r11,r18
 2002af0:	9cd9883a 	add	r12,r19,r19
 2002af4:	01000044 	movi	r4,1
 2002af8:	30cd883a 	add	r6,r6,r3
 2002afc:	3b0f883a 	add	r7,r7,r12
 2002b00:	423fffc4 	addi	r8,r8,-1
 2002b04:	1013883a 	mov	r9,r2
 2002b08:	3015883a 	mov	r10,r6
 2002b0c:	111ab03a 	or	r13,r2,r4
 2002b10:	98003016 	blt	r19,zero,2002bd4 <__muldf3+0x398>
 2002b14:	5825883a 	mov	r18,r11
 2002b18:	3827883a 	mov	r19,r7
 2002b1c:	7abfef2e 	bgeu	r15,r10,2002adc <__muldf3+0x2a0>
 2002b20:	da001015 	stw	r8,64(sp)
 2002b24:	00803fc4 	movi	r2,255
 2002b28:	488e703a 	and	r7,r9,r2
 2002b2c:	00802004 	movi	r2,128
 2002b30:	0007883a 	mov	r3,zero
 2002b34:	0011883a 	mov	r8,zero
 2002b38:	38801826 	beq	r7,r2,2002b9c <__muldf3+0x360>
 2002b3c:	008000c4 	movi	r2,3
 2002b40:	d9000e04 	addi	r4,sp,56
 2002b44:	da801215 	stw	r10,72(sp)
 2002b48:	d8800e15 	stw	r2,56(sp)
 2002b4c:	da401115 	stw	r9,68(sp)
 2002b50:	003f6a06 	br	20028fc <__muldf3+0xc0>
 2002b54:	89802126 	beq	r17,r6,2002bdc <__muldf3+0x3a0>
 2002b58:	0009883a 	mov	r4,zero
 2002b5c:	5105883a 	add	r2,r10,r4
 2002b60:	128d803a 	cmpltu	r6,r2,r10
 2002b64:	5d07883a 	add	r3,r11,r20
 2002b68:	30cd883a 	add	r6,r6,r3
 2002b6c:	0021883a 	mov	r16,zero
 2002b70:	0023883a 	mov	r17,zero
 2002b74:	1025883a 	mov	r18,r2
 2002b78:	3027883a 	mov	r19,r6
 2002b7c:	32ff9e2e 	bgeu	r6,r11,20029f8 <__muldf3+0x1bc>
 2002b80:	00800044 	movi	r2,1
 2002b84:	8089883a 	add	r4,r16,r2
 2002b88:	240d803a 	cmpltu	r6,r4,r16
 2002b8c:	344d883a 	add	r6,r6,r17
 2002b90:	2021883a 	mov	r16,r4
 2002b94:	3023883a 	mov	r17,r6
 2002b98:	003f9806 	br	20029fc <__muldf3+0x1c0>
 2002b9c:	403fe71e 	bne	r8,zero,2002b3c <__muldf3+0x300>
 2002ba0:	01004004 	movi	r4,256
 2002ba4:	4904703a 	and	r2,r9,r4
 2002ba8:	10c4b03a 	or	r2,r2,r3
 2002bac:	103fe31e 	bne	r2,zero,2002b3c <__muldf3+0x300>
 2002bb0:	94c4b03a 	or	r2,r18,r19
 2002bb4:	103fe126 	beq	r2,zero,2002b3c <__muldf3+0x300>
 2002bb8:	49c5883a 	add	r2,r9,r7
 2002bbc:	1251803a 	cmpltu	r8,r2,r9
 2002bc0:	4291883a 	add	r8,r8,r10
 2002bc4:	013fc004 	movi	r4,-256
 2002bc8:	1112703a 	and	r9,r2,r4
 2002bcc:	4015883a 	mov	r10,r8
 2002bd0:	003fda06 	br	2002b3c <__muldf3+0x300>
 2002bd4:	6813883a 	mov	r9,r13
 2002bd8:	003fce06 	br	2002b14 <__muldf3+0x2d8>
 2002bdc:	143f7c36 	bltu	r2,r16,20029d0 <__muldf3+0x194>
 2002be0:	003fdd06 	br	2002b58 <__muldf3+0x31c>
 2002be4:	12bf852e 	bgeu	r2,r10,20029fc <__muldf3+0x1c0>
 2002be8:	003fe506 	br	2002b80 <__muldf3+0x344>
 2002bec:	00800084 	movi	r2,2
 2002bf0:	20bf351e 	bne	r4,r2,20028c8 <__muldf3+0x8c>
 2002bf4:	01008074 	movhi	r4,513
 2002bf8:	21166a04 	addi	r4,r4,22952
 2002bfc:	003f3f06 	br	20028fc <__muldf3+0xc0>

02002c00 <__divdf3>:
 2002c00:	deffed04 	addi	sp,sp,-76
 2002c04:	dcc01115 	stw	r19,68(sp)
 2002c08:	dcc00404 	addi	r19,sp,16
 2002c0c:	2011883a 	mov	r8,r4
 2002c10:	2813883a 	mov	r9,r5
 2002c14:	dc000e15 	stw	r16,56(sp)
 2002c18:	d809883a 	mov	r4,sp
 2002c1c:	980b883a 	mov	r5,r19
 2002c20:	dc000904 	addi	r16,sp,36
 2002c24:	dfc01215 	stw	ra,72(sp)
 2002c28:	da400115 	stw	r9,4(sp)
 2002c2c:	d9c00315 	stw	r7,12(sp)
 2002c30:	da000015 	stw	r8,0(sp)
 2002c34:	d9800215 	stw	r6,8(sp)
 2002c38:	dc801015 	stw	r18,64(sp)
 2002c3c:	dc400f15 	stw	r17,60(sp)
 2002c40:	20036300 	call	2003630 <__unpack_d>
 2002c44:	d9000204 	addi	r4,sp,8
 2002c48:	800b883a 	mov	r5,r16
 2002c4c:	20036300 	call	2003630 <__unpack_d>
 2002c50:	d9000417 	ldw	r4,16(sp)
 2002c54:	00800044 	movi	r2,1
 2002c58:	11000b2e 	bgeu	r2,r4,2002c88 <__divdf3+0x88>
 2002c5c:	d9400917 	ldw	r5,36(sp)
 2002c60:	1140762e 	bgeu	r2,r5,2002e3c <__divdf3+0x23c>
 2002c64:	d8800517 	ldw	r2,20(sp)
 2002c68:	d8c00a17 	ldw	r3,40(sp)
 2002c6c:	01800104 	movi	r6,4
 2002c70:	10c4f03a 	xor	r2,r2,r3
 2002c74:	d8800515 	stw	r2,20(sp)
 2002c78:	21800226 	beq	r4,r6,2002c84 <__divdf3+0x84>
 2002c7c:	00800084 	movi	r2,2
 2002c80:	2080141e 	bne	r4,r2,2002cd4 <__divdf3+0xd4>
 2002c84:	29000926 	beq	r5,r4,2002cac <__divdf3+0xac>
 2002c88:	9809883a 	mov	r4,r19
 2002c8c:	200331c0 	call	200331c <__pack_d>
 2002c90:	dfc01217 	ldw	ra,72(sp)
 2002c94:	dcc01117 	ldw	r19,68(sp)
 2002c98:	dc801017 	ldw	r18,64(sp)
 2002c9c:	dc400f17 	ldw	r17,60(sp)
 2002ca0:	dc000e17 	ldw	r16,56(sp)
 2002ca4:	dec01304 	addi	sp,sp,76
 2002ca8:	f800283a 	ret
 2002cac:	01008074 	movhi	r4,513
 2002cb0:	21166a04 	addi	r4,r4,22952
 2002cb4:	200331c0 	call	200331c <__pack_d>
 2002cb8:	dfc01217 	ldw	ra,72(sp)
 2002cbc:	dcc01117 	ldw	r19,68(sp)
 2002cc0:	dc801017 	ldw	r18,64(sp)
 2002cc4:	dc400f17 	ldw	r17,60(sp)
 2002cc8:	dc000e17 	ldw	r16,56(sp)
 2002ccc:	dec01304 	addi	sp,sp,76
 2002cd0:	f800283a 	ret
 2002cd4:	29805b26 	beq	r5,r6,2002e44 <__divdf3+0x244>
 2002cd8:	28802d26 	beq	r5,r2,2002d90 <__divdf3+0x190>
 2002cdc:	d8c00617 	ldw	r3,24(sp)
 2002ce0:	d8800b17 	ldw	r2,44(sp)
 2002ce4:	d9c00817 	ldw	r7,32(sp)
 2002ce8:	dc400d17 	ldw	r17,52(sp)
 2002cec:	188bc83a 	sub	r5,r3,r2
 2002cf0:	d9800717 	ldw	r6,28(sp)
 2002cf4:	dc000c17 	ldw	r16,48(sp)
 2002cf8:	d9400615 	stw	r5,24(sp)
 2002cfc:	3c403836 	bltu	r7,r17,2002de0 <__divdf3+0x1e0>
 2002d00:	89c03626 	beq	r17,r7,2002ddc <__divdf3+0x1dc>
 2002d04:	0015883a 	mov	r10,zero
 2002d08:	001d883a 	mov	r14,zero
 2002d0c:	02c40034 	movhi	r11,4096
 2002d10:	001f883a 	mov	r15,zero
 2002d14:	003f883a 	mov	ra,zero
 2002d18:	04800f44 	movi	r18,61
 2002d1c:	00000f06 	br	2002d5c <__divdf3+0x15c>
 2002d20:	601d883a 	mov	r14,r12
 2002d24:	681f883a 	mov	r15,r13
 2002d28:	400d883a 	mov	r6,r8
 2002d2c:	100f883a 	mov	r7,r2
 2002d30:	3191883a 	add	r8,r6,r6
 2002d34:	5808d07a 	srli	r4,r11,1
 2002d38:	4185803a 	cmpltu	r2,r8,r6
 2002d3c:	39d3883a 	add	r9,r7,r7
 2002d40:	28c6b03a 	or	r3,r5,r3
 2002d44:	1245883a 	add	r2,r2,r9
 2002d48:	1815883a 	mov	r10,r3
 2002d4c:	2017883a 	mov	r11,r4
 2002d50:	400d883a 	mov	r6,r8
 2002d54:	100f883a 	mov	r7,r2
 2002d58:	fc801726 	beq	ra,r18,2002db8 <__divdf3+0x1b8>
 2002d5c:	580a97fa 	slli	r5,r11,31
 2002d60:	5006d07a 	srli	r3,r10,1
 2002d64:	ffc00044 	addi	ra,ra,1
 2002d68:	3c7ff136 	bltu	r7,r17,2002d30 <__divdf3+0x130>
 2002d6c:	3411c83a 	sub	r8,r6,r16
 2002d70:	3205803a 	cmpltu	r2,r6,r8
 2002d74:	3c53c83a 	sub	r9,r7,r17
 2002d78:	7298b03a 	or	r12,r14,r10
 2002d7c:	7adab03a 	or	r13,r15,r11
 2002d80:	4885c83a 	sub	r2,r9,r2
 2002d84:	89ffe61e 	bne	r17,r7,2002d20 <__divdf3+0x120>
 2002d88:	343fe936 	bltu	r6,r16,2002d30 <__divdf3+0x130>
 2002d8c:	003fe406 	br	2002d20 <__divdf3+0x120>
 2002d90:	9809883a 	mov	r4,r19
 2002d94:	d9800415 	stw	r6,16(sp)
 2002d98:	200331c0 	call	200331c <__pack_d>
 2002d9c:	dfc01217 	ldw	ra,72(sp)
 2002da0:	dcc01117 	ldw	r19,68(sp)
 2002da4:	dc801017 	ldw	r18,64(sp)
 2002da8:	dc400f17 	ldw	r17,60(sp)
 2002dac:	dc000e17 	ldw	r16,56(sp)
 2002db0:	dec01304 	addi	sp,sp,76
 2002db4:	f800283a 	ret
 2002db8:	00803fc4 	movi	r2,255
 2002dbc:	7090703a 	and	r8,r14,r2
 2002dc0:	00802004 	movi	r2,128
 2002dc4:	0007883a 	mov	r3,zero
 2002dc8:	0013883a 	mov	r9,zero
 2002dcc:	40800d26 	beq	r8,r2,2002e04 <__divdf3+0x204>
 2002dd0:	dbc00815 	stw	r15,32(sp)
 2002dd4:	db800715 	stw	r14,28(sp)
 2002dd8:	003fab06 	br	2002c88 <__divdf3+0x88>
 2002ddc:	343fc92e 	bgeu	r6,r16,2002d04 <__divdf3+0x104>
 2002de0:	3185883a 	add	r2,r6,r6
 2002de4:	1189803a 	cmpltu	r4,r2,r6
 2002de8:	39c7883a 	add	r3,r7,r7
 2002dec:	20c9883a 	add	r4,r4,r3
 2002df0:	297fffc4 	addi	r5,r5,-1
 2002df4:	100d883a 	mov	r6,r2
 2002df8:	200f883a 	mov	r7,r4
 2002dfc:	d9400615 	stw	r5,24(sp)
 2002e00:	003fc006 	br	2002d04 <__divdf3+0x104>
 2002e04:	483ff21e 	bne	r9,zero,2002dd0 <__divdf3+0x1d0>
 2002e08:	01004004 	movi	r4,256
 2002e0c:	7104703a 	and	r2,r14,r4
 2002e10:	10c4b03a 	or	r2,r2,r3
 2002e14:	103fee1e 	bne	r2,zero,2002dd0 <__divdf3+0x1d0>
 2002e18:	31c4b03a 	or	r2,r6,r7
 2002e1c:	103fec26 	beq	r2,zero,2002dd0 <__divdf3+0x1d0>
 2002e20:	7205883a 	add	r2,r14,r8
 2002e24:	1391803a 	cmpltu	r8,r2,r14
 2002e28:	43d1883a 	add	r8,r8,r15
 2002e2c:	013fc004 	movi	r4,-256
 2002e30:	111c703a 	and	r14,r2,r4
 2002e34:	401f883a 	mov	r15,r8
 2002e38:	003fe506 	br	2002dd0 <__divdf3+0x1d0>
 2002e3c:	8009883a 	mov	r4,r16
 2002e40:	003f9206 	br	2002c8c <__divdf3+0x8c>
 2002e44:	9809883a 	mov	r4,r19
 2002e48:	d8000715 	stw	zero,28(sp)
 2002e4c:	d8000815 	stw	zero,32(sp)
 2002e50:	d8000615 	stw	zero,24(sp)
 2002e54:	003f8d06 	br	2002c8c <__divdf3+0x8c>

02002e58 <__make_dp>:
 2002e58:	defff904 	addi	sp,sp,-28
 2002e5c:	d8c00717 	ldw	r3,28(sp)
 2002e60:	d9000015 	stw	r4,0(sp)
 2002e64:	d809883a 	mov	r4,sp
 2002e68:	dfc00515 	stw	ra,20(sp)
 2002e6c:	d9c00615 	stw	r7,24(sp)
 2002e70:	d9400115 	stw	r5,4(sp)
 2002e74:	d9800215 	stw	r6,8(sp)
 2002e78:	d8c00415 	stw	r3,16(sp)
 2002e7c:	d9c00315 	stw	r7,12(sp)
 2002e80:	200331c0 	call	200331c <__pack_d>
 2002e84:	dfc00517 	ldw	ra,20(sp)
 2002e88:	dec00704 	addi	sp,sp,28
 2002e8c:	f800283a 	ret

02002e90 <udivmodsi4>:
 2002e90:	29001b2e 	bgeu	r5,r4,2002f00 <udivmodsi4+0x70>
 2002e94:	28001a16 	blt	r5,zero,2002f00 <udivmodsi4+0x70>
 2002e98:	00800044 	movi	r2,1
 2002e9c:	0007883a 	mov	r3,zero
 2002ea0:	01c007c4 	movi	r7,31
 2002ea4:	00000306 	br	2002eb4 <udivmodsi4+0x24>
 2002ea8:	19c01326 	beq	r3,r7,2002ef8 <udivmodsi4+0x68>
 2002eac:	18c00044 	addi	r3,r3,1
 2002eb0:	28000416 	blt	r5,zero,2002ec4 <udivmodsi4+0x34>
 2002eb4:	294b883a 	add	r5,r5,r5
 2002eb8:	1085883a 	add	r2,r2,r2
 2002ebc:	293ffa36 	bltu	r5,r4,2002ea8 <udivmodsi4+0x18>
 2002ec0:	10000d26 	beq	r2,zero,2002ef8 <udivmodsi4+0x68>
 2002ec4:	0007883a 	mov	r3,zero
 2002ec8:	21400236 	bltu	r4,r5,2002ed4 <udivmodsi4+0x44>
 2002ecc:	2149c83a 	sub	r4,r4,r5
 2002ed0:	1886b03a 	or	r3,r3,r2
 2002ed4:	1004d07a 	srli	r2,r2,1
 2002ed8:	280ad07a 	srli	r5,r5,1
 2002edc:	103ffa1e 	bne	r2,zero,2002ec8 <udivmodsi4+0x38>
 2002ee0:	30000226 	beq	r6,zero,2002eec <udivmodsi4+0x5c>
 2002ee4:	2005883a 	mov	r2,r4
 2002ee8:	f800283a 	ret
 2002eec:	1809883a 	mov	r4,r3
 2002ef0:	2005883a 	mov	r2,r4
 2002ef4:	f800283a 	ret
 2002ef8:	0007883a 	mov	r3,zero
 2002efc:	003ff806 	br	2002ee0 <udivmodsi4+0x50>
 2002f00:	00800044 	movi	r2,1
 2002f04:	0007883a 	mov	r3,zero
 2002f08:	003fef06 	br	2002ec8 <udivmodsi4+0x38>

02002f0c <__divsi3>:
 2002f0c:	defffe04 	addi	sp,sp,-8
 2002f10:	dc000015 	stw	r16,0(sp)
 2002f14:	dfc00115 	stw	ra,4(sp)
 2002f18:	0021883a 	mov	r16,zero
 2002f1c:	20000c16 	blt	r4,zero,2002f50 <__divsi3+0x44>
 2002f20:	000d883a 	mov	r6,zero
 2002f24:	28000e16 	blt	r5,zero,2002f60 <__divsi3+0x54>
 2002f28:	2002e900 	call	2002e90 <udivmodsi4>
 2002f2c:	1007883a 	mov	r3,r2
 2002f30:	8005003a 	cmpeq	r2,r16,zero
 2002f34:	1000011e 	bne	r2,zero,2002f3c <__divsi3+0x30>
 2002f38:	00c7c83a 	sub	r3,zero,r3
 2002f3c:	1805883a 	mov	r2,r3
 2002f40:	dfc00117 	ldw	ra,4(sp)
 2002f44:	dc000017 	ldw	r16,0(sp)
 2002f48:	dec00204 	addi	sp,sp,8
 2002f4c:	f800283a 	ret
 2002f50:	0109c83a 	sub	r4,zero,r4
 2002f54:	04000044 	movi	r16,1
 2002f58:	000d883a 	mov	r6,zero
 2002f5c:	283ff20e 	bge	r5,zero,2002f28 <__divsi3+0x1c>
 2002f60:	014bc83a 	sub	r5,zero,r5
 2002f64:	8021003a 	cmpeq	r16,r16,zero
 2002f68:	003fef06 	br	2002f28 <__divsi3+0x1c>

02002f6c <__modsi3>:
 2002f6c:	deffff04 	addi	sp,sp,-4
 2002f70:	dfc00015 	stw	ra,0(sp)
 2002f74:	01800044 	movi	r6,1
 2002f78:	2807883a 	mov	r3,r5
 2002f7c:	20000416 	blt	r4,zero,2002f90 <__modsi3+0x24>
 2002f80:	28000c16 	blt	r5,zero,2002fb4 <__modsi3+0x48>
 2002f84:	dfc00017 	ldw	ra,0(sp)
 2002f88:	dec00104 	addi	sp,sp,4
 2002f8c:	2002e901 	jmpi	2002e90 <udivmodsi4>
 2002f90:	0109c83a 	sub	r4,zero,r4
 2002f94:	28000b16 	blt	r5,zero,2002fc4 <__modsi3+0x58>
 2002f98:	180b883a 	mov	r5,r3
 2002f9c:	01800044 	movi	r6,1
 2002fa0:	2002e900 	call	2002e90 <udivmodsi4>
 2002fa4:	0085c83a 	sub	r2,zero,r2
 2002fa8:	dfc00017 	ldw	ra,0(sp)
 2002fac:	dec00104 	addi	sp,sp,4
 2002fb0:	f800283a 	ret
 2002fb4:	014bc83a 	sub	r5,zero,r5
 2002fb8:	dfc00017 	ldw	ra,0(sp)
 2002fbc:	dec00104 	addi	sp,sp,4
 2002fc0:	2002e901 	jmpi	2002e90 <udivmodsi4>
 2002fc4:	0147c83a 	sub	r3,zero,r5
 2002fc8:	003ff306 	br	2002f98 <__modsi3+0x2c>

02002fcc <__udivsi3>:
 2002fcc:	000d883a 	mov	r6,zero
 2002fd0:	2002e901 	jmpi	2002e90 <udivmodsi4>

02002fd4 <__umodsi3>:
 2002fd4:	01800044 	movi	r6,1
 2002fd8:	2002e901 	jmpi	2002e90 <udivmodsi4>

02002fdc <__muldi3>:
 2002fdc:	2011883a 	mov	r8,r4
 2002fe0:	427fffcc 	andi	r9,r8,65535
 2002fe4:	4018d43a 	srli	r12,r8,16
 2002fe8:	32bfffcc 	andi	r10,r6,65535
 2002fec:	3016d43a 	srli	r11,r6,16
 2002ff0:	4a85383a 	mul	r2,r9,r10
 2002ff4:	6295383a 	mul	r10,r12,r10
 2002ff8:	4ad3383a 	mul	r9,r9,r11
 2002ffc:	113fffcc 	andi	r4,r2,65535
 2003000:	1004d43a 	srli	r2,r2,16
 2003004:	4a93883a 	add	r9,r9,r10
 2003008:	3807883a 	mov	r3,r7
 200300c:	1245883a 	add	r2,r2,r9
 2003010:	280f883a 	mov	r7,r5
 2003014:	180b883a 	mov	r5,r3
 2003018:	1006943a 	slli	r3,r2,16
 200301c:	defffd04 	addi	sp,sp,-12
 2003020:	dc800215 	stw	r18,8(sp)
 2003024:	1907883a 	add	r3,r3,r4
 2003028:	dc400115 	stw	r17,4(sp)
 200302c:	dc000015 	stw	r16,0(sp)
 2003030:	4165383a 	mul	r18,r8,r5
 2003034:	31e3383a 	mul	r17,r6,r7
 2003038:	1012d43a 	srli	r9,r2,16
 200303c:	62d9383a 	mul	r12,r12,r11
 2003040:	181f883a 	mov	r15,r3
 2003044:	1280022e 	bgeu	r2,r10,2003050 <__muldi3+0x74>
 2003048:	00800074 	movhi	r2,1
 200304c:	6099883a 	add	r12,r12,r2
 2003050:	624d883a 	add	r6,r12,r9
 2003054:	9187883a 	add	r3,r18,r6
 2003058:	88c7883a 	add	r3,r17,r3
 200305c:	7805883a 	mov	r2,r15
 2003060:	dc800217 	ldw	r18,8(sp)
 2003064:	dc400117 	ldw	r17,4(sp)
 2003068:	dc000017 	ldw	r16,0(sp)
 200306c:	dec00304 	addi	sp,sp,12
 2003070:	f800283a 	ret

02003074 <__clzsi2>:
 2003074:	00bfffd4 	movui	r2,65535
 2003078:	11000e36 	bltu	r2,r4,20030b4 <__clzsi2+0x40>
 200307c:	00803fc4 	movi	r2,255
 2003080:	01400204 	movi	r5,8
 2003084:	0007883a 	mov	r3,zero
 2003088:	11001036 	bltu	r2,r4,20030cc <__clzsi2+0x58>
 200308c:	000b883a 	mov	r5,zero
 2003090:	20c6d83a 	srl	r3,r4,r3
 2003094:	00808074 	movhi	r2,513
 2003098:	10966f04 	addi	r2,r2,22972
 200309c:	1887883a 	add	r3,r3,r2
 20030a0:	18800003 	ldbu	r2,0(r3)
 20030a4:	00c00804 	movi	r3,32
 20030a8:	2885883a 	add	r2,r5,r2
 20030ac:	1885c83a 	sub	r2,r3,r2
 20030b0:	f800283a 	ret
 20030b4:	01400404 	movi	r5,16
 20030b8:	00804034 	movhi	r2,256
 20030bc:	10bfffc4 	addi	r2,r2,-1
 20030c0:	2807883a 	mov	r3,r5
 20030c4:	113ff22e 	bgeu	r2,r4,2003090 <__clzsi2+0x1c>
 20030c8:	01400604 	movi	r5,24
 20030cc:	2807883a 	mov	r3,r5
 20030d0:	20c6d83a 	srl	r3,r4,r3
 20030d4:	00808074 	movhi	r2,513
 20030d8:	10966f04 	addi	r2,r2,22972
 20030dc:	1887883a 	add	r3,r3,r2
 20030e0:	18800003 	ldbu	r2,0(r3)
 20030e4:	00c00804 	movi	r3,32
 20030e8:	2885883a 	add	r2,r5,r2
 20030ec:	1885c83a 	sub	r2,r3,r2
 20030f0:	f800283a 	ret

020030f4 <__pack_f>:
 20030f4:	20c00017 	ldw	r3,0(r4)
 20030f8:	01c00044 	movi	r7,1
 20030fc:	21800317 	ldw	r6,12(r4)
 2003100:	21400117 	ldw	r5,4(r4)
 2003104:	38c02d2e 	bgeu	r7,r3,20031bc <__pack_f+0xc8>
 2003108:	00800104 	movi	r2,4
 200310c:	18802826 	beq	r3,r2,20031b0 <__pack_f+0xbc>
 2003110:	00800084 	movi	r2,2
 2003114:	18800126 	beq	r3,r2,200311c <__pack_f+0x28>
 2003118:	3000101e 	bne	r6,zero,200315c <__pack_f+0x68>
 200311c:	000d883a 	mov	r6,zero
 2003120:	0007883a 	mov	r3,zero
 2003124:	19003fcc 	andi	r4,r3,255
 2003128:	200895fa 	slli	r4,r4,23
 200312c:	00c02034 	movhi	r3,128
 2003130:	18ffffc4 	addi	r3,r3,-1
 2003134:	30c6703a 	and	r3,r6,r3
 2003138:	10a0002c 	andhi	r2,r2,32768
 200313c:	10c4b03a 	or	r2,r2,r3
 2003140:	280a97fa 	slli	r5,r5,31
 2003144:	1104b03a 	or	r2,r2,r4
 2003148:	00e00034 	movhi	r3,32768
 200314c:	18ffffc4 	addi	r3,r3,-1
 2003150:	10c4703a 	and	r2,r2,r3
 2003154:	1144b03a 	or	r2,r2,r5
 2003158:	f800283a 	ret
 200315c:	21000217 	ldw	r4,8(r4)
 2003160:	00bfe084 	movi	r2,-126
 2003164:	20801b16 	blt	r4,r2,20031d4 <__pack_f+0xe0>
 2003168:	00801fc4 	movi	r2,127
 200316c:	11001016 	blt	r2,r4,20031b0 <__pack_f+0xbc>
 2003170:	308e703a 	and	r7,r6,r2
 2003174:	2087883a 	add	r3,r4,r2
 2003178:	00801004 	movi	r2,64
 200317c:	38800526 	beq	r7,r2,2003194 <__pack_f+0xa0>
 2003180:	31800fc4 	addi	r6,r6,63
 2003184:	30000716 	blt	r6,zero,20031a4 <__pack_f+0xb0>
 2003188:	300490ba 	slli	r2,r6,2
 200318c:	100cd27a 	srli	r6,r2,9
 2003190:	003fe406 	br	2003124 <__pack_f+0x30>
 2003194:	3080200c 	andi	r2,r6,128
 2003198:	103ffa26 	beq	r2,zero,2003184 <__pack_f+0x90>
 200319c:	31cd883a 	add	r6,r6,r7
 20031a0:	003ff806 	br	2003184 <__pack_f+0x90>
 20031a4:	300cd07a 	srli	r6,r6,1
 20031a8:	18c00044 	addi	r3,r3,1
 20031ac:	003ff606 	br	2003188 <__pack_f+0x94>
 20031b0:	000d883a 	mov	r6,zero
 20031b4:	00ffffc4 	movi	r3,-1
 20031b8:	003fda06 	br	2003124 <__pack_f+0x30>
 20031bc:	31800434 	orhi	r6,r6,16
 20031c0:	00802034 	movhi	r2,128
 20031c4:	10bfffc4 	addi	r2,r2,-1
 20031c8:	308c703a 	and	r6,r6,r2
 20031cc:	00ffffc4 	movi	r3,-1
 20031d0:	003fd406 	br	2003124 <__pack_f+0x30>
 20031d4:	1109c83a 	sub	r4,r2,r4
 20031d8:	00800644 	movi	r2,25
 20031dc:	11001216 	blt	r2,r4,2003228 <__pack_f+0x134>
 20031e0:	3904983a 	sll	r2,r7,r4
 20031e4:	3106d83a 	srl	r3,r6,r4
 20031e8:	10bfffc4 	addi	r2,r2,-1
 20031ec:	3084703a 	and	r2,r6,r2
 20031f0:	1004c03a 	cmpne	r2,r2,zero
 20031f4:	1886b03a 	or	r3,r3,r2
 20031f8:	19001fcc 	andi	r4,r3,127
 20031fc:	00801004 	movi	r2,64
 2003200:	20800c26 	beq	r4,r2,2003234 <__pack_f+0x140>
 2003204:	18c00fc4 	addi	r3,r3,63
 2003208:	00900034 	movhi	r2,16384
 200320c:	10bfffc4 	addi	r2,r2,-1
 2003210:	180cd1fa 	srli	r6,r3,7
 2003214:	10c7803a 	cmpltu	r3,r2,r3
 2003218:	00802034 	movhi	r2,128
 200321c:	10bfffc4 	addi	r2,r2,-1
 2003220:	308c703a 	and	r6,r6,r2
 2003224:	003fbf06 	br	2003124 <__pack_f+0x30>
 2003228:	0007883a 	mov	r3,zero
 200322c:	000d883a 	mov	r6,zero
 2003230:	003ff906 	br	2003218 <__pack_f+0x124>
 2003234:	1880200c 	andi	r2,r3,128
 2003238:	10000126 	beq	r2,zero,2003240 <__pack_f+0x14c>
 200323c:	1907883a 	add	r3,r3,r4
 2003240:	180cd1fa 	srli	r6,r3,7
 2003244:	00900034 	movhi	r2,16384
 2003248:	10bfffc4 	addi	r2,r2,-1
 200324c:	10c7803a 	cmpltu	r3,r2,r3
 2003250:	003ff106 	br	2003218 <__pack_f+0x124>

02003254 <__unpack_f>:
 2003254:	21800017 	ldw	r6,0(r4)
 2003258:	00c02034 	movhi	r3,128
 200325c:	18ffffc4 	addi	r3,r3,-1
 2003260:	3004d5fa 	srli	r2,r6,23
 2003264:	3008d7fa 	srli	r4,r6,31
 2003268:	30ce703a 	and	r7,r6,r3
 200326c:	10c03fcc 	andi	r3,r2,255
 2003270:	29000115 	stw	r4,4(r5)
 2003274:	1800131e 	bne	r3,zero,20032c4 <__unpack_f+0x70>
 2003278:	38000f26 	beq	r7,zero,20032b8 <__unpack_f+0x64>
 200327c:	380691fa 	slli	r3,r7,7
 2003280:	01bfe084 	movi	r6,-126
 2003284:	008000c4 	movi	r2,3
 2003288:	01100034 	movhi	r4,16384
 200328c:	213fffc4 	addi	r4,r4,-1
 2003290:	28800015 	stw	r2,0(r5)
 2003294:	29800215 	stw	r6,8(r5)
 2003298:	20c00536 	bltu	r4,r3,20032b0 <__unpack_f+0x5c>
 200329c:	3005883a 	mov	r2,r6
 20032a0:	18c7883a 	add	r3,r3,r3
 20032a4:	10bfffc4 	addi	r2,r2,-1
 20032a8:	20fffd2e 	bgeu	r4,r3,20032a0 <__unpack_f+0x4c>
 20032ac:	28800215 	stw	r2,8(r5)
 20032b0:	28c00315 	stw	r3,12(r5)
 20032b4:	f800283a 	ret
 20032b8:	00800084 	movi	r2,2
 20032bc:	28800015 	stw	r2,0(r5)
 20032c0:	f800283a 	ret
 20032c4:	00803fc4 	movi	r2,255
 20032c8:	18800826 	beq	r3,r2,20032ec <__unpack_f+0x98>
 20032cc:	380491fa 	slli	r2,r7,7
 20032d0:	18ffe044 	addi	r3,r3,-127
 20032d4:	28c00215 	stw	r3,8(r5)
 20032d8:	10900034 	orhi	r2,r2,16384
 20032dc:	28800315 	stw	r2,12(r5)
 20032e0:	008000c4 	movi	r2,3
 20032e4:	28800015 	stw	r2,0(r5)
 20032e8:	f800283a 	ret
 20032ec:	3800031e 	bne	r7,zero,20032fc <__unpack_f+0xa8>
 20032f0:	00800104 	movi	r2,4
 20032f4:	28800015 	stw	r2,0(r5)
 20032f8:	f800283a 	ret
 20032fc:	3080042c 	andhi	r2,r6,16
 2003300:	10000426 	beq	r2,zero,2003314 <__unpack_f+0xc0>
 2003304:	00800044 	movi	r2,1
 2003308:	28800015 	stw	r2,0(r5)
 200330c:	29c00315 	stw	r7,12(r5)
 2003310:	f800283a 	ret
 2003314:	28000015 	stw	zero,0(r5)
 2003318:	003ffc06 	br	200330c <__unpack_f+0xb8>

0200331c <__pack_d>:
 200331c:	20c00017 	ldw	r3,0(r4)
 2003320:	defffd04 	addi	sp,sp,-12
 2003324:	dc000015 	stw	r16,0(sp)
 2003328:	dc800215 	stw	r18,8(sp)
 200332c:	dc400115 	stw	r17,4(sp)
 2003330:	00800044 	movi	r2,1
 2003334:	22000317 	ldw	r8,12(r4)
 2003338:	001f883a 	mov	r15,zero
 200333c:	22400417 	ldw	r9,16(r4)
 2003340:	24000117 	ldw	r16,4(r4)
 2003344:	10c0552e 	bgeu	r2,r3,200349c <__pack_d+0x180>
 2003348:	00800104 	movi	r2,4
 200334c:	18804f26 	beq	r3,r2,200348c <__pack_d+0x170>
 2003350:	00800084 	movi	r2,2
 2003354:	18800226 	beq	r3,r2,2003360 <__pack_d+0x44>
 2003358:	4244b03a 	or	r2,r8,r9
 200335c:	10001a1e 	bne	r2,zero,20033c8 <__pack_d+0xac>
 2003360:	000d883a 	mov	r6,zero
 2003364:	000f883a 	mov	r7,zero
 2003368:	0011883a 	mov	r8,zero
 200336c:	00800434 	movhi	r2,16
 2003370:	10bfffc4 	addi	r2,r2,-1
 2003374:	301d883a 	mov	r14,r6
 2003378:	3884703a 	and	r2,r7,r2
 200337c:	400a953a 	slli	r5,r8,20
 2003380:	79bffc2c 	andhi	r6,r15,65520
 2003384:	308cb03a 	or	r6,r6,r2
 2003388:	00e00434 	movhi	r3,32784
 200338c:	18ffffc4 	addi	r3,r3,-1
 2003390:	800497fa 	slli	r2,r16,31
 2003394:	30c6703a 	and	r3,r6,r3
 2003398:	1946b03a 	or	r3,r3,r5
 200339c:	01600034 	movhi	r5,32768
 20033a0:	297fffc4 	addi	r5,r5,-1
 20033a4:	194a703a 	and	r5,r3,r5
 20033a8:	288ab03a 	or	r5,r5,r2
 20033ac:	2807883a 	mov	r3,r5
 20033b0:	7005883a 	mov	r2,r14
 20033b4:	dc800217 	ldw	r18,8(sp)
 20033b8:	dc400117 	ldw	r17,4(sp)
 20033bc:	dc000017 	ldw	r16,0(sp)
 20033c0:	dec00304 	addi	sp,sp,12
 20033c4:	f800283a 	ret
 20033c8:	21000217 	ldw	r4,8(r4)
 20033cc:	00bf0084 	movi	r2,-1022
 20033d0:	20803f16 	blt	r4,r2,20034d0 <__pack_d+0x1b4>
 20033d4:	0080ffc4 	movi	r2,1023
 20033d8:	11002c16 	blt	r2,r4,200348c <__pack_d+0x170>
 20033dc:	00803fc4 	movi	r2,255
 20033e0:	408c703a 	and	r6,r8,r2
 20033e4:	00802004 	movi	r2,128
 20033e8:	0007883a 	mov	r3,zero
 20033ec:	000f883a 	mov	r7,zero
 20033f0:	2280ffc4 	addi	r10,r4,1023
 20033f4:	30801e26 	beq	r6,r2,2003470 <__pack_d+0x154>
 20033f8:	00801fc4 	movi	r2,127
 20033fc:	4089883a 	add	r4,r8,r2
 2003400:	220d803a 	cmpltu	r6,r4,r8
 2003404:	324d883a 	add	r6,r6,r9
 2003408:	2011883a 	mov	r8,r4
 200340c:	3013883a 	mov	r9,r6
 2003410:	00880034 	movhi	r2,8192
 2003414:	10bfffc4 	addi	r2,r2,-1
 2003418:	12400d36 	bltu	r2,r9,2003450 <__pack_d+0x134>
 200341c:	4804963a 	slli	r2,r9,24
 2003420:	400cd23a 	srli	r6,r8,8
 2003424:	480ed23a 	srli	r7,r9,8
 2003428:	013fffc4 	movi	r4,-1
 200342c:	118cb03a 	or	r6,r2,r6
 2003430:	01400434 	movhi	r5,16
 2003434:	297fffc4 	addi	r5,r5,-1
 2003438:	3104703a 	and	r2,r6,r4
 200343c:	3946703a 	and	r3,r7,r5
 2003440:	5201ffcc 	andi	r8,r10,2047
 2003444:	100d883a 	mov	r6,r2
 2003448:	180f883a 	mov	r7,r3
 200344c:	003fc706 	br	200336c <__pack_d+0x50>
 2003450:	480897fa 	slli	r4,r9,31
 2003454:	4004d07a 	srli	r2,r8,1
 2003458:	4806d07a 	srli	r3,r9,1
 200345c:	52800044 	addi	r10,r10,1
 2003460:	2084b03a 	or	r2,r4,r2
 2003464:	1011883a 	mov	r8,r2
 2003468:	1813883a 	mov	r9,r3
 200346c:	003feb06 	br	200341c <__pack_d+0x100>
 2003470:	383fe11e 	bne	r7,zero,20033f8 <__pack_d+0xdc>
 2003474:	01004004 	movi	r4,256
 2003478:	4104703a 	and	r2,r8,r4
 200347c:	10c4b03a 	or	r2,r2,r3
 2003480:	103fe326 	beq	r2,zero,2003410 <__pack_d+0xf4>
 2003484:	3005883a 	mov	r2,r6
 2003488:	003fdc06 	br	20033fc <__pack_d+0xe0>
 200348c:	000d883a 	mov	r6,zero
 2003490:	000f883a 	mov	r7,zero
 2003494:	0201ffc4 	movi	r8,2047
 2003498:	003fb406 	br	200336c <__pack_d+0x50>
 200349c:	0005883a 	mov	r2,zero
 20034a0:	00c00234 	movhi	r3,8
 20034a4:	408cb03a 	or	r6,r8,r2
 20034a8:	48ceb03a 	or	r7,r9,r3
 20034ac:	013fffc4 	movi	r4,-1
 20034b0:	01400434 	movhi	r5,16
 20034b4:	297fffc4 	addi	r5,r5,-1
 20034b8:	3104703a 	and	r2,r6,r4
 20034bc:	3946703a 	and	r3,r7,r5
 20034c0:	100d883a 	mov	r6,r2
 20034c4:	180f883a 	mov	r7,r3
 20034c8:	0201ffc4 	movi	r8,2047
 20034cc:	003fa706 	br	200336c <__pack_d+0x50>
 20034d0:	1109c83a 	sub	r4,r2,r4
 20034d4:	00800e04 	movi	r2,56
 20034d8:	11004316 	blt	r2,r4,20035e8 <__pack_d+0x2cc>
 20034dc:	21fff804 	addi	r7,r4,-32
 20034e0:	38004516 	blt	r7,zero,20035f8 <__pack_d+0x2dc>
 20034e4:	49d8d83a 	srl	r12,r9,r7
 20034e8:	001b883a 	mov	r13,zero
 20034ec:	0023883a 	mov	r17,zero
 20034f0:	01400044 	movi	r5,1
 20034f4:	0025883a 	mov	r18,zero
 20034f8:	38004716 	blt	r7,zero,2003618 <__pack_d+0x2fc>
 20034fc:	29d6983a 	sll	r11,r5,r7
 2003500:	0015883a 	mov	r10,zero
 2003504:	00bfffc4 	movi	r2,-1
 2003508:	5089883a 	add	r4,r10,r2
 200350c:	588b883a 	add	r5,r11,r2
 2003510:	228d803a 	cmpltu	r6,r4,r10
 2003514:	314b883a 	add	r5,r6,r5
 2003518:	4104703a 	and	r2,r8,r4
 200351c:	4946703a 	and	r3,r9,r5
 2003520:	10c4b03a 	or	r2,r2,r3
 2003524:	10000226 	beq	r2,zero,2003530 <__pack_d+0x214>
 2003528:	04400044 	movi	r17,1
 200352c:	0025883a 	mov	r18,zero
 2003530:	00803fc4 	movi	r2,255
 2003534:	644eb03a 	or	r7,r12,r17
 2003538:	3892703a 	and	r9,r7,r2
 200353c:	00802004 	movi	r2,128
 2003540:	6c90b03a 	or	r8,r13,r18
 2003544:	0015883a 	mov	r10,zero
 2003548:	48801626 	beq	r9,r2,20035a4 <__pack_d+0x288>
 200354c:	01001fc4 	movi	r4,127
 2003550:	3905883a 	add	r2,r7,r4
 2003554:	11cd803a 	cmpltu	r6,r2,r7
 2003558:	320d883a 	add	r6,r6,r8
 200355c:	100f883a 	mov	r7,r2
 2003560:	00840034 	movhi	r2,4096
 2003564:	10bfffc4 	addi	r2,r2,-1
 2003568:	3011883a 	mov	r8,r6
 200356c:	0007883a 	mov	r3,zero
 2003570:	11801b36 	bltu	r2,r6,20035e0 <__pack_d+0x2c4>
 2003574:	4004963a 	slli	r2,r8,24
 2003578:	3808d23a 	srli	r4,r7,8
 200357c:	400ad23a 	srli	r5,r8,8
 2003580:	1813883a 	mov	r9,r3
 2003584:	1108b03a 	or	r4,r2,r4
 2003588:	00bfffc4 	movi	r2,-1
 200358c:	00c00434 	movhi	r3,16
 2003590:	18ffffc4 	addi	r3,r3,-1
 2003594:	208c703a 	and	r6,r4,r2
 2003598:	28ce703a 	and	r7,r5,r3
 200359c:	4a01ffcc 	andi	r8,r9,2047
 20035a0:	003f7206 	br	200336c <__pack_d+0x50>
 20035a4:	503fe91e 	bne	r10,zero,200354c <__pack_d+0x230>
 20035a8:	01004004 	movi	r4,256
 20035ac:	3904703a 	and	r2,r7,r4
 20035b0:	0007883a 	mov	r3,zero
 20035b4:	10c4b03a 	or	r2,r2,r3
 20035b8:	10000626 	beq	r2,zero,20035d4 <__pack_d+0x2b8>
 20035bc:	3a45883a 	add	r2,r7,r9
 20035c0:	11cd803a 	cmpltu	r6,r2,r7
 20035c4:	320d883a 	add	r6,r6,r8
 20035c8:	100f883a 	mov	r7,r2
 20035cc:	3011883a 	mov	r8,r6
 20035d0:	0007883a 	mov	r3,zero
 20035d4:	00840034 	movhi	r2,4096
 20035d8:	10bfffc4 	addi	r2,r2,-1
 20035dc:	123fe52e 	bgeu	r2,r8,2003574 <__pack_d+0x258>
 20035e0:	00c00044 	movi	r3,1
 20035e4:	003fe306 	br	2003574 <__pack_d+0x258>
 20035e8:	0009883a 	mov	r4,zero
 20035ec:	0013883a 	mov	r9,zero
 20035f0:	000b883a 	mov	r5,zero
 20035f4:	003fe406 	br	2003588 <__pack_d+0x26c>
 20035f8:	4a47883a 	add	r3,r9,r9
 20035fc:	008007c4 	movi	r2,31
 2003600:	1105c83a 	sub	r2,r2,r4
 2003604:	1886983a 	sll	r3,r3,r2
 2003608:	4118d83a 	srl	r12,r8,r4
 200360c:	491ad83a 	srl	r13,r9,r4
 2003610:	1b18b03a 	or	r12,r3,r12
 2003614:	003fb506 	br	20034ec <__pack_d+0x1d0>
 2003618:	2806d07a 	srli	r3,r5,1
 200361c:	008007c4 	movi	r2,31
 2003620:	1105c83a 	sub	r2,r2,r4
 2003624:	1896d83a 	srl	r11,r3,r2
 2003628:	2914983a 	sll	r10,r5,r4
 200362c:	003fb506 	br	2003504 <__pack_d+0x1e8>

02003630 <__unpack_d>:
 2003630:	20c00117 	ldw	r3,4(r4)
 2003634:	22400017 	ldw	r9,0(r4)
 2003638:	00800434 	movhi	r2,16
 200363c:	10bfffc4 	addi	r2,r2,-1
 2003640:	1808d53a 	srli	r4,r3,20
 2003644:	180cd7fa 	srli	r6,r3,31
 2003648:	1894703a 	and	r10,r3,r2
 200364c:	2201ffcc 	andi	r8,r4,2047
 2003650:	281b883a 	mov	r13,r5
 2003654:	4817883a 	mov	r11,r9
 2003658:	29800115 	stw	r6,4(r5)
 200365c:	5019883a 	mov	r12,r10
 2003660:	40001e1e 	bne	r8,zero,20036dc <__unpack_d+0xac>
 2003664:	4a84b03a 	or	r2,r9,r10
 2003668:	10001926 	beq	r2,zero,20036d0 <__unpack_d+0xa0>
 200366c:	4804d63a 	srli	r2,r9,24
 2003670:	500c923a 	slli	r6,r10,8
 2003674:	013f0084 	movi	r4,-1022
 2003678:	00c40034 	movhi	r3,4096
 200367c:	18ffffc4 	addi	r3,r3,-1
 2003680:	118cb03a 	or	r6,r2,r6
 2003684:	008000c4 	movi	r2,3
 2003688:	480a923a 	slli	r5,r9,8
 200368c:	68800015 	stw	r2,0(r13)
 2003690:	69000215 	stw	r4,8(r13)
 2003694:	19800b36 	bltu	r3,r6,20036c4 <__unpack_d+0x94>
 2003698:	200f883a 	mov	r7,r4
 200369c:	1811883a 	mov	r8,r3
 20036a0:	2945883a 	add	r2,r5,r5
 20036a4:	1149803a 	cmpltu	r4,r2,r5
 20036a8:	3187883a 	add	r3,r6,r6
 20036ac:	20c9883a 	add	r4,r4,r3
 20036b0:	100b883a 	mov	r5,r2
 20036b4:	200d883a 	mov	r6,r4
 20036b8:	39ffffc4 	addi	r7,r7,-1
 20036bc:	413ff82e 	bgeu	r8,r4,20036a0 <__unpack_d+0x70>
 20036c0:	69c00215 	stw	r7,8(r13)
 20036c4:	69800415 	stw	r6,16(r13)
 20036c8:	69400315 	stw	r5,12(r13)
 20036cc:	f800283a 	ret
 20036d0:	00800084 	movi	r2,2
 20036d4:	28800015 	stw	r2,0(r5)
 20036d8:	f800283a 	ret
 20036dc:	0081ffc4 	movi	r2,2047
 20036e0:	40800f26 	beq	r8,r2,2003720 <__unpack_d+0xf0>
 20036e4:	480cd63a 	srli	r6,r9,24
 20036e8:	5006923a 	slli	r3,r10,8
 20036ec:	4804923a 	slli	r2,r9,8
 20036f0:	0009883a 	mov	r4,zero
 20036f4:	30c6b03a 	or	r3,r6,r3
 20036f8:	01440034 	movhi	r5,4096
 20036fc:	110cb03a 	or	r6,r2,r4
 2003700:	423f0044 	addi	r8,r8,-1023
 2003704:	194eb03a 	or	r7,r3,r5
 2003708:	008000c4 	movi	r2,3
 200370c:	69c00415 	stw	r7,16(r13)
 2003710:	6a000215 	stw	r8,8(r13)
 2003714:	68800015 	stw	r2,0(r13)
 2003718:	69800315 	stw	r6,12(r13)
 200371c:	f800283a 	ret
 2003720:	4a84b03a 	or	r2,r9,r10
 2003724:	1000031e 	bne	r2,zero,2003734 <__unpack_d+0x104>
 2003728:	00800104 	movi	r2,4
 200372c:	28800015 	stw	r2,0(r5)
 2003730:	f800283a 	ret
 2003734:	0009883a 	mov	r4,zero
 2003738:	01400234 	movhi	r5,8
 200373c:	4904703a 	and	r2,r9,r4
 2003740:	5146703a 	and	r3,r10,r5
 2003744:	10c4b03a 	or	r2,r2,r3
 2003748:	10000526 	beq	r2,zero,2003760 <__unpack_d+0x130>
 200374c:	00800044 	movi	r2,1
 2003750:	68800015 	stw	r2,0(r13)
 2003754:	6b000415 	stw	r12,16(r13)
 2003758:	6ac00315 	stw	r11,12(r13)
 200375c:	f800283a 	ret
 2003760:	68000015 	stw	zero,0(r13)
 2003764:	003ffb06 	br	2003754 <__unpack_d+0x124>

02003768 <free>:
 2003768:	00808074 	movhi	r2,513
 200376c:	109f0a04 	addi	r2,r2,31784
 2003770:	200b883a 	mov	r5,r4
 2003774:	11000017 	ldw	r4,0(r2)
 2003778:	20099641 	jmpi	2009964 <_free_r>

0200377c <malloc>:
 200377c:	00808074 	movhi	r2,513
 2003780:	109f0a04 	addi	r2,r2,31784
 2003784:	200b883a 	mov	r5,r4
 2003788:	11000017 	ldw	r4,0(r2)
 200378c:	20037901 	jmpi	2003790 <_malloc_r>

02003790 <_malloc_r>:
 2003790:	defff604 	addi	sp,sp,-40
 2003794:	28c002c4 	addi	r3,r5,11
 2003798:	00800584 	movi	r2,22
 200379c:	dc800215 	stw	r18,8(sp)
 20037a0:	dfc00915 	stw	ra,36(sp)
 20037a4:	df000815 	stw	fp,32(sp)
 20037a8:	ddc00715 	stw	r23,28(sp)
 20037ac:	dd800615 	stw	r22,24(sp)
 20037b0:	dd400515 	stw	r21,20(sp)
 20037b4:	dd000415 	stw	r20,16(sp)
 20037b8:	dcc00315 	stw	r19,12(sp)
 20037bc:	dc400115 	stw	r17,4(sp)
 20037c0:	dc000015 	stw	r16,0(sp)
 20037c4:	2025883a 	mov	r18,r4
 20037c8:	10c01236 	bltu	r2,r3,2003814 <_malloc_r+0x84>
 20037cc:	04400404 	movi	r17,16
 20037d0:	8940142e 	bgeu	r17,r5,2003824 <_malloc_r+0x94>
 20037d4:	00800304 	movi	r2,12
 20037d8:	0007883a 	mov	r3,zero
 20037dc:	90800015 	stw	r2,0(r18)
 20037e0:	1805883a 	mov	r2,r3
 20037e4:	dfc00917 	ldw	ra,36(sp)
 20037e8:	df000817 	ldw	fp,32(sp)
 20037ec:	ddc00717 	ldw	r23,28(sp)
 20037f0:	dd800617 	ldw	r22,24(sp)
 20037f4:	dd400517 	ldw	r21,20(sp)
 20037f8:	dd000417 	ldw	r20,16(sp)
 20037fc:	dcc00317 	ldw	r19,12(sp)
 2003800:	dc800217 	ldw	r18,8(sp)
 2003804:	dc400117 	ldw	r17,4(sp)
 2003808:	dc000017 	ldw	r16,0(sp)
 200380c:	dec00a04 	addi	sp,sp,40
 2003810:	f800283a 	ret
 2003814:	00bffe04 	movi	r2,-8
 2003818:	18a2703a 	and	r17,r3,r2
 200381c:	883fed16 	blt	r17,zero,20037d4 <_malloc_r+0x44>
 2003820:	897fec36 	bltu	r17,r5,20037d4 <_malloc_r+0x44>
 2003824:	9009883a 	mov	r4,r18
 2003828:	2011de00 	call	2011de0 <__malloc_lock>
 200382c:	00807dc4 	movi	r2,503
 2003830:	14402b2e 	bgeu	r2,r17,20038e0 <_malloc_r+0x150>
 2003834:	8806d27a 	srli	r3,r17,9
 2003838:	18003f1e 	bne	r3,zero,2003938 <_malloc_r+0x1a8>
 200383c:	880cd0fa 	srli	r6,r17,3
 2003840:	300490fa 	slli	r2,r6,3
 2003844:	02c08074 	movhi	r11,513
 2003848:	5ad84404 	addi	r11,r11,24848
 200384c:	12cb883a 	add	r5,r2,r11
 2003850:	2c000317 	ldw	r16,12(r5)
 2003854:	580f883a 	mov	r7,r11
 2003858:	2c00041e 	bne	r5,r16,200386c <_malloc_r+0xdc>
 200385c:	00000a06 	br	2003888 <_malloc_r+0xf8>
 2003860:	1800860e 	bge	r3,zero,2003a7c <_malloc_r+0x2ec>
 2003864:	84000317 	ldw	r16,12(r16)
 2003868:	2c000726 	beq	r5,r16,2003888 <_malloc_r+0xf8>
 200386c:	80800117 	ldw	r2,4(r16)
 2003870:	00ffff04 	movi	r3,-4
 2003874:	10c8703a 	and	r4,r2,r3
 2003878:	2447c83a 	sub	r3,r4,r17
 200387c:	008003c4 	movi	r2,15
 2003880:	10fff70e 	bge	r2,r3,2003860 <_malloc_r+0xd0>
 2003884:	31bfffc4 	addi	r6,r6,-1
 2003888:	32400044 	addi	r9,r6,1
 200388c:	02808074 	movhi	r10,513
 2003890:	52984604 	addi	r10,r10,24856
 2003894:	54000217 	ldw	r16,8(r10)
 2003898:	8280a026 	beq	r16,r10,2003b1c <_malloc_r+0x38c>
 200389c:	80800117 	ldw	r2,4(r16)
 20038a0:	00ffff04 	movi	r3,-4
 20038a4:	10ca703a 	and	r5,r2,r3
 20038a8:	2c4dc83a 	sub	r6,r5,r17
 20038ac:	008003c4 	movi	r2,15
 20038b0:	11808316 	blt	r2,r6,2003ac0 <_malloc_r+0x330>
 20038b4:	52800315 	stw	r10,12(r10)
 20038b8:	52800215 	stw	r10,8(r10)
 20038bc:	30002916 	blt	r6,zero,2003964 <_malloc_r+0x1d4>
 20038c0:	8147883a 	add	r3,r16,r5
 20038c4:	18800117 	ldw	r2,4(r3)
 20038c8:	9009883a 	mov	r4,r18
 20038cc:	10800054 	ori	r2,r2,1
 20038d0:	18800115 	stw	r2,4(r3)
 20038d4:	2011e000 	call	2011e00 <__malloc_unlock>
 20038d8:	80c00204 	addi	r3,r16,8
 20038dc:	003fc006 	br	20037e0 <_malloc_r+0x50>
 20038e0:	02c08074 	movhi	r11,513
 20038e4:	5ad84404 	addi	r11,r11,24848
 20038e8:	8ac5883a 	add	r2,r17,r11
 20038ec:	14000317 	ldw	r16,12(r2)
 20038f0:	580f883a 	mov	r7,r11
 20038f4:	8806d0fa 	srli	r3,r17,3
 20038f8:	14006c26 	beq	r2,r16,2003aac <_malloc_r+0x31c>
 20038fc:	80c00117 	ldw	r3,4(r16)
 2003900:	00bfff04 	movi	r2,-4
 2003904:	81800317 	ldw	r6,12(r16)
 2003908:	1886703a 	and	r3,r3,r2
 200390c:	80c7883a 	add	r3,r16,r3
 2003910:	18800117 	ldw	r2,4(r3)
 2003914:	81400217 	ldw	r5,8(r16)
 2003918:	9009883a 	mov	r4,r18
 200391c:	10800054 	ori	r2,r2,1
 2003920:	18800115 	stw	r2,4(r3)
 2003924:	31400215 	stw	r5,8(r6)
 2003928:	29800315 	stw	r6,12(r5)
 200392c:	2011e000 	call	2011e00 <__malloc_unlock>
 2003930:	80c00204 	addi	r3,r16,8
 2003934:	003faa06 	br	20037e0 <_malloc_r+0x50>
 2003938:	00800104 	movi	r2,4
 200393c:	10c0052e 	bgeu	r2,r3,2003954 <_malloc_r+0x1c4>
 2003940:	00800504 	movi	r2,20
 2003944:	10c07836 	bltu	r2,r3,2003b28 <_malloc_r+0x398>
 2003948:	198016c4 	addi	r6,r3,91
 200394c:	300490fa 	slli	r2,r6,3
 2003950:	003fbc06 	br	2003844 <_malloc_r+0xb4>
 2003954:	8804d1ba 	srli	r2,r17,6
 2003958:	11800e04 	addi	r6,r2,56
 200395c:	300490fa 	slli	r2,r6,3
 2003960:	003fb806 	br	2003844 <_malloc_r+0xb4>
 2003964:	00807fc4 	movi	r2,511
 2003968:	1140bb36 	bltu	r2,r5,2003c58 <_malloc_r+0x4c8>
 200396c:	2806d0fa 	srli	r3,r5,3
 2003970:	573ffe04 	addi	fp,r10,-8
 2003974:	00800044 	movi	r2,1
 2003978:	180890fa 	slli	r4,r3,3
 200397c:	1807d0ba 	srai	r3,r3,2
 2003980:	e1c00117 	ldw	r7,4(fp)
 2003984:	5909883a 	add	r4,r11,r4
 2003988:	21400217 	ldw	r5,8(r4)
 200398c:	10c4983a 	sll	r2,r2,r3
 2003990:	81000315 	stw	r4,12(r16)
 2003994:	81400215 	stw	r5,8(r16)
 2003998:	388eb03a 	or	r7,r7,r2
 200399c:	2c000315 	stw	r16,12(r5)
 20039a0:	24000215 	stw	r16,8(r4)
 20039a4:	e1c00115 	stw	r7,4(fp)
 20039a8:	4807883a 	mov	r3,r9
 20039ac:	4800cd16 	blt	r9,zero,2003ce4 <_malloc_r+0x554>
 20039b0:	1807d0ba 	srai	r3,r3,2
 20039b4:	00800044 	movi	r2,1
 20039b8:	10c8983a 	sll	r4,r2,r3
 20039bc:	39004436 	bltu	r7,r4,2003ad0 <_malloc_r+0x340>
 20039c0:	21c4703a 	and	r2,r4,r7
 20039c4:	10000a1e 	bne	r2,zero,20039f0 <_malloc_r+0x260>
 20039c8:	2109883a 	add	r4,r4,r4
 20039cc:	00bfff04 	movi	r2,-4
 20039d0:	4884703a 	and	r2,r9,r2
 20039d4:	3906703a 	and	r3,r7,r4
 20039d8:	12400104 	addi	r9,r2,4
 20039dc:	1800041e 	bne	r3,zero,20039f0 <_malloc_r+0x260>
 20039e0:	2109883a 	add	r4,r4,r4
 20039e4:	3904703a 	and	r2,r7,r4
 20039e8:	4a400104 	addi	r9,r9,4
 20039ec:	103ffc26 	beq	r2,zero,20039e0 <_malloc_r+0x250>
 20039f0:	480490fa 	slli	r2,r9,3
 20039f4:	4819883a 	mov	r12,r9
 20039f8:	023fff04 	movi	r8,-4
 20039fc:	589b883a 	add	r13,r11,r2
 2003a00:	6807883a 	mov	r3,r13
 2003a04:	014003c4 	movi	r5,15
 2003a08:	1c000317 	ldw	r16,12(r3)
 2003a0c:	1c00041e 	bne	r3,r16,2003a20 <_malloc_r+0x290>
 2003a10:	0000a706 	br	2003cb0 <_malloc_r+0x520>
 2003a14:	3000ab0e 	bge	r6,zero,2003cc4 <_malloc_r+0x534>
 2003a18:	84000317 	ldw	r16,12(r16)
 2003a1c:	1c00a426 	beq	r3,r16,2003cb0 <_malloc_r+0x520>
 2003a20:	80800117 	ldw	r2,4(r16)
 2003a24:	1204703a 	and	r2,r2,r8
 2003a28:	144dc83a 	sub	r6,r2,r17
 2003a2c:	29bff90e 	bge	r5,r6,2003a14 <_malloc_r+0x284>
 2003a30:	81000317 	ldw	r4,12(r16)
 2003a34:	80c00217 	ldw	r3,8(r16)
 2003a38:	89400054 	ori	r5,r17,1
 2003a3c:	8445883a 	add	r2,r16,r17
 2003a40:	20c00215 	stw	r3,8(r4)
 2003a44:	19000315 	stw	r4,12(r3)
 2003a48:	81400115 	stw	r5,4(r16)
 2003a4c:	1187883a 	add	r3,r2,r6
 2003a50:	31000054 	ori	r4,r6,1
 2003a54:	50800315 	stw	r2,12(r10)
 2003a58:	50800215 	stw	r2,8(r10)
 2003a5c:	19800015 	stw	r6,0(r3)
 2003a60:	11000115 	stw	r4,4(r2)
 2003a64:	12800215 	stw	r10,8(r2)
 2003a68:	12800315 	stw	r10,12(r2)
 2003a6c:	9009883a 	mov	r4,r18
 2003a70:	2011e000 	call	2011e00 <__malloc_unlock>
 2003a74:	80c00204 	addi	r3,r16,8
 2003a78:	003f5906 	br	20037e0 <_malloc_r+0x50>
 2003a7c:	8109883a 	add	r4,r16,r4
 2003a80:	20800117 	ldw	r2,4(r4)
 2003a84:	80c00217 	ldw	r3,8(r16)
 2003a88:	81400317 	ldw	r5,12(r16)
 2003a8c:	10800054 	ori	r2,r2,1
 2003a90:	20800115 	stw	r2,4(r4)
 2003a94:	28c00215 	stw	r3,8(r5)
 2003a98:	19400315 	stw	r5,12(r3)
 2003a9c:	9009883a 	mov	r4,r18
 2003aa0:	2011e000 	call	2011e00 <__malloc_unlock>
 2003aa4:	80c00204 	addi	r3,r16,8
 2003aa8:	003f4d06 	br	20037e0 <_malloc_r+0x50>
 2003aac:	80800204 	addi	r2,r16,8
 2003ab0:	14000317 	ldw	r16,12(r2)
 2003ab4:	143f911e 	bne	r2,r16,20038fc <_malloc_r+0x16c>
 2003ab8:	1a400084 	addi	r9,r3,2
 2003abc:	003f7306 	br	200388c <_malloc_r+0xfc>
 2003ac0:	88c00054 	ori	r3,r17,1
 2003ac4:	8445883a 	add	r2,r16,r17
 2003ac8:	80c00115 	stw	r3,4(r16)
 2003acc:	003fdf06 	br	2003a4c <_malloc_r+0x2bc>
 2003ad0:	e4000217 	ldw	r16,8(fp)
 2003ad4:	00bfff04 	movi	r2,-4
 2003ad8:	80c00117 	ldw	r3,4(r16)
 2003adc:	802d883a 	mov	r22,r16
 2003ae0:	18aa703a 	and	r21,r3,r2
 2003ae4:	ac401636 	bltu	r21,r17,2003b40 <_malloc_r+0x3b0>
 2003ae8:	ac49c83a 	sub	r4,r21,r17
 2003aec:	008003c4 	movi	r2,15
 2003af0:	1100130e 	bge	r2,r4,2003b40 <_malloc_r+0x3b0>
 2003af4:	88800054 	ori	r2,r17,1
 2003af8:	8447883a 	add	r3,r16,r17
 2003afc:	80800115 	stw	r2,4(r16)
 2003b00:	20800054 	ori	r2,r4,1
 2003b04:	18800115 	stw	r2,4(r3)
 2003b08:	e0c00215 	stw	r3,8(fp)
 2003b0c:	9009883a 	mov	r4,r18
 2003b10:	2011e000 	call	2011e00 <__malloc_unlock>
 2003b14:	80c00204 	addi	r3,r16,8
 2003b18:	003f3106 	br	20037e0 <_malloc_r+0x50>
 2003b1c:	39c00117 	ldw	r7,4(r7)
 2003b20:	573ffe04 	addi	fp,r10,-8
 2003b24:	003fa006 	br	20039a8 <_malloc_r+0x218>
 2003b28:	00801504 	movi	r2,84
 2003b2c:	10c06736 	bltu	r2,r3,2003ccc <_malloc_r+0x53c>
 2003b30:	8804d33a 	srli	r2,r17,12
 2003b34:	11801b84 	addi	r6,r2,110
 2003b38:	300490fa 	slli	r2,r6,3
 2003b3c:	003f4106 	br	2003844 <_malloc_r+0xb4>
 2003b40:	d0a73217 	ldw	r2,-25400(gp)
 2003b44:	d0e00117 	ldw	r3,-32764(gp)
 2003b48:	053fffc4 	movi	r20,-1
 2003b4c:	10800404 	addi	r2,r2,16
 2003b50:	88a7883a 	add	r19,r17,r2
 2003b54:	1d000326 	beq	r3,r20,2003b64 <_malloc_r+0x3d4>
 2003b58:	98c3ffc4 	addi	r3,r19,4095
 2003b5c:	00bc0004 	movi	r2,-4096
 2003b60:	18a6703a 	and	r19,r3,r2
 2003b64:	9009883a 	mov	r4,r18
 2003b68:	980b883a 	mov	r5,r19
 2003b6c:	2003ffc0 	call	2003ffc <_sbrk_r>
 2003b70:	1009883a 	mov	r4,r2
 2003b74:	15000426 	beq	r2,r20,2003b88 <_malloc_r+0x3f8>
 2003b78:	854b883a 	add	r5,r16,r21
 2003b7c:	1029883a 	mov	r20,r2
 2003b80:	11405a2e 	bgeu	r2,r5,2003cec <_malloc_r+0x55c>
 2003b84:	87000c26 	beq	r16,fp,2003bb8 <_malloc_r+0x428>
 2003b88:	e4000217 	ldw	r16,8(fp)
 2003b8c:	80c00117 	ldw	r3,4(r16)
 2003b90:	00bfff04 	movi	r2,-4
 2003b94:	1884703a 	and	r2,r3,r2
 2003b98:	14400336 	bltu	r2,r17,2003ba8 <_malloc_r+0x418>
 2003b9c:	1449c83a 	sub	r4,r2,r17
 2003ba0:	008003c4 	movi	r2,15
 2003ba4:	113fd316 	blt	r2,r4,2003af4 <_malloc_r+0x364>
 2003ba8:	9009883a 	mov	r4,r18
 2003bac:	2011e000 	call	2011e00 <__malloc_unlock>
 2003bb0:	0007883a 	mov	r3,zero
 2003bb4:	003f0a06 	br	20037e0 <_malloc_r+0x50>
 2003bb8:	05c080b4 	movhi	r23,514
 2003bbc:	bde64604 	addi	r23,r23,-26344
 2003bc0:	b8800017 	ldw	r2,0(r23)
 2003bc4:	988d883a 	add	r6,r19,r2
 2003bc8:	b9800015 	stw	r6,0(r23)
 2003bcc:	d0e00117 	ldw	r3,-32764(gp)
 2003bd0:	00bfffc4 	movi	r2,-1
 2003bd4:	18808e26 	beq	r3,r2,2003e10 <_malloc_r+0x680>
 2003bd8:	2145c83a 	sub	r2,r4,r5
 2003bdc:	3085883a 	add	r2,r6,r2
 2003be0:	b8800015 	stw	r2,0(r23)
 2003be4:	20c001cc 	andi	r3,r4,7
 2003be8:	18005f1e 	bne	r3,zero,2003d68 <_malloc_r+0x5d8>
 2003bec:	000b883a 	mov	r5,zero
 2003bf0:	a4c5883a 	add	r2,r20,r19
 2003bf4:	1083ffcc 	andi	r2,r2,4095
 2003bf8:	00c40004 	movi	r3,4096
 2003bfc:	1887c83a 	sub	r3,r3,r2
 2003c00:	28e7883a 	add	r19,r5,r3
 2003c04:	9009883a 	mov	r4,r18
 2003c08:	980b883a 	mov	r5,r19
 2003c0c:	2003ffc0 	call	2003ffc <_sbrk_r>
 2003c10:	1007883a 	mov	r3,r2
 2003c14:	00bfffc4 	movi	r2,-1
 2003c18:	18807a26 	beq	r3,r2,2003e04 <_malloc_r+0x674>
 2003c1c:	1d05c83a 	sub	r2,r3,r20
 2003c20:	9885883a 	add	r2,r19,r2
 2003c24:	10c00054 	ori	r3,r2,1
 2003c28:	b8800017 	ldw	r2,0(r23)
 2003c2c:	a021883a 	mov	r16,r20
 2003c30:	a0c00115 	stw	r3,4(r20)
 2003c34:	9885883a 	add	r2,r19,r2
 2003c38:	b8800015 	stw	r2,0(r23)
 2003c3c:	e5000215 	stw	r20,8(fp)
 2003c40:	b7003626 	beq	r22,fp,2003d1c <_malloc_r+0x58c>
 2003c44:	018003c4 	movi	r6,15
 2003c48:	35404b36 	bltu	r6,r21,2003d78 <_malloc_r+0x5e8>
 2003c4c:	00800044 	movi	r2,1
 2003c50:	a0800115 	stw	r2,4(r20)
 2003c54:	003fcd06 	br	2003b8c <_malloc_r+0x3fc>
 2003c58:	2808d27a 	srli	r4,r5,9
 2003c5c:	2000371e 	bne	r4,zero,2003d3c <_malloc_r+0x5ac>
 2003c60:	2808d0fa 	srli	r4,r5,3
 2003c64:	200690fa 	slli	r3,r4,3
 2003c68:	1ad1883a 	add	r8,r3,r11
 2003c6c:	41800217 	ldw	r6,8(r8)
 2003c70:	41805b26 	beq	r8,r6,2003de0 <_malloc_r+0x650>
 2003c74:	30800117 	ldw	r2,4(r6)
 2003c78:	00ffff04 	movi	r3,-4
 2003c7c:	10c4703a 	and	r2,r2,r3
 2003c80:	2880022e 	bgeu	r5,r2,2003c8c <_malloc_r+0x4fc>
 2003c84:	31800217 	ldw	r6,8(r6)
 2003c88:	41bffa1e 	bne	r8,r6,2003c74 <_malloc_r+0x4e4>
 2003c8c:	32000317 	ldw	r8,12(r6)
 2003c90:	39c00117 	ldw	r7,4(r7)
 2003c94:	82000315 	stw	r8,12(r16)
 2003c98:	81800215 	stw	r6,8(r16)
 2003c9c:	07008074 	movhi	fp,513
 2003ca0:	e7184404 	addi	fp,fp,24848
 2003ca4:	34000315 	stw	r16,12(r6)
 2003ca8:	44000215 	stw	r16,8(r8)
 2003cac:	003f3e06 	br	20039a8 <_malloc_r+0x218>
 2003cb0:	63000044 	addi	r12,r12,1
 2003cb4:	608000cc 	andi	r2,r12,3
 2003cb8:	10005d26 	beq	r2,zero,2003e30 <_malloc_r+0x6a0>
 2003cbc:	18c00204 	addi	r3,r3,8
 2003cc0:	003f5106 	br	2003a08 <_malloc_r+0x278>
 2003cc4:	8089883a 	add	r4,r16,r2
 2003cc8:	003f6d06 	br	2003a80 <_malloc_r+0x2f0>
 2003ccc:	00805504 	movi	r2,340
 2003cd0:	10c02036 	bltu	r2,r3,2003d54 <_malloc_r+0x5c4>
 2003cd4:	8804d3fa 	srli	r2,r17,15
 2003cd8:	11801dc4 	addi	r6,r2,119
 2003cdc:	300490fa 	slli	r2,r6,3
 2003ce0:	003ed806 	br	2003844 <_malloc_r+0xb4>
 2003ce4:	48c000c4 	addi	r3,r9,3
 2003ce8:	003f3106 	br	20039b0 <_malloc_r+0x220>
 2003cec:	05c080b4 	movhi	r23,514
 2003cf0:	bde64604 	addi	r23,r23,-26344
 2003cf4:	b8800017 	ldw	r2,0(r23)
 2003cf8:	988d883a 	add	r6,r19,r2
 2003cfc:	b9800015 	stw	r6,0(r23)
 2003d00:	293fb21e 	bne	r5,r4,2003bcc <_malloc_r+0x43c>
 2003d04:	2083ffcc 	andi	r2,r4,4095
 2003d08:	103fb01e 	bne	r2,zero,2003bcc <_malloc_r+0x43c>
 2003d0c:	e4000217 	ldw	r16,8(fp)
 2003d10:	9d45883a 	add	r2,r19,r21
 2003d14:	10800054 	ori	r2,r2,1
 2003d18:	80800115 	stw	r2,4(r16)
 2003d1c:	b8c00017 	ldw	r3,0(r23)
 2003d20:	d0a73317 	ldw	r2,-25396(gp)
 2003d24:	10c0012e 	bgeu	r2,r3,2003d2c <_malloc_r+0x59c>
 2003d28:	d0e73315 	stw	r3,-25396(gp)
 2003d2c:	d0a73417 	ldw	r2,-25392(gp)
 2003d30:	10ff962e 	bgeu	r2,r3,2003b8c <_malloc_r+0x3fc>
 2003d34:	d0e73415 	stw	r3,-25392(gp)
 2003d38:	003f9406 	br	2003b8c <_malloc_r+0x3fc>
 2003d3c:	00800104 	movi	r2,4
 2003d40:	11001e36 	bltu	r2,r4,2003dbc <_malloc_r+0x62c>
 2003d44:	2804d1ba 	srli	r2,r5,6
 2003d48:	11000e04 	addi	r4,r2,56
 2003d4c:	200690fa 	slli	r3,r4,3
 2003d50:	003fc506 	br	2003c68 <_malloc_r+0x4d8>
 2003d54:	00815504 	movi	r2,1364
 2003d58:	10c01d2e 	bgeu	r2,r3,2003dd0 <_malloc_r+0x640>
 2003d5c:	01801f84 	movi	r6,126
 2003d60:	0080fc04 	movi	r2,1008
 2003d64:	003eb706 	br	2003844 <_malloc_r+0xb4>
 2003d68:	00800204 	movi	r2,8
 2003d6c:	10cbc83a 	sub	r5,r2,r3
 2003d70:	2169883a 	add	r20,r4,r5
 2003d74:	003f9e06 	br	2003bf0 <_malloc_r+0x460>
 2003d78:	00bffe04 	movi	r2,-8
 2003d7c:	a93ffd04 	addi	r4,r21,-12
 2003d80:	2088703a 	and	r4,r4,r2
 2003d84:	b10b883a 	add	r5,r22,r4
 2003d88:	00c00144 	movi	r3,5
 2003d8c:	28c00215 	stw	r3,8(r5)
 2003d90:	28c00115 	stw	r3,4(r5)
 2003d94:	b0800117 	ldw	r2,4(r22)
 2003d98:	1080004c 	andi	r2,r2,1
 2003d9c:	2084b03a 	or	r2,r4,r2
 2003da0:	b0800115 	stw	r2,4(r22)
 2003da4:	313fdd2e 	bgeu	r6,r4,2003d1c <_malloc_r+0x58c>
 2003da8:	b1400204 	addi	r5,r22,8
 2003dac:	9009883a 	mov	r4,r18
 2003db0:	20099640 	call	2009964 <_free_r>
 2003db4:	e4000217 	ldw	r16,8(fp)
 2003db8:	003fd806 	br	2003d1c <_malloc_r+0x58c>
 2003dbc:	00800504 	movi	r2,20
 2003dc0:	11001536 	bltu	r2,r4,2003e18 <_malloc_r+0x688>
 2003dc4:	210016c4 	addi	r4,r4,91
 2003dc8:	200690fa 	slli	r3,r4,3
 2003dcc:	003fa606 	br	2003c68 <_malloc_r+0x4d8>
 2003dd0:	8804d4ba 	srli	r2,r17,18
 2003dd4:	11801f04 	addi	r6,r2,124
 2003dd8:	300490fa 	slli	r2,r6,3
 2003ddc:	003e9906 	br	2003844 <_malloc_r+0xb4>
 2003de0:	2009d0ba 	srai	r4,r4,2
 2003de4:	01408074 	movhi	r5,513
 2003de8:	29584404 	addi	r5,r5,24848
 2003dec:	00c00044 	movi	r3,1
 2003df0:	28800117 	ldw	r2,4(r5)
 2003df4:	1906983a 	sll	r3,r3,r4
 2003df8:	10c4b03a 	or	r2,r2,r3
 2003dfc:	28800115 	stw	r2,4(r5)
 2003e00:	003fa306 	br	2003c90 <_malloc_r+0x500>
 2003e04:	0027883a 	mov	r19,zero
 2003e08:	00c00044 	movi	r3,1
 2003e0c:	003f8606 	br	2003c28 <_malloc_r+0x498>
 2003e10:	d1200115 	stw	r4,-32764(gp)
 2003e14:	003f7306 	br	2003be4 <_malloc_r+0x454>
 2003e18:	00801504 	movi	r2,84
 2003e1c:	11001936 	bltu	r2,r4,2003e84 <_malloc_r+0x6f4>
 2003e20:	2804d33a 	srli	r2,r5,12
 2003e24:	11001b84 	addi	r4,r2,110
 2003e28:	200690fa 	slli	r3,r4,3
 2003e2c:	003f8e06 	br	2003c68 <_malloc_r+0x4d8>
 2003e30:	480b883a 	mov	r5,r9
 2003e34:	6807883a 	mov	r3,r13
 2003e38:	288000cc 	andi	r2,r5,3
 2003e3c:	18fffe04 	addi	r3,r3,-8
 2003e40:	297fffc4 	addi	r5,r5,-1
 2003e44:	10001526 	beq	r2,zero,2003e9c <_malloc_r+0x70c>
 2003e48:	18800217 	ldw	r2,8(r3)
 2003e4c:	10fffa26 	beq	r2,r3,2003e38 <_malloc_r+0x6a8>
 2003e50:	2109883a 	add	r4,r4,r4
 2003e54:	393f1e36 	bltu	r7,r4,2003ad0 <_malloc_r+0x340>
 2003e58:	203f1d26 	beq	r4,zero,2003ad0 <_malloc_r+0x340>
 2003e5c:	21c4703a 	and	r2,r4,r7
 2003e60:	10000226 	beq	r2,zero,2003e6c <_malloc_r+0x6dc>
 2003e64:	6013883a 	mov	r9,r12
 2003e68:	003ee106 	br	20039f0 <_malloc_r+0x260>
 2003e6c:	2109883a 	add	r4,r4,r4
 2003e70:	3904703a 	and	r2,r7,r4
 2003e74:	63000104 	addi	r12,r12,4
 2003e78:	103ffc26 	beq	r2,zero,2003e6c <_malloc_r+0x6dc>
 2003e7c:	6013883a 	mov	r9,r12
 2003e80:	003edb06 	br	20039f0 <_malloc_r+0x260>
 2003e84:	00805504 	movi	r2,340
 2003e88:	11000836 	bltu	r2,r4,2003eac <_malloc_r+0x71c>
 2003e8c:	2804d3fa 	srli	r2,r5,15
 2003e90:	11001dc4 	addi	r4,r2,119
 2003e94:	200690fa 	slli	r3,r4,3
 2003e98:	003f7306 	br	2003c68 <_malloc_r+0x4d8>
 2003e9c:	0104303a 	nor	r2,zero,r4
 2003ea0:	388e703a 	and	r7,r7,r2
 2003ea4:	e1c00115 	stw	r7,4(fp)
 2003ea8:	003fe906 	br	2003e50 <_malloc_r+0x6c0>
 2003eac:	00815504 	movi	r2,1364
 2003eb0:	1100032e 	bgeu	r2,r4,2003ec0 <_malloc_r+0x730>
 2003eb4:	01001f84 	movi	r4,126
 2003eb8:	00c0fc04 	movi	r3,1008
 2003ebc:	003f6a06 	br	2003c68 <_malloc_r+0x4d8>
 2003ec0:	2804d4ba 	srli	r2,r5,18
 2003ec4:	11001f04 	addi	r4,r2,124
 2003ec8:	200690fa 	slli	r3,r4,3
 2003ecc:	003f6606 	br	2003c68 <_malloc_r+0x4d8>

02003ed0 <printf>:
 2003ed0:	defffb04 	addi	sp,sp,-20
 2003ed4:	dfc00115 	stw	ra,4(sp)
 2003ed8:	d9400215 	stw	r5,8(sp)
 2003edc:	d9800315 	stw	r6,12(sp)
 2003ee0:	d9c00415 	stw	r7,16(sp)
 2003ee4:	00808074 	movhi	r2,513
 2003ee8:	109f0a04 	addi	r2,r2,31784
 2003eec:	10c00017 	ldw	r3,0(r2)
 2003ef0:	200b883a 	mov	r5,r4
 2003ef4:	d8800204 	addi	r2,sp,8
 2003ef8:	19000217 	ldw	r4,8(r3)
 2003efc:	100d883a 	mov	r6,r2
 2003f00:	d8800015 	stw	r2,0(sp)
 2003f04:	20060600 	call	2006060 <__vfprintf_internal>
 2003f08:	dfc00117 	ldw	ra,4(sp)
 2003f0c:	dec00504 	addi	sp,sp,20
 2003f10:	f800283a 	ret

02003f14 <_printf_r>:
 2003f14:	defffc04 	addi	sp,sp,-16
 2003f18:	dfc00115 	stw	ra,4(sp)
 2003f1c:	d9800215 	stw	r6,8(sp)
 2003f20:	d9c00315 	stw	r7,12(sp)
 2003f24:	280d883a 	mov	r6,r5
 2003f28:	21400217 	ldw	r5,8(r4)
 2003f2c:	d8c00204 	addi	r3,sp,8
 2003f30:	180f883a 	mov	r7,r3
 2003f34:	d8c00015 	stw	r3,0(sp)
 2003f38:	20041b40 	call	20041b4 <___vfprintf_internal_r>
 2003f3c:	dfc00117 	ldw	ra,4(sp)
 2003f40:	dec00404 	addi	sp,sp,16
 2003f44:	f800283a 	ret

02003f48 <_puts_r>:
 2003f48:	defff604 	addi	sp,sp,-40
 2003f4c:	dc400715 	stw	r17,28(sp)
 2003f50:	2023883a 	mov	r17,r4
 2003f54:	2809883a 	mov	r4,r5
 2003f58:	dfc00915 	stw	ra,36(sp)
 2003f5c:	dcc00815 	stw	r19,32(sp)
 2003f60:	2827883a 	mov	r19,r5
 2003f64:	20040e80 	call	20040e8 <strlen>
 2003f68:	89400217 	ldw	r5,8(r17)
 2003f6c:	00c08074 	movhi	r3,513
 2003f70:	18d6af04 	addi	r3,r3,23228
 2003f74:	01c00044 	movi	r7,1
 2003f78:	12000044 	addi	r8,r2,1
 2003f7c:	d8c00515 	stw	r3,20(sp)
 2003f80:	d9c00615 	stw	r7,24(sp)
 2003f84:	d8c00304 	addi	r3,sp,12
 2003f88:	01c00084 	movi	r7,2
 2003f8c:	8809883a 	mov	r4,r17
 2003f90:	d80d883a 	mov	r6,sp
 2003f94:	d8c00015 	stw	r3,0(sp)
 2003f98:	dcc00315 	stw	r19,12(sp)
 2003f9c:	da000215 	stw	r8,8(sp)
 2003fa0:	d9c00115 	stw	r7,4(sp)
 2003fa4:	d8800415 	stw	r2,16(sp)
 2003fa8:	2009c780 	call	2009c78 <__sfvwrite_r>
 2003fac:	00ffffc4 	movi	r3,-1
 2003fb0:	10000626 	beq	r2,zero,2003fcc <_puts_r+0x84>
 2003fb4:	1805883a 	mov	r2,r3
 2003fb8:	dfc00917 	ldw	ra,36(sp)
 2003fbc:	dcc00817 	ldw	r19,32(sp)
 2003fc0:	dc400717 	ldw	r17,28(sp)
 2003fc4:	dec00a04 	addi	sp,sp,40
 2003fc8:	f800283a 	ret
 2003fcc:	00c00284 	movi	r3,10
 2003fd0:	1805883a 	mov	r2,r3
 2003fd4:	dfc00917 	ldw	ra,36(sp)
 2003fd8:	dcc00817 	ldw	r19,32(sp)
 2003fdc:	dc400717 	ldw	r17,28(sp)
 2003fe0:	dec00a04 	addi	sp,sp,40
 2003fe4:	f800283a 	ret

02003fe8 <puts>:
 2003fe8:	00808074 	movhi	r2,513
 2003fec:	109f0a04 	addi	r2,r2,31784
 2003ff0:	200b883a 	mov	r5,r4
 2003ff4:	11000017 	ldw	r4,0(r2)
 2003ff8:	2003f481 	jmpi	2003f48 <_puts_r>

02003ffc <_sbrk_r>:
 2003ffc:	defffd04 	addi	sp,sp,-12
 2004000:	dc000015 	stw	r16,0(sp)
 2004004:	040080b4 	movhi	r16,514
 2004008:	84263c04 	addi	r16,r16,-26384
 200400c:	dc400115 	stw	r17,4(sp)
 2004010:	80000015 	stw	zero,0(r16)
 2004014:	2023883a 	mov	r17,r4
 2004018:	2809883a 	mov	r4,r5
 200401c:	dfc00215 	stw	ra,8(sp)
 2004020:	20120000 	call	2012000 <sbrk>
 2004024:	1007883a 	mov	r3,r2
 2004028:	00bfffc4 	movi	r2,-1
 200402c:	18800626 	beq	r3,r2,2004048 <_sbrk_r+0x4c>
 2004030:	1805883a 	mov	r2,r3
 2004034:	dfc00217 	ldw	ra,8(sp)
 2004038:	dc400117 	ldw	r17,4(sp)
 200403c:	dc000017 	ldw	r16,0(sp)
 2004040:	dec00304 	addi	sp,sp,12
 2004044:	f800283a 	ret
 2004048:	80800017 	ldw	r2,0(r16)
 200404c:	103ff826 	beq	r2,zero,2004030 <_sbrk_r+0x34>
 2004050:	88800015 	stw	r2,0(r17)
 2004054:	1805883a 	mov	r2,r3
 2004058:	dfc00217 	ldw	ra,8(sp)
 200405c:	dc400117 	ldw	r17,4(sp)
 2004060:	dc000017 	ldw	r16,0(sp)
 2004064:	dec00304 	addi	sp,sp,12
 2004068:	f800283a 	ret

0200406c <_scanf_r>:
 200406c:	defffc04 	addi	sp,sp,-16
 2004070:	dfc00115 	stw	ra,4(sp)
 2004074:	d9800215 	stw	r6,8(sp)
 2004078:	d9c00315 	stw	r7,12(sp)
 200407c:	280d883a 	mov	r6,r5
 2004080:	21400117 	ldw	r5,4(r4)
 2004084:	d8c00204 	addi	r3,sp,8
 2004088:	180f883a 	mov	r7,r3
 200408c:	d8c00015 	stw	r3,0(sp)
 2004090:	20060840 	call	2006084 <__svfscanf_r>
 2004094:	dfc00117 	ldw	ra,4(sp)
 2004098:	dec00404 	addi	sp,sp,16
 200409c:	f800283a 	ret

020040a0 <scanf>:
 20040a0:	defffb04 	addi	sp,sp,-20
 20040a4:	dfc00115 	stw	ra,4(sp)
 20040a8:	d9400215 	stw	r5,8(sp)
 20040ac:	d9800315 	stw	r6,12(sp)
 20040b0:	d9c00415 	stw	r7,16(sp)
 20040b4:	00808074 	movhi	r2,513
 20040b8:	109f0a04 	addi	r2,r2,31784
 20040bc:	11400017 	ldw	r5,0(r2)
 20040c0:	200d883a 	mov	r6,r4
 20040c4:	d8800204 	addi	r2,sp,8
 20040c8:	2809883a 	mov	r4,r5
 20040cc:	29400117 	ldw	r5,4(r5)
 20040d0:	100f883a 	mov	r7,r2
 20040d4:	d8800015 	stw	r2,0(sp)
 20040d8:	20060840 	call	2006084 <__svfscanf_r>
 20040dc:	dfc00117 	ldw	ra,4(sp)
 20040e0:	dec00504 	addi	sp,sp,20
 20040e4:	f800283a 	ret

020040e8 <strlen>:
 20040e8:	208000cc 	andi	r2,r4,3
 20040ec:	2011883a 	mov	r8,r4
 20040f0:	1000161e 	bne	r2,zero,200414c <strlen+0x64>
 20040f4:	20c00017 	ldw	r3,0(r4)
 20040f8:	017fbff4 	movhi	r5,65279
 20040fc:	297fbfc4 	addi	r5,r5,-257
 2004100:	01e02074 	movhi	r7,32897
 2004104:	39e02004 	addi	r7,r7,-32640
 2004108:	1945883a 	add	r2,r3,r5
 200410c:	11c4703a 	and	r2,r2,r7
 2004110:	00c6303a 	nor	r3,zero,r3
 2004114:	1886703a 	and	r3,r3,r2
 2004118:	18000c1e 	bne	r3,zero,200414c <strlen+0x64>
 200411c:	280d883a 	mov	r6,r5
 2004120:	380b883a 	mov	r5,r7
 2004124:	21000104 	addi	r4,r4,4
 2004128:	20800017 	ldw	r2,0(r4)
 200412c:	1187883a 	add	r3,r2,r6
 2004130:	1946703a 	and	r3,r3,r5
 2004134:	0084303a 	nor	r2,zero,r2
 2004138:	10c4703a 	and	r2,r2,r3
 200413c:	103ff926 	beq	r2,zero,2004124 <strlen+0x3c>
 2004140:	20800007 	ldb	r2,0(r4)
 2004144:	10000326 	beq	r2,zero,2004154 <strlen+0x6c>
 2004148:	21000044 	addi	r4,r4,1
 200414c:	20800007 	ldb	r2,0(r4)
 2004150:	103ffd1e 	bne	r2,zero,2004148 <strlen+0x60>
 2004154:	2205c83a 	sub	r2,r4,r8
 2004158:	f800283a 	ret

0200415c <__sprint_r>:
 200415c:	30800217 	ldw	r2,8(r6)
 2004160:	defffe04 	addi	sp,sp,-8
 2004164:	dc000015 	stw	r16,0(sp)
 2004168:	dfc00115 	stw	ra,4(sp)
 200416c:	3021883a 	mov	r16,r6
 2004170:	0007883a 	mov	r3,zero
 2004174:	1000061e 	bne	r2,zero,2004190 <__sprint_r+0x34>
 2004178:	1805883a 	mov	r2,r3
 200417c:	30000115 	stw	zero,4(r6)
 2004180:	dfc00117 	ldw	ra,4(sp)
 2004184:	dc000017 	ldw	r16,0(sp)
 2004188:	dec00204 	addi	sp,sp,8
 200418c:	f800283a 	ret
 2004190:	2009c780 	call	2009c78 <__sfvwrite_r>
 2004194:	1007883a 	mov	r3,r2
 2004198:	1805883a 	mov	r2,r3
 200419c:	80000115 	stw	zero,4(r16)
 20041a0:	80000215 	stw	zero,8(r16)
 20041a4:	dfc00117 	ldw	ra,4(sp)
 20041a8:	dc000017 	ldw	r16,0(sp)
 20041ac:	dec00204 	addi	sp,sp,8
 20041b0:	f800283a 	ret

020041b4 <___vfprintf_internal_r>:
 20041b4:	defea404 	addi	sp,sp,-1392
 20041b8:	dd815815 	stw	r22,1376(sp)
 20041bc:	dc015215 	stw	r16,1352(sp)
 20041c0:	d9c15115 	stw	r7,1348(sp)
 20041c4:	dfc15b15 	stw	ra,1388(sp)
 20041c8:	df015a15 	stw	fp,1384(sp)
 20041cc:	ddc15915 	stw	r23,1380(sp)
 20041d0:	dd415715 	stw	r21,1372(sp)
 20041d4:	dd015615 	stw	r20,1368(sp)
 20041d8:	dcc15515 	stw	r19,1364(sp)
 20041dc:	dc815415 	stw	r18,1360(sp)
 20041e0:	dc415315 	stw	r17,1356(sp)
 20041e4:	282d883a 	mov	r22,r5
 20041e8:	3021883a 	mov	r16,r6
 20041ec:	d9014f15 	stw	r4,1340(sp)
 20041f0:	200a2c80 	call	200a2c8 <_localeconv_r>
 20041f4:	10800017 	ldw	r2,0(r2)
 20041f8:	d9c15117 	ldw	r7,1348(sp)
 20041fc:	d8814915 	stw	r2,1316(sp)
 2004200:	d8814f17 	ldw	r2,1340(sp)
 2004204:	10000226 	beq	r2,zero,2004210 <___vfprintf_internal_r+0x5c>
 2004208:	10800e17 	ldw	r2,56(r2)
 200420c:	10020d26 	beq	r2,zero,2004a44 <___vfprintf_internal_r+0x890>
 2004210:	b080030b 	ldhu	r2,12(r22)
 2004214:	1080020c 	andi	r2,r2,8
 2004218:	10020e26 	beq	r2,zero,2004a54 <___vfprintf_internal_r+0x8a0>
 200421c:	b0800417 	ldw	r2,16(r22)
 2004220:	10020c26 	beq	r2,zero,2004a54 <___vfprintf_internal_r+0x8a0>
 2004224:	b200030b 	ldhu	r8,12(r22)
 2004228:	00800284 	movi	r2,10
 200422c:	40c0068c 	andi	r3,r8,26
 2004230:	18802f1e 	bne	r3,r2,20042f0 <___vfprintf_internal_r+0x13c>
 2004234:	b080038f 	ldh	r2,14(r22)
 2004238:	10002d16 	blt	r2,zero,20042f0 <___vfprintf_internal_r+0x13c>
 200423c:	b240038b 	ldhu	r9,14(r22)
 2004240:	b2800717 	ldw	r10,28(r22)
 2004244:	b2c00917 	ldw	r11,36(r22)
 2004248:	d9014f17 	ldw	r4,1340(sp)
 200424c:	dc402904 	addi	r17,sp,164
 2004250:	d8804004 	addi	r2,sp,256
 2004254:	00c10004 	movi	r3,1024
 2004258:	423fff4c 	andi	r8,r8,65533
 200425c:	800d883a 	mov	r6,r16
 2004260:	880b883a 	mov	r5,r17
 2004264:	da002c0d 	sth	r8,176(sp)
 2004268:	da402c8d 	sth	r9,178(sp)
 200426c:	da803015 	stw	r10,192(sp)
 2004270:	dac03215 	stw	r11,200(sp)
 2004274:	d8802d15 	stw	r2,180(sp)
 2004278:	d8c02e15 	stw	r3,184(sp)
 200427c:	d8802915 	stw	r2,164(sp)
 2004280:	d8c02b15 	stw	r3,172(sp)
 2004284:	d8002f15 	stw	zero,188(sp)
 2004288:	20041b40 	call	20041b4 <___vfprintf_internal_r>
 200428c:	d8814b15 	stw	r2,1324(sp)
 2004290:	10000416 	blt	r2,zero,20042a4 <___vfprintf_internal_r+0xf0>
 2004294:	d9014f17 	ldw	r4,1340(sp)
 2004298:	880b883a 	mov	r5,r17
 200429c:	200910c0 	call	200910c <_fflush_r>
 20042a0:	1002321e 	bne	r2,zero,2004b6c <___vfprintf_internal_r+0x9b8>
 20042a4:	d8802c0b 	ldhu	r2,176(sp)
 20042a8:	1080100c 	andi	r2,r2,64
 20042ac:	10000326 	beq	r2,zero,20042bc <___vfprintf_internal_r+0x108>
 20042b0:	b080030b 	ldhu	r2,12(r22)
 20042b4:	10801014 	ori	r2,r2,64
 20042b8:	b080030d 	sth	r2,12(r22)
 20042bc:	d8814b17 	ldw	r2,1324(sp)
 20042c0:	dfc15b17 	ldw	ra,1388(sp)
 20042c4:	df015a17 	ldw	fp,1384(sp)
 20042c8:	ddc15917 	ldw	r23,1380(sp)
 20042cc:	dd815817 	ldw	r22,1376(sp)
 20042d0:	dd415717 	ldw	r21,1372(sp)
 20042d4:	dd015617 	ldw	r20,1368(sp)
 20042d8:	dcc15517 	ldw	r19,1364(sp)
 20042dc:	dc815417 	ldw	r18,1360(sp)
 20042e0:	dc415317 	ldw	r17,1356(sp)
 20042e4:	dc015217 	ldw	r16,1352(sp)
 20042e8:	dec15c04 	addi	sp,sp,1392
 20042ec:	f800283a 	ret
 20042f0:	0005883a 	mov	r2,zero
 20042f4:	0007883a 	mov	r3,zero
 20042f8:	dd401904 	addi	r21,sp,100
 20042fc:	d8814215 	stw	r2,1288(sp)
 2004300:	802f883a 	mov	r23,r16
 2004304:	d8c14315 	stw	r3,1292(sp)
 2004308:	d8014b15 	stw	zero,1324(sp)
 200430c:	d8014815 	stw	zero,1312(sp)
 2004310:	d8014415 	stw	zero,1296(sp)
 2004314:	d8014715 	stw	zero,1308(sp)
 2004318:	dd400c15 	stw	r21,48(sp)
 200431c:	d8000e15 	stw	zero,56(sp)
 2004320:	d8000d15 	stw	zero,52(sp)
 2004324:	b8800007 	ldb	r2,0(r23)
 2004328:	10001926 	beq	r2,zero,2004390 <___vfprintf_internal_r+0x1dc>
 200432c:	00c00944 	movi	r3,37
 2004330:	10c01726 	beq	r2,r3,2004390 <___vfprintf_internal_r+0x1dc>
 2004334:	b821883a 	mov	r16,r23
 2004338:	00000106 	br	2004340 <___vfprintf_internal_r+0x18c>
 200433c:	10c00326 	beq	r2,r3,200434c <___vfprintf_internal_r+0x198>
 2004340:	84000044 	addi	r16,r16,1
 2004344:	80800007 	ldb	r2,0(r16)
 2004348:	103ffc1e 	bne	r2,zero,200433c <___vfprintf_internal_r+0x188>
 200434c:	85e7c83a 	sub	r19,r16,r23
 2004350:	98000e26 	beq	r19,zero,200438c <___vfprintf_internal_r+0x1d8>
 2004354:	dc800e17 	ldw	r18,56(sp)
 2004358:	dc400d17 	ldw	r17,52(sp)
 200435c:	008001c4 	movi	r2,7
 2004360:	94e5883a 	add	r18,r18,r19
 2004364:	8c400044 	addi	r17,r17,1
 2004368:	adc00015 	stw	r23,0(r21)
 200436c:	dc800e15 	stw	r18,56(sp)
 2004370:	acc00115 	stw	r19,4(r21)
 2004374:	dc400d15 	stw	r17,52(sp)
 2004378:	14428b16 	blt	r2,r17,2004da8 <___vfprintf_internal_r+0xbf4>
 200437c:	ad400204 	addi	r21,r21,8
 2004380:	d9014b17 	ldw	r4,1324(sp)
 2004384:	24c9883a 	add	r4,r4,r19
 2004388:	d9014b15 	stw	r4,1324(sp)
 200438c:	802f883a 	mov	r23,r16
 2004390:	b8800007 	ldb	r2,0(r23)
 2004394:	10013c26 	beq	r2,zero,2004888 <___vfprintf_internal_r+0x6d4>
 2004398:	bdc00044 	addi	r23,r23,1
 200439c:	d8000405 	stb	zero,16(sp)
 20043a0:	b8c00007 	ldb	r3,0(r23)
 20043a4:	04ffffc4 	movi	r19,-1
 20043a8:	d8014c15 	stw	zero,1328(sp)
 20043ac:	d8014a15 	stw	zero,1320(sp)
 20043b0:	d8c14d15 	stw	r3,1332(sp)
 20043b4:	bdc00044 	addi	r23,r23,1
 20043b8:	d9414d17 	ldw	r5,1332(sp)
 20043bc:	00801604 	movi	r2,88
 20043c0:	28fff804 	addi	r3,r5,-32
 20043c4:	10c06036 	bltu	r2,r3,2004548 <___vfprintf_internal_r+0x394>
 20043c8:	18c5883a 	add	r2,r3,r3
 20043cc:	1085883a 	add	r2,r2,r2
 20043d0:	00c08034 	movhi	r3,512
 20043d4:	18d0f904 	addi	r3,r3,17380
 20043d8:	10c5883a 	add	r2,r2,r3
 20043dc:	11000017 	ldw	r4,0(r2)
 20043e0:	2000683a 	jmp	r4
 20043e4:	02005358 	cmpnei	r8,zero,333
 20043e8:	02004548 	cmpgei	r8,zero,277
 20043ec:	02004548 	cmpgei	r8,zero,277
 20043f0:	02005344 	movi	r8,333
 20043f4:	02004548 	cmpgei	r8,zero,277
 20043f8:	02004548 	cmpgei	r8,zero,277
 20043fc:	02004548 	cmpgei	r8,zero,277
 2004400:	02004548 	cmpgei	r8,zero,277
 2004404:	02004548 	cmpgei	r8,zero,277
 2004408:	02004548 	cmpgei	r8,zero,277
 200440c:	02005124 	muli	r8,zero,324
 2004410:	02005334 	movhi	r8,332
 2004414:	02004548 	cmpgei	r8,zero,277
 2004418:	0200513c 	xorhi	r8,zero,324
 200441c:	020053d0 	cmplti	r8,zero,335
 2004420:	02004548 	cmpgei	r8,zero,277
 2004424:	020053bc 	xorhi	r8,zero,334
 2004428:	02005384 	movi	r8,334
 200442c:	02005384 	movi	r8,334
 2004430:	02005384 	movi	r8,334
 2004434:	02005384 	movi	r8,334
 2004438:	02005384 	movi	r8,334
 200443c:	02005384 	movi	r8,334
 2004440:	02005384 	movi	r8,334
 2004444:	02005384 	movi	r8,334
 2004448:	02005384 	movi	r8,334
 200444c:	02004548 	cmpgei	r8,zero,277
 2004450:	02004548 	cmpgei	r8,zero,277
 2004454:	02004548 	cmpgei	r8,zero,277
 2004458:	02004548 	cmpgei	r8,zero,277
 200445c:	02004548 	cmpgei	r8,zero,277
 2004460:	02004548 	cmpgei	r8,zero,277
 2004464:	02004548 	cmpgei	r8,zero,277
 2004468:	02004548 	cmpgei	r8,zero,277
 200446c:	02004548 	cmpgei	r8,zero,277
 2004470:	02004548 	cmpgei	r8,zero,277
 2004474:	02004ba0 	cmpeqi	r8,zero,302
 2004478:	0200520c 	andi	r8,zero,328
 200447c:	02004548 	cmpgei	r8,zero,277
 2004480:	0200520c 	andi	r8,zero,328
 2004484:	02004548 	cmpgei	r8,zero,277
 2004488:	02004548 	cmpgei	r8,zero,277
 200448c:	02004548 	cmpgei	r8,zero,277
 2004490:	02004548 	cmpgei	r8,zero,277
 2004494:	02005370 	cmpltui	r8,zero,333
 2004498:	02004548 	cmpgei	r8,zero,277
 200449c:	02004548 	cmpgei	r8,zero,277
 20044a0:	02004c54 	movui	r8,305
 20044a4:	02004548 	cmpgei	r8,zero,277
 20044a8:	02004548 	cmpgei	r8,zero,277
 20044ac:	02004548 	cmpgei	r8,zero,277
 20044b0:	02004548 	cmpgei	r8,zero,277
 20044b4:	02004548 	cmpgei	r8,zero,277
 20044b8:	02004ca0 	cmpeqi	r8,zero,306
 20044bc:	02004548 	cmpgei	r8,zero,277
 20044c0:	02004548 	cmpgei	r8,zero,277
 20044c4:	020052c0 	call	20052c <__alt_mem_sdram-0x1dffad4>
 20044c8:	02004548 	cmpgei	r8,zero,277
 20044cc:	02004548 	cmpgei	r8,zero,277
 20044d0:	02004548 	cmpgei	r8,zero,277
 20044d4:	02004548 	cmpgei	r8,zero,277
 20044d8:	02004548 	cmpgei	r8,zero,277
 20044dc:	02004548 	cmpgei	r8,zero,277
 20044e0:	02004548 	cmpgei	r8,zero,277
 20044e4:	02004548 	cmpgei	r8,zero,277
 20044e8:	02004548 	cmpgei	r8,zero,277
 20044ec:	02004548 	cmpgei	r8,zero,277
 20044f0:	02005294 	movui	r8,330
 20044f4:	02004bac 	andhi	r8,zero,302
 20044f8:	0200520c 	andi	r8,zero,328
 20044fc:	0200520c 	andi	r8,zero,328
 2004500:	0200520c 	andi	r8,zero,328
 2004504:	020051f8 	rdprs	r8,zero,327
 2004508:	02004bac 	andhi	r8,zero,302
 200450c:	02004548 	cmpgei	r8,zero,277
 2004510:	02004548 	cmpgei	r8,zero,277
 2004514:	02005180 	call	200518 <__alt_mem_sdram-0x1dffae8>
 2004518:	02004548 	cmpgei	r8,zero,277
 200451c:	02005150 	cmplti	r8,zero,325
 2004520:	02004c60 	cmpeqi	r8,zero,305
 2004524:	020051b0 	cmpltui	r8,zero,326
 2004528:	0200519c 	xori	r8,zero,326
 200452c:	02004548 	cmpgei	r8,zero,277
 2004530:	0200542c 	andhi	r8,zero,336
 2004534:	02004548 	cmpgei	r8,zero,277
 2004538:	02004cac 	andhi	r8,zero,306
 200453c:	02004548 	cmpgei	r8,zero,277
 2004540:	02004548 	cmpgei	r8,zero,277
 2004544:	02005324 	muli	r8,zero,332
 2004548:	d9014d17 	ldw	r4,1332(sp)
 200454c:	2000ce26 	beq	r4,zero,2004888 <___vfprintf_internal_r+0x6d4>
 2004550:	01400044 	movi	r5,1
 2004554:	d9800f04 	addi	r6,sp,60
 2004558:	d9c14015 	stw	r7,1280(sp)
 200455c:	d9414515 	stw	r5,1300(sp)
 2004560:	d9814115 	stw	r6,1284(sp)
 2004564:	280f883a 	mov	r7,r5
 2004568:	d9000f05 	stb	r4,60(sp)
 200456c:	d8000405 	stb	zero,16(sp)
 2004570:	d8014615 	stw	zero,1304(sp)
 2004574:	d8c14c17 	ldw	r3,1328(sp)
 2004578:	1880008c 	andi	r2,r3,2
 200457c:	1005003a 	cmpeq	r2,r2,zero
 2004580:	d8815015 	stw	r2,1344(sp)
 2004584:	1000031e 	bne	r2,zero,2004594 <___vfprintf_internal_r+0x3e0>
 2004588:	d9014517 	ldw	r4,1300(sp)
 200458c:	21000084 	addi	r4,r4,2
 2004590:	d9014515 	stw	r4,1300(sp)
 2004594:	d9414c17 	ldw	r5,1328(sp)
 2004598:	2940210c 	andi	r5,r5,132
 200459c:	d9414e15 	stw	r5,1336(sp)
 20045a0:	28002d1e 	bne	r5,zero,2004658 <___vfprintf_internal_r+0x4a4>
 20045a4:	d9814a17 	ldw	r6,1320(sp)
 20045a8:	d8814517 	ldw	r2,1300(sp)
 20045ac:	30a1c83a 	sub	r16,r6,r2
 20045b0:	0400290e 	bge	zero,r16,2004658 <___vfprintf_internal_r+0x4a4>
 20045b4:	00800404 	movi	r2,16
 20045b8:	1404580e 	bge	r2,r16,200571c <___vfprintf_internal_r+0x1568>
 20045bc:	dc800e17 	ldw	r18,56(sp)
 20045c0:	dc400d17 	ldw	r17,52(sp)
 20045c4:	1027883a 	mov	r19,r2
 20045c8:	07008074 	movhi	fp,513
 20045cc:	e716cb84 	addi	fp,fp,23342
 20045d0:	050001c4 	movi	r20,7
 20045d4:	00000306 	br	20045e4 <___vfprintf_internal_r+0x430>
 20045d8:	843ffc04 	addi	r16,r16,-16
 20045dc:	ad400204 	addi	r21,r21,8
 20045e0:	9c00130e 	bge	r19,r16,2004630 <___vfprintf_internal_r+0x47c>
 20045e4:	94800404 	addi	r18,r18,16
 20045e8:	8c400044 	addi	r17,r17,1
 20045ec:	af000015 	stw	fp,0(r21)
 20045f0:	acc00115 	stw	r19,4(r21)
 20045f4:	dc800e15 	stw	r18,56(sp)
 20045f8:	dc400d15 	stw	r17,52(sp)
 20045fc:	a47ff60e 	bge	r20,r17,20045d8 <___vfprintf_internal_r+0x424>
 2004600:	d9014f17 	ldw	r4,1340(sp)
 2004604:	b00b883a 	mov	r5,r22
 2004608:	d9800c04 	addi	r6,sp,48
 200460c:	d9c15115 	stw	r7,1348(sp)
 2004610:	200415c0 	call	200415c <__sprint_r>
 2004614:	d9c15117 	ldw	r7,1348(sp)
 2004618:	10009e1e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 200461c:	843ffc04 	addi	r16,r16,-16
 2004620:	dc800e17 	ldw	r18,56(sp)
 2004624:	dc400d17 	ldw	r17,52(sp)
 2004628:	dd401904 	addi	r21,sp,100
 200462c:	9c3fed16 	blt	r19,r16,20045e4 <___vfprintf_internal_r+0x430>
 2004630:	9425883a 	add	r18,r18,r16
 2004634:	8c400044 	addi	r17,r17,1
 2004638:	008001c4 	movi	r2,7
 200463c:	af000015 	stw	fp,0(r21)
 2004640:	ac000115 	stw	r16,4(r21)
 2004644:	dc800e15 	stw	r18,56(sp)
 2004648:	dc400d15 	stw	r17,52(sp)
 200464c:	1441f516 	blt	r2,r17,2004e24 <___vfprintf_internal_r+0xc70>
 2004650:	ad400204 	addi	r21,r21,8
 2004654:	00000206 	br	2004660 <___vfprintf_internal_r+0x4ac>
 2004658:	dc800e17 	ldw	r18,56(sp)
 200465c:	dc400d17 	ldw	r17,52(sp)
 2004660:	d8800407 	ldb	r2,16(sp)
 2004664:	10000b26 	beq	r2,zero,2004694 <___vfprintf_internal_r+0x4e0>
 2004668:	00800044 	movi	r2,1
 200466c:	94800044 	addi	r18,r18,1
 2004670:	8c400044 	addi	r17,r17,1
 2004674:	a8800115 	stw	r2,4(r21)
 2004678:	d8c00404 	addi	r3,sp,16
 200467c:	008001c4 	movi	r2,7
 2004680:	a8c00015 	stw	r3,0(r21)
 2004684:	dc800e15 	stw	r18,56(sp)
 2004688:	dc400d15 	stw	r17,52(sp)
 200468c:	1441da16 	blt	r2,r17,2004df8 <___vfprintf_internal_r+0xc44>
 2004690:	ad400204 	addi	r21,r21,8
 2004694:	d9015017 	ldw	r4,1344(sp)
 2004698:	20000b1e 	bne	r4,zero,20046c8 <___vfprintf_internal_r+0x514>
 200469c:	d8800444 	addi	r2,sp,17
 20046a0:	94800084 	addi	r18,r18,2
 20046a4:	8c400044 	addi	r17,r17,1
 20046a8:	a8800015 	stw	r2,0(r21)
 20046ac:	00c00084 	movi	r3,2
 20046b0:	008001c4 	movi	r2,7
 20046b4:	a8c00115 	stw	r3,4(r21)
 20046b8:	dc800e15 	stw	r18,56(sp)
 20046bc:	dc400d15 	stw	r17,52(sp)
 20046c0:	1441c216 	blt	r2,r17,2004dcc <___vfprintf_internal_r+0xc18>
 20046c4:	ad400204 	addi	r21,r21,8
 20046c8:	d9414e17 	ldw	r5,1336(sp)
 20046cc:	00802004 	movi	r2,128
 20046d0:	2880b126 	beq	r5,r2,2004998 <___vfprintf_internal_r+0x7e4>
 20046d4:	d8c14617 	ldw	r3,1304(sp)
 20046d8:	19e1c83a 	sub	r16,r3,r7
 20046dc:	0400260e 	bge	zero,r16,2004778 <___vfprintf_internal_r+0x5c4>
 20046e0:	00800404 	movi	r2,16
 20046e4:	1403c90e 	bge	r2,r16,200560c <___vfprintf_internal_r+0x1458>
 20046e8:	1027883a 	mov	r19,r2
 20046ec:	07008074 	movhi	fp,513
 20046f0:	e716c784 	addi	fp,fp,23326
 20046f4:	050001c4 	movi	r20,7
 20046f8:	00000306 	br	2004708 <___vfprintf_internal_r+0x554>
 20046fc:	843ffc04 	addi	r16,r16,-16
 2004700:	ad400204 	addi	r21,r21,8
 2004704:	9c00130e 	bge	r19,r16,2004754 <___vfprintf_internal_r+0x5a0>
 2004708:	94800404 	addi	r18,r18,16
 200470c:	8c400044 	addi	r17,r17,1
 2004710:	af000015 	stw	fp,0(r21)
 2004714:	acc00115 	stw	r19,4(r21)
 2004718:	dc800e15 	stw	r18,56(sp)
 200471c:	dc400d15 	stw	r17,52(sp)
 2004720:	a47ff60e 	bge	r20,r17,20046fc <___vfprintf_internal_r+0x548>
 2004724:	d9014f17 	ldw	r4,1340(sp)
 2004728:	b00b883a 	mov	r5,r22
 200472c:	d9800c04 	addi	r6,sp,48
 2004730:	d9c15115 	stw	r7,1348(sp)
 2004734:	200415c0 	call	200415c <__sprint_r>
 2004738:	d9c15117 	ldw	r7,1348(sp)
 200473c:	1000551e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2004740:	843ffc04 	addi	r16,r16,-16
 2004744:	dc800e17 	ldw	r18,56(sp)
 2004748:	dc400d17 	ldw	r17,52(sp)
 200474c:	dd401904 	addi	r21,sp,100
 2004750:	9c3fed16 	blt	r19,r16,2004708 <___vfprintf_internal_r+0x554>
 2004754:	9425883a 	add	r18,r18,r16
 2004758:	8c400044 	addi	r17,r17,1
 200475c:	008001c4 	movi	r2,7
 2004760:	af000015 	stw	fp,0(r21)
 2004764:	ac000115 	stw	r16,4(r21)
 2004768:	dc800e15 	stw	r18,56(sp)
 200476c:	dc400d15 	stw	r17,52(sp)
 2004770:	14418216 	blt	r2,r17,2004d7c <___vfprintf_internal_r+0xbc8>
 2004774:	ad400204 	addi	r21,r21,8
 2004778:	d9014c17 	ldw	r4,1328(sp)
 200477c:	2080400c 	andi	r2,r4,256
 2004780:	10004a1e 	bne	r2,zero,20048ac <___vfprintf_internal_r+0x6f8>
 2004784:	d9414117 	ldw	r5,1284(sp)
 2004788:	91e5883a 	add	r18,r18,r7
 200478c:	8c400044 	addi	r17,r17,1
 2004790:	008001c4 	movi	r2,7
 2004794:	a9400015 	stw	r5,0(r21)
 2004798:	a9c00115 	stw	r7,4(r21)
 200479c:	dc800e15 	stw	r18,56(sp)
 20047a0:	dc400d15 	stw	r17,52(sp)
 20047a4:	14416716 	blt	r2,r17,2004d44 <___vfprintf_internal_r+0xb90>
 20047a8:	a8c00204 	addi	r3,r21,8
 20047ac:	d9814c17 	ldw	r6,1328(sp)
 20047b0:	3080010c 	andi	r2,r6,4
 20047b4:	10002826 	beq	r2,zero,2004858 <___vfprintf_internal_r+0x6a4>
 20047b8:	d8814a17 	ldw	r2,1320(sp)
 20047bc:	d9014517 	ldw	r4,1300(sp)
 20047c0:	1121c83a 	sub	r16,r2,r4
 20047c4:	0400240e 	bge	zero,r16,2004858 <___vfprintf_internal_r+0x6a4>
 20047c8:	00800404 	movi	r2,16
 20047cc:	14044f0e 	bge	r2,r16,200590c <___vfprintf_internal_r+0x1758>
 20047d0:	dc400d17 	ldw	r17,52(sp)
 20047d4:	1027883a 	mov	r19,r2
 20047d8:	07008074 	movhi	fp,513
 20047dc:	e716cb84 	addi	fp,fp,23342
 20047e0:	050001c4 	movi	r20,7
 20047e4:	00000306 	br	20047f4 <___vfprintf_internal_r+0x640>
 20047e8:	843ffc04 	addi	r16,r16,-16
 20047ec:	18c00204 	addi	r3,r3,8
 20047f0:	9c00110e 	bge	r19,r16,2004838 <___vfprintf_internal_r+0x684>
 20047f4:	94800404 	addi	r18,r18,16
 20047f8:	8c400044 	addi	r17,r17,1
 20047fc:	1f000015 	stw	fp,0(r3)
 2004800:	1cc00115 	stw	r19,4(r3)
 2004804:	dc800e15 	stw	r18,56(sp)
 2004808:	dc400d15 	stw	r17,52(sp)
 200480c:	a47ff60e 	bge	r20,r17,20047e8 <___vfprintf_internal_r+0x634>
 2004810:	d9014f17 	ldw	r4,1340(sp)
 2004814:	b00b883a 	mov	r5,r22
 2004818:	d9800c04 	addi	r6,sp,48
 200481c:	200415c0 	call	200415c <__sprint_r>
 2004820:	10001c1e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2004824:	843ffc04 	addi	r16,r16,-16
 2004828:	dc800e17 	ldw	r18,56(sp)
 200482c:	dc400d17 	ldw	r17,52(sp)
 2004830:	d8c01904 	addi	r3,sp,100
 2004834:	9c3fef16 	blt	r19,r16,20047f4 <___vfprintf_internal_r+0x640>
 2004838:	9425883a 	add	r18,r18,r16
 200483c:	8c400044 	addi	r17,r17,1
 2004840:	008001c4 	movi	r2,7
 2004844:	1f000015 	stw	fp,0(r3)
 2004848:	1c000115 	stw	r16,4(r3)
 200484c:	dc800e15 	stw	r18,56(sp)
 2004850:	dc400d15 	stw	r17,52(sp)
 2004854:	1440cb16 	blt	r2,r17,2004b84 <___vfprintf_internal_r+0x9d0>
 2004858:	d8814a17 	ldw	r2,1320(sp)
 200485c:	d9414517 	ldw	r5,1300(sp)
 2004860:	1140010e 	bge	r2,r5,2004868 <___vfprintf_internal_r+0x6b4>
 2004864:	2805883a 	mov	r2,r5
 2004868:	d9814b17 	ldw	r6,1324(sp)
 200486c:	308d883a 	add	r6,r6,r2
 2004870:	d9814b15 	stw	r6,1324(sp)
 2004874:	90013b1e 	bne	r18,zero,2004d64 <___vfprintf_internal_r+0xbb0>
 2004878:	d9c14017 	ldw	r7,1280(sp)
 200487c:	dd401904 	addi	r21,sp,100
 2004880:	d8000d15 	stw	zero,52(sp)
 2004884:	003ea706 	br	2004324 <___vfprintf_internal_r+0x170>
 2004888:	d8800e17 	ldw	r2,56(sp)
 200488c:	10053f1e 	bne	r2,zero,2005d8c <___vfprintf_internal_r+0x1bd8>
 2004890:	d8000d15 	stw	zero,52(sp)
 2004894:	b080030b 	ldhu	r2,12(r22)
 2004898:	1080100c 	andi	r2,r2,64
 200489c:	103e8726 	beq	r2,zero,20042bc <___vfprintf_internal_r+0x108>
 20048a0:	00bfffc4 	movi	r2,-1
 20048a4:	d8814b15 	stw	r2,1324(sp)
 20048a8:	003e8406 	br	20042bc <___vfprintf_internal_r+0x108>
 20048ac:	d9814d17 	ldw	r6,1332(sp)
 20048b0:	00801944 	movi	r2,101
 20048b4:	11806e16 	blt	r2,r6,2004a70 <___vfprintf_internal_r+0x8bc>
 20048b8:	d9414717 	ldw	r5,1308(sp)
 20048bc:	00c00044 	movi	r3,1
 20048c0:	1943430e 	bge	r3,r5,20055d0 <___vfprintf_internal_r+0x141c>
 20048c4:	d8814117 	ldw	r2,1284(sp)
 20048c8:	94800044 	addi	r18,r18,1
 20048cc:	8c400044 	addi	r17,r17,1
 20048d0:	a8800015 	stw	r2,0(r21)
 20048d4:	008001c4 	movi	r2,7
 20048d8:	a8c00115 	stw	r3,4(r21)
 20048dc:	dc800e15 	stw	r18,56(sp)
 20048e0:	dc400d15 	stw	r17,52(sp)
 20048e4:	1441ca16 	blt	r2,r17,2005010 <___vfprintf_internal_r+0xe5c>
 20048e8:	a8c00204 	addi	r3,r21,8
 20048ec:	d9014917 	ldw	r4,1316(sp)
 20048f0:	00800044 	movi	r2,1
 20048f4:	94800044 	addi	r18,r18,1
 20048f8:	8c400044 	addi	r17,r17,1
 20048fc:	18800115 	stw	r2,4(r3)
 2004900:	008001c4 	movi	r2,7
 2004904:	19000015 	stw	r4,0(r3)
 2004908:	dc800e15 	stw	r18,56(sp)
 200490c:	dc400d15 	stw	r17,52(sp)
 2004910:	1441b616 	blt	r2,r17,2004fec <___vfprintf_internal_r+0xe38>
 2004914:	1cc00204 	addi	r19,r3,8
 2004918:	d9014217 	ldw	r4,1288(sp)
 200491c:	d9414317 	ldw	r5,1292(sp)
 2004920:	000d883a 	mov	r6,zero
 2004924:	000f883a 	mov	r7,zero
 2004928:	2010bf40 	call	2010bf4 <__nedf2>
 200492c:	10017426 	beq	r2,zero,2004f00 <___vfprintf_internal_r+0xd4c>
 2004930:	d9414717 	ldw	r5,1308(sp)
 2004934:	d9814117 	ldw	r6,1284(sp)
 2004938:	8c400044 	addi	r17,r17,1
 200493c:	2c85883a 	add	r2,r5,r18
 2004940:	14bfffc4 	addi	r18,r2,-1
 2004944:	28bfffc4 	addi	r2,r5,-1
 2004948:	30c00044 	addi	r3,r6,1
 200494c:	98800115 	stw	r2,4(r19)
 2004950:	008001c4 	movi	r2,7
 2004954:	98c00015 	stw	r3,0(r19)
 2004958:	dc800e15 	stw	r18,56(sp)
 200495c:	dc400d15 	stw	r17,52(sp)
 2004960:	14418e16 	blt	r2,r17,2004f9c <___vfprintf_internal_r+0xde8>
 2004964:	9cc00204 	addi	r19,r19,8
 2004968:	d9414817 	ldw	r5,1312(sp)
 200496c:	d8800804 	addi	r2,sp,32
 2004970:	8c400044 	addi	r17,r17,1
 2004974:	9165883a 	add	r18,r18,r5
 2004978:	98800015 	stw	r2,0(r19)
 200497c:	008001c4 	movi	r2,7
 2004980:	99400115 	stw	r5,4(r19)
 2004984:	dc800e15 	stw	r18,56(sp)
 2004988:	dc400d15 	stw	r17,52(sp)
 200498c:	1440ed16 	blt	r2,r17,2004d44 <___vfprintf_internal_r+0xb90>
 2004990:	98c00204 	addi	r3,r19,8
 2004994:	003f8506 	br	20047ac <___vfprintf_internal_r+0x5f8>
 2004998:	d9814a17 	ldw	r6,1320(sp)
 200499c:	d8814517 	ldw	r2,1300(sp)
 20049a0:	30a1c83a 	sub	r16,r6,r2
 20049a4:	043f4b0e 	bge	zero,r16,20046d4 <___vfprintf_internal_r+0x520>
 20049a8:	00800404 	movi	r2,16
 20049ac:	1404340e 	bge	r2,r16,2005a80 <___vfprintf_internal_r+0x18cc>
 20049b0:	1027883a 	mov	r19,r2
 20049b4:	07008074 	movhi	fp,513
 20049b8:	e716c784 	addi	fp,fp,23326
 20049bc:	050001c4 	movi	r20,7
 20049c0:	00000306 	br	20049d0 <___vfprintf_internal_r+0x81c>
 20049c4:	843ffc04 	addi	r16,r16,-16
 20049c8:	ad400204 	addi	r21,r21,8
 20049cc:	9c00130e 	bge	r19,r16,2004a1c <___vfprintf_internal_r+0x868>
 20049d0:	94800404 	addi	r18,r18,16
 20049d4:	8c400044 	addi	r17,r17,1
 20049d8:	af000015 	stw	fp,0(r21)
 20049dc:	acc00115 	stw	r19,4(r21)
 20049e0:	dc800e15 	stw	r18,56(sp)
 20049e4:	dc400d15 	stw	r17,52(sp)
 20049e8:	a47ff60e 	bge	r20,r17,20049c4 <___vfprintf_internal_r+0x810>
 20049ec:	d9014f17 	ldw	r4,1340(sp)
 20049f0:	b00b883a 	mov	r5,r22
 20049f4:	d9800c04 	addi	r6,sp,48
 20049f8:	d9c15115 	stw	r7,1348(sp)
 20049fc:	200415c0 	call	200415c <__sprint_r>
 2004a00:	d9c15117 	ldw	r7,1348(sp)
 2004a04:	103fa31e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2004a08:	843ffc04 	addi	r16,r16,-16
 2004a0c:	dc800e17 	ldw	r18,56(sp)
 2004a10:	dc400d17 	ldw	r17,52(sp)
 2004a14:	dd401904 	addi	r21,sp,100
 2004a18:	9c3fed16 	blt	r19,r16,20049d0 <___vfprintf_internal_r+0x81c>
 2004a1c:	9425883a 	add	r18,r18,r16
 2004a20:	8c400044 	addi	r17,r17,1
 2004a24:	008001c4 	movi	r2,7
 2004a28:	af000015 	stw	fp,0(r21)
 2004a2c:	ac000115 	stw	r16,4(r21)
 2004a30:	dc800e15 	stw	r18,56(sp)
 2004a34:	dc400d15 	stw	r17,52(sp)
 2004a38:	14416116 	blt	r2,r17,2004fc0 <___vfprintf_internal_r+0xe0c>
 2004a3c:	ad400204 	addi	r21,r21,8
 2004a40:	003f2406 	br	20046d4 <___vfprintf_internal_r+0x520>
 2004a44:	d9014f17 	ldw	r4,1340(sp)
 2004a48:	20093a40 	call	20093a4 <__sinit>
 2004a4c:	d9c15117 	ldw	r7,1348(sp)
 2004a50:	003def06 	br	2004210 <___vfprintf_internal_r+0x5c>
 2004a54:	d9014f17 	ldw	r4,1340(sp)
 2004a58:	b00b883a 	mov	r5,r22
 2004a5c:	d9c15115 	stw	r7,1348(sp)
 2004a60:	20078040 	call	2007804 <__swsetup_r>
 2004a64:	d9c15117 	ldw	r7,1348(sp)
 2004a68:	103dee26 	beq	r2,zero,2004224 <___vfprintf_internal_r+0x70>
 2004a6c:	003f8c06 	br	20048a0 <___vfprintf_internal_r+0x6ec>
 2004a70:	d9014217 	ldw	r4,1288(sp)
 2004a74:	d9414317 	ldw	r5,1292(sp)
 2004a78:	000d883a 	mov	r6,zero
 2004a7c:	000f883a 	mov	r7,zero
 2004a80:	2010b6c0 	call	2010b6c <__eqdf2>
 2004a84:	1000f21e 	bne	r2,zero,2004e50 <___vfprintf_internal_r+0xc9c>
 2004a88:	00808074 	movhi	r2,513
 2004a8c:	1096c704 	addi	r2,r2,23324
 2004a90:	94800044 	addi	r18,r18,1
 2004a94:	8c400044 	addi	r17,r17,1
 2004a98:	a8800015 	stw	r2,0(r21)
 2004a9c:	00c00044 	movi	r3,1
 2004aa0:	008001c4 	movi	r2,7
 2004aa4:	a8c00115 	stw	r3,4(r21)
 2004aa8:	dc800e15 	stw	r18,56(sp)
 2004aac:	dc400d15 	stw	r17,52(sp)
 2004ab0:	1442fa16 	blt	r2,r17,200569c <___vfprintf_internal_r+0x14e8>
 2004ab4:	a8c00204 	addi	r3,r21,8
 2004ab8:	d8800517 	ldw	r2,20(sp)
 2004abc:	d9014717 	ldw	r4,1308(sp)
 2004ac0:	11015c0e 	bge	r2,r4,2005034 <___vfprintf_internal_r+0xe80>
 2004ac4:	dc400d17 	ldw	r17,52(sp)
 2004ac8:	d9814917 	ldw	r6,1316(sp)
 2004acc:	00800044 	movi	r2,1
 2004ad0:	94800044 	addi	r18,r18,1
 2004ad4:	8c400044 	addi	r17,r17,1
 2004ad8:	18800115 	stw	r2,4(r3)
 2004adc:	008001c4 	movi	r2,7
 2004ae0:	19800015 	stw	r6,0(r3)
 2004ae4:	dc800e15 	stw	r18,56(sp)
 2004ae8:	dc400d15 	stw	r17,52(sp)
 2004aec:	14431016 	blt	r2,r17,2005730 <___vfprintf_internal_r+0x157c>
 2004af0:	18c00204 	addi	r3,r3,8
 2004af4:	d8814717 	ldw	r2,1308(sp)
 2004af8:	143fffc4 	addi	r16,r2,-1
 2004afc:	043f2b0e 	bge	zero,r16,20047ac <___vfprintf_internal_r+0x5f8>
 2004b00:	00800404 	movi	r2,16
 2004b04:	1402a20e 	bge	r2,r16,2005590 <___vfprintf_internal_r+0x13dc>
 2004b08:	dc400d17 	ldw	r17,52(sp)
 2004b0c:	1027883a 	mov	r19,r2
 2004b10:	07008074 	movhi	fp,513
 2004b14:	e716c784 	addi	fp,fp,23326
 2004b18:	050001c4 	movi	r20,7
 2004b1c:	00000306 	br	2004b2c <___vfprintf_internal_r+0x978>
 2004b20:	18c00204 	addi	r3,r3,8
 2004b24:	843ffc04 	addi	r16,r16,-16
 2004b28:	9c029c0e 	bge	r19,r16,200559c <___vfprintf_internal_r+0x13e8>
 2004b2c:	94800404 	addi	r18,r18,16
 2004b30:	8c400044 	addi	r17,r17,1
 2004b34:	1f000015 	stw	fp,0(r3)
 2004b38:	1cc00115 	stw	r19,4(r3)
 2004b3c:	dc800e15 	stw	r18,56(sp)
 2004b40:	dc400d15 	stw	r17,52(sp)
 2004b44:	a47ff60e 	bge	r20,r17,2004b20 <___vfprintf_internal_r+0x96c>
 2004b48:	d9014f17 	ldw	r4,1340(sp)
 2004b4c:	b00b883a 	mov	r5,r22
 2004b50:	d9800c04 	addi	r6,sp,48
 2004b54:	200415c0 	call	200415c <__sprint_r>
 2004b58:	103f4e1e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2004b5c:	dc800e17 	ldw	r18,56(sp)
 2004b60:	dc400d17 	ldw	r17,52(sp)
 2004b64:	d8c01904 	addi	r3,sp,100
 2004b68:	003fee06 	br	2004b24 <___vfprintf_internal_r+0x970>
 2004b6c:	d8802c0b 	ldhu	r2,176(sp)
 2004b70:	00ffffc4 	movi	r3,-1
 2004b74:	d8c14b15 	stw	r3,1324(sp)
 2004b78:	1080100c 	andi	r2,r2,64
 2004b7c:	103dcc1e 	bne	r2,zero,20042b0 <___vfprintf_internal_r+0xfc>
 2004b80:	003dce06 	br	20042bc <___vfprintf_internal_r+0x108>
 2004b84:	d9014f17 	ldw	r4,1340(sp)
 2004b88:	b00b883a 	mov	r5,r22
 2004b8c:	d9800c04 	addi	r6,sp,48
 2004b90:	200415c0 	call	200415c <__sprint_r>
 2004b94:	103f3f1e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2004b98:	dc800e17 	ldw	r18,56(sp)
 2004b9c:	003f2e06 	br	2004858 <___vfprintf_internal_r+0x6a4>
 2004ba0:	d9414c17 	ldw	r5,1328(sp)
 2004ba4:	29400414 	ori	r5,r5,16
 2004ba8:	d9414c15 	stw	r5,1328(sp)
 2004bac:	d9814c17 	ldw	r6,1328(sp)
 2004bb0:	3080080c 	andi	r2,r6,32
 2004bb4:	10014f1e 	bne	r2,zero,20050f4 <___vfprintf_internal_r+0xf40>
 2004bb8:	d8c14c17 	ldw	r3,1328(sp)
 2004bbc:	1880040c 	andi	r2,r3,16
 2004bc0:	1002ea1e 	bne	r2,zero,200576c <___vfprintf_internal_r+0x15b8>
 2004bc4:	d9014c17 	ldw	r4,1328(sp)
 2004bc8:	2080100c 	andi	r2,r4,64
 2004bcc:	1002e726 	beq	r2,zero,200576c <___vfprintf_internal_r+0x15b8>
 2004bd0:	3880000f 	ldh	r2,0(r7)
 2004bd4:	39c00104 	addi	r7,r7,4
 2004bd8:	d9c14015 	stw	r7,1280(sp)
 2004bdc:	1023d7fa 	srai	r17,r2,31
 2004be0:	1021883a 	mov	r16,r2
 2004be4:	88037216 	blt	r17,zero,20059b0 <___vfprintf_internal_r+0x17fc>
 2004be8:	01000044 	movi	r4,1
 2004bec:	98000416 	blt	r19,zero,2004c00 <___vfprintf_internal_r+0xa4c>
 2004bf0:	d8c14c17 	ldw	r3,1328(sp)
 2004bf4:	00bfdfc4 	movi	r2,-129
 2004bf8:	1886703a 	and	r3,r3,r2
 2004bfc:	d8c14c15 	stw	r3,1328(sp)
 2004c00:	8444b03a 	or	r2,r16,r17
 2004c04:	1002261e 	bne	r2,zero,20054a0 <___vfprintf_internal_r+0x12ec>
 2004c08:	9802251e 	bne	r19,zero,20054a0 <___vfprintf_internal_r+0x12ec>
 2004c0c:	20803fcc 	andi	r2,r4,255
 2004c10:	10029b26 	beq	r2,zero,2005680 <___vfprintf_internal_r+0x14cc>
 2004c14:	d8c01904 	addi	r3,sp,100
 2004c18:	dd000f04 	addi	r20,sp,60
 2004c1c:	d8c14115 	stw	r3,1284(sp)
 2004c20:	d8c14117 	ldw	r3,1284(sp)
 2004c24:	dcc14515 	stw	r19,1300(sp)
 2004c28:	a0c5c83a 	sub	r2,r20,r3
 2004c2c:	11c00a04 	addi	r7,r2,40
 2004c30:	99c0010e 	bge	r19,r7,2004c38 <___vfprintf_internal_r+0xa84>
 2004c34:	d9c14515 	stw	r7,1300(sp)
 2004c38:	dcc14615 	stw	r19,1304(sp)
 2004c3c:	d8800407 	ldb	r2,16(sp)
 2004c40:	103e4c26 	beq	r2,zero,2004574 <___vfprintf_internal_r+0x3c0>
 2004c44:	d8814517 	ldw	r2,1300(sp)
 2004c48:	10800044 	addi	r2,r2,1
 2004c4c:	d8814515 	stw	r2,1300(sp)
 2004c50:	003e4806 	br	2004574 <___vfprintf_internal_r+0x3c0>
 2004c54:	d9814c17 	ldw	r6,1328(sp)
 2004c58:	31800414 	ori	r6,r6,16
 2004c5c:	d9814c15 	stw	r6,1328(sp)
 2004c60:	d8c14c17 	ldw	r3,1328(sp)
 2004c64:	1880080c 	andi	r2,r3,32
 2004c68:	1001271e 	bne	r2,zero,2005108 <___vfprintf_internal_r+0xf54>
 2004c6c:	d9414c17 	ldw	r5,1328(sp)
 2004c70:	2880040c 	andi	r2,r5,16
 2004c74:	1002b61e 	bne	r2,zero,2005750 <___vfprintf_internal_r+0x159c>
 2004c78:	d9814c17 	ldw	r6,1328(sp)
 2004c7c:	3080100c 	andi	r2,r6,64
 2004c80:	1002b326 	beq	r2,zero,2005750 <___vfprintf_internal_r+0x159c>
 2004c84:	3c00000b 	ldhu	r16,0(r7)
 2004c88:	0009883a 	mov	r4,zero
 2004c8c:	39c00104 	addi	r7,r7,4
 2004c90:	0023883a 	mov	r17,zero
 2004c94:	d9c14015 	stw	r7,1280(sp)
 2004c98:	d8000405 	stb	zero,16(sp)
 2004c9c:	003fd306 	br	2004bec <___vfprintf_internal_r+0xa38>
 2004ca0:	d9014c17 	ldw	r4,1328(sp)
 2004ca4:	21000414 	ori	r4,r4,16
 2004ca8:	d9014c15 	stw	r4,1328(sp)
 2004cac:	d9414c17 	ldw	r5,1328(sp)
 2004cb0:	2880080c 	andi	r2,r5,32
 2004cb4:	1001081e 	bne	r2,zero,20050d8 <___vfprintf_internal_r+0xf24>
 2004cb8:	d8c14c17 	ldw	r3,1328(sp)
 2004cbc:	1880040c 	andi	r2,r3,16
 2004cc0:	1002b01e 	bne	r2,zero,2005784 <___vfprintf_internal_r+0x15d0>
 2004cc4:	d9014c17 	ldw	r4,1328(sp)
 2004cc8:	2080100c 	andi	r2,r4,64
 2004ccc:	1002ad26 	beq	r2,zero,2005784 <___vfprintf_internal_r+0x15d0>
 2004cd0:	3c00000b 	ldhu	r16,0(r7)
 2004cd4:	01000044 	movi	r4,1
 2004cd8:	39c00104 	addi	r7,r7,4
 2004cdc:	0023883a 	mov	r17,zero
 2004ce0:	d9c14015 	stw	r7,1280(sp)
 2004ce4:	d8000405 	stb	zero,16(sp)
 2004ce8:	003fc006 	br	2004bec <___vfprintf_internal_r+0xa38>
 2004cec:	d9014f17 	ldw	r4,1340(sp)
 2004cf0:	b00b883a 	mov	r5,r22
 2004cf4:	d9800c04 	addi	r6,sp,48
 2004cf8:	200415c0 	call	200415c <__sprint_r>
 2004cfc:	103ee51e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2004d00:	dc800e17 	ldw	r18,56(sp)
 2004d04:	d8c01904 	addi	r3,sp,100
 2004d08:	d9814c17 	ldw	r6,1328(sp)
 2004d0c:	3080004c 	andi	r2,r6,1
 2004d10:	1005003a 	cmpeq	r2,r2,zero
 2004d14:	103ea51e 	bne	r2,zero,20047ac <___vfprintf_internal_r+0x5f8>
 2004d18:	00800044 	movi	r2,1
 2004d1c:	dc400d17 	ldw	r17,52(sp)
 2004d20:	18800115 	stw	r2,4(r3)
 2004d24:	d8814917 	ldw	r2,1316(sp)
 2004d28:	94800044 	addi	r18,r18,1
 2004d2c:	8c400044 	addi	r17,r17,1
 2004d30:	18800015 	stw	r2,0(r3)
 2004d34:	008001c4 	movi	r2,7
 2004d38:	dc800e15 	stw	r18,56(sp)
 2004d3c:	dc400d15 	stw	r17,52(sp)
 2004d40:	14421e0e 	bge	r2,r17,20055bc <___vfprintf_internal_r+0x1408>
 2004d44:	d9014f17 	ldw	r4,1340(sp)
 2004d48:	b00b883a 	mov	r5,r22
 2004d4c:	d9800c04 	addi	r6,sp,48
 2004d50:	200415c0 	call	200415c <__sprint_r>
 2004d54:	103ecf1e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2004d58:	dc800e17 	ldw	r18,56(sp)
 2004d5c:	d8c01904 	addi	r3,sp,100
 2004d60:	003e9206 	br	20047ac <___vfprintf_internal_r+0x5f8>
 2004d64:	d9014f17 	ldw	r4,1340(sp)
 2004d68:	b00b883a 	mov	r5,r22
 2004d6c:	d9800c04 	addi	r6,sp,48
 2004d70:	200415c0 	call	200415c <__sprint_r>
 2004d74:	103ec026 	beq	r2,zero,2004878 <___vfprintf_internal_r+0x6c4>
 2004d78:	003ec606 	br	2004894 <___vfprintf_internal_r+0x6e0>
 2004d7c:	d9014f17 	ldw	r4,1340(sp)
 2004d80:	b00b883a 	mov	r5,r22
 2004d84:	d9800c04 	addi	r6,sp,48
 2004d88:	d9c15115 	stw	r7,1348(sp)
 2004d8c:	200415c0 	call	200415c <__sprint_r>
 2004d90:	d9c15117 	ldw	r7,1348(sp)
 2004d94:	103ebf1e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2004d98:	dc800e17 	ldw	r18,56(sp)
 2004d9c:	dc400d17 	ldw	r17,52(sp)
 2004da0:	dd401904 	addi	r21,sp,100
 2004da4:	003e7406 	br	2004778 <___vfprintf_internal_r+0x5c4>
 2004da8:	d9014f17 	ldw	r4,1340(sp)
 2004dac:	b00b883a 	mov	r5,r22
 2004db0:	d9800c04 	addi	r6,sp,48
 2004db4:	d9c15115 	stw	r7,1348(sp)
 2004db8:	200415c0 	call	200415c <__sprint_r>
 2004dbc:	d9c15117 	ldw	r7,1348(sp)
 2004dc0:	103eb41e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2004dc4:	dd401904 	addi	r21,sp,100
 2004dc8:	003d6d06 	br	2004380 <___vfprintf_internal_r+0x1cc>
 2004dcc:	d9014f17 	ldw	r4,1340(sp)
 2004dd0:	b00b883a 	mov	r5,r22
 2004dd4:	d9800c04 	addi	r6,sp,48
 2004dd8:	d9c15115 	stw	r7,1348(sp)
 2004ddc:	200415c0 	call	200415c <__sprint_r>
 2004de0:	d9c15117 	ldw	r7,1348(sp)
 2004de4:	103eab1e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2004de8:	dc800e17 	ldw	r18,56(sp)
 2004dec:	dc400d17 	ldw	r17,52(sp)
 2004df0:	dd401904 	addi	r21,sp,100
 2004df4:	003e3406 	br	20046c8 <___vfprintf_internal_r+0x514>
 2004df8:	d9014f17 	ldw	r4,1340(sp)
 2004dfc:	b00b883a 	mov	r5,r22
 2004e00:	d9800c04 	addi	r6,sp,48
 2004e04:	d9c15115 	stw	r7,1348(sp)
 2004e08:	200415c0 	call	200415c <__sprint_r>
 2004e0c:	d9c15117 	ldw	r7,1348(sp)
 2004e10:	103ea01e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2004e14:	dc800e17 	ldw	r18,56(sp)
 2004e18:	dc400d17 	ldw	r17,52(sp)
 2004e1c:	dd401904 	addi	r21,sp,100
 2004e20:	003e1c06 	br	2004694 <___vfprintf_internal_r+0x4e0>
 2004e24:	d9014f17 	ldw	r4,1340(sp)
 2004e28:	b00b883a 	mov	r5,r22
 2004e2c:	d9800c04 	addi	r6,sp,48
 2004e30:	d9c15115 	stw	r7,1348(sp)
 2004e34:	200415c0 	call	200415c <__sprint_r>
 2004e38:	d9c15117 	ldw	r7,1348(sp)
 2004e3c:	103e951e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2004e40:	dc800e17 	ldw	r18,56(sp)
 2004e44:	dc400d17 	ldw	r17,52(sp)
 2004e48:	dd401904 	addi	r21,sp,100
 2004e4c:	003e0406 	br	2004660 <___vfprintf_internal_r+0x4ac>
 2004e50:	d9000517 	ldw	r4,20(sp)
 2004e54:	0102520e 	bge	zero,r4,20057a0 <___vfprintf_internal_r+0x15ec>
 2004e58:	d9814717 	ldw	r6,1308(sp)
 2004e5c:	21807a16 	blt	r4,r6,2005048 <___vfprintf_internal_r+0xe94>
 2004e60:	d8814117 	ldw	r2,1284(sp)
 2004e64:	91a5883a 	add	r18,r18,r6
 2004e68:	8c400044 	addi	r17,r17,1
 2004e6c:	a8800015 	stw	r2,0(r21)
 2004e70:	008001c4 	movi	r2,7
 2004e74:	a9800115 	stw	r6,4(r21)
 2004e78:	dc800e15 	stw	r18,56(sp)
 2004e7c:	dc400d15 	stw	r17,52(sp)
 2004e80:	1442f616 	blt	r2,r17,2005a5c <___vfprintf_internal_r+0x18a8>
 2004e84:	a8c00204 	addi	r3,r21,8
 2004e88:	d9414717 	ldw	r5,1308(sp)
 2004e8c:	2161c83a 	sub	r16,r4,r5
 2004e90:	043f9d0e 	bge	zero,r16,2004d08 <___vfprintf_internal_r+0xb54>
 2004e94:	00800404 	movi	r2,16
 2004e98:	1402130e 	bge	r2,r16,20056e8 <___vfprintf_internal_r+0x1534>
 2004e9c:	dc400d17 	ldw	r17,52(sp)
 2004ea0:	1027883a 	mov	r19,r2
 2004ea4:	07008074 	movhi	fp,513
 2004ea8:	e716c784 	addi	fp,fp,23326
 2004eac:	050001c4 	movi	r20,7
 2004eb0:	00000306 	br	2004ec0 <___vfprintf_internal_r+0xd0c>
 2004eb4:	18c00204 	addi	r3,r3,8
 2004eb8:	843ffc04 	addi	r16,r16,-16
 2004ebc:	9c020d0e 	bge	r19,r16,20056f4 <___vfprintf_internal_r+0x1540>
 2004ec0:	94800404 	addi	r18,r18,16
 2004ec4:	8c400044 	addi	r17,r17,1
 2004ec8:	1f000015 	stw	fp,0(r3)
 2004ecc:	1cc00115 	stw	r19,4(r3)
 2004ed0:	dc800e15 	stw	r18,56(sp)
 2004ed4:	dc400d15 	stw	r17,52(sp)
 2004ed8:	a47ff60e 	bge	r20,r17,2004eb4 <___vfprintf_internal_r+0xd00>
 2004edc:	d9014f17 	ldw	r4,1340(sp)
 2004ee0:	b00b883a 	mov	r5,r22
 2004ee4:	d9800c04 	addi	r6,sp,48
 2004ee8:	200415c0 	call	200415c <__sprint_r>
 2004eec:	103e691e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2004ef0:	dc800e17 	ldw	r18,56(sp)
 2004ef4:	dc400d17 	ldw	r17,52(sp)
 2004ef8:	d8c01904 	addi	r3,sp,100
 2004efc:	003fee06 	br	2004eb8 <___vfprintf_internal_r+0xd04>
 2004f00:	d8814717 	ldw	r2,1308(sp)
 2004f04:	143fffc4 	addi	r16,r2,-1
 2004f08:	043e970e 	bge	zero,r16,2004968 <___vfprintf_internal_r+0x7b4>
 2004f0c:	00800404 	movi	r2,16
 2004f10:	1400180e 	bge	r2,r16,2004f74 <___vfprintf_internal_r+0xdc0>
 2004f14:	1029883a 	mov	r20,r2
 2004f18:	07008074 	movhi	fp,513
 2004f1c:	e716c784 	addi	fp,fp,23326
 2004f20:	054001c4 	movi	r21,7
 2004f24:	00000306 	br	2004f34 <___vfprintf_internal_r+0xd80>
 2004f28:	9cc00204 	addi	r19,r19,8
 2004f2c:	843ffc04 	addi	r16,r16,-16
 2004f30:	a400120e 	bge	r20,r16,2004f7c <___vfprintf_internal_r+0xdc8>
 2004f34:	94800404 	addi	r18,r18,16
 2004f38:	8c400044 	addi	r17,r17,1
 2004f3c:	9f000015 	stw	fp,0(r19)
 2004f40:	9d000115 	stw	r20,4(r19)
 2004f44:	dc800e15 	stw	r18,56(sp)
 2004f48:	dc400d15 	stw	r17,52(sp)
 2004f4c:	ac7ff60e 	bge	r21,r17,2004f28 <___vfprintf_internal_r+0xd74>
 2004f50:	d9014f17 	ldw	r4,1340(sp)
 2004f54:	b00b883a 	mov	r5,r22
 2004f58:	d9800c04 	addi	r6,sp,48
 2004f5c:	200415c0 	call	200415c <__sprint_r>
 2004f60:	103e4c1e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2004f64:	dc800e17 	ldw	r18,56(sp)
 2004f68:	dc400d17 	ldw	r17,52(sp)
 2004f6c:	dcc01904 	addi	r19,sp,100
 2004f70:	003fee06 	br	2004f2c <___vfprintf_internal_r+0xd78>
 2004f74:	07008074 	movhi	fp,513
 2004f78:	e716c784 	addi	fp,fp,23326
 2004f7c:	9425883a 	add	r18,r18,r16
 2004f80:	8c400044 	addi	r17,r17,1
 2004f84:	008001c4 	movi	r2,7
 2004f88:	9f000015 	stw	fp,0(r19)
 2004f8c:	9c000115 	stw	r16,4(r19)
 2004f90:	dc800e15 	stw	r18,56(sp)
 2004f94:	dc400d15 	stw	r17,52(sp)
 2004f98:	147e720e 	bge	r2,r17,2004964 <___vfprintf_internal_r+0x7b0>
 2004f9c:	d9014f17 	ldw	r4,1340(sp)
 2004fa0:	b00b883a 	mov	r5,r22
 2004fa4:	d9800c04 	addi	r6,sp,48
 2004fa8:	200415c0 	call	200415c <__sprint_r>
 2004fac:	103e391e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2004fb0:	dc800e17 	ldw	r18,56(sp)
 2004fb4:	dc400d17 	ldw	r17,52(sp)
 2004fb8:	dcc01904 	addi	r19,sp,100
 2004fbc:	003e6a06 	br	2004968 <___vfprintf_internal_r+0x7b4>
 2004fc0:	d9014f17 	ldw	r4,1340(sp)
 2004fc4:	b00b883a 	mov	r5,r22
 2004fc8:	d9800c04 	addi	r6,sp,48
 2004fcc:	d9c15115 	stw	r7,1348(sp)
 2004fd0:	200415c0 	call	200415c <__sprint_r>
 2004fd4:	d9c15117 	ldw	r7,1348(sp)
 2004fd8:	103e2e1e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2004fdc:	dc800e17 	ldw	r18,56(sp)
 2004fe0:	dc400d17 	ldw	r17,52(sp)
 2004fe4:	dd401904 	addi	r21,sp,100
 2004fe8:	003dba06 	br	20046d4 <___vfprintf_internal_r+0x520>
 2004fec:	d9014f17 	ldw	r4,1340(sp)
 2004ff0:	b00b883a 	mov	r5,r22
 2004ff4:	d9800c04 	addi	r6,sp,48
 2004ff8:	200415c0 	call	200415c <__sprint_r>
 2004ffc:	103e251e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2005000:	dc800e17 	ldw	r18,56(sp)
 2005004:	dc400d17 	ldw	r17,52(sp)
 2005008:	dcc01904 	addi	r19,sp,100
 200500c:	003e4206 	br	2004918 <___vfprintf_internal_r+0x764>
 2005010:	d9014f17 	ldw	r4,1340(sp)
 2005014:	b00b883a 	mov	r5,r22
 2005018:	d9800c04 	addi	r6,sp,48
 200501c:	200415c0 	call	200415c <__sprint_r>
 2005020:	103e1c1e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2005024:	dc800e17 	ldw	r18,56(sp)
 2005028:	dc400d17 	ldw	r17,52(sp)
 200502c:	d8c01904 	addi	r3,sp,100
 2005030:	003e2e06 	br	20048ec <___vfprintf_internal_r+0x738>
 2005034:	d9414c17 	ldw	r5,1328(sp)
 2005038:	2880004c 	andi	r2,r5,1
 200503c:	1005003a 	cmpeq	r2,r2,zero
 2005040:	103dda1e 	bne	r2,zero,20047ac <___vfprintf_internal_r+0x5f8>
 2005044:	003e9f06 	br	2004ac4 <___vfprintf_internal_r+0x910>
 2005048:	d8c14117 	ldw	r3,1284(sp)
 200504c:	9125883a 	add	r18,r18,r4
 2005050:	8c400044 	addi	r17,r17,1
 2005054:	008001c4 	movi	r2,7
 2005058:	a8c00015 	stw	r3,0(r21)
 200505c:	a9000115 	stw	r4,4(r21)
 2005060:	dc800e15 	stw	r18,56(sp)
 2005064:	dc400d15 	stw	r17,52(sp)
 2005068:	14426616 	blt	r2,r17,2005a04 <___vfprintf_internal_r+0x1850>
 200506c:	a8c00204 	addi	r3,r21,8
 2005070:	d9414917 	ldw	r5,1316(sp)
 2005074:	00800044 	movi	r2,1
 2005078:	94800044 	addi	r18,r18,1
 200507c:	8c400044 	addi	r17,r17,1
 2005080:	18800115 	stw	r2,4(r3)
 2005084:	008001c4 	movi	r2,7
 2005088:	19400015 	stw	r5,0(r3)
 200508c:	dc800e15 	stw	r18,56(sp)
 2005090:	dc400d15 	stw	r17,52(sp)
 2005094:	2021883a 	mov	r16,r4
 2005098:	14425016 	blt	r2,r17,20059dc <___vfprintf_internal_r+0x1828>
 200509c:	19400204 	addi	r5,r3,8
 20050a0:	d9814717 	ldw	r6,1308(sp)
 20050a4:	8c400044 	addi	r17,r17,1
 20050a8:	dc400d15 	stw	r17,52(sp)
 20050ac:	3107c83a 	sub	r3,r6,r4
 20050b0:	d9014117 	ldw	r4,1284(sp)
 20050b4:	90e5883a 	add	r18,r18,r3
 20050b8:	28c00115 	stw	r3,4(r5)
 20050bc:	8105883a 	add	r2,r16,r4
 20050c0:	28800015 	stw	r2,0(r5)
 20050c4:	008001c4 	movi	r2,7
 20050c8:	dc800e15 	stw	r18,56(sp)
 20050cc:	147f1d16 	blt	r2,r17,2004d44 <___vfprintf_internal_r+0xb90>
 20050d0:	28c00204 	addi	r3,r5,8
 20050d4:	003db506 	br	20047ac <___vfprintf_internal_r+0x5f8>
 20050d8:	3c000017 	ldw	r16,0(r7)
 20050dc:	3c400117 	ldw	r17,4(r7)
 20050e0:	39800204 	addi	r6,r7,8
 20050e4:	01000044 	movi	r4,1
 20050e8:	d9814015 	stw	r6,1280(sp)
 20050ec:	d8000405 	stb	zero,16(sp)
 20050f0:	003ebe06 	br	2004bec <___vfprintf_internal_r+0xa38>
 20050f4:	3c000017 	ldw	r16,0(r7)
 20050f8:	3c400117 	ldw	r17,4(r7)
 20050fc:	38800204 	addi	r2,r7,8
 2005100:	d8814015 	stw	r2,1280(sp)
 2005104:	003eb706 	br	2004be4 <___vfprintf_internal_r+0xa30>
 2005108:	3c000017 	ldw	r16,0(r7)
 200510c:	3c400117 	ldw	r17,4(r7)
 2005110:	39000204 	addi	r4,r7,8
 2005114:	d9014015 	stw	r4,1280(sp)
 2005118:	0009883a 	mov	r4,zero
 200511c:	d8000405 	stb	zero,16(sp)
 2005120:	003eb206 	br	2004bec <___vfprintf_internal_r+0xa38>
 2005124:	38c00017 	ldw	r3,0(r7)
 2005128:	39c00104 	addi	r7,r7,4
 200512c:	d8c14a15 	stw	r3,1320(sp)
 2005130:	1800d10e 	bge	r3,zero,2005478 <___vfprintf_internal_r+0x12c4>
 2005134:	00c7c83a 	sub	r3,zero,r3
 2005138:	d8c14a15 	stw	r3,1320(sp)
 200513c:	d9014c17 	ldw	r4,1328(sp)
 2005140:	b8c00007 	ldb	r3,0(r23)
 2005144:	21000114 	ori	r4,r4,4
 2005148:	d9014c15 	stw	r4,1328(sp)
 200514c:	003c9806 	br	20043b0 <___vfprintf_internal_r+0x1fc>
 2005150:	d9814c17 	ldw	r6,1328(sp)
 2005154:	3080080c 	andi	r2,r6,32
 2005158:	1001f026 	beq	r2,zero,200591c <___vfprintf_internal_r+0x1768>
 200515c:	d9014b17 	ldw	r4,1324(sp)
 2005160:	38800017 	ldw	r2,0(r7)
 2005164:	39c00104 	addi	r7,r7,4
 2005168:	d9c14015 	stw	r7,1280(sp)
 200516c:	2007d7fa 	srai	r3,r4,31
 2005170:	d9c14017 	ldw	r7,1280(sp)
 2005174:	11000015 	stw	r4,0(r2)
 2005178:	10c00115 	stw	r3,4(r2)
 200517c:	003c6906 	br	2004324 <___vfprintf_internal_r+0x170>
 2005180:	b8c00007 	ldb	r3,0(r23)
 2005184:	00801b04 	movi	r2,108
 2005188:	18824f26 	beq	r3,r2,2005ac8 <___vfprintf_internal_r+0x1914>
 200518c:	d9414c17 	ldw	r5,1328(sp)
 2005190:	29400414 	ori	r5,r5,16
 2005194:	d9414c15 	stw	r5,1328(sp)
 2005198:	003c8506 	br	20043b0 <___vfprintf_internal_r+0x1fc>
 200519c:	d9814c17 	ldw	r6,1328(sp)
 20051a0:	b8c00007 	ldb	r3,0(r23)
 20051a4:	31800814 	ori	r6,r6,32
 20051a8:	d9814c15 	stw	r6,1328(sp)
 20051ac:	003c8006 	br	20043b0 <___vfprintf_internal_r+0x1fc>
 20051b0:	d8814c17 	ldw	r2,1328(sp)
 20051b4:	3c000017 	ldw	r16,0(r7)
 20051b8:	00c01e04 	movi	r3,120
 20051bc:	10800094 	ori	r2,r2,2
 20051c0:	d8814c15 	stw	r2,1328(sp)
 20051c4:	39c00104 	addi	r7,r7,4
 20051c8:	01408074 	movhi	r5,513
 20051cc:	2956b004 	addi	r5,r5,23232
 20051d0:	00800c04 	movi	r2,48
 20051d4:	0023883a 	mov	r17,zero
 20051d8:	01000084 	movi	r4,2
 20051dc:	d9c14015 	stw	r7,1280(sp)
 20051e0:	d8c14d15 	stw	r3,1332(sp)
 20051e4:	d9414415 	stw	r5,1296(sp)
 20051e8:	d8800445 	stb	r2,17(sp)
 20051ec:	d8c00485 	stb	r3,18(sp)
 20051f0:	d8000405 	stb	zero,16(sp)
 20051f4:	003e7d06 	br	2004bec <___vfprintf_internal_r+0xa38>
 20051f8:	d8814c17 	ldw	r2,1328(sp)
 20051fc:	b8c00007 	ldb	r3,0(r23)
 2005200:	10801014 	ori	r2,r2,64
 2005204:	d8814c15 	stw	r2,1328(sp)
 2005208:	003c6906 	br	20043b0 <___vfprintf_internal_r+0x1fc>
 200520c:	d9414c17 	ldw	r5,1328(sp)
 2005210:	2880020c 	andi	r2,r5,8
 2005214:	1001df26 	beq	r2,zero,2005994 <___vfprintf_internal_r+0x17e0>
 2005218:	39800017 	ldw	r6,0(r7)
 200521c:	38800204 	addi	r2,r7,8
 2005220:	d8814015 	stw	r2,1280(sp)
 2005224:	d9814215 	stw	r6,1288(sp)
 2005228:	39c00117 	ldw	r7,4(r7)
 200522c:	d9c14315 	stw	r7,1292(sp)
 2005230:	d9014217 	ldw	r4,1288(sp)
 2005234:	d9414317 	ldw	r5,1292(sp)
 2005238:	200c0dc0 	call	200c0dc <__isinfd>
 200523c:	10021726 	beq	r2,zero,2005a9c <___vfprintf_internal_r+0x18e8>
 2005240:	d9014217 	ldw	r4,1288(sp)
 2005244:	d9414317 	ldw	r5,1292(sp)
 2005248:	000d883a 	mov	r6,zero
 200524c:	000f883a 	mov	r7,zero
 2005250:	2010d8c0 	call	2010d8c <__ltdf2>
 2005254:	1002ca16 	blt	r2,zero,2005d80 <___vfprintf_internal_r+0x1bcc>
 2005258:	d9414d17 	ldw	r5,1332(sp)
 200525c:	008011c4 	movi	r2,71
 2005260:	11420a16 	blt	r2,r5,2005a8c <___vfprintf_internal_r+0x18d8>
 2005264:	01808074 	movhi	r6,513
 2005268:	3196b504 	addi	r6,r6,23252
 200526c:	d9814115 	stw	r6,1284(sp)
 2005270:	d9014c17 	ldw	r4,1328(sp)
 2005274:	00c000c4 	movi	r3,3
 2005278:	00bfdfc4 	movi	r2,-129
 200527c:	2088703a 	and	r4,r4,r2
 2005280:	180f883a 	mov	r7,r3
 2005284:	d8c14515 	stw	r3,1300(sp)
 2005288:	d9014c15 	stw	r4,1328(sp)
 200528c:	d8014615 	stw	zero,1304(sp)
 2005290:	003e6a06 	br	2004c3c <___vfprintf_internal_r+0xa88>
 2005294:	38800017 	ldw	r2,0(r7)
 2005298:	00c00044 	movi	r3,1
 200529c:	39c00104 	addi	r7,r7,4
 20052a0:	d9c14015 	stw	r7,1280(sp)
 20052a4:	d9000f04 	addi	r4,sp,60
 20052a8:	180f883a 	mov	r7,r3
 20052ac:	d8c14515 	stw	r3,1300(sp)
 20052b0:	d9014115 	stw	r4,1284(sp)
 20052b4:	d8800f05 	stb	r2,60(sp)
 20052b8:	d8000405 	stb	zero,16(sp)
 20052bc:	003cac06 	br	2004570 <___vfprintf_internal_r+0x3bc>
 20052c0:	01408074 	movhi	r5,513
 20052c4:	2956bb04 	addi	r5,r5,23276
 20052c8:	d9414415 	stw	r5,1296(sp)
 20052cc:	d9814c17 	ldw	r6,1328(sp)
 20052d0:	3080080c 	andi	r2,r6,32
 20052d4:	1000f926 	beq	r2,zero,20056bc <___vfprintf_internal_r+0x1508>
 20052d8:	3c000017 	ldw	r16,0(r7)
 20052dc:	3c400117 	ldw	r17,4(r7)
 20052e0:	38800204 	addi	r2,r7,8
 20052e4:	d8814015 	stw	r2,1280(sp)
 20052e8:	d9414c17 	ldw	r5,1328(sp)
 20052ec:	2880004c 	andi	r2,r5,1
 20052f0:	1005003a 	cmpeq	r2,r2,zero
 20052f4:	1000b31e 	bne	r2,zero,20055c4 <___vfprintf_internal_r+0x1410>
 20052f8:	8444b03a 	or	r2,r16,r17
 20052fc:	1000b126 	beq	r2,zero,20055c4 <___vfprintf_internal_r+0x1410>
 2005300:	d9814d17 	ldw	r6,1332(sp)
 2005304:	29400094 	ori	r5,r5,2
 2005308:	00800c04 	movi	r2,48
 200530c:	01000084 	movi	r4,2
 2005310:	d9414c15 	stw	r5,1328(sp)
 2005314:	d8800445 	stb	r2,17(sp)
 2005318:	d9800485 	stb	r6,18(sp)
 200531c:	d8000405 	stb	zero,16(sp)
 2005320:	003e3206 	br	2004bec <___vfprintf_internal_r+0xa38>
 2005324:	01808074 	movhi	r6,513
 2005328:	3196b004 	addi	r6,r6,23232
 200532c:	d9814415 	stw	r6,1296(sp)
 2005330:	003fe606 	br	20052cc <___vfprintf_internal_r+0x1118>
 2005334:	00800ac4 	movi	r2,43
 2005338:	d8800405 	stb	r2,16(sp)
 200533c:	b8c00007 	ldb	r3,0(r23)
 2005340:	003c1b06 	br	20043b0 <___vfprintf_internal_r+0x1fc>
 2005344:	d8814c17 	ldw	r2,1328(sp)
 2005348:	b8c00007 	ldb	r3,0(r23)
 200534c:	10800054 	ori	r2,r2,1
 2005350:	d8814c15 	stw	r2,1328(sp)
 2005354:	003c1606 	br	20043b0 <___vfprintf_internal_r+0x1fc>
 2005358:	d8800407 	ldb	r2,16(sp)
 200535c:	1000461e 	bne	r2,zero,2005478 <___vfprintf_internal_r+0x12c4>
 2005360:	00800804 	movi	r2,32
 2005364:	d8800405 	stb	r2,16(sp)
 2005368:	b8c00007 	ldb	r3,0(r23)
 200536c:	003c1006 	br	20043b0 <___vfprintf_internal_r+0x1fc>
 2005370:	d9814c17 	ldw	r6,1328(sp)
 2005374:	b8c00007 	ldb	r3,0(r23)
 2005378:	31800214 	ori	r6,r6,8
 200537c:	d9814c15 	stw	r6,1328(sp)
 2005380:	003c0b06 	br	20043b0 <___vfprintf_internal_r+0x1fc>
 2005384:	0007883a 	mov	r3,zero
 2005388:	01000244 	movi	r4,9
 200538c:	188002a4 	muli	r2,r3,10
 2005390:	b8c00007 	ldb	r3,0(r23)
 2005394:	d9814d17 	ldw	r6,1332(sp)
 2005398:	bdc00044 	addi	r23,r23,1
 200539c:	d8c14d15 	stw	r3,1332(sp)
 20053a0:	d9414d17 	ldw	r5,1332(sp)
 20053a4:	3085883a 	add	r2,r6,r2
 20053a8:	10fff404 	addi	r3,r2,-48
 20053ac:	28bff404 	addi	r2,r5,-48
 20053b0:	20bff62e 	bgeu	r4,r2,200538c <___vfprintf_internal_r+0x11d8>
 20053b4:	d8c14a15 	stw	r3,1320(sp)
 20053b8:	003bff06 	br	20043b8 <___vfprintf_internal_r+0x204>
 20053bc:	d9414c17 	ldw	r5,1328(sp)
 20053c0:	b8c00007 	ldb	r3,0(r23)
 20053c4:	29402014 	ori	r5,r5,128
 20053c8:	d9414c15 	stw	r5,1328(sp)
 20053cc:	003bf806 	br	20043b0 <___vfprintf_internal_r+0x1fc>
 20053d0:	b8c00007 	ldb	r3,0(r23)
 20053d4:	00800a84 	movi	r2,42
 20053d8:	bdc00044 	addi	r23,r23,1
 20053dc:	18831526 	beq	r3,r2,2006034 <___vfprintf_internal_r+0x1e80>
 20053e0:	d8c14d15 	stw	r3,1332(sp)
 20053e4:	18bff404 	addi	r2,r3,-48
 20053e8:	00c00244 	movi	r3,9
 20053ec:	18827836 	bltu	r3,r2,2005dd0 <___vfprintf_internal_r+0x1c1c>
 20053f0:	000d883a 	mov	r6,zero
 20053f4:	308002a4 	muli	r2,r6,10
 20053f8:	b9800007 	ldb	r6,0(r23)
 20053fc:	d9414d17 	ldw	r5,1332(sp)
 2005400:	bdc00044 	addi	r23,r23,1
 2005404:	d9814d15 	stw	r6,1332(sp)
 2005408:	d9014d17 	ldw	r4,1332(sp)
 200540c:	1145883a 	add	r2,r2,r5
 2005410:	11bff404 	addi	r6,r2,-48
 2005414:	20bff404 	addi	r2,r4,-48
 2005418:	18bff62e 	bgeu	r3,r2,20053f4 <___vfprintf_internal_r+0x1240>
 200541c:	3027883a 	mov	r19,r6
 2005420:	303be50e 	bge	r6,zero,20043b8 <___vfprintf_internal_r+0x204>
 2005424:	04ffffc4 	movi	r19,-1
 2005428:	003be306 	br	20043b8 <___vfprintf_internal_r+0x204>
 200542c:	d8000405 	stb	zero,16(sp)
 2005430:	39800017 	ldw	r6,0(r7)
 2005434:	39c00104 	addi	r7,r7,4
 2005438:	d9c14015 	stw	r7,1280(sp)
 200543c:	d9814115 	stw	r6,1284(sp)
 2005440:	3001c926 	beq	r6,zero,2005b68 <___vfprintf_internal_r+0x19b4>
 2005444:	98000e16 	blt	r19,zero,2005480 <___vfprintf_internal_r+0x12cc>
 2005448:	d9014117 	ldw	r4,1284(sp)
 200544c:	000b883a 	mov	r5,zero
 2005450:	980d883a 	mov	r6,r19
 2005454:	200a6180 	call	200a618 <memchr>
 2005458:	10025926 	beq	r2,zero,2005dc0 <___vfprintf_internal_r+0x1c0c>
 200545c:	d8c14117 	ldw	r3,1284(sp)
 2005460:	10cfc83a 	sub	r7,r2,r3
 2005464:	99c19e16 	blt	r19,r7,2005ae0 <___vfprintf_internal_r+0x192c>
 2005468:	d9c14515 	stw	r7,1300(sp)
 200546c:	38000916 	blt	r7,zero,2005494 <___vfprintf_internal_r+0x12e0>
 2005470:	d8014615 	stw	zero,1304(sp)
 2005474:	003df106 	br	2004c3c <___vfprintf_internal_r+0xa88>
 2005478:	b8c00007 	ldb	r3,0(r23)
 200547c:	003bcc06 	br	20043b0 <___vfprintf_internal_r+0x1fc>
 2005480:	d9014117 	ldw	r4,1284(sp)
 2005484:	20040e80 	call	20040e8 <strlen>
 2005488:	d8814515 	stw	r2,1300(sp)
 200548c:	100f883a 	mov	r7,r2
 2005490:	103ff70e 	bge	r2,zero,2005470 <___vfprintf_internal_r+0x12bc>
 2005494:	d8014515 	stw	zero,1300(sp)
 2005498:	d8014615 	stw	zero,1304(sp)
 200549c:	003de706 	br	2004c3c <___vfprintf_internal_r+0xa88>
 20054a0:	20c03fcc 	andi	r3,r4,255
 20054a4:	00800044 	movi	r2,1
 20054a8:	18802d26 	beq	r3,r2,2005560 <___vfprintf_internal_r+0x13ac>
 20054ac:	18800e36 	bltu	r3,r2,20054e8 <___vfprintf_internal_r+0x1334>
 20054b0:	00800084 	movi	r2,2
 20054b4:	1880fa26 	beq	r3,r2,20058a0 <___vfprintf_internal_r+0x16ec>
 20054b8:	01008074 	movhi	r4,513
 20054bc:	2116c004 	addi	r4,r4,23296
 20054c0:	20040e80 	call	20040e8 <strlen>
 20054c4:	100f883a 	mov	r7,r2
 20054c8:	dcc14515 	stw	r19,1300(sp)
 20054cc:	9880010e 	bge	r19,r2,20054d4 <___vfprintf_internal_r+0x1320>
 20054d0:	d8814515 	stw	r2,1300(sp)
 20054d4:	00808074 	movhi	r2,513
 20054d8:	1096c004 	addi	r2,r2,23296
 20054dc:	dcc14615 	stw	r19,1304(sp)
 20054e0:	d8814115 	stw	r2,1284(sp)
 20054e4:	003dd506 	br	2004c3c <___vfprintf_internal_r+0xa88>
 20054e8:	d9401904 	addi	r5,sp,100
 20054ec:	dd000f04 	addi	r20,sp,60
 20054f0:	d9414115 	stw	r5,1284(sp)
 20054f4:	880a977a 	slli	r5,r17,29
 20054f8:	d9814117 	ldw	r6,1284(sp)
 20054fc:	8004d0fa 	srli	r2,r16,3
 2005500:	8806d0fa 	srli	r3,r17,3
 2005504:	810001cc 	andi	r4,r16,7
 2005508:	2884b03a 	or	r2,r5,r2
 200550c:	31bfffc4 	addi	r6,r6,-1
 2005510:	21000c04 	addi	r4,r4,48
 2005514:	d9814115 	stw	r6,1284(sp)
 2005518:	10cab03a 	or	r5,r2,r3
 200551c:	31000005 	stb	r4,0(r6)
 2005520:	1021883a 	mov	r16,r2
 2005524:	1823883a 	mov	r17,r3
 2005528:	283ff21e 	bne	r5,zero,20054f4 <___vfprintf_internal_r+0x1340>
 200552c:	d8c14c17 	ldw	r3,1328(sp)
 2005530:	1880004c 	andi	r2,r3,1
 2005534:	1005003a 	cmpeq	r2,r2,zero
 2005538:	103db91e 	bne	r2,zero,2004c20 <___vfprintf_internal_r+0xa6c>
 200553c:	20803fcc 	andi	r2,r4,255
 2005540:	1080201c 	xori	r2,r2,128
 2005544:	10bfe004 	addi	r2,r2,-128
 2005548:	00c00c04 	movi	r3,48
 200554c:	10fdb426 	beq	r2,r3,2004c20 <___vfprintf_internal_r+0xa6c>
 2005550:	31bfffc4 	addi	r6,r6,-1
 2005554:	d9814115 	stw	r6,1284(sp)
 2005558:	30c00005 	stb	r3,0(r6)
 200555c:	003db006 	br	2004c20 <___vfprintf_internal_r+0xa6c>
 2005560:	88800068 	cmpgeui	r2,r17,1
 2005564:	10002c1e 	bne	r2,zero,2005618 <___vfprintf_internal_r+0x1464>
 2005568:	8800021e 	bne	r17,zero,2005574 <___vfprintf_internal_r+0x13c0>
 200556c:	00800244 	movi	r2,9
 2005570:	14002936 	bltu	r2,r16,2005618 <___vfprintf_internal_r+0x1464>
 2005574:	d90018c4 	addi	r4,sp,99
 2005578:	dd000f04 	addi	r20,sp,60
 200557c:	d9014115 	stw	r4,1284(sp)
 2005580:	d9014117 	ldw	r4,1284(sp)
 2005584:	80800c04 	addi	r2,r16,48
 2005588:	20800005 	stb	r2,0(r4)
 200558c:	003da406 	br	2004c20 <___vfprintf_internal_r+0xa6c>
 2005590:	dc400d17 	ldw	r17,52(sp)
 2005594:	07008074 	movhi	fp,513
 2005598:	e716c784 	addi	fp,fp,23326
 200559c:	9425883a 	add	r18,r18,r16
 20055a0:	8c400044 	addi	r17,r17,1
 20055a4:	008001c4 	movi	r2,7
 20055a8:	1f000015 	stw	fp,0(r3)
 20055ac:	1c000115 	stw	r16,4(r3)
 20055b0:	dc800e15 	stw	r18,56(sp)
 20055b4:	dc400d15 	stw	r17,52(sp)
 20055b8:	147de216 	blt	r2,r17,2004d44 <___vfprintf_internal_r+0xb90>
 20055bc:	18c00204 	addi	r3,r3,8
 20055c0:	003c7a06 	br	20047ac <___vfprintf_internal_r+0x5f8>
 20055c4:	01000084 	movi	r4,2
 20055c8:	d8000405 	stb	zero,16(sp)
 20055cc:	003d8706 	br	2004bec <___vfprintf_internal_r+0xa38>
 20055d0:	d9814c17 	ldw	r6,1328(sp)
 20055d4:	30c4703a 	and	r2,r6,r3
 20055d8:	1005003a 	cmpeq	r2,r2,zero
 20055dc:	103cb926 	beq	r2,zero,20048c4 <___vfprintf_internal_r+0x710>
 20055e0:	d9014117 	ldw	r4,1284(sp)
 20055e4:	94800044 	addi	r18,r18,1
 20055e8:	8c400044 	addi	r17,r17,1
 20055ec:	008001c4 	movi	r2,7
 20055f0:	a9000015 	stw	r4,0(r21)
 20055f4:	a8c00115 	stw	r3,4(r21)
 20055f8:	dc800e15 	stw	r18,56(sp)
 20055fc:	dc400d15 	stw	r17,52(sp)
 2005600:	147e6616 	blt	r2,r17,2004f9c <___vfprintf_internal_r+0xde8>
 2005604:	acc00204 	addi	r19,r21,8
 2005608:	003cd706 	br	2004968 <___vfprintf_internal_r+0x7b4>
 200560c:	07008074 	movhi	fp,513
 2005610:	e716c784 	addi	fp,fp,23326
 2005614:	003c4f06 	br	2004754 <___vfprintf_internal_r+0x5a0>
 2005618:	dd000f04 	addi	r20,sp,60
 200561c:	dc801904 	addi	r18,sp,100
 2005620:	8009883a 	mov	r4,r16
 2005624:	880b883a 	mov	r5,r17
 2005628:	01800284 	movi	r6,10
 200562c:	000f883a 	mov	r7,zero
 2005630:	200ff500 	call	200ff50 <__umoddi3>
 2005634:	12000c04 	addi	r8,r2,48
 2005638:	94bfffc4 	addi	r18,r18,-1
 200563c:	8009883a 	mov	r4,r16
 2005640:	880b883a 	mov	r5,r17
 2005644:	01800284 	movi	r6,10
 2005648:	000f883a 	mov	r7,zero
 200564c:	92000005 	stb	r8,0(r18)
 2005650:	200f9740 	call	200f974 <__udivdi3>
 2005654:	1009883a 	mov	r4,r2
 2005658:	1021883a 	mov	r16,r2
 200565c:	18800068 	cmpgeui	r2,r3,1
 2005660:	1823883a 	mov	r17,r3
 2005664:	103fee1e 	bne	r2,zero,2005620 <___vfprintf_internal_r+0x146c>
 2005668:	1800021e 	bne	r3,zero,2005674 <___vfprintf_internal_r+0x14c0>
 200566c:	00800244 	movi	r2,9
 2005670:	113feb36 	bltu	r2,r4,2005620 <___vfprintf_internal_r+0x146c>
 2005674:	94bfffc4 	addi	r18,r18,-1
 2005678:	dc814115 	stw	r18,1284(sp)
 200567c:	003fc006 	br	2005580 <___vfprintf_internal_r+0x13cc>
 2005680:	d9014c17 	ldw	r4,1328(sp)
 2005684:	2080004c 	andi	r2,r4,1
 2005688:	10009a1e 	bne	r2,zero,20058f4 <___vfprintf_internal_r+0x1740>
 200568c:	d9401904 	addi	r5,sp,100
 2005690:	dd000f04 	addi	r20,sp,60
 2005694:	d9414115 	stw	r5,1284(sp)
 2005698:	003d6106 	br	2004c20 <___vfprintf_internal_r+0xa6c>
 200569c:	d9014f17 	ldw	r4,1340(sp)
 20056a0:	b00b883a 	mov	r5,r22
 20056a4:	d9800c04 	addi	r6,sp,48
 20056a8:	200415c0 	call	200415c <__sprint_r>
 20056ac:	103c791e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 20056b0:	dc800e17 	ldw	r18,56(sp)
 20056b4:	d8c01904 	addi	r3,sp,100
 20056b8:	003cff06 	br	2004ab8 <___vfprintf_internal_r+0x904>
 20056bc:	d8c14c17 	ldw	r3,1328(sp)
 20056c0:	1880040c 	andi	r2,r3,16
 20056c4:	1000711e 	bne	r2,zero,200588c <___vfprintf_internal_r+0x16d8>
 20056c8:	d9014c17 	ldw	r4,1328(sp)
 20056cc:	2080100c 	andi	r2,r4,64
 20056d0:	10006e26 	beq	r2,zero,200588c <___vfprintf_internal_r+0x16d8>
 20056d4:	3c00000b 	ldhu	r16,0(r7)
 20056d8:	0023883a 	mov	r17,zero
 20056dc:	39c00104 	addi	r7,r7,4
 20056e0:	d9c14015 	stw	r7,1280(sp)
 20056e4:	003f0006 	br	20052e8 <___vfprintf_internal_r+0x1134>
 20056e8:	dc400d17 	ldw	r17,52(sp)
 20056ec:	07008074 	movhi	fp,513
 20056f0:	e716c784 	addi	fp,fp,23326
 20056f4:	9425883a 	add	r18,r18,r16
 20056f8:	8c400044 	addi	r17,r17,1
 20056fc:	008001c4 	movi	r2,7
 2005700:	1f000015 	stw	fp,0(r3)
 2005704:	1c000115 	stw	r16,4(r3)
 2005708:	dc800e15 	stw	r18,56(sp)
 200570c:	dc400d15 	stw	r17,52(sp)
 2005710:	147d7616 	blt	r2,r17,2004cec <___vfprintf_internal_r+0xb38>
 2005714:	18c00204 	addi	r3,r3,8
 2005718:	003d7b06 	br	2004d08 <___vfprintf_internal_r+0xb54>
 200571c:	dc800e17 	ldw	r18,56(sp)
 2005720:	dc400d17 	ldw	r17,52(sp)
 2005724:	07008074 	movhi	fp,513
 2005728:	e716cb84 	addi	fp,fp,23342
 200572c:	003bc006 	br	2004630 <___vfprintf_internal_r+0x47c>
 2005730:	d9014f17 	ldw	r4,1340(sp)
 2005734:	b00b883a 	mov	r5,r22
 2005738:	d9800c04 	addi	r6,sp,48
 200573c:	200415c0 	call	200415c <__sprint_r>
 2005740:	103c541e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2005744:	dc800e17 	ldw	r18,56(sp)
 2005748:	d8c01904 	addi	r3,sp,100
 200574c:	003ce906 	br	2004af4 <___vfprintf_internal_r+0x940>
 2005750:	3c000017 	ldw	r16,0(r7)
 2005754:	0009883a 	mov	r4,zero
 2005758:	39c00104 	addi	r7,r7,4
 200575c:	0023883a 	mov	r17,zero
 2005760:	d9c14015 	stw	r7,1280(sp)
 2005764:	d8000405 	stb	zero,16(sp)
 2005768:	003d2006 	br	2004bec <___vfprintf_internal_r+0xa38>
 200576c:	38800017 	ldw	r2,0(r7)
 2005770:	39c00104 	addi	r7,r7,4
 2005774:	d9c14015 	stw	r7,1280(sp)
 2005778:	1023d7fa 	srai	r17,r2,31
 200577c:	1021883a 	mov	r16,r2
 2005780:	003d1806 	br	2004be4 <___vfprintf_internal_r+0xa30>
 2005784:	3c000017 	ldw	r16,0(r7)
 2005788:	01000044 	movi	r4,1
 200578c:	39c00104 	addi	r7,r7,4
 2005790:	0023883a 	mov	r17,zero
 2005794:	d9c14015 	stw	r7,1280(sp)
 2005798:	d8000405 	stb	zero,16(sp)
 200579c:	003d1306 	br	2004bec <___vfprintf_internal_r+0xa38>
 20057a0:	00808074 	movhi	r2,513
 20057a4:	1096c704 	addi	r2,r2,23324
 20057a8:	94800044 	addi	r18,r18,1
 20057ac:	8c400044 	addi	r17,r17,1
 20057b0:	a8800015 	stw	r2,0(r21)
 20057b4:	00c00044 	movi	r3,1
 20057b8:	008001c4 	movi	r2,7
 20057bc:	a8c00115 	stw	r3,4(r21)
 20057c0:	dc800e15 	stw	r18,56(sp)
 20057c4:	dc400d15 	stw	r17,52(sp)
 20057c8:	1440ca16 	blt	r2,r17,2005af4 <___vfprintf_internal_r+0x1940>
 20057cc:	a8c00204 	addi	r3,r21,8
 20057d0:	2000061e 	bne	r4,zero,20057ec <___vfprintf_internal_r+0x1638>
 20057d4:	d9414717 	ldw	r5,1308(sp)
 20057d8:	2800041e 	bne	r5,zero,20057ec <___vfprintf_internal_r+0x1638>
 20057dc:	d9814c17 	ldw	r6,1328(sp)
 20057e0:	3080004c 	andi	r2,r6,1
 20057e4:	1005003a 	cmpeq	r2,r2,zero
 20057e8:	103bf01e 	bne	r2,zero,20047ac <___vfprintf_internal_r+0x5f8>
 20057ec:	00800044 	movi	r2,1
 20057f0:	dc400d17 	ldw	r17,52(sp)
 20057f4:	18800115 	stw	r2,4(r3)
 20057f8:	d8814917 	ldw	r2,1316(sp)
 20057fc:	94800044 	addi	r18,r18,1
 2005800:	8c400044 	addi	r17,r17,1
 2005804:	18800015 	stw	r2,0(r3)
 2005808:	008001c4 	movi	r2,7
 200580c:	dc800e15 	stw	r18,56(sp)
 2005810:	dc400d15 	stw	r17,52(sp)
 2005814:	1440ca16 	blt	r2,r17,2005b40 <___vfprintf_internal_r+0x198c>
 2005818:	18c00204 	addi	r3,r3,8
 200581c:	0121c83a 	sub	r16,zero,r4
 2005820:	0400500e 	bge	zero,r16,2005964 <___vfprintf_internal_r+0x17b0>
 2005824:	00800404 	movi	r2,16
 2005828:	1400800e 	bge	r2,r16,2005a2c <___vfprintf_internal_r+0x1878>
 200582c:	1027883a 	mov	r19,r2
 2005830:	07008074 	movhi	fp,513
 2005834:	e716c784 	addi	fp,fp,23326
 2005838:	050001c4 	movi	r20,7
 200583c:	00000306 	br	200584c <___vfprintf_internal_r+0x1698>
 2005840:	18c00204 	addi	r3,r3,8
 2005844:	843ffc04 	addi	r16,r16,-16
 2005848:	9c007a0e 	bge	r19,r16,2005a34 <___vfprintf_internal_r+0x1880>
 200584c:	94800404 	addi	r18,r18,16
 2005850:	8c400044 	addi	r17,r17,1
 2005854:	1f000015 	stw	fp,0(r3)
 2005858:	1cc00115 	stw	r19,4(r3)
 200585c:	dc800e15 	stw	r18,56(sp)
 2005860:	dc400d15 	stw	r17,52(sp)
 2005864:	a47ff60e 	bge	r20,r17,2005840 <___vfprintf_internal_r+0x168c>
 2005868:	d9014f17 	ldw	r4,1340(sp)
 200586c:	b00b883a 	mov	r5,r22
 2005870:	d9800c04 	addi	r6,sp,48
 2005874:	200415c0 	call	200415c <__sprint_r>
 2005878:	103c061e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 200587c:	dc800e17 	ldw	r18,56(sp)
 2005880:	dc400d17 	ldw	r17,52(sp)
 2005884:	d8c01904 	addi	r3,sp,100
 2005888:	003fee06 	br	2005844 <___vfprintf_internal_r+0x1690>
 200588c:	3c000017 	ldw	r16,0(r7)
 2005890:	0023883a 	mov	r17,zero
 2005894:	39c00104 	addi	r7,r7,4
 2005898:	d9c14015 	stw	r7,1280(sp)
 200589c:	003e9206 	br	20052e8 <___vfprintf_internal_r+0x1134>
 20058a0:	d9401904 	addi	r5,sp,100
 20058a4:	dd000f04 	addi	r20,sp,60
 20058a8:	d9414115 	stw	r5,1284(sp)
 20058ac:	d9814417 	ldw	r6,1296(sp)
 20058b0:	880a973a 	slli	r5,r17,28
 20058b4:	8004d13a 	srli	r2,r16,4
 20058b8:	810003cc 	andi	r4,r16,15
 20058bc:	3109883a 	add	r4,r6,r4
 20058c0:	2884b03a 	or	r2,r5,r2
 20058c4:	21400003 	ldbu	r5,0(r4)
 20058c8:	d9014117 	ldw	r4,1284(sp)
 20058cc:	8806d13a 	srli	r3,r17,4
 20058d0:	1021883a 	mov	r16,r2
 20058d4:	213fffc4 	addi	r4,r4,-1
 20058d8:	d9014115 	stw	r4,1284(sp)
 20058dc:	d9814117 	ldw	r6,1284(sp)
 20058e0:	10c8b03a 	or	r4,r2,r3
 20058e4:	1823883a 	mov	r17,r3
 20058e8:	31400005 	stb	r5,0(r6)
 20058ec:	203fef1e 	bne	r4,zero,20058ac <___vfprintf_internal_r+0x16f8>
 20058f0:	003ccb06 	br	2004c20 <___vfprintf_internal_r+0xa6c>
 20058f4:	00800c04 	movi	r2,48
 20058f8:	d98018c4 	addi	r6,sp,99
 20058fc:	dd000f04 	addi	r20,sp,60
 2005900:	d88018c5 	stb	r2,99(sp)
 2005904:	d9814115 	stw	r6,1284(sp)
 2005908:	003cc506 	br	2004c20 <___vfprintf_internal_r+0xa6c>
 200590c:	dc400d17 	ldw	r17,52(sp)
 2005910:	07008074 	movhi	fp,513
 2005914:	e716cb84 	addi	fp,fp,23342
 2005918:	003bc706 	br	2004838 <___vfprintf_internal_r+0x684>
 200591c:	d9414c17 	ldw	r5,1328(sp)
 2005920:	2880040c 	andi	r2,r5,16
 2005924:	10007c26 	beq	r2,zero,2005b18 <___vfprintf_internal_r+0x1964>
 2005928:	38800017 	ldw	r2,0(r7)
 200592c:	39c00104 	addi	r7,r7,4
 2005930:	d9c14015 	stw	r7,1280(sp)
 2005934:	d9814b17 	ldw	r6,1324(sp)
 2005938:	d9c14017 	ldw	r7,1280(sp)
 200593c:	11800015 	stw	r6,0(r2)
 2005940:	003a7806 	br	2004324 <___vfprintf_internal_r+0x170>
 2005944:	d9014f17 	ldw	r4,1340(sp)
 2005948:	b00b883a 	mov	r5,r22
 200594c:	d9800c04 	addi	r6,sp,48
 2005950:	200415c0 	call	200415c <__sprint_r>
 2005954:	103bcf1e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2005958:	dc800e17 	ldw	r18,56(sp)
 200595c:	dc400d17 	ldw	r17,52(sp)
 2005960:	d8c01904 	addi	r3,sp,100
 2005964:	d9014717 	ldw	r4,1308(sp)
 2005968:	d9414117 	ldw	r5,1284(sp)
 200596c:	8c400044 	addi	r17,r17,1
 2005970:	9125883a 	add	r18,r18,r4
 2005974:	008001c4 	movi	r2,7
 2005978:	19400015 	stw	r5,0(r3)
 200597c:	19000115 	stw	r4,4(r3)
 2005980:	dc800e15 	stw	r18,56(sp)
 2005984:	dc400d15 	stw	r17,52(sp)
 2005988:	147cee16 	blt	r2,r17,2004d44 <___vfprintf_internal_r+0xb90>
 200598c:	18c00204 	addi	r3,r3,8
 2005990:	003b8606 	br	20047ac <___vfprintf_internal_r+0x5f8>
 2005994:	38c00017 	ldw	r3,0(r7)
 2005998:	39000204 	addi	r4,r7,8
 200599c:	d9014015 	stw	r4,1280(sp)
 20059a0:	d8c14215 	stw	r3,1288(sp)
 20059a4:	39c00117 	ldw	r7,4(r7)
 20059a8:	d9c14315 	stw	r7,1292(sp)
 20059ac:	003e2006 	br	2005230 <___vfprintf_internal_r+0x107c>
 20059b0:	0005883a 	mov	r2,zero
 20059b4:	1409c83a 	sub	r4,r2,r16
 20059b8:	1105803a 	cmpltu	r2,r2,r4
 20059bc:	044bc83a 	sub	r5,zero,r17
 20059c0:	2885c83a 	sub	r2,r5,r2
 20059c4:	2021883a 	mov	r16,r4
 20059c8:	1023883a 	mov	r17,r2
 20059cc:	01000044 	movi	r4,1
 20059d0:	00800b44 	movi	r2,45
 20059d4:	d8800405 	stb	r2,16(sp)
 20059d8:	003c8406 	br	2004bec <___vfprintf_internal_r+0xa38>
 20059dc:	d9014f17 	ldw	r4,1340(sp)
 20059e0:	b00b883a 	mov	r5,r22
 20059e4:	d9800c04 	addi	r6,sp,48
 20059e8:	200415c0 	call	200415c <__sprint_r>
 20059ec:	103ba91e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 20059f0:	dc800e17 	ldw	r18,56(sp)
 20059f4:	dc400d17 	ldw	r17,52(sp)
 20059f8:	d9000517 	ldw	r4,20(sp)
 20059fc:	d9401904 	addi	r5,sp,100
 2005a00:	003da706 	br	20050a0 <___vfprintf_internal_r+0xeec>
 2005a04:	d9014f17 	ldw	r4,1340(sp)
 2005a08:	b00b883a 	mov	r5,r22
 2005a0c:	d9800c04 	addi	r6,sp,48
 2005a10:	200415c0 	call	200415c <__sprint_r>
 2005a14:	103b9f1e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2005a18:	dc800e17 	ldw	r18,56(sp)
 2005a1c:	dc400d17 	ldw	r17,52(sp)
 2005a20:	d9000517 	ldw	r4,20(sp)
 2005a24:	d8c01904 	addi	r3,sp,100
 2005a28:	003d9106 	br	2005070 <___vfprintf_internal_r+0xebc>
 2005a2c:	07008074 	movhi	fp,513
 2005a30:	e716c784 	addi	fp,fp,23326
 2005a34:	9425883a 	add	r18,r18,r16
 2005a38:	8c400044 	addi	r17,r17,1
 2005a3c:	008001c4 	movi	r2,7
 2005a40:	1f000015 	stw	fp,0(r3)
 2005a44:	1c000115 	stw	r16,4(r3)
 2005a48:	dc800e15 	stw	r18,56(sp)
 2005a4c:	dc400d15 	stw	r17,52(sp)
 2005a50:	147fbc16 	blt	r2,r17,2005944 <___vfprintf_internal_r+0x1790>
 2005a54:	18c00204 	addi	r3,r3,8
 2005a58:	003fc206 	br	2005964 <___vfprintf_internal_r+0x17b0>
 2005a5c:	d9014f17 	ldw	r4,1340(sp)
 2005a60:	b00b883a 	mov	r5,r22
 2005a64:	d9800c04 	addi	r6,sp,48
 2005a68:	200415c0 	call	200415c <__sprint_r>
 2005a6c:	103b891e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2005a70:	dc800e17 	ldw	r18,56(sp)
 2005a74:	d9000517 	ldw	r4,20(sp)
 2005a78:	d8c01904 	addi	r3,sp,100
 2005a7c:	003d0206 	br	2004e88 <___vfprintf_internal_r+0xcd4>
 2005a80:	07008074 	movhi	fp,513
 2005a84:	e716c784 	addi	fp,fp,23326
 2005a88:	003be406 	br	2004a1c <___vfprintf_internal_r+0x868>
 2005a8c:	00808074 	movhi	r2,513
 2005a90:	1096b604 	addi	r2,r2,23256
 2005a94:	d8814115 	stw	r2,1284(sp)
 2005a98:	003df506 	br	2005270 <___vfprintf_internal_r+0x10bc>
 2005a9c:	d9014217 	ldw	r4,1288(sp)
 2005aa0:	d9414317 	ldw	r5,1292(sp)
 2005aa4:	200c11c0 	call	200c11c <__isnand>
 2005aa8:	10003926 	beq	r2,zero,2005b90 <___vfprintf_internal_r+0x19dc>
 2005aac:	d9414d17 	ldw	r5,1332(sp)
 2005ab0:	008011c4 	movi	r2,71
 2005ab4:	1140ce16 	blt	r2,r5,2005df0 <___vfprintf_internal_r+0x1c3c>
 2005ab8:	01808074 	movhi	r6,513
 2005abc:	3196b704 	addi	r6,r6,23260
 2005ac0:	d9814115 	stw	r6,1284(sp)
 2005ac4:	003dea06 	br	2005270 <___vfprintf_internal_r+0x10bc>
 2005ac8:	d9014c17 	ldw	r4,1328(sp)
 2005acc:	bdc00044 	addi	r23,r23,1
 2005ad0:	b8c00007 	ldb	r3,0(r23)
 2005ad4:	21000814 	ori	r4,r4,32
 2005ad8:	d9014c15 	stw	r4,1328(sp)
 2005adc:	003a3406 	br	20043b0 <___vfprintf_internal_r+0x1fc>
 2005ae0:	dcc14515 	stw	r19,1300(sp)
 2005ae4:	98011016 	blt	r19,zero,2005f28 <___vfprintf_internal_r+0x1d74>
 2005ae8:	980f883a 	mov	r7,r19
 2005aec:	d8014615 	stw	zero,1304(sp)
 2005af0:	003c5206 	br	2004c3c <___vfprintf_internal_r+0xa88>
 2005af4:	d9014f17 	ldw	r4,1340(sp)
 2005af8:	b00b883a 	mov	r5,r22
 2005afc:	d9800c04 	addi	r6,sp,48
 2005b00:	200415c0 	call	200415c <__sprint_r>
 2005b04:	103b631e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2005b08:	dc800e17 	ldw	r18,56(sp)
 2005b0c:	d9000517 	ldw	r4,20(sp)
 2005b10:	d8c01904 	addi	r3,sp,100
 2005b14:	003f2e06 	br	20057d0 <___vfprintf_internal_r+0x161c>
 2005b18:	d8c14c17 	ldw	r3,1328(sp)
 2005b1c:	1880100c 	andi	r2,r3,64
 2005b20:	1000a026 	beq	r2,zero,2005da4 <___vfprintf_internal_r+0x1bf0>
 2005b24:	38800017 	ldw	r2,0(r7)
 2005b28:	39c00104 	addi	r7,r7,4
 2005b2c:	d9c14015 	stw	r7,1280(sp)
 2005b30:	d9014b17 	ldw	r4,1324(sp)
 2005b34:	d9c14017 	ldw	r7,1280(sp)
 2005b38:	1100000d 	sth	r4,0(r2)
 2005b3c:	0039f906 	br	2004324 <___vfprintf_internal_r+0x170>
 2005b40:	d9014f17 	ldw	r4,1340(sp)
 2005b44:	b00b883a 	mov	r5,r22
 2005b48:	d9800c04 	addi	r6,sp,48
 2005b4c:	200415c0 	call	200415c <__sprint_r>
 2005b50:	103b501e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2005b54:	dc800e17 	ldw	r18,56(sp)
 2005b58:	dc400d17 	ldw	r17,52(sp)
 2005b5c:	d9000517 	ldw	r4,20(sp)
 2005b60:	d8c01904 	addi	r3,sp,100
 2005b64:	003f2d06 	br	200581c <___vfprintf_internal_r+0x1668>
 2005b68:	00800184 	movi	r2,6
 2005b6c:	14c09a36 	bltu	r2,r19,2005dd8 <___vfprintf_internal_r+0x1c24>
 2005b70:	dcc14515 	stw	r19,1300(sp)
 2005b74:	9800010e 	bge	r19,zero,2005b7c <___vfprintf_internal_r+0x19c8>
 2005b78:	d8014515 	stw	zero,1300(sp)
 2005b7c:	00808074 	movhi	r2,513
 2005b80:	1096b904 	addi	r2,r2,23268
 2005b84:	980f883a 	mov	r7,r19
 2005b88:	d8814115 	stw	r2,1284(sp)
 2005b8c:	003a7806 	br	2004570 <___vfprintf_internal_r+0x3bc>
 2005b90:	00bfffc4 	movi	r2,-1
 2005b94:	9880e226 	beq	r19,r2,2005f20 <___vfprintf_internal_r+0x1d6c>
 2005b98:	d9414d17 	ldw	r5,1332(sp)
 2005b9c:	008019c4 	movi	r2,103
 2005ba0:	2880dc26 	beq	r5,r2,2005f14 <___vfprintf_internal_r+0x1d60>
 2005ba4:	008011c4 	movi	r2,71
 2005ba8:	2880da26 	beq	r5,r2,2005f14 <___vfprintf_internal_r+0x1d60>
 2005bac:	d9414c17 	ldw	r5,1328(sp)
 2005bb0:	d9014317 	ldw	r4,1292(sp)
 2005bb4:	d9814217 	ldw	r6,1288(sp)
 2005bb8:	29404014 	ori	r5,r5,256
 2005bbc:	d9414c15 	stw	r5,1328(sp)
 2005bc0:	2000cc16 	blt	r4,zero,2005ef4 <___vfprintf_internal_r+0x1d40>
 2005bc4:	3021883a 	mov	r16,r6
 2005bc8:	2023883a 	mov	r17,r4
 2005bcc:	0039883a 	mov	fp,zero
 2005bd0:	d9414d17 	ldw	r5,1332(sp)
 2005bd4:	00801984 	movi	r2,102
 2005bd8:	2880b726 	beq	r5,r2,2005eb8 <___vfprintf_internal_r+0x1d04>
 2005bdc:	00801184 	movi	r2,70
 2005be0:	2880b526 	beq	r5,r2,2005eb8 <___vfprintf_internal_r+0x1d04>
 2005be4:	00801944 	movi	r2,101
 2005be8:	2880c826 	beq	r5,r2,2005f0c <___vfprintf_internal_r+0x1d58>
 2005bec:	00801144 	movi	r2,69
 2005bf0:	2880c626 	beq	r5,r2,2005f0c <___vfprintf_internal_r+0x1d58>
 2005bf4:	9829883a 	mov	r20,r19
 2005bf8:	d9014f17 	ldw	r4,1340(sp)
 2005bfc:	d8800504 	addi	r2,sp,20
 2005c00:	880d883a 	mov	r6,r17
 2005c04:	d8800115 	stw	r2,4(sp)
 2005c08:	d8c00604 	addi	r3,sp,24
 2005c0c:	d8800704 	addi	r2,sp,28
 2005c10:	800b883a 	mov	r5,r16
 2005c14:	01c00084 	movi	r7,2
 2005c18:	d8c00215 	stw	r3,8(sp)
 2005c1c:	d8800315 	stw	r2,12(sp)
 2005c20:	dd000015 	stw	r20,0(sp)
 2005c24:	2007b580 	call	2007b58 <_dtoa_r>
 2005c28:	d9814d17 	ldw	r6,1332(sp)
 2005c2c:	d8814115 	stw	r2,1284(sp)
 2005c30:	008019c4 	movi	r2,103
 2005c34:	30809526 	beq	r6,r2,2005e8c <___vfprintf_internal_r+0x1cd8>
 2005c38:	d8c14d17 	ldw	r3,1332(sp)
 2005c3c:	008011c4 	movi	r2,71
 2005c40:	18809226 	beq	r3,r2,2005e8c <___vfprintf_internal_r+0x1cd8>
 2005c44:	d9414117 	ldw	r5,1284(sp)
 2005c48:	d9814d17 	ldw	r6,1332(sp)
 2005c4c:	00801984 	movi	r2,102
 2005c50:	2d25883a 	add	r18,r5,r20
 2005c54:	30808626 	beq	r6,r2,2005e70 <___vfprintf_internal_r+0x1cbc>
 2005c58:	00801184 	movi	r2,70
 2005c5c:	30808426 	beq	r6,r2,2005e70 <___vfprintf_internal_r+0x1cbc>
 2005c60:	000d883a 	mov	r6,zero
 2005c64:	000f883a 	mov	r7,zero
 2005c68:	880b883a 	mov	r5,r17
 2005c6c:	8009883a 	mov	r4,r16
 2005c70:	2010b6c0 	call	2010b6c <__eqdf2>
 2005c74:	1000751e 	bne	r2,zero,2005e4c <___vfprintf_internal_r+0x1c98>
 2005c78:	9005883a 	mov	r2,r18
 2005c7c:	dc800715 	stw	r18,28(sp)
 2005c80:	d9014117 	ldw	r4,1284(sp)
 2005c84:	d9414d17 	ldw	r5,1332(sp)
 2005c88:	00c019c4 	movi	r3,103
 2005c8c:	1125c83a 	sub	r18,r2,r4
 2005c90:	28c06826 	beq	r5,r3,2005e34 <___vfprintf_internal_r+0x1c80>
 2005c94:	008011c4 	movi	r2,71
 2005c98:	28806626 	beq	r5,r2,2005e34 <___vfprintf_internal_r+0x1c80>
 2005c9c:	d9000517 	ldw	r4,20(sp)
 2005ca0:	d8c14d17 	ldw	r3,1332(sp)
 2005ca4:	00801944 	movi	r2,101
 2005ca8:	10c05516 	blt	r2,r3,2005e00 <___vfprintf_internal_r+0x1c4c>
 2005cac:	213fffc4 	addi	r4,r4,-1
 2005cb0:	d9000515 	stw	r4,20(sp)
 2005cb4:	d8c00805 	stb	r3,32(sp)
 2005cb8:	2021883a 	mov	r16,r4
 2005cbc:	2000c116 	blt	r4,zero,2005fc4 <___vfprintf_internal_r+0x1e10>
 2005cc0:	00800ac4 	movi	r2,43
 2005cc4:	d8800845 	stb	r2,33(sp)
 2005cc8:	00800244 	movi	r2,9
 2005ccc:	1400af0e 	bge	r2,r16,2005f8c <___vfprintf_internal_r+0x1dd8>
 2005cd0:	1027883a 	mov	r19,r2
 2005cd4:	dc400b84 	addi	r17,sp,46
 2005cd8:	8009883a 	mov	r4,r16
 2005cdc:	01400284 	movi	r5,10
 2005ce0:	2002f6c0 	call	2002f6c <__modsi3>
 2005ce4:	10800c04 	addi	r2,r2,48
 2005ce8:	8c7fffc4 	addi	r17,r17,-1
 2005cec:	8009883a 	mov	r4,r16
 2005cf0:	01400284 	movi	r5,10
 2005cf4:	88800005 	stb	r2,0(r17)
 2005cf8:	2002f0c0 	call	2002f0c <__divsi3>
 2005cfc:	1021883a 	mov	r16,r2
 2005d00:	98bff516 	blt	r19,r2,2005cd8 <___vfprintf_internal_r+0x1b24>
 2005d04:	10c00c04 	addi	r3,r2,48
 2005d08:	d88009c4 	addi	r2,sp,39
 2005d0c:	108001c4 	addi	r2,r2,7
 2005d10:	897fffc4 	addi	r5,r17,-1
 2005d14:	88ffffc5 	stb	r3,-1(r17)
 2005d18:	2880a72e 	bgeu	r5,r2,2005fb8 <___vfprintf_internal_r+0x1e04>
 2005d1c:	1009883a 	mov	r4,r2
 2005d20:	d9800804 	addi	r6,sp,32
 2005d24:	d8c00884 	addi	r3,sp,34
 2005d28:	28800003 	ldbu	r2,0(r5)
 2005d2c:	29400044 	addi	r5,r5,1
 2005d30:	18800005 	stb	r2,0(r3)
 2005d34:	18c00044 	addi	r3,r3,1
 2005d38:	293ffb36 	bltu	r5,r4,2005d28 <___vfprintf_internal_r+0x1b74>
 2005d3c:	1987c83a 	sub	r3,r3,r6
 2005d40:	00800044 	movi	r2,1
 2005d44:	d8c14815 	stw	r3,1312(sp)
 2005d48:	90cf883a 	add	r7,r18,r3
 2005d4c:	1480960e 	bge	r2,r18,2005fa8 <___vfprintf_internal_r+0x1df4>
 2005d50:	39c00044 	addi	r7,r7,1
 2005d54:	d9c14515 	stw	r7,1300(sp)
 2005d58:	38003416 	blt	r7,zero,2005e2c <___vfprintf_internal_r+0x1c78>
 2005d5c:	e0803fcc 	andi	r2,fp,255
 2005d60:	1080201c 	xori	r2,r2,128
 2005d64:	10bfe004 	addi	r2,r2,-128
 2005d68:	10004e26 	beq	r2,zero,2005ea4 <___vfprintf_internal_r+0x1cf0>
 2005d6c:	00800b44 	movi	r2,45
 2005d70:	dc814715 	stw	r18,1308(sp)
 2005d74:	d8014615 	stw	zero,1304(sp)
 2005d78:	d8800405 	stb	r2,16(sp)
 2005d7c:	003bb106 	br	2004c44 <___vfprintf_internal_r+0xa90>
 2005d80:	00800b44 	movi	r2,45
 2005d84:	d8800405 	stb	r2,16(sp)
 2005d88:	003d3306 	br	2005258 <___vfprintf_internal_r+0x10a4>
 2005d8c:	d9014f17 	ldw	r4,1340(sp)
 2005d90:	b00b883a 	mov	r5,r22
 2005d94:	d9800c04 	addi	r6,sp,48
 2005d98:	200415c0 	call	200415c <__sprint_r>
 2005d9c:	103abd1e 	bne	r2,zero,2004894 <___vfprintf_internal_r+0x6e0>
 2005da0:	003abb06 	br	2004890 <___vfprintf_internal_r+0x6dc>
 2005da4:	38800017 	ldw	r2,0(r7)
 2005da8:	39c00104 	addi	r7,r7,4
 2005dac:	d9c14015 	stw	r7,1280(sp)
 2005db0:	d9414b17 	ldw	r5,1324(sp)
 2005db4:	d9c14017 	ldw	r7,1280(sp)
 2005db8:	11400015 	stw	r5,0(r2)
 2005dbc:	00395906 	br	2004324 <___vfprintf_internal_r+0x170>
 2005dc0:	980f883a 	mov	r7,r19
 2005dc4:	dcc14515 	stw	r19,1300(sp)
 2005dc8:	d8014615 	stw	zero,1304(sp)
 2005dcc:	003b9b06 	br	2004c3c <___vfprintf_internal_r+0xa88>
 2005dd0:	0027883a 	mov	r19,zero
 2005dd4:	00397806 	br	20043b8 <___vfprintf_internal_r+0x204>
 2005dd8:	00c08074 	movhi	r3,513
 2005ddc:	18d6b904 	addi	r3,r3,23268
 2005de0:	100f883a 	mov	r7,r2
 2005de4:	d8814515 	stw	r2,1300(sp)
 2005de8:	d8c14115 	stw	r3,1284(sp)
 2005dec:	0039e006 	br	2004570 <___vfprintf_internal_r+0x3bc>
 2005df0:	00808074 	movhi	r2,513
 2005df4:	1096b804 	addi	r2,r2,23264
 2005df8:	d8814115 	stw	r2,1284(sp)
 2005dfc:	003d1c06 	br	2005270 <___vfprintf_internal_r+0x10bc>
 2005e00:	d9414d17 	ldw	r5,1332(sp)
 2005e04:	00801984 	movi	r2,102
 2005e08:	28804926 	beq	r5,r2,2005f30 <___vfprintf_internal_r+0x1d7c>
 2005e0c:	200f883a 	mov	r7,r4
 2005e10:	24805716 	blt	r4,r18,2005f70 <___vfprintf_internal_r+0x1dbc>
 2005e14:	d9414c17 	ldw	r5,1328(sp)
 2005e18:	2880004c 	andi	r2,r5,1
 2005e1c:	10000126 	beq	r2,zero,2005e24 <___vfprintf_internal_r+0x1c70>
 2005e20:	21c00044 	addi	r7,r4,1
 2005e24:	d9c14515 	stw	r7,1300(sp)
 2005e28:	383fcc0e 	bge	r7,zero,2005d5c <___vfprintf_internal_r+0x1ba8>
 2005e2c:	d8014515 	stw	zero,1300(sp)
 2005e30:	003fca06 	br	2005d5c <___vfprintf_internal_r+0x1ba8>
 2005e34:	d9000517 	ldw	r4,20(sp)
 2005e38:	00bfff04 	movi	r2,-4
 2005e3c:	1100480e 	bge	r2,r4,2005f60 <___vfprintf_internal_r+0x1dac>
 2005e40:	99004716 	blt	r19,r4,2005f60 <___vfprintf_internal_r+0x1dac>
 2005e44:	d8c14d15 	stw	r3,1332(sp)
 2005e48:	003ff006 	br	2005e0c <___vfprintf_internal_r+0x1c58>
 2005e4c:	d8800717 	ldw	r2,28(sp)
 2005e50:	14bf8b2e 	bgeu	r2,r18,2005c80 <___vfprintf_internal_r+0x1acc>
 2005e54:	9007883a 	mov	r3,r18
 2005e58:	01000c04 	movi	r4,48
 2005e5c:	11000005 	stb	r4,0(r2)
 2005e60:	10800044 	addi	r2,r2,1
 2005e64:	d8800715 	stw	r2,28(sp)
 2005e68:	18bffc1e 	bne	r3,r2,2005e5c <___vfprintf_internal_r+0x1ca8>
 2005e6c:	003f8406 	br	2005c80 <___vfprintf_internal_r+0x1acc>
 2005e70:	d8814117 	ldw	r2,1284(sp)
 2005e74:	10c00007 	ldb	r3,0(r2)
 2005e78:	00800c04 	movi	r2,48
 2005e7c:	18805b26 	beq	r3,r2,2005fec <___vfprintf_internal_r+0x1e38>
 2005e80:	d9000517 	ldw	r4,20(sp)
 2005e84:	9125883a 	add	r18,r18,r4
 2005e88:	003f7506 	br	2005c60 <___vfprintf_internal_r+0x1aac>
 2005e8c:	d9014c17 	ldw	r4,1328(sp)
 2005e90:	2080004c 	andi	r2,r4,1
 2005e94:	1005003a 	cmpeq	r2,r2,zero
 2005e98:	103f6a26 	beq	r2,zero,2005c44 <___vfprintf_internal_r+0x1a90>
 2005e9c:	d8800717 	ldw	r2,28(sp)
 2005ea0:	003f7706 	br	2005c80 <___vfprintf_internal_r+0x1acc>
 2005ea4:	d9c14515 	stw	r7,1300(sp)
 2005ea8:	38004d16 	blt	r7,zero,2005fe0 <___vfprintf_internal_r+0x1e2c>
 2005eac:	dc814715 	stw	r18,1308(sp)
 2005eb0:	d8014615 	stw	zero,1304(sp)
 2005eb4:	003b6106 	br	2004c3c <___vfprintf_internal_r+0xa88>
 2005eb8:	d9014f17 	ldw	r4,1340(sp)
 2005ebc:	d8800504 	addi	r2,sp,20
 2005ec0:	d8800115 	stw	r2,4(sp)
 2005ec4:	d8c00604 	addi	r3,sp,24
 2005ec8:	d8800704 	addi	r2,sp,28
 2005ecc:	800b883a 	mov	r5,r16
 2005ed0:	880d883a 	mov	r6,r17
 2005ed4:	01c000c4 	movi	r7,3
 2005ed8:	d8c00215 	stw	r3,8(sp)
 2005edc:	d8800315 	stw	r2,12(sp)
 2005ee0:	dcc00015 	stw	r19,0(sp)
 2005ee4:	9829883a 	mov	r20,r19
 2005ee8:	2007b580 	call	2007b58 <_dtoa_r>
 2005eec:	d8814115 	stw	r2,1284(sp)
 2005ef0:	003f5106 	br	2005c38 <___vfprintf_internal_r+0x1a84>
 2005ef4:	d8c14217 	ldw	r3,1288(sp)
 2005ef8:	d9014317 	ldw	r4,1292(sp)
 2005efc:	07000b44 	movi	fp,45
 2005f00:	1821883a 	mov	r16,r3
 2005f04:	2460003c 	xorhi	r17,r4,32768
 2005f08:	003f3106 	br	2005bd0 <___vfprintf_internal_r+0x1a1c>
 2005f0c:	9d000044 	addi	r20,r19,1
 2005f10:	003f3906 	br	2005bf8 <___vfprintf_internal_r+0x1a44>
 2005f14:	983f251e 	bne	r19,zero,2005bac <___vfprintf_internal_r+0x19f8>
 2005f18:	04c00044 	movi	r19,1
 2005f1c:	003f2306 	br	2005bac <___vfprintf_internal_r+0x19f8>
 2005f20:	04c00184 	movi	r19,6
 2005f24:	003f2106 	br	2005bac <___vfprintf_internal_r+0x19f8>
 2005f28:	d8014515 	stw	zero,1300(sp)
 2005f2c:	003eee06 	br	2005ae8 <___vfprintf_internal_r+0x1934>
 2005f30:	200f883a 	mov	r7,r4
 2005f34:	0100370e 	bge	zero,r4,2006014 <___vfprintf_internal_r+0x1e60>
 2005f38:	9800031e 	bne	r19,zero,2005f48 <___vfprintf_internal_r+0x1d94>
 2005f3c:	d9814c17 	ldw	r6,1328(sp)
 2005f40:	3080004c 	andi	r2,r6,1
 2005f44:	103fb726 	beq	r2,zero,2005e24 <___vfprintf_internal_r+0x1c70>
 2005f48:	20800044 	addi	r2,r4,1
 2005f4c:	98a7883a 	add	r19,r19,r2
 2005f50:	dcc14515 	stw	r19,1300(sp)
 2005f54:	980f883a 	mov	r7,r19
 2005f58:	983f800e 	bge	r19,zero,2005d5c <___vfprintf_internal_r+0x1ba8>
 2005f5c:	003fb306 	br	2005e2c <___vfprintf_internal_r+0x1c78>
 2005f60:	d9814d17 	ldw	r6,1332(sp)
 2005f64:	31bfff84 	addi	r6,r6,-2
 2005f68:	d9814d15 	stw	r6,1332(sp)
 2005f6c:	003f4c06 	br	2005ca0 <___vfprintf_internal_r+0x1aec>
 2005f70:	0100180e 	bge	zero,r4,2005fd4 <___vfprintf_internal_r+0x1e20>
 2005f74:	00800044 	movi	r2,1
 2005f78:	1485883a 	add	r2,r2,r18
 2005f7c:	d8814515 	stw	r2,1300(sp)
 2005f80:	100f883a 	mov	r7,r2
 2005f84:	103f750e 	bge	r2,zero,2005d5c <___vfprintf_internal_r+0x1ba8>
 2005f88:	003fa806 	br	2005e2c <___vfprintf_internal_r+0x1c78>
 2005f8c:	80c00c04 	addi	r3,r16,48
 2005f90:	00800c04 	movi	r2,48
 2005f94:	d8c008c5 	stb	r3,35(sp)
 2005f98:	d9800804 	addi	r6,sp,32
 2005f9c:	d8c00904 	addi	r3,sp,36
 2005fa0:	d8800885 	stb	r2,34(sp)
 2005fa4:	003f6506 	br	2005d3c <___vfprintf_internal_r+0x1b88>
 2005fa8:	d9014c17 	ldw	r4,1328(sp)
 2005fac:	2084703a 	and	r2,r4,r2
 2005fb0:	103f9c26 	beq	r2,zero,2005e24 <___vfprintf_internal_r+0x1c70>
 2005fb4:	003f6606 	br	2005d50 <___vfprintf_internal_r+0x1b9c>
 2005fb8:	d9800804 	addi	r6,sp,32
 2005fbc:	d8c00884 	addi	r3,sp,34
 2005fc0:	003f5e06 	br	2005d3c <___vfprintf_internal_r+0x1b88>
 2005fc4:	00800b44 	movi	r2,45
 2005fc8:	0121c83a 	sub	r16,zero,r4
 2005fcc:	d8800845 	stb	r2,33(sp)
 2005fd0:	003f3d06 	br	2005cc8 <___vfprintf_internal_r+0x1b14>
 2005fd4:	00800084 	movi	r2,2
 2005fd8:	1105c83a 	sub	r2,r2,r4
 2005fdc:	003fe606 	br	2005f78 <___vfprintf_internal_r+0x1dc4>
 2005fe0:	d8014515 	stw	zero,1300(sp)
 2005fe4:	dc814715 	stw	r18,1308(sp)
 2005fe8:	003fb106 	br	2005eb0 <___vfprintf_internal_r+0x1cfc>
 2005fec:	000d883a 	mov	r6,zero
 2005ff0:	000f883a 	mov	r7,zero
 2005ff4:	8009883a 	mov	r4,r16
 2005ff8:	880b883a 	mov	r5,r17
 2005ffc:	2010bf40 	call	2010bf4 <__nedf2>
 2006000:	103f9f26 	beq	r2,zero,2005e80 <___vfprintf_internal_r+0x1ccc>
 2006004:	00800044 	movi	r2,1
 2006008:	1509c83a 	sub	r4,r2,r20
 200600c:	d9000515 	stw	r4,20(sp)
 2006010:	003f9b06 	br	2005e80 <___vfprintf_internal_r+0x1ccc>
 2006014:	98000d1e 	bne	r19,zero,200604c <___vfprintf_internal_r+0x1e98>
 2006018:	d8c14c17 	ldw	r3,1328(sp)
 200601c:	1880004c 	andi	r2,r3,1
 2006020:	10000a1e 	bne	r2,zero,200604c <___vfprintf_internal_r+0x1e98>
 2006024:	01000044 	movi	r4,1
 2006028:	200f883a 	mov	r7,r4
 200602c:	d9014515 	stw	r4,1300(sp)
 2006030:	003f4a06 	br	2005d5c <___vfprintf_internal_r+0x1ba8>
 2006034:	3cc00017 	ldw	r19,0(r7)
 2006038:	39c00104 	addi	r7,r7,4
 200603c:	983d0e0e 	bge	r19,zero,2005478 <___vfprintf_internal_r+0x12c4>
 2006040:	b8c00007 	ldb	r3,0(r23)
 2006044:	04ffffc4 	movi	r19,-1
 2006048:	0038d906 	br	20043b0 <___vfprintf_internal_r+0x1fc>
 200604c:	9cc00084 	addi	r19,r19,2
 2006050:	dcc14515 	stw	r19,1300(sp)
 2006054:	980f883a 	mov	r7,r19
 2006058:	983f400e 	bge	r19,zero,2005d5c <___vfprintf_internal_r+0x1ba8>
 200605c:	003f7306 	br	2005e2c <___vfprintf_internal_r+0x1c78>

02006060 <__vfprintf_internal>:
 2006060:	00808074 	movhi	r2,513
 2006064:	109f0a04 	addi	r2,r2,31784
 2006068:	2013883a 	mov	r9,r4
 200606c:	11000017 	ldw	r4,0(r2)
 2006070:	2805883a 	mov	r2,r5
 2006074:	300f883a 	mov	r7,r6
 2006078:	480b883a 	mov	r5,r9
 200607c:	100d883a 	mov	r6,r2
 2006080:	20041b41 	jmpi	20041b4 <___vfprintf_internal_r>

02006084 <__svfscanf_r>:
 2006084:	deff4e04 	addi	sp,sp,-712
 2006088:	dd80ae15 	stw	r22,696(sp)
 200608c:	dd00ac15 	stw	r20,688(sp)
 2006090:	dc40a915 	stw	r17,676(sp)
 2006094:	dc00a815 	stw	r16,672(sp)
 2006098:	dfc0b115 	stw	ra,708(sp)
 200609c:	df00b015 	stw	fp,704(sp)
 20060a0:	ddc0af15 	stw	r23,700(sp)
 20060a4:	dd40ad15 	stw	r21,692(sp)
 20060a8:	dcc0ab15 	stw	r19,684(sp)
 20060ac:	dc80aa15 	stw	r18,680(sp)
 20060b0:	202d883a 	mov	r22,r4
 20060b4:	2821883a 	mov	r16,r5
 20060b8:	d9c0a415 	stw	r7,656(sp)
 20060bc:	3029883a 	mov	r20,r6
 20060c0:	d800a215 	stw	zero,648(sp)
 20060c4:	0023883a 	mov	r17,zero
 20060c8:	d800a115 	stw	zero,644(sp)
 20060cc:	d800a015 	stw	zero,640(sp)
 20060d0:	a1000007 	ldb	r4,0(r20)
 20060d4:	d9000115 	stw	r4,4(sp)
 20060d8:	20001f26 	beq	r4,zero,2006158 <__svfscanf_r+0xd4>
 20060dc:	04808074 	movhi	r18,513
 20060e0:	949f0904 	addi	r18,r18,31780
 20060e4:	91800017 	ldw	r6,0(r18)
 20060e8:	a5000044 	addi	r20,r20,1
 20060ec:	3107883a 	add	r3,r6,r4
 20060f0:	18800003 	ldbu	r2,0(r3)
 20060f4:	1080020c 	andi	r2,r2,8
 20060f8:	10002426 	beq	r2,zero,200618c <__svfscanf_r+0x108>
 20060fc:	80c00117 	ldw	r3,4(r16)
 2006100:	00c00e0e 	bge	zero,r3,200613c <__svfscanf_r+0xb8>
 2006104:	81400017 	ldw	r5,0(r16)
 2006108:	90800017 	ldw	r2,0(r18)
 200610c:	28c00003 	ldbu	r3,0(r5)
 2006110:	1887883a 	add	r3,r3,r2
 2006114:	19000003 	ldbu	r4,0(r3)
 2006118:	2100020c 	andi	r4,r4,8
 200611c:	203fec26 	beq	r4,zero,20060d0 <__svfscanf_r+0x4c>
 2006120:	80c00117 	ldw	r3,4(r16)
 2006124:	29800044 	addi	r6,r5,1
 2006128:	8c400044 	addi	r17,r17,1
 200612c:	18ffffc4 	addi	r3,r3,-1
 2006130:	81800015 	stw	r6,0(r16)
 2006134:	80c00115 	stw	r3,4(r16)
 2006138:	00fff216 	blt	zero,r3,2006104 <__svfscanf_r+0x80>
 200613c:	b009883a 	mov	r4,r22
 2006140:	800b883a 	mov	r5,r16
 2006144:	200befc0 	call	200befc <__srefill_r>
 2006148:	103fee26 	beq	r2,zero,2006104 <__svfscanf_r+0x80>
 200614c:	a1000007 	ldb	r4,0(r20)
 2006150:	d9000115 	stw	r4,4(sp)
 2006154:	203fe11e 	bne	r4,zero,20060dc <__svfscanf_r+0x58>
 2006158:	d880a217 	ldw	r2,648(sp)
 200615c:	dfc0b117 	ldw	ra,708(sp)
 2006160:	df00b017 	ldw	fp,704(sp)
 2006164:	ddc0af17 	ldw	r23,700(sp)
 2006168:	dd80ae17 	ldw	r22,696(sp)
 200616c:	dd40ad17 	ldw	r21,692(sp)
 2006170:	dd00ac17 	ldw	r20,688(sp)
 2006174:	dcc0ab17 	ldw	r19,684(sp)
 2006178:	dc80aa17 	ldw	r18,680(sp)
 200617c:	dc40a917 	ldw	r17,676(sp)
 2006180:	dc00a817 	ldw	r16,672(sp)
 2006184:	dec0b204 	addi	sp,sp,712
 2006188:	f800283a 	ret
 200618c:	00800944 	movi	r2,37
 2006190:	20801626 	beq	r4,r2,20061ec <__svfscanf_r+0x168>
 2006194:	80800117 	ldw	r2,4(r16)
 2006198:	00800b0e 	bge	zero,r2,20061c8 <__svfscanf_r+0x144>
 200619c:	81000017 	ldw	r4,0(r16)
 20061a0:	a0ffffc7 	ldb	r3,-1(r20)
 20061a4:	20800003 	ldbu	r2,0(r4)
 20061a8:	10ffeb1e 	bne	r2,r3,2006158 <__svfscanf_r+0xd4>
 20061ac:	80c00117 	ldw	r3,4(r16)
 20061b0:	21800044 	addi	r6,r4,1
 20061b4:	8c400044 	addi	r17,r17,1
 20061b8:	18ffffc4 	addi	r3,r3,-1
 20061bc:	80c00115 	stw	r3,4(r16)
 20061c0:	81800015 	stw	r6,0(r16)
 20061c4:	003fc206 	br	20060d0 <__svfscanf_r+0x4c>
 20061c8:	b009883a 	mov	r4,r22
 20061cc:	800b883a 	mov	r5,r16
 20061d0:	200befc0 	call	200befc <__srefill_r>
 20061d4:	103ff126 	beq	r2,zero,200619c <__svfscanf_r+0x118>
 20061d8:	d900a217 	ldw	r4,648(sp)
 20061dc:	2004c91e 	bne	r4,zero,2007504 <__svfscanf_r+0x1480>
 20061e0:	00bfffc4 	movi	r2,-1
 20061e4:	d880a215 	stw	r2,648(sp)
 20061e8:	003fdb06 	br	2006158 <__svfscanf_r+0xd4>
 20061ec:	d800a315 	stw	zero,652(sp)
 20061f0:	0027883a 	mov	r19,zero
 20061f4:	a0c00003 	ldbu	r3,0(r20)
 20061f8:	00801e04 	movi	r2,120
 20061fc:	a5000044 	addi	r20,r20,1
 2006200:	19403fcc 	andi	r5,r3,255
 2006204:	2940201c 	xori	r5,r5,128
 2006208:	297fe004 	addi	r5,r5,-128
 200620c:	10c08036 	bltu	r2,r3,2006410 <__svfscanf_r+0x38c>
 2006210:	18c5883a 	add	r2,r3,r3
 2006214:	1085883a 	add	r2,r2,r2
 2006218:	00c08034 	movhi	r3,512
 200621c:	18d88b04 	addi	r3,r3,25132
 2006220:	10c5883a 	add	r2,r2,r3
 2006224:	11000017 	ldw	r4,0(r2)
 2006228:	2000683a 	jmp	r4
 200622c:	020061e0 	cmpeqi	r8,zero,391
 2006230:	02006410 	cmplti	r8,zero,400
 2006234:	02006410 	cmplti	r8,zero,400
 2006238:	02006410 	cmplti	r8,zero,400
 200623c:	02006410 	cmplti	r8,zero,400
 2006240:	02006410 	cmplti	r8,zero,400
 2006244:	02006410 	cmplti	r8,zero,400
 2006248:	02006410 	cmplti	r8,zero,400
 200624c:	02006410 	cmplti	r8,zero,400
 2006250:	02006410 	cmplti	r8,zero,400
 2006254:	02006410 	cmplti	r8,zero,400
 2006258:	02006410 	cmplti	r8,zero,400
 200625c:	02006410 	cmplti	r8,zero,400
 2006260:	02006410 	cmplti	r8,zero,400
 2006264:	02006410 	cmplti	r8,zero,400
 2006268:	02006410 	cmplti	r8,zero,400
 200626c:	02006410 	cmplti	r8,zero,400
 2006270:	02006410 	cmplti	r8,zero,400
 2006274:	02006410 	cmplti	r8,zero,400
 2006278:	02006410 	cmplti	r8,zero,400
 200627c:	02006410 	cmplti	r8,zero,400
 2006280:	02006410 	cmplti	r8,zero,400
 2006284:	02006410 	cmplti	r8,zero,400
 2006288:	02006410 	cmplti	r8,zero,400
 200628c:	02006410 	cmplti	r8,zero,400
 2006290:	02006410 	cmplti	r8,zero,400
 2006294:	02006410 	cmplti	r8,zero,400
 2006298:	02006410 	cmplti	r8,zero,400
 200629c:	02006410 	cmplti	r8,zero,400
 20062a0:	02006410 	cmplti	r8,zero,400
 20062a4:	02006410 	cmplti	r8,zero,400
 20062a8:	02006410 	cmplti	r8,zero,400
 20062ac:	02006410 	cmplti	r8,zero,400
 20062b0:	02006410 	cmplti	r8,zero,400
 20062b4:	02006410 	cmplti	r8,zero,400
 20062b8:	02006410 	cmplti	r8,zero,400
 20062bc:	02006410 	cmplti	r8,zero,400
 20062c0:	02006194 	movui	r8,390
 20062c4:	02006410 	cmplti	r8,zero,400
 20062c8:	02006410 	cmplti	r8,zero,400
 20062cc:	02006410 	cmplti	r8,zero,400
 20062d0:	02006410 	cmplti	r8,zero,400
 20062d4:	02007434 	movhi	r8,464
 20062d8:	02006410 	cmplti	r8,zero,400
 20062dc:	02006410 	cmplti	r8,zero,400
 20062e0:	02006410 	cmplti	r8,zero,400
 20062e4:	02006410 	cmplti	r8,zero,400
 20062e8:	02006410 	cmplti	r8,zero,400
 20062ec:	02006e30 	cmpltui	r8,zero,440
 20062f0:	02006e30 	cmpltui	r8,zero,440
 20062f4:	02006e30 	cmpltui	r8,zero,440
 20062f8:	02006e30 	cmpltui	r8,zero,440
 20062fc:	02006e30 	cmpltui	r8,zero,440
 2006300:	02006e30 	cmpltui	r8,zero,440
 2006304:	02006e30 	cmpltui	r8,zero,440
 2006308:	02006e30 	cmpltui	r8,zero,440
 200630c:	02006e30 	cmpltui	r8,zero,440
 2006310:	02006e30 	cmpltui	r8,zero,440
 2006314:	02006410 	cmplti	r8,zero,400
 2006318:	02006410 	cmplti	r8,zero,400
 200631c:	02006410 	cmplti	r8,zero,400
 2006320:	02006410 	cmplti	r8,zero,400
 2006324:	02006410 	cmplti	r8,zero,400
 2006328:	02006410 	cmplti	r8,zero,400
 200632c:	02006410 	cmplti	r8,zero,400
 2006330:	02006410 	cmplti	r8,zero,400
 2006334:	02006410 	cmplti	r8,zero,400
 2006338:	02006410 	cmplti	r8,zero,400
 200633c:	020075b0 	cmpltui	r8,zero,470
 2006340:	020075a8 	cmpgeui	r8,zero,470
 2006344:	02006410 	cmplti	r8,zero,400
 2006348:	020075a8 	cmpgeui	r8,zero,470
 200634c:	02006410 	cmplti	r8,zero,400
 2006350:	02006410 	cmplti	r8,zero,400
 2006354:	02006410 	cmplti	r8,zero,400
 2006358:	02006410 	cmplti	r8,zero,400
 200635c:	02007640 	call	200764 <__alt_mem_sdram-0x1dff89c>
 2006360:	02006410 	cmplti	r8,zero,400
 2006364:	02006410 	cmplti	r8,zero,400
 2006368:	020075f8 	rdprs	r8,zero,471
 200636c:	02006410 	cmplti	r8,zero,400
 2006370:	02006410 	cmplti	r8,zero,400
 2006374:	02006410 	cmplti	r8,zero,400
 2006378:	02006410 	cmplti	r8,zero,400
 200637c:	02006410 	cmplti	r8,zero,400
 2006380:	02006410 	cmplti	r8,zero,400
 2006384:	02006410 	cmplti	r8,zero,400
 2006388:	02006410 	cmplti	r8,zero,400
 200638c:	0200743c 	xorhi	r8,zero,464
 2006390:	02006410 	cmplti	r8,zero,400
 2006394:	02006410 	cmplti	r8,zero,400
 2006398:	020075dc 	xori	r8,zero,471
 200639c:	02006410 	cmplti	r8,zero,400
 20063a0:	02006410 	cmplti	r8,zero,400
 20063a4:	02006410 	cmplti	r8,zero,400
 20063a8:	02006410 	cmplti	r8,zero,400
 20063ac:	02006410 	cmplti	r8,zero,400
 20063b0:	02006410 	cmplti	r8,zero,400
 20063b4:	02006410 	cmplti	r8,zero,400
 20063b8:	020075d0 	cmplti	r8,zero,471
 20063bc:	020075b4 	movhi	r8,470
 20063c0:	020075a8 	cmpgeui	r8,zero,470
 20063c4:	020075a8 	cmpgeui	r8,zero,470
 20063c8:	020075a8 	cmpgeui	r8,zero,470
 20063cc:	020075a0 	cmpeqi	r8,zero,470
 20063d0:	02007694 	movui	r8,474
 20063d4:	02006410 	cmplti	r8,zero,400
 20063d8:	02006410 	cmplti	r8,zero,400
 20063dc:	02007680 	call	200768 <__alt_mem_sdram-0x1dff898>
 20063e0:	02006410 	cmplti	r8,zero,400
 20063e4:	02007618 	cmpnei	r8,zero,472
 20063e8:	020075fc 	xorhi	r8,zero,471
 20063ec:	02007650 	cmplti	r8,zero,473
 20063f0:	02006410 	cmplti	r8,zero,400
 20063f4:	02006410 	cmplti	r8,zero,400
 20063f8:	02007648 	cmpgei	r8,zero,473
 20063fc:	02006410 	cmplti	r8,zero,400
 2006400:	02006980 	call	200698 <__alt_mem_sdram-0x1dff968>
 2006404:	02006410 	cmplti	r8,zero,400
 2006408:	02006410 	cmplti	r8,zero,400
 200640c:	0200743c 	xorhi	r8,zero,464
 2006410:	2987883a 	add	r3,r5,r6
 2006414:	18800003 	ldbu	r2,0(r3)
 2006418:	1080004c 	andi	r2,r2,1
 200641c:	1005003a 	cmpeq	r2,r2,zero
 2006420:	10002c26 	beq	r2,zero,20064d4 <__svfscanf_r+0x450>
 2006424:	01008074 	movhi	r4,513
 2006428:	2136d704 	addi	r4,r4,-9380
 200642c:	00800284 	movi	r2,10
 2006430:	d900a015 	stw	r4,640(sp)
 2006434:	054000c4 	movi	r21,3
 2006438:	d880a115 	stw	r2,644(sp)
 200643c:	80c00117 	ldw	r3,4(r16)
 2006440:	00c14a0e 	bge	zero,r3,200696c <__svfscanf_r+0x8e8>
 2006444:	9880100c 	andi	r2,r19,64
 2006448:	10001326 	beq	r2,zero,2006498 <__svfscanf_r+0x414>
 200644c:	00800104 	movi	r2,4
 2006450:	157f1f36 	bltu	r2,r21,20060d0 <__svfscanf_r+0x4c>
 2006454:	ad45883a 	add	r2,r21,r21
 2006458:	1085883a 	add	r2,r2,r2
 200645c:	00c08034 	movhi	r3,512
 2006460:	18d91c04 	addi	r3,r3,25712
 2006464:	10c5883a 	add	r2,r2,r3
 2006468:	11000017 	ldw	r4,0(r2)
 200646c:	2000683a 	jmp	r4
 2006470:	020064dc 	xori	r8,zero,403
 2006474:	020065e8 	cmpgeui	r8,zero,407
 2006478:	0200665c 	xori	r8,zero,409
 200647c:	02006948 	cmpgei	r8,zero,421
 2006480:	02006794 	movui	r8,414
 2006484:	b009883a 	mov	r4,r22
 2006488:	800b883a 	mov	r5,r16
 200648c:	200befc0 	call	200befc <__srefill_r>
 2006490:	103f511e 	bne	r2,zero,20061d8 <__svfscanf_r+0x154>
 2006494:	8c400044 	addi	r17,r17,1
 2006498:	81400017 	ldw	r5,0(r16)
 200649c:	90800017 	ldw	r2,0(r18)
 20064a0:	28c00003 	ldbu	r3,0(r5)
 20064a4:	1887883a 	add	r3,r3,r2
 20064a8:	19000003 	ldbu	r4,0(r3)
 20064ac:	2100020c 	andi	r4,r4,8
 20064b0:	203fe626 	beq	r4,zero,200644c <__svfscanf_r+0x3c8>
 20064b4:	80c00117 	ldw	r3,4(r16)
 20064b8:	18ffffc4 	addi	r3,r3,-1
 20064bc:	80c00115 	stw	r3,4(r16)
 20064c0:	00fff00e 	bge	zero,r3,2006484 <__svfscanf_r+0x400>
 20064c4:	29800044 	addi	r6,r5,1
 20064c8:	8c400044 	addi	r17,r17,1
 20064cc:	81800015 	stw	r6,0(r16)
 20064d0:	003ff106 	br	2006498 <__svfscanf_r+0x414>
 20064d4:	9cc00054 	ori	r19,r19,1
 20064d8:	003fd206 	br	2006424 <__svfscanf_r+0x3a0>
 20064dc:	d8c0a317 	ldw	r3,652(sp)
 20064e0:	1800021e 	bne	r3,zero,20064ec <__svfscanf_r+0x468>
 20064e4:	01000044 	movi	r4,1
 20064e8:	d900a315 	stw	r4,652(sp)
 20064ec:	9880004c 	andi	r2,r19,1
 20064f0:	1005003a 	cmpeq	r2,r2,zero
 20064f4:	1003d91e 	bne	r2,zero,200745c <__svfscanf_r+0x13d8>
 20064f8:	9d40040c 	andi	r21,r19,16
 20064fc:	a839003a 	cmpeq	fp,r21,zero
 2006500:	e0042526 	beq	fp,zero,2007598 <__svfscanf_r+0x1514>
 2006504:	d880a417 	ldw	r2,656(sp)
 2006508:	14c00017 	ldw	r19,0(r2)
 200650c:	10800104 	addi	r2,r2,4
 2006510:	d880a415 	stw	r2,656(sp)
 2006514:	d8c0a317 	ldw	r3,652(sp)
 2006518:	18041a26 	beq	r3,zero,2007584 <__svfscanf_r+0x1500>
 200651c:	01008074 	movhi	r4,513
 2006520:	211f0c04 	addi	r4,r4,31792
 2006524:	20800017 	ldw	r2,0(r4)
 2006528:	103f2b26 	beq	r2,zero,20061d8 <__svfscanf_r+0x154>
 200652c:	d8804404 	addi	r2,sp,272
 2006530:	0025883a 	mov	r18,zero
 2006534:	d880a615 	stw	r2,664(sp)
 2006538:	05ffffc4 	movi	r23,-1
 200653c:	80800017 	ldw	r2,0(r16)
 2006540:	80c00117 	ldw	r3,4(r16)
 2006544:	d900a617 	ldw	r4,664(sp)
 2006548:	12000003 	ldbu	r8,0(r2)
 200654c:	18ffffc4 	addi	r3,r3,-1
 2006550:	11800044 	addi	r6,r2,1
 2006554:	248f883a 	add	r7,r4,r18
 2006558:	80c00115 	stw	r3,4(r16)
 200655c:	81800015 	stw	r6,0(r16)
 2006560:	3a000005 	stb	r8,0(r7)
 2006564:	d9000204 	addi	r4,sp,8
 2006568:	000b883a 	mov	r5,zero
 200656c:	01800204 	movi	r6,8
 2006570:	200a87c0 	call	200a87c <memset>
 2006574:	d980a617 	ldw	r6,664(sp)
 2006578:	94800044 	addi	r18,r18,1
 200657c:	d8800204 	addi	r2,sp,8
 2006580:	b009883a 	mov	r4,r22
 2006584:	980b883a 	mov	r5,r19
 2006588:	900f883a 	mov	r7,r18
 200658c:	d8800015 	stw	r2,0(sp)
 2006590:	200a5180 	call	200a518 <_mbrtowc_r>
 2006594:	1007883a 	mov	r3,r2
 2006598:	15ff0f26 	beq	r2,r23,20061d8 <__svfscanf_r+0x154>
 200659c:	1003f11e 	bne	r2,zero,2007564 <__svfscanf_r+0x14e0>
 20065a0:	a800011e 	bne	r21,zero,20065a8 <__svfscanf_r+0x524>
 20065a4:	98000015 	stw	zero,0(r19)
 20065a8:	d8c0a317 	ldw	r3,652(sp)
 20065ac:	8ca3883a 	add	r17,r17,r18
 20065b0:	18ffffc4 	addi	r3,r3,-1
 20065b4:	d8c0a315 	stw	r3,652(sp)
 20065b8:	e0000126 	beq	fp,zero,20065c0 <__svfscanf_r+0x53c>
 20065bc:	9cc00104 	addi	r19,r19,4
 20065c0:	0025883a 	mov	r18,zero
 20065c4:	80c00117 	ldw	r3,4(r16)
 20065c8:	00c3e90e 	bge	zero,r3,2007570 <__svfscanf_r+0x14ec>
 20065cc:	d900a317 	ldw	r4,652(sp)
 20065d0:	2003ec26 	beq	r4,zero,2007584 <__svfscanf_r+0x1500>
 20065d4:	00c08074 	movhi	r3,513
 20065d8:	18df0c04 	addi	r3,r3,31792
 20065dc:	18800017 	ldw	r2,0(r3)
 20065e0:	90bfd61e 	bne	r18,r2,200653c <__svfscanf_r+0x4b8>
 20065e4:	003efc06 	br	20061d8 <__svfscanf_r+0x154>
 20065e8:	d880a317 	ldw	r2,652(sp)
 20065ec:	1000021e 	bne	r2,zero,20065f8 <__svfscanf_r+0x574>
 20065f0:	00ffffc4 	movi	r3,-1
 20065f4:	d8c0a315 	stw	r3,652(sp)
 20065f8:	9880040c 	andi	r2,r19,16
 20065fc:	10036526 	beq	r2,zero,2007394 <__svfscanf_r+0x1310>
 2006600:	0027883a 	mov	r19,zero
 2006604:	dd400404 	addi	r21,sp,16
 2006608:	81000017 	ldw	r4,0(r16)
 200660c:	20800003 	ldbu	r2,0(r4)
 2006610:	a885883a 	add	r2,r21,r2
 2006614:	10c00007 	ldb	r3,0(r2)
 2006618:	1803be26 	beq	r3,zero,2007514 <__svfscanf_r+0x1490>
 200661c:	80c00117 	ldw	r3,4(r16)
 2006620:	21800044 	addi	r6,r4,1
 2006624:	d900a317 	ldw	r4,652(sp)
 2006628:	18ffffc4 	addi	r3,r3,-1
 200662c:	9cc00044 	addi	r19,r19,1
 2006630:	81800015 	stw	r6,0(r16)
 2006634:	80c00115 	stw	r3,4(r16)
 2006638:	24c3b626 	beq	r4,r19,2007514 <__svfscanf_r+0x1490>
 200663c:	00fff216 	blt	zero,r3,2006608 <__svfscanf_r+0x584>
 2006640:	b009883a 	mov	r4,r22
 2006644:	800b883a 	mov	r5,r16
 2006648:	200befc0 	call	200befc <__srefill_r>
 200664c:	103fee26 	beq	r2,zero,2006608 <__svfscanf_r+0x584>
 2006650:	983ee126 	beq	r19,zero,20061d8 <__svfscanf_r+0x154>
 2006654:	8ce3883a 	add	r17,r17,r19
 2006658:	003e9d06 	br	20060d0 <__svfscanf_r+0x4c>
 200665c:	d900a317 	ldw	r4,652(sp)
 2006660:	2000021e 	bne	r4,zero,200666c <__svfscanf_r+0x5e8>
 2006664:	00bfffc4 	movi	r2,-1
 2006668:	d880a315 	stw	r2,652(sp)
 200666c:	9880004c 	andi	r2,r19,1
 2006670:	1005003a 	cmpeq	r2,r2,zero
 2006674:	1001f41e 	bne	r2,zero,2006e48 <__svfscanf_r+0xdc4>
 2006678:	9dc0040c 	andi	r23,r19,16
 200667c:	b807003a 	cmpeq	r3,r23,zero
 2006680:	d8c0a515 	stw	r3,660(sp)
 2006684:	1803b21e 	bne	r3,zero,2007550 <__svfscanf_r+0x14cc>
 2006688:	dd400104 	addi	r21,sp,4
 200668c:	0027883a 	mov	r19,zero
 2006690:	073fffc4 	movi	fp,-1
 2006694:	81400017 	ldw	r5,0(r16)
 2006698:	90800017 	ldw	r2,0(r18)
 200669c:	29c00003 	ldbu	r7,0(r5)
 20066a0:	38c03fcc 	andi	r3,r7,255
 20066a4:	1887883a 	add	r3,r3,r2
 20066a8:	19000003 	ldbu	r4,0(r3)
 20066ac:	2100020c 	andi	r4,r4,8
 20066b0:	2000321e 	bne	r4,zero,200677c <__svfscanf_r+0x6f8>
 20066b4:	d8c0a317 	ldw	r3,652(sp)
 20066b8:	18003026 	beq	r3,zero,200677c <__svfscanf_r+0x6f8>
 20066bc:	00808074 	movhi	r2,513
 20066c0:	109f0c04 	addi	r2,r2,31792
 20066c4:	10c00017 	ldw	r3,0(r2)
 20066c8:	98fec326 	beq	r19,r3,20061d8 <__svfscanf_r+0x154>
 20066cc:	d8c04404 	addi	r3,sp,272
 20066d0:	80800117 	ldw	r2,4(r16)
 20066d4:	d8c0a615 	stw	r3,664(sp)
 20066d8:	d900a617 	ldw	r4,664(sp)
 20066dc:	10ffffc4 	addi	r3,r2,-1
 20066e0:	29800044 	addi	r6,r5,1
 20066e4:	80c00115 	stw	r3,4(r16)
 20066e8:	24c5883a 	add	r2,r4,r19
 20066ec:	81800015 	stw	r6,0(r16)
 20066f0:	d9000204 	addi	r4,sp,8
 20066f4:	000b883a 	mov	r5,zero
 20066f8:	01800204 	movi	r6,8
 20066fc:	11c00005 	stb	r7,0(r2)
 2006700:	200a87c0 	call	200a87c <memset>
 2006704:	d980a617 	ldw	r6,664(sp)
 2006708:	9cc00044 	addi	r19,r19,1
 200670c:	d8800204 	addi	r2,sp,8
 2006710:	b009883a 	mov	r4,r22
 2006714:	a80b883a 	mov	r5,r21
 2006718:	980f883a 	mov	r7,r19
 200671c:	d8800015 	stw	r2,0(sp)
 2006720:	200a5180 	call	200a518 <_mbrtowc_r>
 2006724:	1007883a 	mov	r3,r2
 2006728:	173eab26 	beq	r2,fp,20061d8 <__svfscanf_r+0x154>
 200672c:	1003851e 	bne	r2,zero,2007544 <__svfscanf_r+0x14c0>
 2006730:	a8000015 	stw	zero,0(r21)
 2006734:	a9000017 	ldw	r4,0(r21)
 2006738:	200a2940 	call	200a294 <iswspace>
 200673c:	1003781e 	bne	r2,zero,2007520 <__svfscanf_r+0x149c>
 2006740:	d900a317 	ldw	r4,652(sp)
 2006744:	d880a517 	ldw	r2,660(sp)
 2006748:	8ce3883a 	add	r17,r17,r19
 200674c:	213fffc4 	addi	r4,r4,-1
 2006750:	d900a315 	stw	r4,652(sp)
 2006754:	10000126 	beq	r2,zero,200675c <__svfscanf_r+0x6d8>
 2006758:	ad400104 	addi	r21,r21,4
 200675c:	0027883a 	mov	r19,zero
 2006760:	80c00117 	ldw	r3,4(r16)
 2006764:	00ffcb16 	blt	zero,r3,2006694 <__svfscanf_r+0x610>
 2006768:	b009883a 	mov	r4,r22
 200676c:	800b883a 	mov	r5,r16
 2006770:	200befc0 	call	200befc <__srefill_r>
 2006774:	103fc726 	beq	r2,zero,2006694 <__svfscanf_r+0x610>
 2006778:	983e971e 	bne	r19,zero,20061d8 <__svfscanf_r+0x154>
 200677c:	b83e541e 	bne	r23,zero,20060d0 <__svfscanf_r+0x4c>
 2006780:	d900a217 	ldw	r4,648(sp)
 2006784:	a8000015 	stw	zero,0(r21)
 2006788:	21000044 	addi	r4,r4,1
 200678c:	d900a215 	stw	r4,648(sp)
 2006790:	003e4f06 	br	20060d0 <__svfscanf_r+0x4c>
 2006794:	d900a317 	ldw	r4,652(sp)
 2006798:	00805704 	movi	r2,348
 200679c:	20ffffc4 	addi	r3,r4,-1
 20067a0:	10c1ed2e 	bgeu	r2,r3,2006f58 <__svfscanf_r+0xed4>
 20067a4:	00805744 	movi	r2,349
 20067a8:	21bfa8c4 	addi	r6,r4,-349
 20067ac:	9d41e014 	ori	r21,r19,1920
 20067b0:	d880a315 	stw	r2,652(sp)
 20067b4:	d8c04404 	addi	r3,sp,272
 20067b8:	d8c0a615 	stw	r3,664(sp)
 20067bc:	182f883a 	mov	r23,r3
 20067c0:	d8009f15 	stw	zero,636(sp)
 20067c4:	d8009e15 	stw	zero,632(sp)
 20067c8:	d8009d15 	stw	zero,628(sp)
 20067cc:	d8009c15 	stw	zero,624(sp)
 20067d0:	0039883a 	mov	fp,zero
 20067d4:	0025883a 	mov	r18,zero
 20067d8:	80800017 	ldw	r2,0(r16)
 20067dc:	11400003 	ldbu	r5,0(r2)
 20067e0:	00801384 	movi	r2,78
 20067e4:	28fff544 	addi	r3,r5,-43
 20067e8:	18c03fcc 	andi	r3,r3,255
 20067ec:	10c07d36 	bltu	r2,r3,20069e4 <__svfscanf_r+0x960>
 20067f0:	18c5883a 	add	r2,r3,r3
 20067f4:	1085883a 	add	r2,r2,r2
 20067f8:	00c08034 	movhi	r3,512
 20067fc:	18da0304 	addi	r3,r3,26636
 2006800:	10c5883a 	add	r2,r2,r3
 2006804:	11000017 	ldw	r4,0(r2)
 2006808:	2000683a 	jmp	r4
 200680c:	0200699c 	xori	r8,zero,422
 2006810:	020069e4 	muli	r8,zero,423
 2006814:	0200699c 	xori	r8,zero,422
 2006818:	02006b30 	cmpltui	r8,zero,428
 200681c:	020069e4 	muli	r8,zero,423
 2006820:	02006b68 	cmpgeui	r8,zero,429
 2006824:	02006b9c 	xori	r8,zero,430
 2006828:	02006b9c 	xori	r8,zero,430
 200682c:	02006b9c 	xori	r8,zero,430
 2006830:	02006b9c 	xori	r8,zero,430
 2006834:	02006b9c 	xori	r8,zero,430
 2006838:	02006b9c 	xori	r8,zero,430
 200683c:	02006b9c 	xori	r8,zero,430
 2006840:	02006b9c 	xori	r8,zero,430
 2006844:	02006b9c 	xori	r8,zero,430
 2006848:	020069e4 	muli	r8,zero,423
 200684c:	020069e4 	muli	r8,zero,423
 2006850:	020069e4 	muli	r8,zero,423
 2006854:	020069e4 	muli	r8,zero,423
 2006858:	020069e4 	muli	r8,zero,423
 200685c:	020069e4 	muli	r8,zero,423
 2006860:	020069e4 	muli	r8,zero,423
 2006864:	02006bbc 	xorhi	r8,zero,430
 2006868:	020069e4 	muli	r8,zero,423
 200686c:	020069e4 	muli	r8,zero,423
 2006870:	020069e4 	muli	r8,zero,423
 2006874:	02006bcc 	andi	r8,zero,431
 2006878:	02006c68 	cmpgeui	r8,zero,433
 200687c:	020069e4 	muli	r8,zero,423
 2006880:	020069e4 	muli	r8,zero,423
 2006884:	02006c84 	movi	r8,434
 2006888:	020069e4 	muli	r8,zero,423
 200688c:	020069e4 	muli	r8,zero,423
 2006890:	020069e4 	muli	r8,zero,423
 2006894:	020069e4 	muli	r8,zero,423
 2006898:	02006cb0 	cmpltui	r8,zero,434
 200689c:	020069e4 	muli	r8,zero,423
 20068a0:	020069e4 	muli	r8,zero,423
 20068a4:	020069e4 	muli	r8,zero,423
 20068a8:	020069e4 	muli	r8,zero,423
 20068ac:	020069e4 	muli	r8,zero,423
 20068b0:	02006d04 	movi	r8,436
 20068b4:	020069e4 	muli	r8,zero,423
 20068b8:	020069e4 	muli	r8,zero,423
 20068bc:	020069e4 	muli	r8,zero,423
 20068c0:	020069e4 	muli	r8,zero,423
 20068c4:	02006e14 	movui	r8,440
 20068c8:	020069e4 	muli	r8,zero,423
 20068cc:	020069e4 	muli	r8,zero,423
 20068d0:	020069e4 	muli	r8,zero,423
 20068d4:	020069e4 	muli	r8,zero,423
 20068d8:	020069e4 	muli	r8,zero,423
 20068dc:	020069e4 	muli	r8,zero,423
 20068e0:	020069e4 	muli	r8,zero,423
 20068e4:	02006bbc 	xorhi	r8,zero,430
 20068e8:	020069e4 	muli	r8,zero,423
 20068ec:	020069e4 	muli	r8,zero,423
 20068f0:	020069e4 	muli	r8,zero,423
 20068f4:	02006bcc 	andi	r8,zero,431
 20068f8:	02006c68 	cmpgeui	r8,zero,433
 20068fc:	020069e4 	muli	r8,zero,423
 2006900:	020069e4 	muli	r8,zero,423
 2006904:	02006c84 	movi	r8,434
 2006908:	020069e4 	muli	r8,zero,423
 200690c:	020069e4 	muli	r8,zero,423
 2006910:	020069e4 	muli	r8,zero,423
 2006914:	020069e4 	muli	r8,zero,423
 2006918:	02006cb0 	cmpltui	r8,zero,434
 200691c:	020069e4 	muli	r8,zero,423
 2006920:	020069e4 	muli	r8,zero,423
 2006924:	020069e4 	muli	r8,zero,423
 2006928:	020069e4 	muli	r8,zero,423
 200692c:	020069e4 	muli	r8,zero,423
 2006930:	02006d04 	movi	r8,436
 2006934:	020069e4 	muli	r8,zero,423
 2006938:	020069e4 	muli	r8,zero,423
 200693c:	020069e4 	muli	r8,zero,423
 2006940:	020069e4 	muli	r8,zero,423
 2006944:	02006e14 	movui	r8,440
 2006948:	d900a317 	ldw	r4,652(sp)
 200694c:	00805704 	movi	r2,348
 2006950:	20ffffc4 	addi	r3,r4,-1
 2006954:	10c18c2e 	bgeu	r2,r3,2006f88 <__svfscanf_r+0xf04>
 2006958:	00805744 	movi	r2,349
 200695c:	257fa8c4 	addi	r21,r4,-349
 2006960:	9c836014 	ori	r18,r19,3456
 2006964:	d880a315 	stw	r2,652(sp)
 2006968:	0001a106 	br	2006ff0 <__svfscanf_r+0xf6c>
 200696c:	b009883a 	mov	r4,r22
 2006970:	800b883a 	mov	r5,r16
 2006974:	200befc0 	call	200befc <__srefill_r>
 2006978:	103eb226 	beq	r2,zero,2006444 <__svfscanf_r+0x3c0>
 200697c:	003e1606 	br	20061d8 <__svfscanf_r+0x154>
 2006980:	01000284 	movi	r4,10
 2006984:	00808074 	movhi	r2,513
 2006988:	10b83704 	addi	r2,r2,-7972
 200698c:	054000c4 	movi	r21,3
 2006990:	d900a115 	stw	r4,644(sp)
 2006994:	d880a015 	stw	r2,640(sp)
 2006998:	003ea806 	br	200643c <__svfscanf_r+0x3b8>
 200699c:	a880200c 	andi	r2,r21,128
 20069a0:	10001026 	beq	r2,zero,20069e4 <__svfscanf_r+0x960>
 20069a4:	00bfdfc4 	movi	r2,-129
 20069a8:	a8aa703a 	and	r21,r21,r2
 20069ac:	b9400005 	stb	r5,0(r23)
 20069b0:	bdc00044 	addi	r23,r23,1
 20069b4:	80c00117 	ldw	r3,4(r16)
 20069b8:	8c400044 	addi	r17,r17,1
 20069bc:	18bfffc4 	addi	r2,r3,-1
 20069c0:	80800115 	stw	r2,4(r16)
 20069c4:	0080610e 	bge	zero,r2,2006b4c <__svfscanf_r+0xac8>
 20069c8:	80800017 	ldw	r2,0(r16)
 20069cc:	10800044 	addi	r2,r2,1
 20069d0:	80800015 	stw	r2,0(r16)
 20069d4:	d880a317 	ldw	r2,652(sp)
 20069d8:	10bfffc4 	addi	r2,r2,-1
 20069dc:	d880a315 	stw	r2,652(sp)
 20069e0:	103f7d1e 	bne	r2,zero,20067d8 <__svfscanf_r+0x754>
 20069e4:	d8c09e17 	ldw	r3,632(sp)
 20069e8:	18000226 	beq	r3,zero,20069f4 <__svfscanf_r+0x970>
 20069ec:	00bfbfc4 	movi	r2,-257
 20069f0:	a8aa703a 	and	r21,r21,r2
 20069f4:	90ffffc4 	addi	r3,r18,-1
 20069f8:	00800044 	movi	r2,1
 20069fc:	10c0cd2e 	bgeu	r2,r3,2006d34 <__svfscanf_r+0xcb0>
 2006a00:	e1003fcc 	andi	r4,fp,255
 2006a04:	2100201c 	xori	r4,r4,128
 2006a08:	213fe004 	addi	r4,r4,-128
 2006a0c:	20ffffc4 	addi	r3,r4,-1
 2006a10:	00800184 	movi	r2,6
 2006a14:	10c01736 	bltu	r2,r3,2006a74 <__svfscanf_r+0x9f0>
 2006a18:	00c00084 	movi	r3,2
 2006a1c:	1900880e 	bge	r3,r4,2006c40 <__svfscanf_r+0xbbc>
 2006a20:	008000c4 	movi	r2,3
 2006a24:	1100130e 	bge	r2,r4,2006a74 <__svfscanf_r+0x9f0>
 2006a28:	e4ffffc4 	addi	r19,fp,-1
 2006a2c:	b825883a 	mov	r18,r23
 2006a30:	94bfffc4 	addi	r18,r18,-1
 2006a34:	91400007 	ldb	r5,0(r18)
 2006a38:	b009883a 	mov	r4,r22
 2006a3c:	800d883a 	mov	r6,r16
 2006a40:	200e6fc0 	call	200e6fc <_ungetc_r>
 2006a44:	9cffffc4 	addi	r19,r19,-1
 2006a48:	98c03fcc 	andi	r3,r19,255
 2006a4c:	18c0201c 	xori	r3,r3,128
 2006a50:	18ffe004 	addi	r3,r3,-128
 2006a54:	00800084 	movi	r2,2
 2006a58:	18bff51e 	bne	r3,r2,2006a30 <__svfscanf_r+0x9ac>
 2006a5c:	e0bfff04 	addi	r2,fp,-4
 2006a60:	10803fcc 	andi	r2,r2,255
 2006a64:	b887c83a 	sub	r3,r23,r2
 2006a68:	8885c83a 	sub	r2,r17,r2
 2006a6c:	147fffc4 	addi	r17,r2,-1
 2006a70:	1dffffc4 	addi	r23,r3,-1
 2006a74:	a880400c 	andi	r2,r21,256
 2006a78:	10001226 	beq	r2,zero,2006ac4 <__svfscanf_r+0xa40>
 2006a7c:	a881000c 	andi	r2,r21,1024
 2006a80:	1000651e 	bne	r2,zero,2006c18 <__svfscanf_r+0xb94>
 2006a84:	bdffffc4 	addi	r23,r23,-1
 2006a88:	b9400007 	ldb	r5,0(r23)
 2006a8c:	00801944 	movi	r2,101
 2006a90:	8c7fffc4 	addi	r17,r17,-1
 2006a94:	28800826 	beq	r5,r2,2006ab8 <__svfscanf_r+0xa34>
 2006a98:	00801144 	movi	r2,69
 2006a9c:	28800626 	beq	r5,r2,2006ab8 <__svfscanf_r+0xa34>
 2006aa0:	bdffffc4 	addi	r23,r23,-1
 2006aa4:	b009883a 	mov	r4,r22
 2006aa8:	800d883a 	mov	r6,r16
 2006aac:	200e6fc0 	call	200e6fc <_ungetc_r>
 2006ab0:	b9400007 	ldb	r5,0(r23)
 2006ab4:	8c7fffc4 	addi	r17,r17,-1
 2006ab8:	b009883a 	mov	r4,r22
 2006abc:	800d883a 	mov	r6,r16
 2006ac0:	200e6fc0 	call	200e6fc <_ungetc_r>
 2006ac4:	a880040c 	andi	r2,r21,16
 2006ac8:	103d811e 	bne	r2,zero,20060d0 <__svfscanf_r+0x4c>
 2006acc:	a8c1800c 	andi	r3,r21,1536
 2006ad0:	00810004 	movi	r2,1024
 2006ad4:	b8000005 	stb	zero,0(r23)
 2006ad8:	1880bb26 	beq	r3,r2,2006dc8 <__svfscanf_r+0xd44>
 2006adc:	d8809d17 	ldw	r2,628(sp)
 2006ae0:	1000a61e 	bne	r2,zero,2006d7c <__svfscanf_r+0xcf8>
 2006ae4:	d940a617 	ldw	r5,664(sp)
 2006ae8:	b009883a 	mov	r4,r22
 2006aec:	000d883a 	mov	r6,zero
 2006af0:	200c5380 	call	200c538 <_strtod_r>
 2006af4:	a900004c 	andi	r4,r21,1
 2006af8:	2009003a 	cmpeq	r4,r4,zero
 2006afc:	1025883a 	mov	r18,r2
 2006b00:	1827883a 	mov	r19,r3
 2006b04:	2000951e 	bne	r4,zero,2006d5c <__svfscanf_r+0xcd8>
 2006b08:	d8c0a417 	ldw	r3,656(sp)
 2006b0c:	18800017 	ldw	r2,0(r3)
 2006b10:	1d400104 	addi	r21,r3,4
 2006b14:	14c00115 	stw	r19,4(r2)
 2006b18:	14800015 	stw	r18,0(r2)
 2006b1c:	d8c0a217 	ldw	r3,648(sp)
 2006b20:	dd40a415 	stw	r21,656(sp)
 2006b24:	18c00044 	addi	r3,r3,1
 2006b28:	d8c0a215 	stw	r3,648(sp)
 2006b2c:	003d6806 	br	20060d0 <__svfscanf_r+0x4c>
 2006b30:	a880800c 	andi	r2,r21,512
 2006b34:	103fab26 	beq	r2,zero,20069e4 <__svfscanf_r+0x960>
 2006b38:	d9009e17 	ldw	r4,632(sp)
 2006b3c:	00bf5fc4 	movi	r2,-641
 2006b40:	a8aa703a 	and	r21,r21,r2
 2006b44:	d9009f15 	stw	r4,636(sp)
 2006b48:	003f9806 	br	20069ac <__svfscanf_r+0x928>
 2006b4c:	b009883a 	mov	r4,r22
 2006b50:	800b883a 	mov	r5,r16
 2006b54:	d980a715 	stw	r6,668(sp)
 2006b58:	200befc0 	call	200befc <__srefill_r>
 2006b5c:	d980a717 	ldw	r6,668(sp)
 2006b60:	103f9c26 	beq	r2,zero,20069d4 <__svfscanf_r+0x950>
 2006b64:	003f9f06 	br	20069e4 <__svfscanf_r+0x960>
 2006b68:	a880400c 	andi	r2,r21,256
 2006b6c:	10000b26 	beq	r2,zero,2006b9c <__svfscanf_r+0xb18>
 2006b70:	00bfdfc4 	movi	r2,-129
 2006b74:	a8aa703a 	and	r21,r21,r2
 2006b78:	d8809e17 	ldw	r2,632(sp)
 2006b7c:	10800044 	addi	r2,r2,1
 2006b80:	d8809e15 	stw	r2,632(sp)
 2006b84:	303f8b26 	beq	r6,zero,20069b4 <__svfscanf_r+0x930>
 2006b88:	d8c0a317 	ldw	r3,652(sp)
 2006b8c:	31bfffc4 	addi	r6,r6,-1
 2006b90:	18c00044 	addi	r3,r3,1
 2006b94:	d8c0a315 	stw	r3,652(sp)
 2006b98:	003f8606 	br	20069b4 <__svfscanf_r+0x930>
 2006b9c:	e0803fcc 	andi	r2,fp,255
 2006ba0:	1080201c 	xori	r2,r2,128
 2006ba4:	10bfe004 	addi	r2,r2,-128
 2006ba8:	9085883a 	add	r2,r18,r2
 2006bac:	103f8d1e 	bne	r2,zero,20069e4 <__svfscanf_r+0x960>
 2006bb0:	00bf9fc4 	movi	r2,-385
 2006bb4:	a8aa703a 	and	r21,r21,r2
 2006bb8:	003f7c06 	br	20069ac <__svfscanf_r+0x928>
 2006bbc:	00800044 	movi	r2,1
 2006bc0:	90bf881e 	bne	r18,r2,20069e4 <__svfscanf_r+0x960>
 2006bc4:	04800084 	movi	r18,2
 2006bc8:	003f7806 	br	20069ac <__svfscanf_r+0x928>
 2006bcc:	a8c1400c 	andi	r3,r21,1280
 2006bd0:	00810004 	movi	r2,1024
 2006bd4:	18800426 	beq	r3,r2,2006be8 <__svfscanf_r+0xb64>
 2006bd8:	a884703a 	and	r2,r21,r2
 2006bdc:	103f8126 	beq	r2,zero,20069e4 <__svfscanf_r+0x960>
 2006be0:	d8809e17 	ldw	r2,632(sp)
 2006be4:	103f8326 	beq	r2,zero,20069f4 <__svfscanf_r+0x970>
 2006be8:	a880800c 	andi	r2,r21,512
 2006bec:	1000051e 	bne	r2,zero,2006c04 <__svfscanf_r+0xb80>
 2006bf0:	d8c09e17 	ldw	r3,632(sp)
 2006bf4:	d9009f17 	ldw	r4,636(sp)
 2006bf8:	ddc09c15 	stw	r23,624(sp)
 2006bfc:	1907c83a 	sub	r3,r3,r4
 2006c00:	d8c09d15 	stw	r3,628(sp)
 2006c04:	00be7fc4 	movi	r2,-1537
 2006c08:	a884703a 	and	r2,r21,r2
 2006c0c:	15406014 	ori	r21,r2,384
 2006c10:	d8009e15 	stw	zero,632(sp)
 2006c14:	003f6506 	br	20069ac <__svfscanf_r+0x928>
 2006c18:	d900a617 	ldw	r4,664(sp)
 2006c1c:	25fd4e2e 	bgeu	r4,r23,2006158 <__svfscanf_r+0xd4>
 2006c20:	bdffffc4 	addi	r23,r23,-1
 2006c24:	b9400007 	ldb	r5,0(r23)
 2006c28:	b009883a 	mov	r4,r22
 2006c2c:	800d883a 	mov	r6,r16
 2006c30:	200e6fc0 	call	200e6fc <_ungetc_r>
 2006c34:	d880a617 	ldw	r2,664(sp)
 2006c38:	15fff936 	bltu	r2,r23,2006c20 <__svfscanf_r+0xb9c>
 2006c3c:	003d4606 	br	2006158 <__svfscanf_r+0xd4>
 2006c40:	d900a617 	ldw	r4,664(sp)
 2006c44:	25fd442e 	bgeu	r4,r23,2006158 <__svfscanf_r+0xd4>
 2006c48:	bdffffc4 	addi	r23,r23,-1
 2006c4c:	b9400007 	ldb	r5,0(r23)
 2006c50:	b009883a 	mov	r4,r22
 2006c54:	800d883a 	mov	r6,r16
 2006c58:	200e6fc0 	call	200e6fc <_ungetc_r>
 2006c5c:	d8c0a617 	ldw	r3,664(sp)
 2006c60:	1dfff936 	bltu	r3,r23,2006c48 <__svfscanf_r+0xbc4>
 2006c64:	003d3c06 	br	2006158 <__svfscanf_r+0xd4>
 2006c68:	e0c03fcc 	andi	r3,fp,255
 2006c6c:	18c0201c 	xori	r3,r3,128
 2006c70:	18ffe004 	addi	r3,r3,-128
 2006c74:	00800084 	movi	r2,2
 2006c78:	18bf5a1e 	bne	r3,r2,20069e4 <__svfscanf_r+0x960>
 2006c7c:	070000c4 	movi	fp,3
 2006c80:	003f4a06 	br	20069ac <__svfscanf_r+0x928>
 2006c84:	e0c03fcc 	andi	r3,fp,255
 2006c88:	18c0201c 	xori	r3,r3,128
 2006c8c:	18ffe004 	addi	r3,r3,-128
 2006c90:	1800231e 	bne	r3,zero,2006d20 <__svfscanf_r+0xc9c>
 2006c94:	a8c1c00c 	andi	r3,r21,1792
 2006c98:	0081c004 	movi	r2,1792
 2006c9c:	18bf511e 	bne	r3,r2,20069e4 <__svfscanf_r+0x960>
 2006ca0:	00be1fc4 	movi	r2,-1921
 2006ca4:	a8aa703a 	and	r21,r21,r2
 2006ca8:	07000044 	movi	fp,1
 2006cac:	003f3f06 	br	20069ac <__svfscanf_r+0x928>
 2006cb0:	9000101e 	bne	r18,zero,2006cf4 <__svfscanf_r+0xc70>
 2006cb4:	a8c1c00c 	andi	r3,r21,1792
 2006cb8:	0081c004 	movi	r2,1792
 2006cbc:	18800926 	beq	r3,r2,2006ce4 <__svfscanf_r+0xc60>
 2006cc0:	e0c03fcc 	andi	r3,fp,255
 2006cc4:	18c0201c 	xori	r3,r3,128
 2006cc8:	18ffe004 	addi	r3,r3,-128
 2006ccc:	00800044 	movi	r2,1
 2006cd0:	18800226 	beq	r3,r2,2006cdc <__svfscanf_r+0xc58>
 2006cd4:	00800104 	movi	r2,4
 2006cd8:	18bf421e 	bne	r3,r2,20069e4 <__svfscanf_r+0x960>
 2006cdc:	e7000044 	addi	fp,fp,1
 2006ce0:	003f3206 	br	20069ac <__svfscanf_r+0x928>
 2006ce4:	00be1fc4 	movi	r2,-1921
 2006ce8:	a8aa703a 	and	r21,r21,r2
 2006cec:	04800044 	movi	r18,1
 2006cf0:	003f2e06 	br	20069ac <__svfscanf_r+0x928>
 2006cf4:	00800084 	movi	r2,2
 2006cf8:	90bff11e 	bne	r18,r2,2006cc0 <__svfscanf_r+0xc3c>
 2006cfc:	048000c4 	movi	r18,3
 2006d00:	003f2a06 	br	20069ac <__svfscanf_r+0x928>
 2006d04:	e0c03fcc 	andi	r3,fp,255
 2006d08:	18c0201c 	xori	r3,r3,128
 2006d0c:	18ffe004 	addi	r3,r3,-128
 2006d10:	00800184 	movi	r2,6
 2006d14:	18bf331e 	bne	r3,r2,20069e4 <__svfscanf_r+0x960>
 2006d18:	070001c4 	movi	fp,7
 2006d1c:	003f2306 	br	20069ac <__svfscanf_r+0x928>
 2006d20:	008000c4 	movi	r2,3
 2006d24:	18bfed26 	beq	r3,r2,2006cdc <__svfscanf_r+0xc58>
 2006d28:	00800144 	movi	r2,5
 2006d2c:	18bfeb26 	beq	r3,r2,2006cdc <__svfscanf_r+0xc58>
 2006d30:	003f2c06 	br	20069e4 <__svfscanf_r+0x960>
 2006d34:	d900a617 	ldw	r4,664(sp)
 2006d38:	25fd072e 	bgeu	r4,r23,2006158 <__svfscanf_r+0xd4>
 2006d3c:	bdffffc4 	addi	r23,r23,-1
 2006d40:	b9400007 	ldb	r5,0(r23)
 2006d44:	b009883a 	mov	r4,r22
 2006d48:	800d883a 	mov	r6,r16
 2006d4c:	200e6fc0 	call	200e6fc <_ungetc_r>
 2006d50:	d880a617 	ldw	r2,664(sp)
 2006d54:	15fff936 	bltu	r2,r23,2006d3c <__svfscanf_r+0xcb8>
 2006d58:	003cff06 	br	2006158 <__svfscanf_r+0xd4>
 2006d5c:	a880008c 	andi	r2,r21,2
 2006d60:	10002026 	beq	r2,zero,2006de4 <__svfscanf_r+0xd60>
 2006d64:	d900a417 	ldw	r4,656(sp)
 2006d68:	20800017 	ldw	r2,0(r4)
 2006d6c:	25400104 	addi	r21,r4,4
 2006d70:	10c00115 	stw	r3,4(r2)
 2006d74:	14800015 	stw	r18,0(r2)
 2006d78:	003f6806 	br	2006b1c <__svfscanf_r+0xa98>
 2006d7c:	d8c09c17 	ldw	r3,624(sp)
 2006d80:	b009883a 	mov	r4,r22
 2006d84:	000d883a 	mov	r6,zero
 2006d88:	19400044 	addi	r5,r3,1
 2006d8c:	01c00284 	movi	r7,10
 2006d90:	200db5c0 	call	200db5c <_strtol_r>
 2006d94:	d9009d17 	ldw	r4,628(sp)
 2006d98:	110dc83a 	sub	r6,r2,r4
 2006d9c:	d8c0a617 	ldw	r3,664(sp)
 2006da0:	d9009c17 	ldw	r4,624(sp)
 2006da4:	188054c4 	addi	r2,r3,339
 2006da8:	20800236 	bltu	r4,r2,2006db4 <__svfscanf_r+0xd30>
 2006dac:	18805484 	addi	r2,r3,338
 2006db0:	d8809c15 	stw	r2,624(sp)
 2006db4:	d9009c17 	ldw	r4,624(sp)
 2006db8:	01408074 	movhi	r5,513
 2006dbc:	2956d004 	addi	r5,r5,23360
 2006dc0:	200c2140 	call	200c214 <sprintf>
 2006dc4:	003f4706 	br	2006ae4 <__svfscanf_r+0xa60>
 2006dc8:	d8c09e17 	ldw	r3,632(sp)
 2006dcc:	d9009f17 	ldw	r4,636(sp)
 2006dd0:	1905c83a 	sub	r2,r3,r4
 2006dd4:	103f4326 	beq	r2,zero,2006ae4 <__svfscanf_r+0xa60>
 2006dd8:	008dc83a 	sub	r6,zero,r2
 2006ddc:	ddc09c15 	stw	r23,624(sp)
 2006de0:	003fee06 	br	2006d9c <__svfscanf_r+0xd18>
 2006de4:	d880a417 	ldw	r2,656(sp)
 2006de8:	9009883a 	mov	r4,r18
 2006dec:	180b883a 	mov	r5,r3
 2006df0:	15c00017 	ldw	r23,0(r2)
 2006df4:	15400104 	addi	r21,r2,4
 2006df8:	200c11c0 	call	200c11c <__isnand>
 2006dfc:	10021c1e 	bne	r2,zero,2007670 <__svfscanf_r+0x15ec>
 2006e00:	980b883a 	mov	r5,r19
 2006e04:	9009883a 	mov	r4,r18
 2006e08:	201106c0 	call	201106c <__truncdfsf2>
 2006e0c:	b8800015 	stw	r2,0(r23)
 2006e10:	003f4206 	br	2006b1c <__svfscanf_r+0xa98>
 2006e14:	e0c03fcc 	andi	r3,fp,255
 2006e18:	18c0201c 	xori	r3,r3,128
 2006e1c:	18ffe004 	addi	r3,r3,-128
 2006e20:	008001c4 	movi	r2,7
 2006e24:	18beef1e 	bne	r3,r2,20069e4 <__svfscanf_r+0x960>
 2006e28:	07000204 	movi	fp,8
 2006e2c:	003edf06 	br	20069ac <__svfscanf_r+0x928>
 2006e30:	d900a317 	ldw	r4,652(sp)
 2006e34:	208002a4 	muli	r2,r4,10
 2006e38:	1145883a 	add	r2,r2,r5
 2006e3c:	10bff404 	addi	r2,r2,-48
 2006e40:	d880a315 	stw	r2,652(sp)
 2006e44:	003ceb06 	br	20061f4 <__svfscanf_r+0x170>
 2006e48:	9880040c 	andi	r2,r19,16
 2006e4c:	10001426 	beq	r2,zero,2006ea0 <__svfscanf_r+0xe1c>
 2006e50:	0027883a 	mov	r19,zero
 2006e54:	00000906 	br	2006e7c <__svfscanf_r+0xdf8>
 2006e58:	80c00117 	ldw	r3,4(r16)
 2006e5c:	d880a317 	ldw	r2,652(sp)
 2006e60:	29800044 	addi	r6,r5,1
 2006e64:	18ffffc4 	addi	r3,r3,-1
 2006e68:	9cc00044 	addi	r19,r19,1
 2006e6c:	81800015 	stw	r6,0(r16)
 2006e70:	80c00115 	stw	r3,4(r16)
 2006e74:	14fdf726 	beq	r2,r19,2006654 <__svfscanf_r+0x5d0>
 2006e78:	00c02c0e 	bge	zero,r3,2006f2c <__svfscanf_r+0xea8>
 2006e7c:	81400017 	ldw	r5,0(r16)
 2006e80:	90800017 	ldw	r2,0(r18)
 2006e84:	28c00003 	ldbu	r3,0(r5)
 2006e88:	1887883a 	add	r3,r3,r2
 2006e8c:	19000003 	ldbu	r4,0(r3)
 2006e90:	2100020c 	andi	r4,r4,8
 2006e94:	203ff026 	beq	r4,zero,2006e58 <__svfscanf_r+0xdd4>
 2006e98:	8ce3883a 	add	r17,r17,r19
 2006e9c:	003c8c06 	br	20060d0 <__svfscanf_r+0x4c>
 2006ea0:	d8c0a417 	ldw	r3,656(sp)
 2006ea4:	1d400017 	ldw	r21,0(r3)
 2006ea8:	a827883a 	mov	r19,r21
 2006eac:	00000e06 	br	2006ee8 <__svfscanf_r+0xe64>
 2006eb0:	80800117 	ldw	r2,4(r16)
 2006eb4:	d900a317 	ldw	r4,652(sp)
 2006eb8:	29800044 	addi	r6,r5,1
 2006ebc:	10ffffc4 	addi	r3,r2,-1
 2006ec0:	213fffc4 	addi	r4,r4,-1
 2006ec4:	d900a315 	stw	r4,652(sp)
 2006ec8:	80c00115 	stw	r3,4(r16)
 2006ecc:	28800003 	ldbu	r2,0(r5)
 2006ed0:	98800005 	stb	r2,0(r19)
 2006ed4:	81800015 	stw	r6,0(r16)
 2006ed8:	9cc00044 	addi	r19,r19,1
 2006edc:	20000926 	beq	r4,zero,2006f04 <__svfscanf_r+0xe80>
 2006ee0:	80800117 	ldw	r2,4(r16)
 2006ee4:	0080170e 	bge	zero,r2,2006f44 <__svfscanf_r+0xec0>
 2006ee8:	81400017 	ldw	r5,0(r16)
 2006eec:	90800017 	ldw	r2,0(r18)
 2006ef0:	28c00003 	ldbu	r3,0(r5)
 2006ef4:	1887883a 	add	r3,r3,r2
 2006ef8:	19000003 	ldbu	r4,0(r3)
 2006efc:	2100020c 	andi	r4,r4,8
 2006f00:	203feb26 	beq	r4,zero,2006eb0 <__svfscanf_r+0xe2c>
 2006f04:	9d45c83a 	sub	r2,r19,r21
 2006f08:	d8c0a217 	ldw	r3,648(sp)
 2006f0c:	88a3883a 	add	r17,r17,r2
 2006f10:	d880a417 	ldw	r2,656(sp)
 2006f14:	18c00044 	addi	r3,r3,1
 2006f18:	d8c0a215 	stw	r3,648(sp)
 2006f1c:	10800104 	addi	r2,r2,4
 2006f20:	d880a415 	stw	r2,656(sp)
 2006f24:	98000005 	stb	zero,0(r19)
 2006f28:	003c6906 	br	20060d0 <__svfscanf_r+0x4c>
 2006f2c:	b009883a 	mov	r4,r22
 2006f30:	800b883a 	mov	r5,r16
 2006f34:	200befc0 	call	200befc <__srefill_r>
 2006f38:	103fd026 	beq	r2,zero,2006e7c <__svfscanf_r+0xdf8>
 2006f3c:	8ce3883a 	add	r17,r17,r19
 2006f40:	003c6306 	br	20060d0 <__svfscanf_r+0x4c>
 2006f44:	b009883a 	mov	r4,r22
 2006f48:	800b883a 	mov	r5,r16
 2006f4c:	200befc0 	call	200befc <__srefill_r>
 2006f50:	103fe526 	beq	r2,zero,2006ee8 <__svfscanf_r+0xe64>
 2006f54:	003feb06 	br	2006f04 <__svfscanf_r+0xe80>
 2006f58:	d900a317 	ldw	r4,652(sp)
 2006f5c:	9d41e014 	ori	r21,r19,1920
 2006f60:	2000821e 	bne	r4,zero,200716c <__svfscanf_r+0x10e8>
 2006f64:	d8c04404 	addi	r3,sp,272
 2006f68:	182f883a 	mov	r23,r3
 2006f6c:	0039883a 	mov	fp,zero
 2006f70:	d8c0a615 	stw	r3,664(sp)
 2006f74:	d8009c15 	stw	zero,624(sp)
 2006f78:	d8009d15 	stw	zero,628(sp)
 2006f7c:	d8009f15 	stw	zero,636(sp)
 2006f80:	d8009e15 	stw	zero,632(sp)
 2006f84:	003e9e06 	br	2006a00 <__svfscanf_r+0x97c>
 2006f88:	d900a317 	ldw	r4,652(sp)
 2006f8c:	9c836014 	ori	r18,r19,3456
 2006f90:	2000161e 	bne	r4,zero,2006fec <__svfscanf_r+0xf68>
 2006f94:	d8804404 	addi	r2,sp,272
 2006f98:	d880a615 	stw	r2,664(sp)
 2006f9c:	002f883a 	mov	r23,zero
 2006fa0:	1027883a 	mov	r19,r2
 2006fa4:	9080400c 	andi	r2,r18,256
 2006fa8:	10000926 	beq	r2,zero,2006fd0 <__svfscanf_r+0xf4c>
 2006fac:	d8c0a617 	ldw	r3,664(sp)
 2006fb0:	1cc0052e 	bgeu	r3,r19,2006fc8 <__svfscanf_r+0xf44>
 2006fb4:	9cffffc4 	addi	r19,r19,-1
 2006fb8:	99400007 	ldb	r5,0(r19)
 2006fbc:	b009883a 	mov	r4,r22
 2006fc0:	800d883a 	mov	r6,r16
 2006fc4:	200e6fc0 	call	200e6fc <_ungetc_r>
 2006fc8:	d900a617 	ldw	r4,664(sp)
 2006fcc:	24fc6226 	beq	r4,r19,2006158 <__svfscanf_r+0xd4>
 2006fd0:	9080040c 	andi	r2,r18,16
 2006fd4:	10006726 	beq	r2,zero,2007174 <__svfscanf_r+0x10f0>
 2006fd8:	d8c0a617 	ldw	r3,664(sp)
 2006fdc:	98c5c83a 	sub	r2,r19,r3
 2006fe0:	b885883a 	add	r2,r23,r2
 2006fe4:	88a3883a 	add	r17,r17,r2
 2006fe8:	003c3906 	br	20060d0 <__svfscanf_r+0x4c>
 2006fec:	002b883a 	mov	r21,zero
 2006ff0:	d8c04404 	addi	r3,sp,272
 2006ff4:	d8c0a615 	stw	r3,664(sp)
 2006ff8:	002f883a 	mov	r23,zero
 2006ffc:	1827883a 	mov	r19,r3
 2007000:	81800017 	ldw	r6,0(r16)
 2007004:	00c01344 	movi	r3,77
 2007008:	31400003 	ldbu	r5,0(r6)
 200700c:	28bff544 	addi	r2,r5,-43
 2007010:	10803fcc 	andi	r2,r2,255
 2007014:	18bfe336 	bltu	r3,r2,2006fa4 <__svfscanf_r+0xf20>
 2007018:	1085883a 	add	r2,r2,r2
 200701c:	1085883a 	add	r2,r2,r2
 2007020:	00c08034 	movhi	r3,512
 2007024:	18dc0d04 	addi	r3,r3,28724
 2007028:	10c5883a 	add	r2,r2,r3
 200702c:	11000017 	ldw	r4,0(r2)
 2007030:	2000683a 	jmp	r4
 2007034:	020071c8 	cmpgei	r8,zero,455
 2007038:	02006fa4 	muli	r8,zero,446
 200703c:	020071c8 	cmpgei	r8,zero,455
 2007040:	02006fa4 	muli	r8,zero,446
 2007044:	02006fa4 	muli	r8,zero,446
 2007048:	0200720c 	andi	r8,zero,456
 200704c:	02007308 	cmpgei	r8,zero,460
 2007050:	02007308 	cmpgei	r8,zero,460
 2007054:	02007308 	cmpgei	r8,zero,460
 2007058:	02007308 	cmpgei	r8,zero,460
 200705c:	02007308 	cmpgei	r8,zero,460
 2007060:	02007308 	cmpgei	r8,zero,460
 2007064:	02007308 	cmpgei	r8,zero,460
 2007068:	02007330 	cmpltui	r8,zero,460
 200706c:	02007330 	cmpltui	r8,zero,460
 2007070:	02006fa4 	muli	r8,zero,446
 2007074:	02006fa4 	muli	r8,zero,446
 2007078:	02006fa4 	muli	r8,zero,446
 200707c:	02006fa4 	muli	r8,zero,446
 2007080:	02006fa4 	muli	r8,zero,446
 2007084:	02006fa4 	muli	r8,zero,446
 2007088:	02006fa4 	muli	r8,zero,446
 200708c:	02007360 	cmpeqi	r8,zero,461
 2007090:	02007360 	cmpeqi	r8,zero,461
 2007094:	02007360 	cmpeqi	r8,zero,461
 2007098:	02007360 	cmpeqi	r8,zero,461
 200709c:	02007360 	cmpeqi	r8,zero,461
 20070a0:	02007360 	cmpeqi	r8,zero,461
 20070a4:	02006fa4 	muli	r8,zero,446
 20070a8:	02006fa4 	muli	r8,zero,446
 20070ac:	02006fa4 	muli	r8,zero,446
 20070b0:	02006fa4 	muli	r8,zero,446
 20070b4:	02006fa4 	muli	r8,zero,446
 20070b8:	02006fa4 	muli	r8,zero,446
 20070bc:	02006fa4 	muli	r8,zero,446
 20070c0:	02006fa4 	muli	r8,zero,446
 20070c4:	02006fa4 	muli	r8,zero,446
 20070c8:	02006fa4 	muli	r8,zero,446
 20070cc:	02006fa4 	muli	r8,zero,446
 20070d0:	02006fa4 	muli	r8,zero,446
 20070d4:	02006fa4 	muli	r8,zero,446
 20070d8:	02006fa4 	muli	r8,zero,446
 20070dc:	02006fa4 	muli	r8,zero,446
 20070e0:	02006fa4 	muli	r8,zero,446
 20070e4:	02006fa4 	muli	r8,zero,446
 20070e8:	02007370 	cmpltui	r8,zero,461
 20070ec:	02006fa4 	muli	r8,zero,446
 20070f0:	02006fa4 	muli	r8,zero,446
 20070f4:	02006fa4 	muli	r8,zero,446
 20070f8:	02006fa4 	muli	r8,zero,446
 20070fc:	02006fa4 	muli	r8,zero,446
 2007100:	02006fa4 	muli	r8,zero,446
 2007104:	02006fa4 	muli	r8,zero,446
 2007108:	02006fa4 	muli	r8,zero,446
 200710c:	02007360 	cmpeqi	r8,zero,461
 2007110:	02007360 	cmpeqi	r8,zero,461
 2007114:	02007360 	cmpeqi	r8,zero,461
 2007118:	02007360 	cmpeqi	r8,zero,461
 200711c:	02007360 	cmpeqi	r8,zero,461
 2007120:	02007360 	cmpeqi	r8,zero,461
 2007124:	02006fa4 	muli	r8,zero,446
 2007128:	02006fa4 	muli	r8,zero,446
 200712c:	02006fa4 	muli	r8,zero,446
 2007130:	02006fa4 	muli	r8,zero,446
 2007134:	02006fa4 	muli	r8,zero,446
 2007138:	02006fa4 	muli	r8,zero,446
 200713c:	02006fa4 	muli	r8,zero,446
 2007140:	02006fa4 	muli	r8,zero,446
 2007144:	02006fa4 	muli	r8,zero,446
 2007148:	02006fa4 	muli	r8,zero,446
 200714c:	02006fa4 	muli	r8,zero,446
 2007150:	02006fa4 	muli	r8,zero,446
 2007154:	02006fa4 	muli	r8,zero,446
 2007158:	02006fa4 	muli	r8,zero,446
 200715c:	02006fa4 	muli	r8,zero,446
 2007160:	02006fa4 	muli	r8,zero,446
 2007164:	02006fa4 	muli	r8,zero,446
 2007168:	02007370 	cmpltui	r8,zero,461
 200716c:	000d883a 	mov	r6,zero
 2007170:	003d9006 	br	20067b4 <__svfscanf_r+0x730>
 2007174:	98000005 	stb	zero,0(r19)
 2007178:	d8c0a017 	ldw	r3,640(sp)
 200717c:	d940a617 	ldw	r5,664(sp)
 2007180:	d9c0a117 	ldw	r7,644(sp)
 2007184:	b009883a 	mov	r4,r22
 2007188:	000d883a 	mov	r6,zero
 200718c:	183ee83a 	callr	r3
 2007190:	1007883a 	mov	r3,r2
 2007194:	9080080c 	andi	r2,r18,32
 2007198:	10004d1e 	bne	r2,zero,20072d0 <__svfscanf_r+0x124c>
 200719c:	9080010c 	andi	r2,r18,4
 20071a0:	10003426 	beq	r2,zero,2007274 <__svfscanf_r+0x11f0>
 20071a4:	d900a417 	ldw	r4,656(sp)
 20071a8:	20800017 	ldw	r2,0(r4)
 20071ac:	21000104 	addi	r4,r4,4
 20071b0:	d900a415 	stw	r4,656(sp)
 20071b4:	10c0000d 	sth	r3,0(r2)
 20071b8:	d880a217 	ldw	r2,648(sp)
 20071bc:	10800044 	addi	r2,r2,1
 20071c0:	d880a215 	stw	r2,648(sp)
 20071c4:	003f8406 	br	2006fd8 <__svfscanf_r+0xf54>
 20071c8:	9080200c 	andi	r2,r18,128
 20071cc:	103f7526 	beq	r2,zero,2006fa4 <__svfscanf_r+0xf20>
 20071d0:	00bfdfc4 	movi	r2,-129
 20071d4:	90a4703a 	and	r18,r18,r2
 20071d8:	99400005 	stb	r5,0(r19)
 20071dc:	9cc00044 	addi	r19,r19,1
 20071e0:	80c00117 	ldw	r3,4(r16)
 20071e4:	18ffffc4 	addi	r3,r3,-1
 20071e8:	80c00115 	stw	r3,4(r16)
 20071ec:	00c0130e 	bge	zero,r3,200723c <__svfscanf_r+0x11b8>
 20071f0:	31800044 	addi	r6,r6,1
 20071f4:	81800015 	stw	r6,0(r16)
 20071f8:	d880a317 	ldw	r2,652(sp)
 20071fc:	10bfffc4 	addi	r2,r2,-1
 2007200:	d880a315 	stw	r2,652(sp)
 2007204:	103f7e1e 	bne	r2,zero,2007000 <__svfscanf_r+0xf7c>
 2007208:	003f6606 	br	2006fa4 <__svfscanf_r+0xf20>
 200720c:	9082000c 	andi	r2,r18,2048
 2007210:	103ff126 	beq	r2,zero,20071d8 <__svfscanf_r+0x1154>
 2007214:	d8c0a117 	ldw	r3,644(sp)
 2007218:	1800031e 	bne	r3,zero,2007228 <__svfscanf_r+0x11a4>
 200721c:	01000204 	movi	r4,8
 2007220:	94808014 	ori	r18,r18,512
 2007224:	d900a115 	stw	r4,644(sp)
 2007228:	9081000c 	andi	r2,r18,1024
 200722c:	10000826 	beq	r2,zero,2007250 <__svfscanf_r+0x11cc>
 2007230:	00be9fc4 	movi	r2,-1409
 2007234:	90a4703a 	and	r18,r18,r2
 2007238:	003fe706 	br	20071d8 <__svfscanf_r+0x1154>
 200723c:	b009883a 	mov	r4,r22
 2007240:	800b883a 	mov	r5,r16
 2007244:	200befc0 	call	200befc <__srefill_r>
 2007248:	103feb26 	beq	r2,zero,20071f8 <__svfscanf_r+0x1174>
 200724c:	003f5506 	br	2006fa4 <__svfscanf_r+0xf20>
 2007250:	a8000426 	beq	r21,zero,2007264 <__svfscanf_r+0x11e0>
 2007254:	d880a317 	ldw	r2,652(sp)
 2007258:	ad7fffc4 	addi	r21,r21,-1
 200725c:	10800044 	addi	r2,r2,1
 2007260:	d880a315 	stw	r2,652(sp)
 2007264:	00bf1fc4 	movi	r2,-897
 2007268:	90a4703a 	and	r18,r18,r2
 200726c:	bdc00044 	addi	r23,r23,1
 2007270:	003fdb06 	br	20071e0 <__svfscanf_r+0x115c>
 2007274:	9080004c 	andi	r2,r18,1
 2007278:	1005003a 	cmpeq	r2,r2,zero
 200727c:	10001426 	beq	r2,zero,20072d0 <__svfscanf_r+0x124c>
 2007280:	9080008c 	andi	r2,r18,2
 2007284:	10001226 	beq	r2,zero,20072d0 <__svfscanf_r+0x124c>
 2007288:	d8c0a017 	ldw	r3,640(sp)
 200728c:	00808074 	movhi	r2,513
 2007290:	10b83704 	addi	r2,r2,-7972
 2007294:	18801426 	beq	r3,r2,20072e8 <__svfscanf_r+0x1264>
 2007298:	d9c0a117 	ldw	r7,644(sp)
 200729c:	d940a617 	ldw	r5,664(sp)
 20072a0:	000d883a 	mov	r6,zero
 20072a4:	b009883a 	mov	r4,r22
 20072a8:	200ddc40 	call	200ddc4 <_strtoll_r>
 20072ac:	100d883a 	mov	r6,r2
 20072b0:	180f883a 	mov	r7,r3
 20072b4:	d900a417 	ldw	r4,656(sp)
 20072b8:	20800017 	ldw	r2,0(r4)
 20072bc:	21000104 	addi	r4,r4,4
 20072c0:	d900a415 	stw	r4,656(sp)
 20072c4:	11c00115 	stw	r7,4(r2)
 20072c8:	11800015 	stw	r6,0(r2)
 20072cc:	003fba06 	br	20071b8 <__svfscanf_r+0x1134>
 20072d0:	d900a417 	ldw	r4,656(sp)
 20072d4:	20800017 	ldw	r2,0(r4)
 20072d8:	21000104 	addi	r4,r4,4
 20072dc:	d900a415 	stw	r4,656(sp)
 20072e0:	10c00015 	stw	r3,0(r2)
 20072e4:	003fb406 	br	20071b8 <__svfscanf_r+0x1134>
 20072e8:	d9c0a117 	ldw	r7,644(sp)
 20072ec:	d940a617 	ldw	r5,664(sp)
 20072f0:	000d883a 	mov	r6,zero
 20072f4:	b009883a 	mov	r4,r22
 20072f8:	200e3300 	call	200e330 <_strtoull_r>
 20072fc:	100d883a 	mov	r6,r2
 2007300:	180f883a 	mov	r7,r3
 2007304:	003feb06 	br	20072b4 <__svfscanf_r+0x1230>
 2007308:	d8c0a117 	ldw	r3,644(sp)
 200730c:	18c5883a 	add	r2,r3,r3
 2007310:	00c08074 	movhi	r3,513
 2007314:	18d6d184 	addi	r3,r3,23366
 2007318:	10c5883a 	add	r2,r2,r3
 200731c:	1080000f 	ldh	r2,0(r2)
 2007320:	00fd1fc4 	movi	r3,-2945
 2007324:	90e4703a 	and	r18,r18,r3
 2007328:	d880a115 	stw	r2,644(sp)
 200732c:	003faa06 	br	20071d8 <__svfscanf_r+0x1154>
 2007330:	d900a117 	ldw	r4,644(sp)
 2007334:	00c08074 	movhi	r3,513
 2007338:	18d6d184 	addi	r3,r3,23366
 200733c:	2105883a 	add	r2,r4,r4
 2007340:	10c5883a 	add	r2,r2,r3
 2007344:	1080000f 	ldh	r2,0(r2)
 2007348:	00c00204 	movi	r3,8
 200734c:	d880a115 	stw	r2,644(sp)
 2007350:	18bf140e 	bge	r3,r2,2006fa4 <__svfscanf_r+0xf20>
 2007354:	00bd1fc4 	movi	r2,-2945
 2007358:	90a4703a 	and	r18,r18,r2
 200735c:	003f9e06 	br	20071d8 <__svfscanf_r+0x1154>
 2007360:	d8c0a117 	ldw	r3,644(sp)
 2007364:	00800284 	movi	r2,10
 2007368:	10fffa16 	blt	r2,r3,2007354 <__svfscanf_r+0x12d0>
 200736c:	003f0d06 	br	2006fa4 <__svfscanf_r+0xf20>
 2007370:	90c1800c 	andi	r3,r18,1536
 2007374:	00808004 	movi	r2,512
 2007378:	18bf0a1e 	bne	r3,r2,2006fa4 <__svfscanf_r+0xf20>
 200737c:	00bf7fc4 	movi	r2,-513
 2007380:	9084703a 	and	r2,r18,r2
 2007384:	01000404 	movi	r4,16
 2007388:	14814014 	ori	r18,r2,1280
 200738c:	d900a115 	stw	r4,644(sp)
 2007390:	003f9106 	br	20071d8 <__svfscanf_r+0x1154>
 2007394:	d880a417 	ldw	r2,656(sp)
 2007398:	dd400404 	addi	r21,sp,16
 200739c:	14800017 	ldw	r18,0(r2)
 20073a0:	9027883a 	mov	r19,r18
 20073a4:	81000017 	ldw	r4,0(r16)
 20073a8:	20800003 	ldbu	r2,0(r4)
 20073ac:	a885883a 	add	r2,r21,r2
 20073b0:	10c00007 	ldb	r3,0(r2)
 20073b4:	18001426 	beq	r3,zero,2007408 <__svfscanf_r+0x1384>
 20073b8:	d8c0a317 	ldw	r3,652(sp)
 20073bc:	80800117 	ldw	r2,4(r16)
 20073c0:	21800044 	addi	r6,r4,1
 20073c4:	18ffffc4 	addi	r3,r3,-1
 20073c8:	d8c0a315 	stw	r3,652(sp)
 20073cc:	10ffffc4 	addi	r3,r2,-1
 20073d0:	80c00115 	stw	r3,4(r16)
 20073d4:	20800003 	ldbu	r2,0(r4)
 20073d8:	90800005 	stb	r2,0(r18)
 20073dc:	d900a317 	ldw	r4,652(sp)
 20073e0:	81800015 	stw	r6,0(r16)
 20073e4:	94800044 	addi	r18,r18,1
 20073e8:	20000726 	beq	r4,zero,2007408 <__svfscanf_r+0x1384>
 20073ec:	80800117 	ldw	r2,4(r16)
 20073f0:	00bfec16 	blt	zero,r2,20073a4 <__svfscanf_r+0x1320>
 20073f4:	b009883a 	mov	r4,r22
 20073f8:	800b883a 	mov	r5,r16
 20073fc:	200befc0 	call	200befc <__srefill_r>
 2007400:	103fe826 	beq	r2,zero,20073a4 <__svfscanf_r+0x1320>
 2007404:	9cbb7426 	beq	r19,r18,20061d8 <__svfscanf_r+0x154>
 2007408:	94e7c83a 	sub	r19,r18,r19
 200740c:	983b5226 	beq	r19,zero,2006158 <__svfscanf_r+0xd4>
 2007410:	90000005 	stb	zero,0(r18)
 2007414:	d880a417 	ldw	r2,656(sp)
 2007418:	d8c0a217 	ldw	r3,648(sp)
 200741c:	8ce3883a 	add	r17,r17,r19
 2007420:	10800104 	addi	r2,r2,4
 2007424:	18c00044 	addi	r3,r3,1
 2007428:	d880a415 	stw	r2,656(sp)
 200742c:	d8c0a215 	stw	r3,648(sp)
 2007430:	003b2706 	br	20060d0 <__svfscanf_r+0x4c>
 2007434:	9cc00414 	ori	r19,r19,16
 2007438:	003b6e06 	br	20061f4 <__svfscanf_r+0x170>
 200743c:	00c00404 	movi	r3,16
 2007440:	01008074 	movhi	r4,513
 2007444:	21383704 	addi	r4,r4,-7972
 2007448:	9cc08014 	ori	r19,r19,512
 200744c:	054000c4 	movi	r21,3
 2007450:	d8c0a115 	stw	r3,644(sp)
 2007454:	d900a015 	stw	r4,640(sp)
 2007458:	003bf806 	br	200643c <__svfscanf_r+0x3b8>
 200745c:	9880040c 	andi	r2,r19,16
 2007460:	10001926 	beq	r2,zero,20074c8 <__svfscanf_r+0x1444>
 2007464:	0027883a 	mov	r19,zero
 2007468:	00000b06 	br	2007498 <__svfscanf_r+0x1414>
 200746c:	80800017 	ldw	r2,0(r16)
 2007470:	b009883a 	mov	r4,r22
 2007474:	800b883a 	mov	r5,r16
 2007478:	148d883a 	add	r6,r2,r18
 200747c:	81800015 	stw	r6,0(r16)
 2007480:	9ca7883a 	add	r19,r19,r18
 2007484:	200befc0 	call	200befc <__srefill_r>
 2007488:	103c711e 	bne	r2,zero,2006650 <__svfscanf_r+0x5cc>
 200748c:	d900a317 	ldw	r4,652(sp)
 2007490:	2489c83a 	sub	r4,r4,r18
 2007494:	d900a315 	stw	r4,652(sp)
 2007498:	84800117 	ldw	r18,4(r16)
 200749c:	d8c0a317 	ldw	r3,652(sp)
 20074a0:	90fff216 	blt	r18,r3,200746c <__svfscanf_r+0x13e8>
 20074a4:	d900a317 	ldw	r4,652(sp)
 20074a8:	80800017 	ldw	r2,0(r16)
 20074ac:	9927883a 	add	r19,r19,r4
 20074b0:	9107c83a 	sub	r3,r18,r4
 20074b4:	110d883a 	add	r6,r2,r4
 20074b8:	8ce3883a 	add	r17,r17,r19
 20074bc:	80c00115 	stw	r3,4(r16)
 20074c0:	81800015 	stw	r6,0(r16)
 20074c4:	003b0206 	br	20060d0 <__svfscanf_r+0x4c>
 20074c8:	d880a417 	ldw	r2,656(sp)
 20074cc:	d980a317 	ldw	r6,652(sp)
 20074d0:	01400044 	movi	r5,1
 20074d4:	11000017 	ldw	r4,0(r2)
 20074d8:	800f883a 	mov	r7,r16
 20074dc:	20097f80 	call	20097f8 <fread>
 20074e0:	103b3d26 	beq	r2,zero,20061d8 <__svfscanf_r+0x154>
 20074e4:	d8c0a417 	ldw	r3,656(sp)
 20074e8:	d900a217 	ldw	r4,648(sp)
 20074ec:	88a3883a 	add	r17,r17,r2
 20074f0:	18c00104 	addi	r3,r3,4
 20074f4:	21000044 	addi	r4,r4,1
 20074f8:	d8c0a415 	stw	r3,656(sp)
 20074fc:	d900a215 	stw	r4,648(sp)
 2007500:	003af306 	br	20060d0 <__svfscanf_r+0x4c>
 2007504:	8080030b 	ldhu	r2,12(r16)
 2007508:	1080100c 	andi	r2,r2,64
 200750c:	103b1226 	beq	r2,zero,2006158 <__svfscanf_r+0xd4>
 2007510:	003b3306 	br	20061e0 <__svfscanf_r+0x15c>
 2007514:	983b1026 	beq	r19,zero,2006158 <__svfscanf_r+0xd4>
 2007518:	8ce3883a 	add	r17,r17,r19
 200751c:	003aec06 	br	20060d0 <__svfscanf_r+0x4c>
 2007520:	983c9626 	beq	r19,zero,200677c <__svfscanf_r+0x6f8>
 2007524:	9cffffc4 	addi	r19,r19,-1
 2007528:	d8c04404 	addi	r3,sp,272
 200752c:	1cc5883a 	add	r2,r3,r19
 2007530:	11400003 	ldbu	r5,0(r2)
 2007534:	b009883a 	mov	r4,r22
 2007538:	800d883a 	mov	r6,r16
 200753c:	200e6fc0 	call	200e6fc <_ungetc_r>
 2007540:	003ff706 	br	2007520 <__svfscanf_r+0x149c>
 2007544:	00bfff84 	movi	r2,-2
 2007548:	18bc7a1e 	bne	r3,r2,2006734 <__svfscanf_r+0x6b0>
 200754c:	003c8406 	br	2006760 <__svfscanf_r+0x6dc>
 2007550:	d900a417 	ldw	r4,656(sp)
 2007554:	25400017 	ldw	r21,0(r4)
 2007558:	21000104 	addi	r4,r4,4
 200755c:	d900a415 	stw	r4,656(sp)
 2007560:	003c4a06 	br	200668c <__svfscanf_r+0x608>
 2007564:	00bfff84 	movi	r2,-2
 2007568:	18bc0f1e 	bne	r3,r2,20065a8 <__svfscanf_r+0x524>
 200756c:	003c1506 	br	20065c4 <__svfscanf_r+0x540>
 2007570:	b009883a 	mov	r4,r22
 2007574:	800b883a 	mov	r5,r16
 2007578:	200befc0 	call	200befc <__srefill_r>
 200757c:	103c1326 	beq	r2,zero,20065cc <__svfscanf_r+0x548>
 2007580:	903b151e 	bne	r18,zero,20061d8 <__svfscanf_r+0x154>
 2007584:	a83ad21e 	bne	r21,zero,20060d0 <__svfscanf_r+0x4c>
 2007588:	d880a217 	ldw	r2,648(sp)
 200758c:	10800044 	addi	r2,r2,1
 2007590:	d880a215 	stw	r2,648(sp)
 2007594:	003ace06 	br	20060d0 <__svfscanf_r+0x4c>
 2007598:	0027883a 	mov	r19,zero
 200759c:	003bdd06 	br	2006514 <__svfscanf_r+0x490>
 20075a0:	9cc00114 	ori	r19,r19,4
 20075a4:	003b1306 	br	20061f4 <__svfscanf_r+0x170>
 20075a8:	05400104 	movi	r21,4
 20075ac:	003ba306 	br	200643c <__svfscanf_r+0x3b8>
 20075b0:	9cc00054 	ori	r19,r19,1
 20075b4:	00808074 	movhi	r2,513
 20075b8:	10b6d704 	addi	r2,r2,-9380
 20075bc:	00c00284 	movi	r3,10
 20075c0:	054000c4 	movi	r21,3
 20075c4:	d880a015 	stw	r2,640(sp)
 20075c8:	d8c0a115 	stw	r3,644(sp)
 20075cc:	003b9b06 	br	200643c <__svfscanf_r+0x3b8>
 20075d0:	9cc01014 	ori	r19,r19,64
 20075d4:	002b883a 	mov	r21,zero
 20075d8:	003b9806 	br	200643c <__svfscanf_r+0x3b8>
 20075dc:	a00b883a 	mov	r5,r20
 20075e0:	d9000404 	addi	r4,sp,16
 20075e4:	200c14c0 	call	200c14c <__sccl>
 20075e8:	1029883a 	mov	r20,r2
 20075ec:	9cc01014 	ori	r19,r19,64
 20075f0:	05400044 	movi	r21,1
 20075f4:	003b9106 	br	200643c <__svfscanf_r+0x3b8>
 20075f8:	9cc00054 	ori	r19,r19,1
 20075fc:	00800204 	movi	r2,8
 2007600:	00c08074 	movhi	r3,513
 2007604:	18f83704 	addi	r3,r3,-7972
 2007608:	054000c4 	movi	r21,3
 200760c:	d880a115 	stw	r2,644(sp)
 2007610:	d8c0a015 	stw	r3,640(sp)
 2007614:	003b8906 	br	200643c <__svfscanf_r+0x3b8>
 2007618:	9880040c 	andi	r2,r19,16
 200761c:	103aac1e 	bne	r2,zero,20060d0 <__svfscanf_r+0x4c>
 2007620:	9880010c 	andi	r2,r19,4
 2007624:	10002426 	beq	r2,zero,20076b8 <__svfscanf_r+0x1634>
 2007628:	d900a417 	ldw	r4,656(sp)
 200762c:	20800017 	ldw	r2,0(r4)
 2007630:	21000104 	addi	r4,r4,4
 2007634:	d900a415 	stw	r4,656(sp)
 2007638:	1440000d 	sth	r17,0(r2)
 200763c:	003aa406 	br	20060d0 <__svfscanf_r+0x4c>
 2007640:	9cc00094 	ori	r19,r19,2
 2007644:	003aeb06 	br	20061f4 <__svfscanf_r+0x170>
 2007648:	05400084 	movi	r21,2
 200764c:	003b7b06 	br	200643c <__svfscanf_r+0x3b8>
 2007650:	00800404 	movi	r2,16
 2007654:	00c08074 	movhi	r3,513
 2007658:	18f83704 	addi	r3,r3,-7972
 200765c:	9cc08814 	ori	r19,r19,544
 2007660:	054000c4 	movi	r21,3
 2007664:	d880a115 	stw	r2,644(sp)
 2007668:	d8c0a015 	stw	r3,640(sp)
 200766c:	003b7306 	br	200643c <__svfscanf_r+0x3b8>
 2007670:	0009883a 	mov	r4,zero
 2007674:	200c20c0 	call	200c20c <nanf>
 2007678:	b8800015 	stw	r2,0(r23)
 200767c:	003d2706 	br	2006b1c <__svfscanf_r+0xa98>
 2007680:	a0c00007 	ldb	r3,0(r20)
 2007684:	00801b04 	movi	r2,108
 2007688:	18800826 	beq	r3,r2,20076ac <__svfscanf_r+0x1628>
 200768c:	9cc00054 	ori	r19,r19,1
 2007690:	003ad806 	br	20061f4 <__svfscanf_r+0x170>
 2007694:	01008074 	movhi	r4,513
 2007698:	2136d704 	addi	r4,r4,-9380
 200769c:	054000c4 	movi	r21,3
 20076a0:	d900a015 	stw	r4,640(sp)
 20076a4:	d800a115 	stw	zero,644(sp)
 20076a8:	003b6406 	br	200643c <__svfscanf_r+0x3b8>
 20076ac:	a5000044 	addi	r20,r20,1
 20076b0:	9cc00094 	ori	r19,r19,2
 20076b4:	003acf06 	br	20061f4 <__svfscanf_r+0x170>
 20076b8:	9880004c 	andi	r2,r19,1
 20076bc:	1005003a 	cmpeq	r2,r2,zero
 20076c0:	10000a26 	beq	r2,zero,20076ec <__svfscanf_r+0x1668>
 20076c4:	9880008c 	andi	r2,r19,2
 20076c8:	10000826 	beq	r2,zero,20076ec <__svfscanf_r+0x1668>
 20076cc:	d900a417 	ldw	r4,656(sp)
 20076d0:	8807d7fa 	srai	r3,r17,31
 20076d4:	20800017 	ldw	r2,0(r4)
 20076d8:	21000104 	addi	r4,r4,4
 20076dc:	d900a415 	stw	r4,656(sp)
 20076e0:	14400015 	stw	r17,0(r2)
 20076e4:	10c00115 	stw	r3,4(r2)
 20076e8:	003a7906 	br	20060d0 <__svfscanf_r+0x4c>
 20076ec:	d8c0a417 	ldw	r3,656(sp)
 20076f0:	18800017 	ldw	r2,0(r3)
 20076f4:	18c00104 	addi	r3,r3,4
 20076f8:	d8c0a415 	stw	r3,656(sp)
 20076fc:	14400015 	stw	r17,0(r2)
 2007700:	003a7306 	br	20060d0 <__svfscanf_r+0x4c>

02007704 <__svfscanf>:
 2007704:	00808074 	movhi	r2,513
 2007708:	109f0a04 	addi	r2,r2,31784
 200770c:	2013883a 	mov	r9,r4
 2007710:	11000017 	ldw	r4,0(r2)
 2007714:	2805883a 	mov	r2,r5
 2007718:	300f883a 	mov	r7,r6
 200771c:	480b883a 	mov	r5,r9
 2007720:	100d883a 	mov	r6,r2
 2007724:	20060841 	jmpi	2006084 <__svfscanf_r>

02007728 <_vfscanf_r>:
 2007728:	defffb04 	addi	sp,sp,-20
 200772c:	dcc00315 	stw	r19,12(sp)
 2007730:	dc800215 	stw	r18,8(sp)
 2007734:	dc400115 	stw	r17,4(sp)
 2007738:	dc000015 	stw	r16,0(sp)
 200773c:	dfc00415 	stw	ra,16(sp)
 2007740:	2021883a 	mov	r16,r4
 2007744:	2823883a 	mov	r17,r5
 2007748:	3025883a 	mov	r18,r6
 200774c:	3827883a 	mov	r19,r7
 2007750:	20000226 	beq	r4,zero,200775c <_vfscanf_r+0x34>
 2007754:	20800e17 	ldw	r2,56(r4)
 2007758:	10000b26 	beq	r2,zero,2007788 <_vfscanf_r+0x60>
 200775c:	8009883a 	mov	r4,r16
 2007760:	880b883a 	mov	r5,r17
 2007764:	900d883a 	mov	r6,r18
 2007768:	980f883a 	mov	r7,r19
 200776c:	dfc00417 	ldw	ra,16(sp)
 2007770:	dcc00317 	ldw	r19,12(sp)
 2007774:	dc800217 	ldw	r18,8(sp)
 2007778:	dc400117 	ldw	r17,4(sp)
 200777c:	dc000017 	ldw	r16,0(sp)
 2007780:	dec00504 	addi	sp,sp,20
 2007784:	20060841 	jmpi	2006084 <__svfscanf_r>
 2007788:	20093a40 	call	20093a4 <__sinit>
 200778c:	003ff306 	br	200775c <_vfscanf_r+0x34>

02007790 <vfscanf>:
 2007790:	defffb04 	addi	sp,sp,-20
 2007794:	dcc00315 	stw	r19,12(sp)
 2007798:	04c08074 	movhi	r19,513
 200779c:	9cdf0a04 	addi	r19,r19,31784
 20077a0:	98c00017 	ldw	r3,0(r19)
 20077a4:	dc800215 	stw	r18,8(sp)
 20077a8:	dc400115 	stw	r17,4(sp)
 20077ac:	dc000015 	stw	r16,0(sp)
 20077b0:	dfc00415 	stw	ra,16(sp)
 20077b4:	2021883a 	mov	r16,r4
 20077b8:	2823883a 	mov	r17,r5
 20077bc:	3025883a 	mov	r18,r6
 20077c0:	18000326 	beq	r3,zero,20077d0 <vfscanf+0x40>
 20077c4:	18800e17 	ldw	r2,56(r3)
 20077c8:	1809883a 	mov	r4,r3
 20077cc:	10000b26 	beq	r2,zero,20077fc <vfscanf+0x6c>
 20077d0:	99000017 	ldw	r4,0(r19)
 20077d4:	800b883a 	mov	r5,r16
 20077d8:	880d883a 	mov	r6,r17
 20077dc:	900f883a 	mov	r7,r18
 20077e0:	dfc00417 	ldw	ra,16(sp)
 20077e4:	dcc00317 	ldw	r19,12(sp)
 20077e8:	dc800217 	ldw	r18,8(sp)
 20077ec:	dc400117 	ldw	r17,4(sp)
 20077f0:	dc000017 	ldw	r16,0(sp)
 20077f4:	dec00504 	addi	sp,sp,20
 20077f8:	20060841 	jmpi	2006084 <__svfscanf_r>
 20077fc:	20093a40 	call	20093a4 <__sinit>
 2007800:	003ff306 	br	20077d0 <vfscanf+0x40>

02007804 <__swsetup_r>:
 2007804:	00808074 	movhi	r2,513
 2007808:	109f0a04 	addi	r2,r2,31784
 200780c:	10c00017 	ldw	r3,0(r2)
 2007810:	defffd04 	addi	sp,sp,-12
 2007814:	dc400115 	stw	r17,4(sp)
 2007818:	dc000015 	stw	r16,0(sp)
 200781c:	dfc00215 	stw	ra,8(sp)
 2007820:	2023883a 	mov	r17,r4
 2007824:	2821883a 	mov	r16,r5
 2007828:	18000226 	beq	r3,zero,2007834 <__swsetup_r+0x30>
 200782c:	18800e17 	ldw	r2,56(r3)
 2007830:	10001f26 	beq	r2,zero,20078b0 <__swsetup_r+0xac>
 2007834:	8100030b 	ldhu	r4,12(r16)
 2007838:	2080020c 	andi	r2,r4,8
 200783c:	10002826 	beq	r2,zero,20078e0 <__swsetup_r+0xdc>
 2007840:	81400417 	ldw	r5,16(r16)
 2007844:	28001d26 	beq	r5,zero,20078bc <__swsetup_r+0xb8>
 2007848:	2080004c 	andi	r2,r4,1
 200784c:	1005003a 	cmpeq	r2,r2,zero
 2007850:	10000b26 	beq	r2,zero,2007880 <__swsetup_r+0x7c>
 2007854:	2080008c 	andi	r2,r4,2
 2007858:	10001226 	beq	r2,zero,20078a4 <__swsetup_r+0xa0>
 200785c:	0005883a 	mov	r2,zero
 2007860:	80800215 	stw	r2,8(r16)
 2007864:	28000b26 	beq	r5,zero,2007894 <__swsetup_r+0x90>
 2007868:	0005883a 	mov	r2,zero
 200786c:	dfc00217 	ldw	ra,8(sp)
 2007870:	dc400117 	ldw	r17,4(sp)
 2007874:	dc000017 	ldw	r16,0(sp)
 2007878:	dec00304 	addi	sp,sp,12
 200787c:	f800283a 	ret
 2007880:	80800517 	ldw	r2,20(r16)
 2007884:	80000215 	stw	zero,8(r16)
 2007888:	0085c83a 	sub	r2,zero,r2
 200788c:	80800615 	stw	r2,24(r16)
 2007890:	283ff51e 	bne	r5,zero,2007868 <__swsetup_r+0x64>
 2007894:	2080200c 	andi	r2,r4,128
 2007898:	103ff326 	beq	r2,zero,2007868 <__swsetup_r+0x64>
 200789c:	00bfffc4 	movi	r2,-1
 20078a0:	003ff206 	br	200786c <__swsetup_r+0x68>
 20078a4:	80800517 	ldw	r2,20(r16)
 20078a8:	80800215 	stw	r2,8(r16)
 20078ac:	003fed06 	br	2007864 <__swsetup_r+0x60>
 20078b0:	1809883a 	mov	r4,r3
 20078b4:	20093a40 	call	20093a4 <__sinit>
 20078b8:	003fde06 	br	2007834 <__swsetup_r+0x30>
 20078bc:	20c0a00c 	andi	r3,r4,640
 20078c0:	00808004 	movi	r2,512
 20078c4:	18bfe026 	beq	r3,r2,2007848 <__swsetup_r+0x44>
 20078c8:	8809883a 	mov	r4,r17
 20078cc:	800b883a 	mov	r5,r16
 20078d0:	200a3840 	call	200a384 <__smakebuf_r>
 20078d4:	8100030b 	ldhu	r4,12(r16)
 20078d8:	81400417 	ldw	r5,16(r16)
 20078dc:	003fda06 	br	2007848 <__swsetup_r+0x44>
 20078e0:	2080040c 	andi	r2,r4,16
 20078e4:	103fed26 	beq	r2,zero,200789c <__swsetup_r+0x98>
 20078e8:	2080010c 	andi	r2,r4,4
 20078ec:	10001226 	beq	r2,zero,2007938 <__swsetup_r+0x134>
 20078f0:	81400c17 	ldw	r5,48(r16)
 20078f4:	28000526 	beq	r5,zero,200790c <__swsetup_r+0x108>
 20078f8:	80801004 	addi	r2,r16,64
 20078fc:	28800226 	beq	r5,r2,2007908 <__swsetup_r+0x104>
 2007900:	8809883a 	mov	r4,r17
 2007904:	20099640 	call	2009964 <_free_r>
 2007908:	80000c15 	stw	zero,48(r16)
 200790c:	8080030b 	ldhu	r2,12(r16)
 2007910:	81400417 	ldw	r5,16(r16)
 2007914:	80000115 	stw	zero,4(r16)
 2007918:	10bff6cc 	andi	r2,r2,65499
 200791c:	8080030d 	sth	r2,12(r16)
 2007920:	81400015 	stw	r5,0(r16)
 2007924:	8080030b 	ldhu	r2,12(r16)
 2007928:	10800214 	ori	r2,r2,8
 200792c:	113fffcc 	andi	r4,r2,65535
 2007930:	8080030d 	sth	r2,12(r16)
 2007934:	003fc306 	br	2007844 <__swsetup_r+0x40>
 2007938:	81400417 	ldw	r5,16(r16)
 200793c:	003ff906 	br	2007924 <__swsetup_r+0x120>

02007940 <quorem>:
 2007940:	28c00417 	ldw	r3,16(r5)
 2007944:	20800417 	ldw	r2,16(r4)
 2007948:	defff604 	addi	sp,sp,-40
 200794c:	ddc00715 	stw	r23,28(sp)
 2007950:	dd400515 	stw	r21,20(sp)
 2007954:	dfc00915 	stw	ra,36(sp)
 2007958:	df000815 	stw	fp,32(sp)
 200795c:	dd800615 	stw	r22,24(sp)
 2007960:	dd000415 	stw	r20,16(sp)
 2007964:	dcc00315 	stw	r19,12(sp)
 2007968:	dc800215 	stw	r18,8(sp)
 200796c:	dc400115 	stw	r17,4(sp)
 2007970:	dc000015 	stw	r16,0(sp)
 2007974:	202f883a 	mov	r23,r4
 2007978:	282b883a 	mov	r21,r5
 200797c:	10c07416 	blt	r2,r3,2007b50 <quorem+0x210>
 2007980:	1c7fffc4 	addi	r17,r3,-1
 2007984:	8c45883a 	add	r2,r17,r17
 2007988:	1085883a 	add	r2,r2,r2
 200798c:	2c000504 	addi	r16,r5,20
 2007990:	24c00504 	addi	r19,r4,20
 2007994:	14ed883a 	add	r22,r2,r19
 2007998:	80a5883a 	add	r18,r16,r2
 200799c:	b7000017 	ldw	fp,0(r22)
 20079a0:	91400017 	ldw	r5,0(r18)
 20079a4:	e009883a 	mov	r4,fp
 20079a8:	29400044 	addi	r5,r5,1
 20079ac:	2002fcc0 	call	2002fcc <__udivsi3>
 20079b0:	1029883a 	mov	r20,r2
 20079b4:	10003c1e 	bne	r2,zero,2007aa8 <quorem+0x168>
 20079b8:	a80b883a 	mov	r5,r21
 20079bc:	b809883a 	mov	r4,r23
 20079c0:	200aa700 	call	200aa70 <__mcmp>
 20079c4:	10002b16 	blt	r2,zero,2007a74 <quorem+0x134>
 20079c8:	a5000044 	addi	r20,r20,1
 20079cc:	980f883a 	mov	r7,r19
 20079d0:	0011883a 	mov	r8,zero
 20079d4:	0009883a 	mov	r4,zero
 20079d8:	81400017 	ldw	r5,0(r16)
 20079dc:	38c00017 	ldw	r3,0(r7)
 20079e0:	84000104 	addi	r16,r16,4
 20079e4:	28bfffcc 	andi	r2,r5,65535
 20079e8:	2085883a 	add	r2,r4,r2
 20079ec:	11bfffcc 	andi	r6,r2,65535
 20079f0:	193fffcc 	andi	r4,r3,65535
 20079f4:	1004d43a 	srli	r2,r2,16
 20079f8:	280ad43a 	srli	r5,r5,16
 20079fc:	2189c83a 	sub	r4,r4,r6
 2007a00:	2209883a 	add	r4,r4,r8
 2007a04:	1806d43a 	srli	r3,r3,16
 2007a08:	288b883a 	add	r5,r5,r2
 2007a0c:	200dd43a 	srai	r6,r4,16
 2007a10:	28bfffcc 	andi	r2,r5,65535
 2007a14:	1887c83a 	sub	r3,r3,r2
 2007a18:	1987883a 	add	r3,r3,r6
 2007a1c:	3900000d 	sth	r4,0(r7)
 2007a20:	38c0008d 	sth	r3,2(r7)
 2007a24:	2808d43a 	srli	r4,r5,16
 2007a28:	39c00104 	addi	r7,r7,4
 2007a2c:	1811d43a 	srai	r8,r3,16
 2007a30:	943fe92e 	bgeu	r18,r16,20079d8 <quorem+0x98>
 2007a34:	8c45883a 	add	r2,r17,r17
 2007a38:	1085883a 	add	r2,r2,r2
 2007a3c:	9885883a 	add	r2,r19,r2
 2007a40:	10c00017 	ldw	r3,0(r2)
 2007a44:	18000b1e 	bne	r3,zero,2007a74 <quorem+0x134>
 2007a48:	113fff04 	addi	r4,r2,-4
 2007a4c:	9900082e 	bgeu	r19,r4,2007a70 <quorem+0x130>
 2007a50:	10bfff17 	ldw	r2,-4(r2)
 2007a54:	10000326 	beq	r2,zero,2007a64 <quorem+0x124>
 2007a58:	00000506 	br	2007a70 <quorem+0x130>
 2007a5c:	20800017 	ldw	r2,0(r4)
 2007a60:	1000031e 	bne	r2,zero,2007a70 <quorem+0x130>
 2007a64:	213fff04 	addi	r4,r4,-4
 2007a68:	8c7fffc4 	addi	r17,r17,-1
 2007a6c:	993ffb36 	bltu	r19,r4,2007a5c <quorem+0x11c>
 2007a70:	bc400415 	stw	r17,16(r23)
 2007a74:	a005883a 	mov	r2,r20
 2007a78:	dfc00917 	ldw	ra,36(sp)
 2007a7c:	df000817 	ldw	fp,32(sp)
 2007a80:	ddc00717 	ldw	r23,28(sp)
 2007a84:	dd800617 	ldw	r22,24(sp)
 2007a88:	dd400517 	ldw	r21,20(sp)
 2007a8c:	dd000417 	ldw	r20,16(sp)
 2007a90:	dcc00317 	ldw	r19,12(sp)
 2007a94:	dc800217 	ldw	r18,8(sp)
 2007a98:	dc400117 	ldw	r17,4(sp)
 2007a9c:	dc000017 	ldw	r16,0(sp)
 2007aa0:	dec00a04 	addi	sp,sp,40
 2007aa4:	f800283a 	ret
 2007aa8:	980f883a 	mov	r7,r19
 2007aac:	8011883a 	mov	r8,r16
 2007ab0:	0013883a 	mov	r9,zero
 2007ab4:	000d883a 	mov	r6,zero
 2007ab8:	40c00017 	ldw	r3,0(r8)
 2007abc:	39000017 	ldw	r4,0(r7)
 2007ac0:	42000104 	addi	r8,r8,4
 2007ac4:	18bfffcc 	andi	r2,r3,65535
 2007ac8:	a085383a 	mul	r2,r20,r2
 2007acc:	1806d43a 	srli	r3,r3,16
 2007ad0:	217fffcc 	andi	r5,r4,65535
 2007ad4:	3085883a 	add	r2,r6,r2
 2007ad8:	11bfffcc 	andi	r6,r2,65535
 2007adc:	a0c7383a 	mul	r3,r20,r3
 2007ae0:	1004d43a 	srli	r2,r2,16
 2007ae4:	298bc83a 	sub	r5,r5,r6
 2007ae8:	2a4b883a 	add	r5,r5,r9
 2007aec:	2008d43a 	srli	r4,r4,16
 2007af0:	1887883a 	add	r3,r3,r2
 2007af4:	280dd43a 	srai	r6,r5,16
 2007af8:	18bfffcc 	andi	r2,r3,65535
 2007afc:	2089c83a 	sub	r4,r4,r2
 2007b00:	2189883a 	add	r4,r4,r6
 2007b04:	3900008d 	sth	r4,2(r7)
 2007b08:	3940000d 	sth	r5,0(r7)
 2007b0c:	180cd43a 	srli	r6,r3,16
 2007b10:	39c00104 	addi	r7,r7,4
 2007b14:	2013d43a 	srai	r9,r4,16
 2007b18:	923fe72e 	bgeu	r18,r8,2007ab8 <quorem+0x178>
 2007b1c:	e03fa61e 	bne	fp,zero,20079b8 <quorem+0x78>
 2007b20:	b0ffff04 	addi	r3,r22,-4
 2007b24:	98c0082e 	bgeu	r19,r3,2007b48 <quorem+0x208>
 2007b28:	b0bfff17 	ldw	r2,-4(r22)
 2007b2c:	10000326 	beq	r2,zero,2007b3c <quorem+0x1fc>
 2007b30:	00000506 	br	2007b48 <quorem+0x208>
 2007b34:	18800017 	ldw	r2,0(r3)
 2007b38:	1000031e 	bne	r2,zero,2007b48 <quorem+0x208>
 2007b3c:	18ffff04 	addi	r3,r3,-4
 2007b40:	8c7fffc4 	addi	r17,r17,-1
 2007b44:	98fffb36 	bltu	r19,r3,2007b34 <quorem+0x1f4>
 2007b48:	bc400415 	stw	r17,16(r23)
 2007b4c:	003f9a06 	br	20079b8 <quorem+0x78>
 2007b50:	0005883a 	mov	r2,zero
 2007b54:	003fc806 	br	2007a78 <quorem+0x138>

02007b58 <_dtoa_r>:
 2007b58:	22001017 	ldw	r8,64(r4)
 2007b5c:	deffda04 	addi	sp,sp,-152
 2007b60:	dd402115 	stw	r21,132(sp)
 2007b64:	dd002015 	stw	r20,128(sp)
 2007b68:	dc801e15 	stw	r18,120(sp)
 2007b6c:	dc401d15 	stw	r17,116(sp)
 2007b70:	dfc02515 	stw	ra,148(sp)
 2007b74:	df002415 	stw	fp,144(sp)
 2007b78:	ddc02315 	stw	r23,140(sp)
 2007b7c:	dd802215 	stw	r22,136(sp)
 2007b80:	dcc01f15 	stw	r19,124(sp)
 2007b84:	dc001c15 	stw	r16,112(sp)
 2007b88:	d9001615 	stw	r4,88(sp)
 2007b8c:	3023883a 	mov	r17,r6
 2007b90:	2829883a 	mov	r20,r5
 2007b94:	d9c01715 	stw	r7,92(sp)
 2007b98:	dc802817 	ldw	r18,160(sp)
 2007b9c:	302b883a 	mov	r21,r6
 2007ba0:	40000a26 	beq	r8,zero,2007bcc <_dtoa_r+0x74>
 2007ba4:	20801117 	ldw	r2,68(r4)
 2007ba8:	400b883a 	mov	r5,r8
 2007bac:	40800115 	stw	r2,4(r8)
 2007bb0:	20c01117 	ldw	r3,68(r4)
 2007bb4:	00800044 	movi	r2,1
 2007bb8:	10c4983a 	sll	r2,r2,r3
 2007bbc:	40800215 	stw	r2,8(r8)
 2007bc0:	200a9140 	call	200a914 <_Bfree>
 2007bc4:	d8c01617 	ldw	r3,88(sp)
 2007bc8:	18001015 	stw	zero,64(r3)
 2007bcc:	8800a316 	blt	r17,zero,2007e5c <_dtoa_r+0x304>
 2007bd0:	90000015 	stw	zero,0(r18)
 2007bd4:	a8dffc2c 	andhi	r3,r21,32752
 2007bd8:	009ffc34 	movhi	r2,32752
 2007bdc:	18809126 	beq	r3,r2,2007e24 <_dtoa_r+0x2cc>
 2007be0:	000d883a 	mov	r6,zero
 2007be4:	000f883a 	mov	r7,zero
 2007be8:	a009883a 	mov	r4,r20
 2007bec:	a80b883a 	mov	r5,r21
 2007bf0:	dd001215 	stw	r20,72(sp)
 2007bf4:	dd401315 	stw	r21,76(sp)
 2007bf8:	2010bf40 	call	2010bf4 <__nedf2>
 2007bfc:	1000171e 	bne	r2,zero,2007c5c <_dtoa_r+0x104>
 2007c00:	d9802717 	ldw	r6,156(sp)
 2007c04:	00800044 	movi	r2,1
 2007c08:	30800015 	stw	r2,0(r6)
 2007c0c:	d8802917 	ldw	r2,164(sp)
 2007c10:	10029b26 	beq	r2,zero,2008680 <_dtoa_r+0xb28>
 2007c14:	d9002917 	ldw	r4,164(sp)
 2007c18:	00808074 	movhi	r2,513
 2007c1c:	1096c744 	addi	r2,r2,23325
 2007c20:	10ffffc4 	addi	r3,r2,-1
 2007c24:	20800015 	stw	r2,0(r4)
 2007c28:	1805883a 	mov	r2,r3
 2007c2c:	dfc02517 	ldw	ra,148(sp)
 2007c30:	df002417 	ldw	fp,144(sp)
 2007c34:	ddc02317 	ldw	r23,140(sp)
 2007c38:	dd802217 	ldw	r22,136(sp)
 2007c3c:	dd402117 	ldw	r21,132(sp)
 2007c40:	dd002017 	ldw	r20,128(sp)
 2007c44:	dcc01f17 	ldw	r19,124(sp)
 2007c48:	dc801e17 	ldw	r18,120(sp)
 2007c4c:	dc401d17 	ldw	r17,116(sp)
 2007c50:	dc001c17 	ldw	r16,112(sp)
 2007c54:	dec02604 	addi	sp,sp,152
 2007c58:	f800283a 	ret
 2007c5c:	d9001617 	ldw	r4,88(sp)
 2007c60:	d9401217 	ldw	r5,72(sp)
 2007c64:	d8800104 	addi	r2,sp,4
 2007c68:	a80d883a 	mov	r6,r21
 2007c6c:	d9c00204 	addi	r7,sp,8
 2007c70:	d8800015 	stw	r2,0(sp)
 2007c74:	200af500 	call	200af50 <__d2b>
 2007c78:	d8800715 	stw	r2,28(sp)
 2007c7c:	a804d53a 	srli	r2,r21,20
 2007c80:	1101ffcc 	andi	r4,r2,2047
 2007c84:	20008626 	beq	r4,zero,2007ea0 <_dtoa_r+0x348>
 2007c88:	d8c01217 	ldw	r3,72(sp)
 2007c8c:	00800434 	movhi	r2,16
 2007c90:	10bfffc4 	addi	r2,r2,-1
 2007c94:	ddc00117 	ldw	r23,4(sp)
 2007c98:	a884703a 	and	r2,r21,r2
 2007c9c:	1811883a 	mov	r8,r3
 2007ca0:	124ffc34 	orhi	r9,r2,16368
 2007ca4:	25bf0044 	addi	r22,r4,-1023
 2007ca8:	d8000815 	stw	zero,32(sp)
 2007cac:	0005883a 	mov	r2,zero
 2007cb0:	00cffe34 	movhi	r3,16376
 2007cb4:	480b883a 	mov	r5,r9
 2007cb8:	4009883a 	mov	r4,r8
 2007cbc:	180f883a 	mov	r7,r3
 2007cc0:	100d883a 	mov	r6,r2
 2007cc4:	2010a780 	call	2010a78 <__subdf3>
 2007cc8:	0218dbf4 	movhi	r8,25455
 2007ccc:	4210d844 	addi	r8,r8,17249
 2007cd0:	024ff4f4 	movhi	r9,16339
 2007cd4:	4a61e9c4 	addi	r9,r9,-30809
 2007cd8:	480f883a 	mov	r7,r9
 2007cdc:	400d883a 	mov	r6,r8
 2007ce0:	180b883a 	mov	r5,r3
 2007ce4:	1009883a 	mov	r4,r2
 2007ce8:	200283c0 	call	200283c <__muldf3>
 2007cec:	0222d874 	movhi	r8,35681
 2007cf0:	42322cc4 	addi	r8,r8,-14157
 2007cf4:	024ff1f4 	movhi	r9,16327
 2007cf8:	4a628a04 	addi	r9,r9,-30168
 2007cfc:	480f883a 	mov	r7,r9
 2007d00:	400d883a 	mov	r6,r8
 2007d04:	180b883a 	mov	r5,r3
 2007d08:	1009883a 	mov	r4,r2
 2007d0c:	2010af80 	call	2010af8 <__adddf3>
 2007d10:	b009883a 	mov	r4,r22
 2007d14:	1021883a 	mov	r16,r2
 2007d18:	1823883a 	mov	r17,r3
 2007d1c:	2010e9c0 	call	2010e9c <__floatsidf>
 2007d20:	021427f4 	movhi	r8,20639
 2007d24:	421e7ec4 	addi	r8,r8,31227
 2007d28:	024ff4f4 	movhi	r9,16339
 2007d2c:	4a5104c4 	addi	r9,r9,17427
 2007d30:	480f883a 	mov	r7,r9
 2007d34:	400d883a 	mov	r6,r8
 2007d38:	180b883a 	mov	r5,r3
 2007d3c:	1009883a 	mov	r4,r2
 2007d40:	200283c0 	call	200283c <__muldf3>
 2007d44:	180f883a 	mov	r7,r3
 2007d48:	880b883a 	mov	r5,r17
 2007d4c:	100d883a 	mov	r6,r2
 2007d50:	8009883a 	mov	r4,r16
 2007d54:	2010af80 	call	2010af8 <__adddf3>
 2007d58:	1009883a 	mov	r4,r2
 2007d5c:	180b883a 	mov	r5,r3
 2007d60:	1021883a 	mov	r16,r2
 2007d64:	1823883a 	mov	r17,r3
 2007d68:	2010f940 	call	2010f94 <__fixdfsi>
 2007d6c:	000d883a 	mov	r6,zero
 2007d70:	000f883a 	mov	r7,zero
 2007d74:	8009883a 	mov	r4,r16
 2007d78:	880b883a 	mov	r5,r17
 2007d7c:	d8800d15 	stw	r2,52(sp)
 2007d80:	2010d8c0 	call	2010d8c <__ltdf2>
 2007d84:	10031716 	blt	r2,zero,20089e4 <_dtoa_r+0xe8c>
 2007d88:	d8c00d17 	ldw	r3,52(sp)
 2007d8c:	00800584 	movi	r2,22
 2007d90:	10c1482e 	bgeu	r2,r3,20082b4 <_dtoa_r+0x75c>
 2007d94:	01000044 	movi	r4,1
 2007d98:	d9000c15 	stw	r4,48(sp)
 2007d9c:	bd85c83a 	sub	r2,r23,r22
 2007da0:	11bfffc4 	addi	r6,r2,-1
 2007da4:	30030b16 	blt	r6,zero,20089d4 <_dtoa_r+0xe7c>
 2007da8:	d9800a15 	stw	r6,40(sp)
 2007dac:	d8001115 	stw	zero,68(sp)
 2007db0:	d8c00d17 	ldw	r3,52(sp)
 2007db4:	1802ff16 	blt	r3,zero,20089b4 <_dtoa_r+0xe5c>
 2007db8:	d9000a17 	ldw	r4,40(sp)
 2007dbc:	d8c00915 	stw	r3,36(sp)
 2007dc0:	d8001015 	stw	zero,64(sp)
 2007dc4:	20c9883a 	add	r4,r4,r3
 2007dc8:	d9000a15 	stw	r4,40(sp)
 2007dcc:	d9001717 	ldw	r4,92(sp)
 2007dd0:	00800244 	movi	r2,9
 2007dd4:	11004636 	bltu	r2,r4,2007ef0 <_dtoa_r+0x398>
 2007dd8:	00800144 	movi	r2,5
 2007ddc:	11020416 	blt	r2,r4,20085f0 <_dtoa_r+0xa98>
 2007de0:	04400044 	movi	r17,1
 2007de4:	d8c01717 	ldw	r3,92(sp)
 2007de8:	00800144 	movi	r2,5
 2007dec:	10c1ed36 	bltu	r2,r3,20085a4 <_dtoa_r+0xa4c>
 2007df0:	18c5883a 	add	r2,r3,r3
 2007df4:	1085883a 	add	r2,r2,r2
 2007df8:	00c08034 	movhi	r3,512
 2007dfc:	18df8304 	addi	r3,r3,32268
 2007e00:	10c5883a 	add	r2,r2,r3
 2007e04:	11000017 	ldw	r4,0(r2)
 2007e08:	2000683a 	jmp	r4
 2007e0c:	02007ef8 	rdprs	r8,zero,507
 2007e10:	02007ef8 	rdprs	r8,zero,507
 2007e14:	020088f8 	rdprs	r8,zero,547
 2007e18:	020088d0 	cmplti	r8,zero,547
 2007e1c:	02008914 	movui	r8,548
 2007e20:	02008920 	cmpeqi	r8,zero,548
 2007e24:	d9002717 	ldw	r4,156(sp)
 2007e28:	0089c3c4 	movi	r2,9999
 2007e2c:	20800015 	stw	r2,0(r4)
 2007e30:	a0001026 	beq	r20,zero,2007e74 <_dtoa_r+0x31c>
 2007e34:	00c08074 	movhi	r3,513
 2007e38:	18d77e04 	addi	r3,r3,24056
 2007e3c:	d9802917 	ldw	r6,164(sp)
 2007e40:	303f7926 	beq	r6,zero,2007c28 <_dtoa_r+0xd0>
 2007e44:	188000c7 	ldb	r2,3(r3)
 2007e48:	190000c4 	addi	r4,r3,3
 2007e4c:	1000101e 	bne	r2,zero,2007e90 <_dtoa_r+0x338>
 2007e50:	d8802917 	ldw	r2,164(sp)
 2007e54:	11000015 	stw	r4,0(r2)
 2007e58:	003f7306 	br	2007c28 <_dtoa_r+0xd0>
 2007e5c:	00a00034 	movhi	r2,32768
 2007e60:	10bfffc4 	addi	r2,r2,-1
 2007e64:	00c00044 	movi	r3,1
 2007e68:	88aa703a 	and	r21,r17,r2
 2007e6c:	90c00015 	stw	r3,0(r18)
 2007e70:	003f5806 	br	2007bd4 <_dtoa_r+0x7c>
 2007e74:	00800434 	movhi	r2,16
 2007e78:	10bfffc4 	addi	r2,r2,-1
 2007e7c:	a884703a 	and	r2,r21,r2
 2007e80:	103fec1e 	bne	r2,zero,2007e34 <_dtoa_r+0x2dc>
 2007e84:	00c08074 	movhi	r3,513
 2007e88:	18d77b04 	addi	r3,r3,24044
 2007e8c:	003feb06 	br	2007e3c <_dtoa_r+0x2e4>
 2007e90:	d8802917 	ldw	r2,164(sp)
 2007e94:	19000204 	addi	r4,r3,8
 2007e98:	11000015 	stw	r4,0(r2)
 2007e9c:	003f6206 	br	2007c28 <_dtoa_r+0xd0>
 2007ea0:	ddc00117 	ldw	r23,4(sp)
 2007ea4:	d8800217 	ldw	r2,8(sp)
 2007ea8:	01000804 	movi	r4,32
 2007eac:	b8c10c84 	addi	r3,r23,1074
 2007eb0:	18a3883a 	add	r17,r3,r2
 2007eb4:	2441b80e 	bge	r4,r17,2008598 <_dtoa_r+0xa40>
 2007eb8:	00c01004 	movi	r3,64
 2007ebc:	1c47c83a 	sub	r3,r3,r17
 2007ec0:	88bff804 	addi	r2,r17,-32
 2007ec4:	a8c6983a 	sll	r3,r21,r3
 2007ec8:	a084d83a 	srl	r2,r20,r2
 2007ecc:	1888b03a 	or	r4,r3,r2
 2007ed0:	20110e00 	call	20110e0 <__floatunsidf>
 2007ed4:	1011883a 	mov	r8,r2
 2007ed8:	00bf8434 	movhi	r2,65040
 2007edc:	01000044 	movi	r4,1
 2007ee0:	10d3883a 	add	r9,r2,r3
 2007ee4:	8dbef344 	addi	r22,r17,-1075
 2007ee8:	d9000815 	stw	r4,32(sp)
 2007eec:	003f6f06 	br	2007cac <_dtoa_r+0x154>
 2007ef0:	d8001715 	stw	zero,92(sp)
 2007ef4:	04400044 	movi	r17,1
 2007ef8:	00bfffc4 	movi	r2,-1
 2007efc:	00c00044 	movi	r3,1
 2007f00:	d8800e15 	stw	r2,56(sp)
 2007f04:	d8002615 	stw	zero,152(sp)
 2007f08:	d8800f15 	stw	r2,60(sp)
 2007f0c:	d8c00b15 	stw	r3,44(sp)
 2007f10:	1021883a 	mov	r16,r2
 2007f14:	d8801617 	ldw	r2,88(sp)
 2007f18:	10001115 	stw	zero,68(r2)
 2007f1c:	d8801617 	ldw	r2,88(sp)
 2007f20:	11401117 	ldw	r5,68(r2)
 2007f24:	1009883a 	mov	r4,r2
 2007f28:	200ae940 	call	200ae94 <_Balloc>
 2007f2c:	d8c01617 	ldw	r3,88(sp)
 2007f30:	d8800515 	stw	r2,20(sp)
 2007f34:	18801015 	stw	r2,64(r3)
 2007f38:	00800384 	movi	r2,14
 2007f3c:	14006836 	bltu	r2,r16,20080e0 <_dtoa_r+0x588>
 2007f40:	8805003a 	cmpeq	r2,r17,zero
 2007f44:	1000661e 	bne	r2,zero,20080e0 <_dtoa_r+0x588>
 2007f48:	d9000d17 	ldw	r4,52(sp)
 2007f4c:	0102300e 	bge	zero,r4,2008810 <_dtoa_r+0xcb8>
 2007f50:	208003cc 	andi	r2,r4,15
 2007f54:	100490fa 	slli	r2,r2,3
 2007f58:	2025d13a 	srai	r18,r4,4
 2007f5c:	00c08074 	movhi	r3,513
 2007f60:	18d79004 	addi	r3,r3,24128
 2007f64:	10c5883a 	add	r2,r2,r3
 2007f68:	90c0040c 	andi	r3,r18,16
 2007f6c:	14000017 	ldw	r16,0(r2)
 2007f70:	14400117 	ldw	r17,4(r2)
 2007f74:	18036a1e 	bne	r3,zero,2008d20 <_dtoa_r+0x11c8>
 2007f78:	05800084 	movi	r22,2
 2007f7c:	90001026 	beq	r18,zero,2007fc0 <_dtoa_r+0x468>
 2007f80:	04c08074 	movhi	r19,513
 2007f84:	9cd7c204 	addi	r19,r19,24328
 2007f88:	9080004c 	andi	r2,r18,1
 2007f8c:	1005003a 	cmpeq	r2,r2,zero
 2007f90:	1000081e 	bne	r2,zero,2007fb4 <_dtoa_r+0x45c>
 2007f94:	99800017 	ldw	r6,0(r19)
 2007f98:	99c00117 	ldw	r7,4(r19)
 2007f9c:	880b883a 	mov	r5,r17
 2007fa0:	8009883a 	mov	r4,r16
 2007fa4:	200283c0 	call	200283c <__muldf3>
 2007fa8:	1021883a 	mov	r16,r2
 2007fac:	b5800044 	addi	r22,r22,1
 2007fb0:	1823883a 	mov	r17,r3
 2007fb4:	9025d07a 	srai	r18,r18,1
 2007fb8:	9cc00204 	addi	r19,r19,8
 2007fbc:	903ff21e 	bne	r18,zero,2007f88 <_dtoa_r+0x430>
 2007fc0:	a80b883a 	mov	r5,r21
 2007fc4:	a009883a 	mov	r4,r20
 2007fc8:	880f883a 	mov	r7,r17
 2007fcc:	800d883a 	mov	r6,r16
 2007fd0:	2002c000 	call	2002c00 <__divdf3>
 2007fd4:	1029883a 	mov	r20,r2
 2007fd8:	182b883a 	mov	r21,r3
 2007fdc:	d8c00c17 	ldw	r3,48(sp)
 2007fe0:	1805003a 	cmpeq	r2,r3,zero
 2007fe4:	1000081e 	bne	r2,zero,2008008 <_dtoa_r+0x4b0>
 2007fe8:	0005883a 	mov	r2,zero
 2007fec:	00cffc34 	movhi	r3,16368
 2007ff0:	180f883a 	mov	r7,r3
 2007ff4:	a009883a 	mov	r4,r20
 2007ff8:	a80b883a 	mov	r5,r21
 2007ffc:	100d883a 	mov	r6,r2
 2008000:	2010d8c0 	call	2010d8c <__ltdf2>
 2008004:	1003fe16 	blt	r2,zero,2009000 <_dtoa_r+0x14a8>
 2008008:	b009883a 	mov	r4,r22
 200800c:	2010e9c0 	call	2010e9c <__floatsidf>
 2008010:	180b883a 	mov	r5,r3
 2008014:	1009883a 	mov	r4,r2
 2008018:	a00d883a 	mov	r6,r20
 200801c:	a80f883a 	mov	r7,r21
 2008020:	200283c0 	call	200283c <__muldf3>
 2008024:	0011883a 	mov	r8,zero
 2008028:	02500734 	movhi	r9,16412
 200802c:	1009883a 	mov	r4,r2
 2008030:	180b883a 	mov	r5,r3
 2008034:	480f883a 	mov	r7,r9
 2008038:	400d883a 	mov	r6,r8
 200803c:	2010af80 	call	2010af8 <__adddf3>
 2008040:	d9000f17 	ldw	r4,60(sp)
 2008044:	102d883a 	mov	r22,r2
 2008048:	00bf3034 	movhi	r2,64704
 200804c:	18b9883a 	add	fp,r3,r2
 2008050:	e02f883a 	mov	r23,fp
 2008054:	20028f1e 	bne	r4,zero,2008a94 <_dtoa_r+0xf3c>
 2008058:	0005883a 	mov	r2,zero
 200805c:	00d00534 	movhi	r3,16404
 2008060:	a009883a 	mov	r4,r20
 2008064:	a80b883a 	mov	r5,r21
 2008068:	180f883a 	mov	r7,r3
 200806c:	100d883a 	mov	r6,r2
 2008070:	2010a780 	call	2010a78 <__subdf3>
 2008074:	1009883a 	mov	r4,r2
 2008078:	e00f883a 	mov	r7,fp
 200807c:	180b883a 	mov	r5,r3
 2008080:	b00d883a 	mov	r6,r22
 2008084:	1025883a 	mov	r18,r2
 2008088:	1827883a 	mov	r19,r3
 200808c:	2010c7c0 	call	2010c7c <__gtdf2>
 2008090:	00834f16 	blt	zero,r2,2008dd0 <_dtoa_r+0x1278>
 2008094:	e0e0003c 	xorhi	r3,fp,32768
 2008098:	9009883a 	mov	r4,r18
 200809c:	980b883a 	mov	r5,r19
 20080a0:	180f883a 	mov	r7,r3
 20080a4:	b00d883a 	mov	r6,r22
 20080a8:	2010d8c0 	call	2010d8c <__ltdf2>
 20080ac:	1000080e 	bge	r2,zero,20080d0 <_dtoa_r+0x578>
 20080b0:	0027883a 	mov	r19,zero
 20080b4:	0025883a 	mov	r18,zero
 20080b8:	d8802617 	ldw	r2,152(sp)
 20080bc:	df000517 	ldw	fp,20(sp)
 20080c0:	d8000615 	stw	zero,24(sp)
 20080c4:	0084303a 	nor	r2,zero,r2
 20080c8:	d8800d15 	stw	r2,52(sp)
 20080cc:	00019b06 	br	200873c <_dtoa_r+0xbe4>
 20080d0:	d9801217 	ldw	r6,72(sp)
 20080d4:	d8801317 	ldw	r2,76(sp)
 20080d8:	3029883a 	mov	r20,r6
 20080dc:	102b883a 	mov	r21,r2
 20080e0:	d8c00217 	ldw	r3,8(sp)
 20080e4:	18008516 	blt	r3,zero,20082fc <_dtoa_r+0x7a4>
 20080e8:	d9000d17 	ldw	r4,52(sp)
 20080ec:	00800384 	movi	r2,14
 20080f0:	11008216 	blt	r2,r4,20082fc <_dtoa_r+0x7a4>
 20080f4:	200490fa 	slli	r2,r4,3
 20080f8:	d9802617 	ldw	r6,152(sp)
 20080fc:	00c08074 	movhi	r3,513
 2008100:	18d79004 	addi	r3,r3,24128
 2008104:	10c5883a 	add	r2,r2,r3
 2008108:	14800017 	ldw	r18,0(r2)
 200810c:	14c00117 	ldw	r19,4(r2)
 2008110:	30031e16 	blt	r6,zero,2008d8c <_dtoa_r+0x1234>
 2008114:	d9000517 	ldw	r4,20(sp)
 2008118:	d8c00f17 	ldw	r3,60(sp)
 200811c:	a823883a 	mov	r17,r21
 2008120:	a021883a 	mov	r16,r20
 2008124:	192b883a 	add	r21,r3,r4
 2008128:	2039883a 	mov	fp,r4
 200812c:	00000f06 	br	200816c <_dtoa_r+0x614>
 2008130:	0005883a 	mov	r2,zero
 2008134:	00d00934 	movhi	r3,16420
 2008138:	5009883a 	mov	r4,r10
 200813c:	580b883a 	mov	r5,r11
 2008140:	180f883a 	mov	r7,r3
 2008144:	100d883a 	mov	r6,r2
 2008148:	200283c0 	call	200283c <__muldf3>
 200814c:	180b883a 	mov	r5,r3
 2008150:	000d883a 	mov	r6,zero
 2008154:	000f883a 	mov	r7,zero
 2008158:	1009883a 	mov	r4,r2
 200815c:	1021883a 	mov	r16,r2
 2008160:	1823883a 	mov	r17,r3
 2008164:	2010bf40 	call	2010bf4 <__nedf2>
 2008168:	10004526 	beq	r2,zero,2008280 <_dtoa_r+0x728>
 200816c:	900d883a 	mov	r6,r18
 2008170:	980f883a 	mov	r7,r19
 2008174:	8009883a 	mov	r4,r16
 2008178:	880b883a 	mov	r5,r17
 200817c:	2002c000 	call	2002c00 <__divdf3>
 2008180:	180b883a 	mov	r5,r3
 2008184:	1009883a 	mov	r4,r2
 2008188:	2010f940 	call	2010f94 <__fixdfsi>
 200818c:	1009883a 	mov	r4,r2
 2008190:	1029883a 	mov	r20,r2
 2008194:	2010e9c0 	call	2010e9c <__floatsidf>
 2008198:	180f883a 	mov	r7,r3
 200819c:	9009883a 	mov	r4,r18
 20081a0:	980b883a 	mov	r5,r19
 20081a4:	100d883a 	mov	r6,r2
 20081a8:	200283c0 	call	200283c <__muldf3>
 20081ac:	180f883a 	mov	r7,r3
 20081b0:	880b883a 	mov	r5,r17
 20081b4:	8009883a 	mov	r4,r16
 20081b8:	100d883a 	mov	r6,r2
 20081bc:	2010a780 	call	2010a78 <__subdf3>
 20081c0:	1015883a 	mov	r10,r2
 20081c4:	a0800c04 	addi	r2,r20,48
 20081c8:	e0800005 	stb	r2,0(fp)
 20081cc:	e7000044 	addi	fp,fp,1
 20081d0:	1817883a 	mov	r11,r3
 20081d4:	e57fd61e 	bne	fp,r21,2008130 <_dtoa_r+0x5d8>
 20081d8:	500d883a 	mov	r6,r10
 20081dc:	180f883a 	mov	r7,r3
 20081e0:	5009883a 	mov	r4,r10
 20081e4:	180b883a 	mov	r5,r3
 20081e8:	2010af80 	call	2010af8 <__adddf3>
 20081ec:	100d883a 	mov	r6,r2
 20081f0:	9009883a 	mov	r4,r18
 20081f4:	980b883a 	mov	r5,r19
 20081f8:	180f883a 	mov	r7,r3
 20081fc:	1021883a 	mov	r16,r2
 2008200:	1823883a 	mov	r17,r3
 2008204:	2010d8c0 	call	2010d8c <__ltdf2>
 2008208:	10000816 	blt	r2,zero,200822c <_dtoa_r+0x6d4>
 200820c:	980b883a 	mov	r5,r19
 2008210:	800d883a 	mov	r6,r16
 2008214:	880f883a 	mov	r7,r17
 2008218:	9009883a 	mov	r4,r18
 200821c:	2010b6c0 	call	2010b6c <__eqdf2>
 2008220:	1000171e 	bne	r2,zero,2008280 <_dtoa_r+0x728>
 2008224:	a080004c 	andi	r2,r20,1
 2008228:	10001526 	beq	r2,zero,2008280 <_dtoa_r+0x728>
 200822c:	d8800d17 	ldw	r2,52(sp)
 2008230:	d8800415 	stw	r2,16(sp)
 2008234:	e009883a 	mov	r4,fp
 2008238:	213fffc4 	addi	r4,r4,-1
 200823c:	20c00007 	ldb	r3,0(r4)
 2008240:	00800e44 	movi	r2,57
 2008244:	1880081e 	bne	r3,r2,2008268 <_dtoa_r+0x710>
 2008248:	d8800517 	ldw	r2,20(sp)
 200824c:	113ffa1e 	bne	r2,r4,2008238 <_dtoa_r+0x6e0>
 2008250:	d8c00417 	ldw	r3,16(sp)
 2008254:	d9800517 	ldw	r6,20(sp)
 2008258:	00800c04 	movi	r2,48
 200825c:	18c00044 	addi	r3,r3,1
 2008260:	d8c00415 	stw	r3,16(sp)
 2008264:	30800005 	stb	r2,0(r6)
 2008268:	20800003 	ldbu	r2,0(r4)
 200826c:	d8c00417 	ldw	r3,16(sp)
 2008270:	27000044 	addi	fp,r4,1
 2008274:	10800044 	addi	r2,r2,1
 2008278:	d8c00d15 	stw	r3,52(sp)
 200827c:	20800005 	stb	r2,0(r4)
 2008280:	d9001617 	ldw	r4,88(sp)
 2008284:	d9400717 	ldw	r5,28(sp)
 2008288:	200a9140 	call	200a914 <_Bfree>
 200828c:	e0000005 	stb	zero,0(fp)
 2008290:	d9800d17 	ldw	r6,52(sp)
 2008294:	d8c02717 	ldw	r3,156(sp)
 2008298:	d9002917 	ldw	r4,164(sp)
 200829c:	30800044 	addi	r2,r6,1
 20082a0:	18800015 	stw	r2,0(r3)
 20082a4:	20029c26 	beq	r4,zero,2008d18 <_dtoa_r+0x11c0>
 20082a8:	d8c00517 	ldw	r3,20(sp)
 20082ac:	27000015 	stw	fp,0(r4)
 20082b0:	003e5d06 	br	2007c28 <_dtoa_r+0xd0>
 20082b4:	d9800d17 	ldw	r6,52(sp)
 20082b8:	00c08074 	movhi	r3,513
 20082bc:	18d79004 	addi	r3,r3,24128
 20082c0:	d9001217 	ldw	r4,72(sp)
 20082c4:	300490fa 	slli	r2,r6,3
 20082c8:	d9401317 	ldw	r5,76(sp)
 20082cc:	10c5883a 	add	r2,r2,r3
 20082d0:	12000017 	ldw	r8,0(r2)
 20082d4:	12400117 	ldw	r9,4(r2)
 20082d8:	400d883a 	mov	r6,r8
 20082dc:	480f883a 	mov	r7,r9
 20082e0:	2010d8c0 	call	2010d8c <__ltdf2>
 20082e4:	1000030e 	bge	r2,zero,20082f4 <_dtoa_r+0x79c>
 20082e8:	d8800d17 	ldw	r2,52(sp)
 20082ec:	10bfffc4 	addi	r2,r2,-1
 20082f0:	d8800d15 	stw	r2,52(sp)
 20082f4:	d8000c15 	stw	zero,48(sp)
 20082f8:	003ea806 	br	2007d9c <_dtoa_r+0x244>
 20082fc:	d9000b17 	ldw	r4,44(sp)
 2008300:	202cc03a 	cmpne	r22,r4,zero
 2008304:	b000c71e 	bne	r22,zero,2008624 <_dtoa_r+0xacc>
 2008308:	dc001117 	ldw	r16,68(sp)
 200830c:	dc801017 	ldw	r18,64(sp)
 2008310:	0027883a 	mov	r19,zero
 2008314:	04000b0e 	bge	zero,r16,2008344 <_dtoa_r+0x7ec>
 2008318:	d8c00a17 	ldw	r3,40(sp)
 200831c:	00c0090e 	bge	zero,r3,2008344 <_dtoa_r+0x7ec>
 2008320:	8005883a 	mov	r2,r16
 2008324:	1c011316 	blt	r3,r16,2008774 <_dtoa_r+0xc1c>
 2008328:	d9000a17 	ldw	r4,40(sp)
 200832c:	d9801117 	ldw	r6,68(sp)
 2008330:	80a1c83a 	sub	r16,r16,r2
 2008334:	2089c83a 	sub	r4,r4,r2
 2008338:	308dc83a 	sub	r6,r6,r2
 200833c:	d9000a15 	stw	r4,40(sp)
 2008340:	d9801115 	stw	r6,68(sp)
 2008344:	d8801017 	ldw	r2,64(sp)
 2008348:	0080150e 	bge	zero,r2,20083a0 <_dtoa_r+0x848>
 200834c:	d8c00b17 	ldw	r3,44(sp)
 2008350:	1805003a 	cmpeq	r2,r3,zero
 2008354:	1001c91e 	bne	r2,zero,2008a7c <_dtoa_r+0xf24>
 2008358:	04800e0e 	bge	zero,r18,2008394 <_dtoa_r+0x83c>
 200835c:	d9001617 	ldw	r4,88(sp)
 2008360:	980b883a 	mov	r5,r19
 2008364:	900d883a 	mov	r6,r18
 2008368:	200b6c80 	call	200b6c8 <__pow5mult>
 200836c:	d9001617 	ldw	r4,88(sp)
 2008370:	d9800717 	ldw	r6,28(sp)
 2008374:	100b883a 	mov	r5,r2
 2008378:	1027883a 	mov	r19,r2
 200837c:	200b3a40 	call	200b3a4 <__multiply>
 2008380:	d9001617 	ldw	r4,88(sp)
 2008384:	d9400717 	ldw	r5,28(sp)
 2008388:	1023883a 	mov	r17,r2
 200838c:	200a9140 	call	200a914 <_Bfree>
 2008390:	dc400715 	stw	r17,28(sp)
 2008394:	d9001017 	ldw	r4,64(sp)
 2008398:	248dc83a 	sub	r6,r4,r18
 200839c:	30010e1e 	bne	r6,zero,20087d8 <_dtoa_r+0xc80>
 20083a0:	d9001617 	ldw	r4,88(sp)
 20083a4:	04400044 	movi	r17,1
 20083a8:	880b883a 	mov	r5,r17
 20083ac:	200b58c0 	call	200b58c <__i2b>
 20083b0:	d9800917 	ldw	r6,36(sp)
 20083b4:	1025883a 	mov	r18,r2
 20083b8:	0180040e 	bge	zero,r6,20083cc <_dtoa_r+0x874>
 20083bc:	d9001617 	ldw	r4,88(sp)
 20083c0:	100b883a 	mov	r5,r2
 20083c4:	200b6c80 	call	200b6c8 <__pow5mult>
 20083c8:	1025883a 	mov	r18,r2
 20083cc:	d8801717 	ldw	r2,92(sp)
 20083d0:	8880f30e 	bge	r17,r2,20087a0 <_dtoa_r+0xc48>
 20083d4:	0023883a 	mov	r17,zero
 20083d8:	d9800917 	ldw	r6,36(sp)
 20083dc:	30019e1e 	bne	r6,zero,2008a58 <_dtoa_r+0xf00>
 20083e0:	00c00044 	movi	r3,1
 20083e4:	d9000a17 	ldw	r4,40(sp)
 20083e8:	20c5883a 	add	r2,r4,r3
 20083ec:	10c007cc 	andi	r3,r2,31
 20083f0:	1800841e 	bne	r3,zero,2008604 <_dtoa_r+0xaac>
 20083f4:	00800704 	movi	r2,28
 20083f8:	d9000a17 	ldw	r4,40(sp)
 20083fc:	d9801117 	ldw	r6,68(sp)
 2008400:	80a1883a 	add	r16,r16,r2
 2008404:	2089883a 	add	r4,r4,r2
 2008408:	308d883a 	add	r6,r6,r2
 200840c:	d9000a15 	stw	r4,40(sp)
 2008410:	d9801115 	stw	r6,68(sp)
 2008414:	d8801117 	ldw	r2,68(sp)
 2008418:	0080050e 	bge	zero,r2,2008430 <_dtoa_r+0x8d8>
 200841c:	d9400717 	ldw	r5,28(sp)
 2008420:	d9001617 	ldw	r4,88(sp)
 2008424:	100d883a 	mov	r6,r2
 2008428:	200b2580 	call	200b258 <__lshift>
 200842c:	d8800715 	stw	r2,28(sp)
 2008430:	d8c00a17 	ldw	r3,40(sp)
 2008434:	00c0050e 	bge	zero,r3,200844c <_dtoa_r+0x8f4>
 2008438:	d9001617 	ldw	r4,88(sp)
 200843c:	900b883a 	mov	r5,r18
 2008440:	180d883a 	mov	r6,r3
 2008444:	200b2580 	call	200b258 <__lshift>
 2008448:	1025883a 	mov	r18,r2
 200844c:	d9000c17 	ldw	r4,48(sp)
 2008450:	2005003a 	cmpeq	r2,r4,zero
 2008454:	10016f26 	beq	r2,zero,2008a14 <_dtoa_r+0xebc>
 2008458:	d9000f17 	ldw	r4,60(sp)
 200845c:	0102170e 	bge	zero,r4,2008cbc <_dtoa_r+0x1164>
 2008460:	d9800b17 	ldw	r6,44(sp)
 2008464:	3005003a 	cmpeq	r2,r6,zero
 2008468:	1000881e 	bne	r2,zero,200868c <_dtoa_r+0xb34>
 200846c:	0400050e 	bge	zero,r16,2008484 <_dtoa_r+0x92c>
 2008470:	d9001617 	ldw	r4,88(sp)
 2008474:	980b883a 	mov	r5,r19
 2008478:	800d883a 	mov	r6,r16
 200847c:	200b2580 	call	200b258 <__lshift>
 2008480:	1027883a 	mov	r19,r2
 2008484:	8804c03a 	cmpne	r2,r17,zero
 2008488:	1002541e 	bne	r2,zero,2008ddc <_dtoa_r+0x1284>
 200848c:	980b883a 	mov	r5,r19
 2008490:	dd800517 	ldw	r22,20(sp)
 2008494:	dcc00615 	stw	r19,24(sp)
 2008498:	a700004c 	andi	fp,r20,1
 200849c:	2827883a 	mov	r19,r5
 20084a0:	d9000717 	ldw	r4,28(sp)
 20084a4:	900b883a 	mov	r5,r18
 20084a8:	20079400 	call	2007940 <quorem>
 20084ac:	d9000717 	ldw	r4,28(sp)
 20084b0:	d9400617 	ldw	r5,24(sp)
 20084b4:	1023883a 	mov	r17,r2
 20084b8:	8dc00c04 	addi	r23,r17,48
 20084bc:	200aa700 	call	200aa70 <__mcmp>
 20084c0:	d9001617 	ldw	r4,88(sp)
 20084c4:	900b883a 	mov	r5,r18
 20084c8:	980d883a 	mov	r6,r19
 20084cc:	1029883a 	mov	r20,r2
 20084d0:	200b0cc0 	call	200b0cc <__mdiff>
 20084d4:	102b883a 	mov	r21,r2
 20084d8:	10800317 	ldw	r2,12(r2)
 20084dc:	1001281e 	bne	r2,zero,2008980 <_dtoa_r+0xe28>
 20084e0:	d9000717 	ldw	r4,28(sp)
 20084e4:	a80b883a 	mov	r5,r21
 20084e8:	200aa700 	call	200aa70 <__mcmp>
 20084ec:	d9001617 	ldw	r4,88(sp)
 20084f0:	1021883a 	mov	r16,r2
 20084f4:	a80b883a 	mov	r5,r21
 20084f8:	200a9140 	call	200a914 <_Bfree>
 20084fc:	8000041e 	bne	r16,zero,2008510 <_dtoa_r+0x9b8>
 2008500:	d8801717 	ldw	r2,92(sp)
 2008504:	1000021e 	bne	r2,zero,2008510 <_dtoa_r+0x9b8>
 2008508:	e004c03a 	cmpne	r2,fp,zero
 200850c:	10011726 	beq	r2,zero,200896c <_dtoa_r+0xe14>
 2008510:	a0010616 	blt	r20,zero,200892c <_dtoa_r+0xdd4>
 2008514:	a000041e 	bne	r20,zero,2008528 <_dtoa_r+0x9d0>
 2008518:	d8c01717 	ldw	r3,92(sp)
 200851c:	1800021e 	bne	r3,zero,2008528 <_dtoa_r+0x9d0>
 2008520:	e004c03a 	cmpne	r2,fp,zero
 2008524:	10010126 	beq	r2,zero,200892c <_dtoa_r+0xdd4>
 2008528:	04023d16 	blt	zero,r16,2008e20 <_dtoa_r+0x12c8>
 200852c:	b5c00005 	stb	r23,0(r22)
 2008530:	d9800517 	ldw	r6,20(sp)
 2008534:	d9000f17 	ldw	r4,60(sp)
 2008538:	b5800044 	addi	r22,r22,1
 200853c:	3105883a 	add	r2,r6,r4
 2008540:	b0806526 	beq	r22,r2,20086d8 <_dtoa_r+0xb80>
 2008544:	d9400717 	ldw	r5,28(sp)
 2008548:	d9001617 	ldw	r4,88(sp)
 200854c:	01800284 	movi	r6,10
 2008550:	000f883a 	mov	r7,zero
 2008554:	200b5c80 	call	200b5c8 <__multadd>
 2008558:	d8800715 	stw	r2,28(sp)
 200855c:	d8800617 	ldw	r2,24(sp)
 2008560:	14c10c26 	beq	r2,r19,2008994 <_dtoa_r+0xe3c>
 2008564:	d9400617 	ldw	r5,24(sp)
 2008568:	d9001617 	ldw	r4,88(sp)
 200856c:	01800284 	movi	r6,10
 2008570:	000f883a 	mov	r7,zero
 2008574:	200b5c80 	call	200b5c8 <__multadd>
 2008578:	d9001617 	ldw	r4,88(sp)
 200857c:	980b883a 	mov	r5,r19
 2008580:	01800284 	movi	r6,10
 2008584:	000f883a 	mov	r7,zero
 2008588:	d8800615 	stw	r2,24(sp)
 200858c:	200b5c80 	call	200b5c8 <__multadd>
 2008590:	1027883a 	mov	r19,r2
 2008594:	003fc206 	br	20084a0 <_dtoa_r+0x948>
 2008598:	2445c83a 	sub	r2,r4,r17
 200859c:	a088983a 	sll	r4,r20,r2
 20085a0:	003e4b06 	br	2007ed0 <_dtoa_r+0x378>
 20085a4:	01bfffc4 	movi	r6,-1
 20085a8:	00800044 	movi	r2,1
 20085ac:	d9800e15 	stw	r6,56(sp)
 20085b0:	d9800f15 	stw	r6,60(sp)
 20085b4:	d8800b15 	stw	r2,44(sp)
 20085b8:	d8c01617 	ldw	r3,88(sp)
 20085bc:	008005c4 	movi	r2,23
 20085c0:	18001115 	stw	zero,68(r3)
 20085c4:	1580082e 	bgeu	r2,r22,20085e8 <_dtoa_r+0xa90>
 20085c8:	00c00104 	movi	r3,4
 20085cc:	0009883a 	mov	r4,zero
 20085d0:	18c7883a 	add	r3,r3,r3
 20085d4:	18800504 	addi	r2,r3,20
 20085d8:	21000044 	addi	r4,r4,1
 20085dc:	b0bffc2e 	bgeu	r22,r2,20085d0 <_dtoa_r+0xa78>
 20085e0:	d9801617 	ldw	r6,88(sp)
 20085e4:	31001115 	stw	r4,68(r6)
 20085e8:	dc000f17 	ldw	r16,60(sp)
 20085ec:	003e4b06 	br	2007f1c <_dtoa_r+0x3c4>
 20085f0:	d9801717 	ldw	r6,92(sp)
 20085f4:	0023883a 	mov	r17,zero
 20085f8:	31bfff04 	addi	r6,r6,-4
 20085fc:	d9801715 	stw	r6,92(sp)
 2008600:	003df806 	br	2007de4 <_dtoa_r+0x28c>
 2008604:	00800804 	movi	r2,32
 2008608:	10c9c83a 	sub	r4,r2,r3
 200860c:	00c00104 	movi	r3,4
 2008610:	19005a16 	blt	r3,r4,200877c <_dtoa_r+0xc24>
 2008614:	008000c4 	movi	r2,3
 2008618:	113f7e16 	blt	r2,r4,2008414 <_dtoa_r+0x8bc>
 200861c:	20800704 	addi	r2,r4,28
 2008620:	003f7506 	br	20083f8 <_dtoa_r+0x8a0>
 2008624:	d9801717 	ldw	r6,92(sp)
 2008628:	00800044 	movi	r2,1
 200862c:	1180a10e 	bge	r2,r6,20088b4 <_dtoa_r+0xd5c>
 2008630:	d9800f17 	ldw	r6,60(sp)
 2008634:	d8c01017 	ldw	r3,64(sp)
 2008638:	30bfffc4 	addi	r2,r6,-1
 200863c:	1881c616 	blt	r3,r2,2008d58 <_dtoa_r+0x1200>
 2008640:	18a5c83a 	sub	r18,r3,r2
 2008644:	d8800f17 	ldw	r2,60(sp)
 2008648:	10026216 	blt	r2,zero,2008fd4 <_dtoa_r+0x147c>
 200864c:	dc001117 	ldw	r16,68(sp)
 2008650:	1007883a 	mov	r3,r2
 2008654:	d9800a17 	ldw	r6,40(sp)
 2008658:	d8801117 	ldw	r2,68(sp)
 200865c:	d9001617 	ldw	r4,88(sp)
 2008660:	30cd883a 	add	r6,r6,r3
 2008664:	10c5883a 	add	r2,r2,r3
 2008668:	01400044 	movi	r5,1
 200866c:	d9800a15 	stw	r6,40(sp)
 2008670:	d8801115 	stw	r2,68(sp)
 2008674:	200b58c0 	call	200b58c <__i2b>
 2008678:	1027883a 	mov	r19,r2
 200867c:	003f2506 	br	2008314 <_dtoa_r+0x7bc>
 2008680:	00c08074 	movhi	r3,513
 2008684:	18d6c704 	addi	r3,r3,23324
 2008688:	003d6706 	br	2007c28 <_dtoa_r+0xd0>
 200868c:	dd800517 	ldw	r22,20(sp)
 2008690:	04000044 	movi	r16,1
 2008694:	00000706 	br	20086b4 <_dtoa_r+0xb5c>
 2008698:	d9400717 	ldw	r5,28(sp)
 200869c:	d9001617 	ldw	r4,88(sp)
 20086a0:	01800284 	movi	r6,10
 20086a4:	000f883a 	mov	r7,zero
 20086a8:	200b5c80 	call	200b5c8 <__multadd>
 20086ac:	d8800715 	stw	r2,28(sp)
 20086b0:	84000044 	addi	r16,r16,1
 20086b4:	d9000717 	ldw	r4,28(sp)
 20086b8:	900b883a 	mov	r5,r18
 20086bc:	20079400 	call	2007940 <quorem>
 20086c0:	15c00c04 	addi	r23,r2,48
 20086c4:	b5c00005 	stb	r23,0(r22)
 20086c8:	d8c00f17 	ldw	r3,60(sp)
 20086cc:	b5800044 	addi	r22,r22,1
 20086d0:	80fff116 	blt	r16,r3,2008698 <_dtoa_r+0xb40>
 20086d4:	d8000615 	stw	zero,24(sp)
 20086d8:	d9400717 	ldw	r5,28(sp)
 20086dc:	d9001617 	ldw	r4,88(sp)
 20086e0:	01800044 	movi	r6,1
 20086e4:	200b2580 	call	200b258 <__lshift>
 20086e8:	1009883a 	mov	r4,r2
 20086ec:	900b883a 	mov	r5,r18
 20086f0:	d8800715 	stw	r2,28(sp)
 20086f4:	200aa700 	call	200aa70 <__mcmp>
 20086f8:	00803c0e 	bge	zero,r2,20087ec <_dtoa_r+0xc94>
 20086fc:	b009883a 	mov	r4,r22
 2008700:	213fffc4 	addi	r4,r4,-1
 2008704:	21400003 	ldbu	r5,0(r4)
 2008708:	00800e44 	movi	r2,57
 200870c:	28c03fcc 	andi	r3,r5,255
 2008710:	18c0201c 	xori	r3,r3,128
 2008714:	18ffe004 	addi	r3,r3,-128
 2008718:	1881981e 	bne	r3,r2,2008d7c <_dtoa_r+0x1224>
 200871c:	d9800517 	ldw	r6,20(sp)
 2008720:	21bff71e 	bne	r4,r6,2008700 <_dtoa_r+0xba8>
 2008724:	d8800d17 	ldw	r2,52(sp)
 2008728:	37000044 	addi	fp,r6,1
 200872c:	10800044 	addi	r2,r2,1
 2008730:	d8800d15 	stw	r2,52(sp)
 2008734:	00800c44 	movi	r2,49
 2008738:	30800005 	stb	r2,0(r6)
 200873c:	d9001617 	ldw	r4,88(sp)
 2008740:	900b883a 	mov	r5,r18
 2008744:	200a9140 	call	200a914 <_Bfree>
 2008748:	983ecd26 	beq	r19,zero,2008280 <_dtoa_r+0x728>
 200874c:	d8c00617 	ldw	r3,24(sp)
 2008750:	18000426 	beq	r3,zero,2008764 <_dtoa_r+0xc0c>
 2008754:	1cc00326 	beq	r3,r19,2008764 <_dtoa_r+0xc0c>
 2008758:	d9001617 	ldw	r4,88(sp)
 200875c:	180b883a 	mov	r5,r3
 2008760:	200a9140 	call	200a914 <_Bfree>
 2008764:	d9001617 	ldw	r4,88(sp)
 2008768:	980b883a 	mov	r5,r19
 200876c:	200a9140 	call	200a914 <_Bfree>
 2008770:	003ec306 	br	2008280 <_dtoa_r+0x728>
 2008774:	1805883a 	mov	r2,r3
 2008778:	003eeb06 	br	2008328 <_dtoa_r+0x7d0>
 200877c:	d9800a17 	ldw	r6,40(sp)
 2008780:	d8c01117 	ldw	r3,68(sp)
 2008784:	20bfff04 	addi	r2,r4,-4
 2008788:	308d883a 	add	r6,r6,r2
 200878c:	1887883a 	add	r3,r3,r2
 2008790:	80a1883a 	add	r16,r16,r2
 2008794:	d9800a15 	stw	r6,40(sp)
 2008798:	d8c01115 	stw	r3,68(sp)
 200879c:	003f1d06 	br	2008414 <_dtoa_r+0x8bc>
 20087a0:	a03f0c1e 	bne	r20,zero,20083d4 <_dtoa_r+0x87c>
 20087a4:	00800434 	movhi	r2,16
 20087a8:	10bfffc4 	addi	r2,r2,-1
 20087ac:	a884703a 	and	r2,r21,r2
 20087b0:	103f081e 	bne	r2,zero,20083d4 <_dtoa_r+0x87c>
 20087b4:	a89ffc2c 	andhi	r2,r21,32752
 20087b8:	103f0626 	beq	r2,zero,20083d4 <_dtoa_r+0x87c>
 20087bc:	d8c01117 	ldw	r3,68(sp)
 20087c0:	d9000a17 	ldw	r4,40(sp)
 20087c4:	18c00044 	addi	r3,r3,1
 20087c8:	21000044 	addi	r4,r4,1
 20087cc:	d8c01115 	stw	r3,68(sp)
 20087d0:	d9000a15 	stw	r4,40(sp)
 20087d4:	003f0006 	br	20083d8 <_dtoa_r+0x880>
 20087d8:	d9400717 	ldw	r5,28(sp)
 20087dc:	d9001617 	ldw	r4,88(sp)
 20087e0:	200b6c80 	call	200b6c8 <__pow5mult>
 20087e4:	d8800715 	stw	r2,28(sp)
 20087e8:	003eed06 	br	20083a0 <_dtoa_r+0x848>
 20087ec:	1000021e 	bne	r2,zero,20087f8 <_dtoa_r+0xca0>
 20087f0:	b880004c 	andi	r2,r23,1
 20087f4:	103fc11e 	bne	r2,zero,20086fc <_dtoa_r+0xba4>
 20087f8:	b5bfffc4 	addi	r22,r22,-1
 20087fc:	b0c00007 	ldb	r3,0(r22)
 2008800:	00800c04 	movi	r2,48
 2008804:	18bffc26 	beq	r3,r2,20087f8 <_dtoa_r+0xca0>
 2008808:	b7000044 	addi	fp,r22,1
 200880c:	003fcb06 	br	200873c <_dtoa_r+0xbe4>
 2008810:	d9800d17 	ldw	r6,52(sp)
 2008814:	018fc83a 	sub	r7,zero,r6
 2008818:	3801f726 	beq	r7,zero,2008ff8 <_dtoa_r+0x14a0>
 200881c:	398003cc 	andi	r6,r7,15
 2008820:	300c90fa 	slli	r6,r6,3
 2008824:	01408074 	movhi	r5,513
 2008828:	29579004 	addi	r5,r5,24128
 200882c:	d9001217 	ldw	r4,72(sp)
 2008830:	314d883a 	add	r6,r6,r5
 2008834:	30c00117 	ldw	r3,4(r6)
 2008838:	30800017 	ldw	r2,0(r6)
 200883c:	d9401317 	ldw	r5,76(sp)
 2008840:	3821d13a 	srai	r16,r7,4
 2008844:	100d883a 	mov	r6,r2
 2008848:	180f883a 	mov	r7,r3
 200884c:	200283c0 	call	200283c <__muldf3>
 2008850:	1011883a 	mov	r8,r2
 2008854:	1813883a 	mov	r9,r3
 2008858:	1029883a 	mov	r20,r2
 200885c:	182b883a 	mov	r21,r3
 2008860:	8001e526 	beq	r16,zero,2008ff8 <_dtoa_r+0x14a0>
 2008864:	05800084 	movi	r22,2
 2008868:	04408074 	movhi	r17,513
 200886c:	8c57c204 	addi	r17,r17,24328
 2008870:	8080004c 	andi	r2,r16,1
 2008874:	1005003a 	cmpeq	r2,r2,zero
 2008878:	1000081e 	bne	r2,zero,200889c <_dtoa_r+0xd44>
 200887c:	89800017 	ldw	r6,0(r17)
 2008880:	89c00117 	ldw	r7,4(r17)
 2008884:	480b883a 	mov	r5,r9
 2008888:	4009883a 	mov	r4,r8
 200888c:	200283c0 	call	200283c <__muldf3>
 2008890:	1011883a 	mov	r8,r2
 2008894:	b5800044 	addi	r22,r22,1
 2008898:	1813883a 	mov	r9,r3
 200889c:	8021d07a 	srai	r16,r16,1
 20088a0:	8c400204 	addi	r17,r17,8
 20088a4:	803ff21e 	bne	r16,zero,2008870 <_dtoa_r+0xd18>
 20088a8:	4029883a 	mov	r20,r8
 20088ac:	482b883a 	mov	r21,r9
 20088b0:	003dca06 	br	2007fdc <_dtoa_r+0x484>
 20088b4:	d9000817 	ldw	r4,32(sp)
 20088b8:	2005003a 	cmpeq	r2,r4,zero
 20088bc:	1001f61e 	bne	r2,zero,2009098 <_dtoa_r+0x1540>
 20088c0:	dc001117 	ldw	r16,68(sp)
 20088c4:	dc801017 	ldw	r18,64(sp)
 20088c8:	18c10cc4 	addi	r3,r3,1075
 20088cc:	003f6106 	br	2008654 <_dtoa_r+0xafc>
 20088d0:	d8000b15 	stw	zero,44(sp)
 20088d4:	d9802617 	ldw	r6,152(sp)
 20088d8:	d8c00d17 	ldw	r3,52(sp)
 20088dc:	30800044 	addi	r2,r6,1
 20088e0:	18ad883a 	add	r22,r3,r2
 20088e4:	b13fffc4 	addi	r4,r22,-1
 20088e8:	d9000e15 	stw	r4,56(sp)
 20088ec:	0581f60e 	bge	zero,r22,20090c8 <_dtoa_r+0x1570>
 20088f0:	dd800f15 	stw	r22,60(sp)
 20088f4:	003f3006 	br	20085b8 <_dtoa_r+0xa60>
 20088f8:	d8000b15 	stw	zero,44(sp)
 20088fc:	d9002617 	ldw	r4,152(sp)
 2008900:	0101eb0e 	bge	zero,r4,20090b0 <_dtoa_r+0x1558>
 2008904:	202d883a 	mov	r22,r4
 2008908:	d9000e15 	stw	r4,56(sp)
 200890c:	d9000f15 	stw	r4,60(sp)
 2008910:	003f2906 	br	20085b8 <_dtoa_r+0xa60>
 2008914:	01800044 	movi	r6,1
 2008918:	d9800b15 	stw	r6,44(sp)
 200891c:	003ff706 	br	20088fc <_dtoa_r+0xda4>
 2008920:	01000044 	movi	r4,1
 2008924:	d9000b15 	stw	r4,44(sp)
 2008928:	003fea06 	br	20088d4 <_dtoa_r+0xd7c>
 200892c:	04000c0e 	bge	zero,r16,2008960 <_dtoa_r+0xe08>
 2008930:	d9400717 	ldw	r5,28(sp)
 2008934:	d9001617 	ldw	r4,88(sp)
 2008938:	01800044 	movi	r6,1
 200893c:	200b2580 	call	200b258 <__lshift>
 2008940:	1009883a 	mov	r4,r2
 2008944:	900b883a 	mov	r5,r18
 2008948:	d8800715 	stw	r2,28(sp)
 200894c:	200aa700 	call	200aa70 <__mcmp>
 2008950:	0081e00e 	bge	zero,r2,20090d4 <_dtoa_r+0x157c>
 2008954:	bdc00044 	addi	r23,r23,1
 2008958:	00800e84 	movi	r2,58
 200895c:	b881a226 	beq	r23,r2,2008fe8 <_dtoa_r+0x1490>
 2008960:	b7000044 	addi	fp,r22,1
 2008964:	b5c00005 	stb	r23,0(r22)
 2008968:	003f7406 	br	200873c <_dtoa_r+0xbe4>
 200896c:	00800e44 	movi	r2,57
 2008970:	b8819d26 	beq	r23,r2,2008fe8 <_dtoa_r+0x1490>
 2008974:	053ffa0e 	bge	zero,r20,2008960 <_dtoa_r+0xe08>
 2008978:	8dc00c44 	addi	r23,r17,49
 200897c:	003ff806 	br	2008960 <_dtoa_r+0xe08>
 2008980:	d9001617 	ldw	r4,88(sp)
 2008984:	a80b883a 	mov	r5,r21
 2008988:	04000044 	movi	r16,1
 200898c:	200a9140 	call	200a914 <_Bfree>
 2008990:	003edf06 	br	2008510 <_dtoa_r+0x9b8>
 2008994:	d9001617 	ldw	r4,88(sp)
 2008998:	980b883a 	mov	r5,r19
 200899c:	01800284 	movi	r6,10
 20089a0:	000f883a 	mov	r7,zero
 20089a4:	200b5c80 	call	200b5c8 <__multadd>
 20089a8:	1027883a 	mov	r19,r2
 20089ac:	d8800615 	stw	r2,24(sp)
 20089b0:	003ebb06 	br	20084a0 <_dtoa_r+0x948>
 20089b4:	d9801117 	ldw	r6,68(sp)
 20089b8:	d8800d17 	ldw	r2,52(sp)
 20089bc:	d8000915 	stw	zero,36(sp)
 20089c0:	308dc83a 	sub	r6,r6,r2
 20089c4:	0087c83a 	sub	r3,zero,r2
 20089c8:	d9801115 	stw	r6,68(sp)
 20089cc:	d8c01015 	stw	r3,64(sp)
 20089d0:	003cfe06 	br	2007dcc <_dtoa_r+0x274>
 20089d4:	018dc83a 	sub	r6,zero,r6
 20089d8:	d9801115 	stw	r6,68(sp)
 20089dc:	d8000a15 	stw	zero,40(sp)
 20089e0:	003cf306 	br	2007db0 <_dtoa_r+0x258>
 20089e4:	d9000d17 	ldw	r4,52(sp)
 20089e8:	2010e9c0 	call	2010e9c <__floatsidf>
 20089ec:	880b883a 	mov	r5,r17
 20089f0:	8009883a 	mov	r4,r16
 20089f4:	180f883a 	mov	r7,r3
 20089f8:	100d883a 	mov	r6,r2
 20089fc:	2010bf40 	call	2010bf4 <__nedf2>
 2008a00:	103ce126 	beq	r2,zero,2007d88 <_dtoa_r+0x230>
 2008a04:	d9800d17 	ldw	r6,52(sp)
 2008a08:	31bfffc4 	addi	r6,r6,-1
 2008a0c:	d9800d15 	stw	r6,52(sp)
 2008a10:	003cdd06 	br	2007d88 <_dtoa_r+0x230>
 2008a14:	d9000717 	ldw	r4,28(sp)
 2008a18:	900b883a 	mov	r5,r18
 2008a1c:	200aa700 	call	200aa70 <__mcmp>
 2008a20:	103e8d0e 	bge	r2,zero,2008458 <_dtoa_r+0x900>
 2008a24:	d9400717 	ldw	r5,28(sp)
 2008a28:	d9001617 	ldw	r4,88(sp)
 2008a2c:	01800284 	movi	r6,10
 2008a30:	000f883a 	mov	r7,zero
 2008a34:	200b5c80 	call	200b5c8 <__multadd>
 2008a38:	d9800d17 	ldw	r6,52(sp)
 2008a3c:	d8800715 	stw	r2,28(sp)
 2008a40:	31bfffc4 	addi	r6,r6,-1
 2008a44:	d9800d15 	stw	r6,52(sp)
 2008a48:	b001a71e 	bne	r22,zero,20090e8 <_dtoa_r+0x1590>
 2008a4c:	d8800e17 	ldw	r2,56(sp)
 2008a50:	d8800f15 	stw	r2,60(sp)
 2008a54:	003e8006 	br	2008458 <_dtoa_r+0x900>
 2008a58:	90800417 	ldw	r2,16(r18)
 2008a5c:	1085883a 	add	r2,r2,r2
 2008a60:	1085883a 	add	r2,r2,r2
 2008a64:	1485883a 	add	r2,r2,r18
 2008a68:	11000417 	ldw	r4,16(r2)
 2008a6c:	200a93c0 	call	200a93c <__hi0bits>
 2008a70:	00c00804 	movi	r3,32
 2008a74:	1887c83a 	sub	r3,r3,r2
 2008a78:	003e5a06 	br	20083e4 <_dtoa_r+0x88c>
 2008a7c:	d9400717 	ldw	r5,28(sp)
 2008a80:	d9801017 	ldw	r6,64(sp)
 2008a84:	d9001617 	ldw	r4,88(sp)
 2008a88:	200b6c80 	call	200b6c8 <__pow5mult>
 2008a8c:	d8800715 	stw	r2,28(sp)
 2008a90:	003e4306 	br	20083a0 <_dtoa_r+0x848>
 2008a94:	d9800f17 	ldw	r6,60(sp)
 2008a98:	d8800d17 	ldw	r2,52(sp)
 2008a9c:	d9800315 	stw	r6,12(sp)
 2008aa0:	d8800415 	stw	r2,16(sp)
 2008aa4:	d8c00b17 	ldw	r3,44(sp)
 2008aa8:	1805003a 	cmpeq	r2,r3,zero
 2008aac:	1000e21e 	bne	r2,zero,2008e38 <_dtoa_r+0x12e0>
 2008ab0:	d9000317 	ldw	r4,12(sp)
 2008ab4:	0005883a 	mov	r2,zero
 2008ab8:	00cff834 	movhi	r3,16352
 2008abc:	200c90fa 	slli	r6,r4,3
 2008ac0:	01008074 	movhi	r4,513
 2008ac4:	21179004 	addi	r4,r4,24128
 2008ac8:	180b883a 	mov	r5,r3
 2008acc:	310d883a 	add	r6,r6,r4
 2008ad0:	327fff17 	ldw	r9,-4(r6)
 2008ad4:	323ffe17 	ldw	r8,-8(r6)
 2008ad8:	1009883a 	mov	r4,r2
 2008adc:	480f883a 	mov	r7,r9
 2008ae0:	400d883a 	mov	r6,r8
 2008ae4:	2002c000 	call	2002c00 <__divdf3>
 2008ae8:	180b883a 	mov	r5,r3
 2008aec:	b00d883a 	mov	r6,r22
 2008af0:	b80f883a 	mov	r7,r23
 2008af4:	1009883a 	mov	r4,r2
 2008af8:	2010a780 	call	2010a78 <__subdf3>
 2008afc:	a80b883a 	mov	r5,r21
 2008b00:	a009883a 	mov	r4,r20
 2008b04:	d8c01915 	stw	r3,100(sp)
 2008b08:	d8801815 	stw	r2,96(sp)
 2008b0c:	2010f940 	call	2010f94 <__fixdfsi>
 2008b10:	1009883a 	mov	r4,r2
 2008b14:	1027883a 	mov	r19,r2
 2008b18:	2010e9c0 	call	2010e9c <__floatsidf>
 2008b1c:	a80b883a 	mov	r5,r21
 2008b20:	a009883a 	mov	r4,r20
 2008b24:	180f883a 	mov	r7,r3
 2008b28:	100d883a 	mov	r6,r2
 2008b2c:	2010a780 	call	2010a78 <__subdf3>
 2008b30:	d9801817 	ldw	r6,96(sp)
 2008b34:	1823883a 	mov	r17,r3
 2008b38:	d8801415 	stw	r2,80(sp)
 2008b3c:	302d883a 	mov	r22,r6
 2008b40:	d9800517 	ldw	r6,20(sp)
 2008b44:	9cc00c04 	addi	r19,r19,48
 2008b48:	dc401515 	stw	r17,84(sp)
 2008b4c:	d8c01917 	ldw	r3,100(sp)
 2008b50:	34c00005 	stb	r19,0(r6)
 2008b54:	d8800517 	ldw	r2,20(sp)
 2008b58:	d9401917 	ldw	r5,100(sp)
 2008b5c:	d9801417 	ldw	r6,80(sp)
 2008b60:	b009883a 	mov	r4,r22
 2008b64:	880f883a 	mov	r7,r17
 2008b68:	182f883a 	mov	r23,r3
 2008b6c:	17000044 	addi	fp,r2,1
 2008b70:	2010c7c0 	call	2010c7c <__gtdf2>
 2008b74:	00804e16 	blt	zero,r2,2008cb0 <_dtoa_r+0x1158>
 2008b78:	d9801417 	ldw	r6,80(sp)
 2008b7c:	0005883a 	mov	r2,zero
 2008b80:	00cffc34 	movhi	r3,16368
 2008b84:	180b883a 	mov	r5,r3
 2008b88:	880f883a 	mov	r7,r17
 2008b8c:	1009883a 	mov	r4,r2
 2008b90:	2010a780 	call	2010a78 <__subdf3>
 2008b94:	d9401917 	ldw	r5,100(sp)
 2008b98:	180f883a 	mov	r7,r3
 2008b9c:	b009883a 	mov	r4,r22
 2008ba0:	100d883a 	mov	r6,r2
 2008ba4:	2010c7c0 	call	2010c7c <__gtdf2>
 2008ba8:	00bda216 	blt	zero,r2,2008234 <_dtoa_r+0x6dc>
 2008bac:	d8c00317 	ldw	r3,12(sp)
 2008bb0:	00800044 	movi	r2,1
 2008bb4:	10c01216 	blt	r2,r3,2008c00 <_dtoa_r+0x10a8>
 2008bb8:	003d4506 	br	20080d0 <_dtoa_r+0x578>
 2008bbc:	d9801417 	ldw	r6,80(sp)
 2008bc0:	0005883a 	mov	r2,zero
 2008bc4:	00cffc34 	movhi	r3,16368
 2008bc8:	180b883a 	mov	r5,r3
 2008bcc:	880f883a 	mov	r7,r17
 2008bd0:	1009883a 	mov	r4,r2
 2008bd4:	2010a780 	call	2010a78 <__subdf3>
 2008bd8:	d9c01b17 	ldw	r7,108(sp)
 2008bdc:	180b883a 	mov	r5,r3
 2008be0:	1009883a 	mov	r4,r2
 2008be4:	b00d883a 	mov	r6,r22
 2008be8:	2010d8c0 	call	2010d8c <__ltdf2>
 2008bec:	103d9116 	blt	r2,zero,2008234 <_dtoa_r+0x6dc>
 2008bf0:	d9800517 	ldw	r6,20(sp)
 2008bf4:	d9000317 	ldw	r4,12(sp)
 2008bf8:	3105883a 	add	r2,r6,r4
 2008bfc:	e0bd3426 	beq	fp,r2,20080d0 <_dtoa_r+0x578>
 2008c00:	04500934 	movhi	r17,16420
 2008c04:	0021883a 	mov	r16,zero
 2008c08:	b80b883a 	mov	r5,r23
 2008c0c:	b009883a 	mov	r4,r22
 2008c10:	800d883a 	mov	r6,r16
 2008c14:	880f883a 	mov	r7,r17
 2008c18:	200283c0 	call	200283c <__muldf3>
 2008c1c:	d9401517 	ldw	r5,84(sp)
 2008c20:	d9001417 	ldw	r4,80(sp)
 2008c24:	880f883a 	mov	r7,r17
 2008c28:	000d883a 	mov	r6,zero
 2008c2c:	d8801a15 	stw	r2,104(sp)
 2008c30:	d8c01b15 	stw	r3,108(sp)
 2008c34:	200283c0 	call	200283c <__muldf3>
 2008c38:	180b883a 	mov	r5,r3
 2008c3c:	1009883a 	mov	r4,r2
 2008c40:	1823883a 	mov	r17,r3
 2008c44:	1021883a 	mov	r16,r2
 2008c48:	2010f940 	call	2010f94 <__fixdfsi>
 2008c4c:	1009883a 	mov	r4,r2
 2008c50:	102b883a 	mov	r21,r2
 2008c54:	2010e9c0 	call	2010e9c <__floatsidf>
 2008c58:	880b883a 	mov	r5,r17
 2008c5c:	8009883a 	mov	r4,r16
 2008c60:	180f883a 	mov	r7,r3
 2008c64:	100d883a 	mov	r6,r2
 2008c68:	2010a780 	call	2010a78 <__subdf3>
 2008c6c:	1021883a 	mov	r16,r2
 2008c70:	d9001b17 	ldw	r4,108(sp)
 2008c74:	1823883a 	mov	r17,r3
 2008c78:	dc001415 	stw	r16,80(sp)
 2008c7c:	ad400c04 	addi	r21,r21,48
 2008c80:	dc401515 	stw	r17,84(sp)
 2008c84:	d8801a17 	ldw	r2,104(sp)
 2008c88:	e5400005 	stb	r21,0(fp)
 2008c8c:	202f883a 	mov	r23,r4
 2008c90:	d9c01b17 	ldw	r7,108(sp)
 2008c94:	d9001417 	ldw	r4,80(sp)
 2008c98:	880b883a 	mov	r5,r17
 2008c9c:	100d883a 	mov	r6,r2
 2008ca0:	102d883a 	mov	r22,r2
 2008ca4:	e7000044 	addi	fp,fp,1
 2008ca8:	2010d8c0 	call	2010d8c <__ltdf2>
 2008cac:	103fc30e 	bge	r2,zero,2008bbc <_dtoa_r+0x1064>
 2008cb0:	d9000417 	ldw	r4,16(sp)
 2008cb4:	d9000d15 	stw	r4,52(sp)
 2008cb8:	003d7106 	br	2008280 <_dtoa_r+0x728>
 2008cbc:	d9801717 	ldw	r6,92(sp)
 2008cc0:	00800084 	movi	r2,2
 2008cc4:	11bde60e 	bge	r2,r6,2008460 <_dtoa_r+0x908>
 2008cc8:	203cfb1e 	bne	r4,zero,20080b8 <_dtoa_r+0x560>
 2008ccc:	d9001617 	ldw	r4,88(sp)
 2008cd0:	900b883a 	mov	r5,r18
 2008cd4:	01800144 	movi	r6,5
 2008cd8:	000f883a 	mov	r7,zero
 2008cdc:	200b5c80 	call	200b5c8 <__multadd>
 2008ce0:	d9000717 	ldw	r4,28(sp)
 2008ce4:	100b883a 	mov	r5,r2
 2008ce8:	1025883a 	mov	r18,r2
 2008cec:	200aa700 	call	200aa70 <__mcmp>
 2008cf0:	00bcf10e 	bge	zero,r2,20080b8 <_dtoa_r+0x560>
 2008cf4:	d8c00d17 	ldw	r3,52(sp)
 2008cf8:	d9000517 	ldw	r4,20(sp)
 2008cfc:	d8000615 	stw	zero,24(sp)
 2008d00:	18c00044 	addi	r3,r3,1
 2008d04:	d8c00d15 	stw	r3,52(sp)
 2008d08:	00800c44 	movi	r2,49
 2008d0c:	27000044 	addi	fp,r4,1
 2008d10:	20800005 	stb	r2,0(r4)
 2008d14:	003e8906 	br	200873c <_dtoa_r+0xbe4>
 2008d18:	d8c00517 	ldw	r3,20(sp)
 2008d1c:	003bc206 	br	2007c28 <_dtoa_r+0xd0>
 2008d20:	01808074 	movhi	r6,513
 2008d24:	3197c204 	addi	r6,r6,24328
 2008d28:	30c00917 	ldw	r3,36(r6)
 2008d2c:	30800817 	ldw	r2,32(r6)
 2008d30:	d9001217 	ldw	r4,72(sp)
 2008d34:	d9401317 	ldw	r5,76(sp)
 2008d38:	180f883a 	mov	r7,r3
 2008d3c:	100d883a 	mov	r6,r2
 2008d40:	2002c000 	call	2002c00 <__divdf3>
 2008d44:	948003cc 	andi	r18,r18,15
 2008d48:	058000c4 	movi	r22,3
 2008d4c:	1029883a 	mov	r20,r2
 2008d50:	182b883a 	mov	r21,r3
 2008d54:	003c8906 	br	2007f7c <_dtoa_r+0x424>
 2008d58:	d9001017 	ldw	r4,64(sp)
 2008d5c:	d9800917 	ldw	r6,36(sp)
 2008d60:	0025883a 	mov	r18,zero
 2008d64:	1105c83a 	sub	r2,r2,r4
 2008d68:	2089883a 	add	r4,r4,r2
 2008d6c:	308d883a 	add	r6,r6,r2
 2008d70:	d9001015 	stw	r4,64(sp)
 2008d74:	d9800915 	stw	r6,36(sp)
 2008d78:	003e3206 	br	2008644 <_dtoa_r+0xaec>
 2008d7c:	28800044 	addi	r2,r5,1
 2008d80:	27000044 	addi	fp,r4,1
 2008d84:	20800005 	stb	r2,0(r4)
 2008d88:	003e6c06 	br	200873c <_dtoa_r+0xbe4>
 2008d8c:	d8800f17 	ldw	r2,60(sp)
 2008d90:	00bce016 	blt	zero,r2,2008114 <_dtoa_r+0x5bc>
 2008d94:	d9800f17 	ldw	r6,60(sp)
 2008d98:	303cc51e 	bne	r6,zero,20080b0 <_dtoa_r+0x558>
 2008d9c:	0005883a 	mov	r2,zero
 2008da0:	00d00534 	movhi	r3,16404
 2008da4:	980b883a 	mov	r5,r19
 2008da8:	180f883a 	mov	r7,r3
 2008dac:	9009883a 	mov	r4,r18
 2008db0:	100d883a 	mov	r6,r2
 2008db4:	200283c0 	call	200283c <__muldf3>
 2008db8:	180b883a 	mov	r5,r3
 2008dbc:	a80f883a 	mov	r7,r21
 2008dc0:	1009883a 	mov	r4,r2
 2008dc4:	a00d883a 	mov	r6,r20
 2008dc8:	2010d040 	call	2010d04 <__gedf2>
 2008dcc:	103cb80e 	bge	r2,zero,20080b0 <_dtoa_r+0x558>
 2008dd0:	0027883a 	mov	r19,zero
 2008dd4:	0025883a 	mov	r18,zero
 2008dd8:	003fc606 	br	2008cf4 <_dtoa_r+0x119c>
 2008ddc:	99400117 	ldw	r5,4(r19)
 2008de0:	d9001617 	ldw	r4,88(sp)
 2008de4:	200ae940 	call	200ae94 <_Balloc>
 2008de8:	99800417 	ldw	r6,16(r19)
 2008dec:	11000304 	addi	r4,r2,12
 2008df0:	99400304 	addi	r5,r19,12
 2008df4:	318d883a 	add	r6,r6,r6
 2008df8:	318d883a 	add	r6,r6,r6
 2008dfc:	31800204 	addi	r6,r6,8
 2008e00:	1023883a 	mov	r17,r2
 2008e04:	200a6fc0 	call	200a6fc <memcpy>
 2008e08:	d9001617 	ldw	r4,88(sp)
 2008e0c:	880b883a 	mov	r5,r17
 2008e10:	01800044 	movi	r6,1
 2008e14:	200b2580 	call	200b258 <__lshift>
 2008e18:	100b883a 	mov	r5,r2
 2008e1c:	003d9c06 	br	2008490 <_dtoa_r+0x938>
 2008e20:	00800e44 	movi	r2,57
 2008e24:	b8807026 	beq	r23,r2,2008fe8 <_dtoa_r+0x1490>
 2008e28:	b8800044 	addi	r2,r23,1
 2008e2c:	b7000044 	addi	fp,r22,1
 2008e30:	b0800005 	stb	r2,0(r22)
 2008e34:	003e4106 	br	200873c <_dtoa_r+0xbe4>
 2008e38:	d8800317 	ldw	r2,12(sp)
 2008e3c:	01808074 	movhi	r6,513
 2008e40:	31979004 	addi	r6,r6,24128
 2008e44:	b009883a 	mov	r4,r22
 2008e48:	100e90fa 	slli	r7,r2,3
 2008e4c:	b80b883a 	mov	r5,r23
 2008e50:	398f883a 	add	r7,r7,r6
 2008e54:	38bffe17 	ldw	r2,-8(r7)
 2008e58:	d9800517 	ldw	r6,20(sp)
 2008e5c:	38ffff17 	ldw	r3,-4(r7)
 2008e60:	37000044 	addi	fp,r6,1
 2008e64:	180f883a 	mov	r7,r3
 2008e68:	100d883a 	mov	r6,r2
 2008e6c:	200283c0 	call	200283c <__muldf3>
 2008e70:	a80b883a 	mov	r5,r21
 2008e74:	a009883a 	mov	r4,r20
 2008e78:	182f883a 	mov	r23,r3
 2008e7c:	102d883a 	mov	r22,r2
 2008e80:	2010f940 	call	2010f94 <__fixdfsi>
 2008e84:	1009883a 	mov	r4,r2
 2008e88:	1027883a 	mov	r19,r2
 2008e8c:	2010e9c0 	call	2010e9c <__floatsidf>
 2008e90:	a80b883a 	mov	r5,r21
 2008e94:	a009883a 	mov	r4,r20
 2008e98:	180f883a 	mov	r7,r3
 2008e9c:	100d883a 	mov	r6,r2
 2008ea0:	2010a780 	call	2010a78 <__subdf3>
 2008ea4:	180b883a 	mov	r5,r3
 2008ea8:	d8c00517 	ldw	r3,20(sp)
 2008eac:	9cc00c04 	addi	r19,r19,48
 2008eb0:	1009883a 	mov	r4,r2
 2008eb4:	1cc00005 	stb	r19,0(r3)
 2008eb8:	2021883a 	mov	r16,r4
 2008ebc:	d9000317 	ldw	r4,12(sp)
 2008ec0:	00800044 	movi	r2,1
 2008ec4:	2823883a 	mov	r17,r5
 2008ec8:	20802226 	beq	r4,r2,2008f54 <_dtoa_r+0x13fc>
 2008ecc:	1029883a 	mov	r20,r2
 2008ed0:	0005883a 	mov	r2,zero
 2008ed4:	00d00934 	movhi	r3,16420
 2008ed8:	180f883a 	mov	r7,r3
 2008edc:	100d883a 	mov	r6,r2
 2008ee0:	880b883a 	mov	r5,r17
 2008ee4:	8009883a 	mov	r4,r16
 2008ee8:	200283c0 	call	200283c <__muldf3>
 2008eec:	180b883a 	mov	r5,r3
 2008ef0:	1009883a 	mov	r4,r2
 2008ef4:	1823883a 	mov	r17,r3
 2008ef8:	1021883a 	mov	r16,r2
 2008efc:	2010f940 	call	2010f94 <__fixdfsi>
 2008f00:	1009883a 	mov	r4,r2
 2008f04:	102b883a 	mov	r21,r2
 2008f08:	2010e9c0 	call	2010e9c <__floatsidf>
 2008f0c:	880b883a 	mov	r5,r17
 2008f10:	8009883a 	mov	r4,r16
 2008f14:	180f883a 	mov	r7,r3
 2008f18:	100d883a 	mov	r6,r2
 2008f1c:	2010a780 	call	2010a78 <__subdf3>
 2008f20:	180b883a 	mov	r5,r3
 2008f24:	d8c00517 	ldw	r3,20(sp)
 2008f28:	1009883a 	mov	r4,r2
 2008f2c:	ad400c04 	addi	r21,r21,48
 2008f30:	1d05883a 	add	r2,r3,r20
 2008f34:	15400005 	stb	r21,0(r2)
 2008f38:	2021883a 	mov	r16,r4
 2008f3c:	d9000317 	ldw	r4,12(sp)
 2008f40:	a5000044 	addi	r20,r20,1
 2008f44:	2823883a 	mov	r17,r5
 2008f48:	a13fe11e 	bne	r20,r4,2008ed0 <_dtoa_r+0x1378>
 2008f4c:	e505883a 	add	r2,fp,r20
 2008f50:	173fffc4 	addi	fp,r2,-1
 2008f54:	0025883a 	mov	r18,zero
 2008f58:	04cff834 	movhi	r19,16352
 2008f5c:	b009883a 	mov	r4,r22
 2008f60:	b80b883a 	mov	r5,r23
 2008f64:	900d883a 	mov	r6,r18
 2008f68:	980f883a 	mov	r7,r19
 2008f6c:	2010af80 	call	2010af8 <__adddf3>
 2008f70:	180b883a 	mov	r5,r3
 2008f74:	1009883a 	mov	r4,r2
 2008f78:	800d883a 	mov	r6,r16
 2008f7c:	880f883a 	mov	r7,r17
 2008f80:	2010d8c0 	call	2010d8c <__ltdf2>
 2008f84:	103cab16 	blt	r2,zero,2008234 <_dtoa_r+0x6dc>
 2008f88:	0009883a 	mov	r4,zero
 2008f8c:	980b883a 	mov	r5,r19
 2008f90:	b80f883a 	mov	r7,r23
 2008f94:	b00d883a 	mov	r6,r22
 2008f98:	2010a780 	call	2010a78 <__subdf3>
 2008f9c:	180b883a 	mov	r5,r3
 2008fa0:	880f883a 	mov	r7,r17
 2008fa4:	1009883a 	mov	r4,r2
 2008fa8:	800d883a 	mov	r6,r16
 2008fac:	2010c7c0 	call	2010c7c <__gtdf2>
 2008fb0:	00bc470e 	bge	zero,r2,20080d0 <_dtoa_r+0x578>
 2008fb4:	00c00c04 	movi	r3,48
 2008fb8:	e73fffc4 	addi	fp,fp,-1
 2008fbc:	e0800007 	ldb	r2,0(fp)
 2008fc0:	10fffd26 	beq	r2,r3,2008fb8 <_dtoa_r+0x1460>
 2008fc4:	d9800417 	ldw	r6,16(sp)
 2008fc8:	e7000044 	addi	fp,fp,1
 2008fcc:	d9800d15 	stw	r6,52(sp)
 2008fd0:	003cab06 	br	2008280 <_dtoa_r+0x728>
 2008fd4:	d8c00f17 	ldw	r3,60(sp)
 2008fd8:	d9001117 	ldw	r4,68(sp)
 2008fdc:	20e1c83a 	sub	r16,r4,r3
 2008fe0:	0007883a 	mov	r3,zero
 2008fe4:	003d9b06 	br	2008654 <_dtoa_r+0xafc>
 2008fe8:	00800e44 	movi	r2,57
 2008fec:	b0800005 	stb	r2,0(r22)
 2008ff0:	b5800044 	addi	r22,r22,1
 2008ff4:	003dc106 	br	20086fc <_dtoa_r+0xba4>
 2008ff8:	05800084 	movi	r22,2
 2008ffc:	003bf706 	br	2007fdc <_dtoa_r+0x484>
 2009000:	d9000f17 	ldw	r4,60(sp)
 2009004:	013c000e 	bge	zero,r4,2008008 <_dtoa_r+0x4b0>
 2009008:	d9800e17 	ldw	r6,56(sp)
 200900c:	01bc300e 	bge	zero,r6,20080d0 <_dtoa_r+0x578>
 2009010:	0005883a 	mov	r2,zero
 2009014:	00d00934 	movhi	r3,16420
 2009018:	a80b883a 	mov	r5,r21
 200901c:	180f883a 	mov	r7,r3
 2009020:	a009883a 	mov	r4,r20
 2009024:	100d883a 	mov	r6,r2
 2009028:	200283c0 	call	200283c <__muldf3>
 200902c:	b1000044 	addi	r4,r22,1
 2009030:	1021883a 	mov	r16,r2
 2009034:	1823883a 	mov	r17,r3
 2009038:	2010e9c0 	call	2010e9c <__floatsidf>
 200903c:	880b883a 	mov	r5,r17
 2009040:	8009883a 	mov	r4,r16
 2009044:	180f883a 	mov	r7,r3
 2009048:	100d883a 	mov	r6,r2
 200904c:	200283c0 	call	200283c <__muldf3>
 2009050:	0011883a 	mov	r8,zero
 2009054:	02500734 	movhi	r9,16412
 2009058:	180b883a 	mov	r5,r3
 200905c:	480f883a 	mov	r7,r9
 2009060:	1009883a 	mov	r4,r2
 2009064:	400d883a 	mov	r6,r8
 2009068:	2010af80 	call	2010af8 <__adddf3>
 200906c:	102d883a 	mov	r22,r2
 2009070:	00bf3034 	movhi	r2,64704
 2009074:	10ef883a 	add	r23,r2,r3
 2009078:	d8800d17 	ldw	r2,52(sp)
 200907c:	d8c00e17 	ldw	r3,56(sp)
 2009080:	8029883a 	mov	r20,r16
 2009084:	10bfffc4 	addi	r2,r2,-1
 2009088:	882b883a 	mov	r21,r17
 200908c:	d8800415 	stw	r2,16(sp)
 2009090:	d8c00315 	stw	r3,12(sp)
 2009094:	003e8306 	br	2008aa4 <_dtoa_r+0xf4c>
 2009098:	d8800117 	ldw	r2,4(sp)
 200909c:	dc001117 	ldw	r16,68(sp)
 20090a0:	dc801017 	ldw	r18,64(sp)
 20090a4:	00c00d84 	movi	r3,54
 20090a8:	1887c83a 	sub	r3,r3,r2
 20090ac:	003d6906 	br	2008654 <_dtoa_r+0xafc>
 20090b0:	01800044 	movi	r6,1
 20090b4:	3021883a 	mov	r16,r6
 20090b8:	d9800f15 	stw	r6,60(sp)
 20090bc:	d9802615 	stw	r6,152(sp)
 20090c0:	d9800e15 	stw	r6,56(sp)
 20090c4:	003b9306 	br	2007f14 <_dtoa_r+0x3bc>
 20090c8:	b021883a 	mov	r16,r22
 20090cc:	dd800f15 	stw	r22,60(sp)
 20090d0:	003b9006 	br	2007f14 <_dtoa_r+0x3bc>
 20090d4:	103e221e 	bne	r2,zero,2008960 <_dtoa_r+0xe08>
 20090d8:	b880004c 	andi	r2,r23,1
 20090dc:	1005003a 	cmpeq	r2,r2,zero
 20090e0:	103e1f1e 	bne	r2,zero,2008960 <_dtoa_r+0xe08>
 20090e4:	003e1b06 	br	2008954 <_dtoa_r+0xdfc>
 20090e8:	d9001617 	ldw	r4,88(sp)
 20090ec:	980b883a 	mov	r5,r19
 20090f0:	01800284 	movi	r6,10
 20090f4:	000f883a 	mov	r7,zero
 20090f8:	200b5c80 	call	200b5c8 <__multadd>
 20090fc:	d8c00e17 	ldw	r3,56(sp)
 2009100:	1027883a 	mov	r19,r2
 2009104:	d8c00f15 	stw	r3,60(sp)
 2009108:	003cd306 	br	2008458 <_dtoa_r+0x900>

0200910c <_fflush_r>:
 200910c:	defffb04 	addi	sp,sp,-20
 2009110:	dcc00315 	stw	r19,12(sp)
 2009114:	dc800215 	stw	r18,8(sp)
 2009118:	dfc00415 	stw	ra,16(sp)
 200911c:	dc400115 	stw	r17,4(sp)
 2009120:	dc000015 	stw	r16,0(sp)
 2009124:	2027883a 	mov	r19,r4
 2009128:	2825883a 	mov	r18,r5
 200912c:	20000226 	beq	r4,zero,2009138 <_fflush_r+0x2c>
 2009130:	20800e17 	ldw	r2,56(r4)
 2009134:	10005626 	beq	r2,zero,2009290 <_fflush_r+0x184>
 2009138:	9100030b 	ldhu	r4,12(r18)
 200913c:	20ffffcc 	andi	r3,r4,65535
 2009140:	18e0001c 	xori	r3,r3,32768
 2009144:	18e00004 	addi	r3,r3,-32768
 2009148:	1880020c 	andi	r2,r3,8
 200914c:	1000261e 	bne	r2,zero,20091e8 <_fflush_r+0xdc>
 2009150:	90c00117 	ldw	r3,4(r18)
 2009154:	20820014 	ori	r2,r4,2048
 2009158:	9080030d 	sth	r2,12(r18)
 200915c:	1009883a 	mov	r4,r2
 2009160:	00c0400e 	bge	zero,r3,2009264 <_fflush_r+0x158>
 2009164:	92000a17 	ldw	r8,40(r18)
 2009168:	40004026 	beq	r8,zero,200926c <_fflush_r+0x160>
 200916c:	2084000c 	andi	r2,r4,4096
 2009170:	10005326 	beq	r2,zero,20092c0 <_fflush_r+0x1b4>
 2009174:	94001417 	ldw	r16,80(r18)
 2009178:	9080030b 	ldhu	r2,12(r18)
 200917c:	1080010c 	andi	r2,r2,4
 2009180:	1000481e 	bne	r2,zero,20092a4 <_fflush_r+0x198>
 2009184:	91400717 	ldw	r5,28(r18)
 2009188:	9809883a 	mov	r4,r19
 200918c:	800d883a 	mov	r6,r16
 2009190:	000f883a 	mov	r7,zero
 2009194:	403ee83a 	callr	r8
 2009198:	8080261e 	bne	r16,r2,2009234 <_fflush_r+0x128>
 200919c:	9080030b 	ldhu	r2,12(r18)
 20091a0:	91000417 	ldw	r4,16(r18)
 20091a4:	90000115 	stw	zero,4(r18)
 20091a8:	10bdffcc 	andi	r2,r2,63487
 20091ac:	10ffffcc 	andi	r3,r2,65535
 20091b0:	18c4000c 	andi	r3,r3,4096
 20091b4:	9080030d 	sth	r2,12(r18)
 20091b8:	91000015 	stw	r4,0(r18)
 20091bc:	18002b26 	beq	r3,zero,200926c <_fflush_r+0x160>
 20091c0:	0007883a 	mov	r3,zero
 20091c4:	1805883a 	mov	r2,r3
 20091c8:	94001415 	stw	r16,80(r18)
 20091cc:	dfc00417 	ldw	ra,16(sp)
 20091d0:	dcc00317 	ldw	r19,12(sp)
 20091d4:	dc800217 	ldw	r18,8(sp)
 20091d8:	dc400117 	ldw	r17,4(sp)
 20091dc:	dc000017 	ldw	r16,0(sp)
 20091e0:	dec00504 	addi	sp,sp,20
 20091e4:	f800283a 	ret
 20091e8:	94400417 	ldw	r17,16(r18)
 20091ec:	88001f26 	beq	r17,zero,200926c <_fflush_r+0x160>
 20091f0:	90800017 	ldw	r2,0(r18)
 20091f4:	18c000cc 	andi	r3,r3,3
 20091f8:	94400015 	stw	r17,0(r18)
 20091fc:	1461c83a 	sub	r16,r2,r17
 2009200:	18002526 	beq	r3,zero,2009298 <_fflush_r+0x18c>
 2009204:	0005883a 	mov	r2,zero
 2009208:	90800215 	stw	r2,8(r18)
 200920c:	0400170e 	bge	zero,r16,200926c <_fflush_r+0x160>
 2009210:	90c00917 	ldw	r3,36(r18)
 2009214:	91400717 	ldw	r5,28(r18)
 2009218:	880d883a 	mov	r6,r17
 200921c:	800f883a 	mov	r7,r16
 2009220:	9809883a 	mov	r4,r19
 2009224:	183ee83a 	callr	r3
 2009228:	88a3883a 	add	r17,r17,r2
 200922c:	80a1c83a 	sub	r16,r16,r2
 2009230:	00bff616 	blt	zero,r2,200920c <_fflush_r+0x100>
 2009234:	9080030b 	ldhu	r2,12(r18)
 2009238:	00ffffc4 	movi	r3,-1
 200923c:	10801014 	ori	r2,r2,64
 2009240:	9080030d 	sth	r2,12(r18)
 2009244:	1805883a 	mov	r2,r3
 2009248:	dfc00417 	ldw	ra,16(sp)
 200924c:	dcc00317 	ldw	r19,12(sp)
 2009250:	dc800217 	ldw	r18,8(sp)
 2009254:	dc400117 	ldw	r17,4(sp)
 2009258:	dc000017 	ldw	r16,0(sp)
 200925c:	dec00504 	addi	sp,sp,20
 2009260:	f800283a 	ret
 2009264:	90800f17 	ldw	r2,60(r18)
 2009268:	00bfbe16 	blt	zero,r2,2009164 <_fflush_r+0x58>
 200926c:	0007883a 	mov	r3,zero
 2009270:	1805883a 	mov	r2,r3
 2009274:	dfc00417 	ldw	ra,16(sp)
 2009278:	dcc00317 	ldw	r19,12(sp)
 200927c:	dc800217 	ldw	r18,8(sp)
 2009280:	dc400117 	ldw	r17,4(sp)
 2009284:	dc000017 	ldw	r16,0(sp)
 2009288:	dec00504 	addi	sp,sp,20
 200928c:	f800283a 	ret
 2009290:	20093a40 	call	20093a4 <__sinit>
 2009294:	003fa806 	br	2009138 <_fflush_r+0x2c>
 2009298:	90800517 	ldw	r2,20(r18)
 200929c:	90800215 	stw	r2,8(r18)
 20092a0:	003fda06 	br	200920c <_fflush_r+0x100>
 20092a4:	90800117 	ldw	r2,4(r18)
 20092a8:	90c00c17 	ldw	r3,48(r18)
 20092ac:	80a1c83a 	sub	r16,r16,r2
 20092b0:	183fb426 	beq	r3,zero,2009184 <_fflush_r+0x78>
 20092b4:	90800f17 	ldw	r2,60(r18)
 20092b8:	80a1c83a 	sub	r16,r16,r2
 20092bc:	003fb106 	br	2009184 <_fflush_r+0x78>
 20092c0:	91400717 	ldw	r5,28(r18)
 20092c4:	9809883a 	mov	r4,r19
 20092c8:	000d883a 	mov	r6,zero
 20092cc:	01c00044 	movi	r7,1
 20092d0:	403ee83a 	callr	r8
 20092d4:	1021883a 	mov	r16,r2
 20092d8:	00bfffc4 	movi	r2,-1
 20092dc:	80800226 	beq	r16,r2,20092e8 <_fflush_r+0x1dc>
 20092e0:	92000a17 	ldw	r8,40(r18)
 20092e4:	003fa406 	br	2009178 <_fflush_r+0x6c>
 20092e8:	98c00017 	ldw	r3,0(r19)
 20092ec:	00800744 	movi	r2,29
 20092f0:	18bfde26 	beq	r3,r2,200926c <_fflush_r+0x160>
 20092f4:	9080030b 	ldhu	r2,12(r18)
 20092f8:	8007883a 	mov	r3,r16
 20092fc:	10801014 	ori	r2,r2,64
 2009300:	9080030d 	sth	r2,12(r18)
 2009304:	003fcf06 	br	2009244 <_fflush_r+0x138>

02009308 <fflush>:
 2009308:	01408074 	movhi	r5,513
 200930c:	29644304 	addi	r5,r5,-28404
 2009310:	2007883a 	mov	r3,r4
 2009314:	20000526 	beq	r4,zero,200932c <fflush+0x24>
 2009318:	00808074 	movhi	r2,513
 200931c:	109f0a04 	addi	r2,r2,31784
 2009320:	11000017 	ldw	r4,0(r2)
 2009324:	180b883a 	mov	r5,r3
 2009328:	200910c1 	jmpi	200910c <_fflush_r>
 200932c:	00808074 	movhi	r2,513
 2009330:	109f0b04 	addi	r2,r2,31788
 2009334:	11000017 	ldw	r4,0(r2)
 2009338:	200a1141 	jmpi	200a114 <_fwalk_reent>

0200933c <std>:
 200933c:	00808074 	movhi	r2,513
 2009340:	10b0ba04 	addi	r2,r2,-15640
 2009344:	20800b15 	stw	r2,44(r4)
 2009348:	00808074 	movhi	r2,513
 200934c:	10b0f504 	addi	r2,r2,-15404
 2009350:	20800815 	stw	r2,32(r4)
 2009354:	00c08074 	movhi	r3,513
 2009358:	18f0d604 	addi	r3,r3,-15528
 200935c:	00808074 	movhi	r2,513
 2009360:	10b0bc04 	addi	r2,r2,-15632
 2009364:	2140030d 	sth	r5,12(r4)
 2009368:	2180038d 	sth	r6,14(r4)
 200936c:	20c00915 	stw	r3,36(r4)
 2009370:	20800a15 	stw	r2,40(r4)
 2009374:	20000015 	stw	zero,0(r4)
 2009378:	20000115 	stw	zero,4(r4)
 200937c:	20000215 	stw	zero,8(r4)
 2009380:	20000415 	stw	zero,16(r4)
 2009384:	20000515 	stw	zero,20(r4)
 2009388:	20000615 	stw	zero,24(r4)
 200938c:	21000715 	stw	r4,28(r4)
 2009390:	f800283a 	ret

02009394 <__sfp_lock_acquire>:
 2009394:	f800283a 	ret

02009398 <__sfp_lock_release>:
 2009398:	f800283a 	ret

0200939c <__sinit_lock_acquire>:
 200939c:	f800283a 	ret

020093a0 <__sinit_lock_release>:
 20093a0:	f800283a 	ret

020093a4 <__sinit>:
 20093a4:	20800e17 	ldw	r2,56(r4)
 20093a8:	defffd04 	addi	sp,sp,-12
 20093ac:	dc400115 	stw	r17,4(sp)
 20093b0:	dc000015 	stw	r16,0(sp)
 20093b4:	dfc00215 	stw	ra,8(sp)
 20093b8:	04400044 	movi	r17,1
 20093bc:	01400104 	movi	r5,4
 20093c0:	000d883a 	mov	r6,zero
 20093c4:	2021883a 	mov	r16,r4
 20093c8:	2200bb04 	addi	r8,r4,748
 20093cc:	200f883a 	mov	r7,r4
 20093d0:	10000526 	beq	r2,zero,20093e8 <__sinit+0x44>
 20093d4:	dfc00217 	ldw	ra,8(sp)
 20093d8:	dc400117 	ldw	r17,4(sp)
 20093dc:	dc000017 	ldw	r16,0(sp)
 20093e0:	dec00304 	addi	sp,sp,12
 20093e4:	f800283a 	ret
 20093e8:	21000117 	ldw	r4,4(r4)
 20093ec:	00808074 	movhi	r2,513
 20093f0:	10a52204 	addi	r2,r2,-27512
 20093f4:	00c000c4 	movi	r3,3
 20093f8:	80800f15 	stw	r2,60(r16)
 20093fc:	80c0b915 	stw	r3,740(r16)
 2009400:	8200ba15 	stw	r8,744(r16)
 2009404:	84400e15 	stw	r17,56(r16)
 2009408:	8000b815 	stw	zero,736(r16)
 200940c:	200933c0 	call	200933c <std>
 2009410:	81000217 	ldw	r4,8(r16)
 2009414:	880d883a 	mov	r6,r17
 2009418:	800f883a 	mov	r7,r16
 200941c:	01400284 	movi	r5,10
 2009420:	200933c0 	call	200933c <std>
 2009424:	81000317 	ldw	r4,12(r16)
 2009428:	800f883a 	mov	r7,r16
 200942c:	01400484 	movi	r5,18
 2009430:	01800084 	movi	r6,2
 2009434:	dfc00217 	ldw	ra,8(sp)
 2009438:	dc400117 	ldw	r17,4(sp)
 200943c:	dc000017 	ldw	r16,0(sp)
 2009440:	dec00304 	addi	sp,sp,12
 2009444:	200933c1 	jmpi	200933c <std>

02009448 <__fp_lock>:
 2009448:	0005883a 	mov	r2,zero
 200944c:	f800283a 	ret

02009450 <__fp_unlock>:
 2009450:	0005883a 	mov	r2,zero
 2009454:	f800283a 	ret

02009458 <__fp_unlock_all>:
 2009458:	00808074 	movhi	r2,513
 200945c:	109f0a04 	addi	r2,r2,31784
 2009460:	11000017 	ldw	r4,0(r2)
 2009464:	01408074 	movhi	r5,513
 2009468:	29651404 	addi	r5,r5,-27568
 200946c:	200a1dc1 	jmpi	200a1dc <_fwalk>

02009470 <__fp_lock_all>:
 2009470:	00808074 	movhi	r2,513
 2009474:	109f0a04 	addi	r2,r2,31784
 2009478:	11000017 	ldw	r4,0(r2)
 200947c:	01408074 	movhi	r5,513
 2009480:	29651204 	addi	r5,r5,-27576
 2009484:	200a1dc1 	jmpi	200a1dc <_fwalk>

02009488 <_cleanup_r>:
 2009488:	01408074 	movhi	r5,513
 200948c:	297ad804 	addi	r5,r5,-5280
 2009490:	200a1dc1 	jmpi	200a1dc <_fwalk>

02009494 <_cleanup>:
 2009494:	00808074 	movhi	r2,513
 2009498:	109f0b04 	addi	r2,r2,31788
 200949c:	11000017 	ldw	r4,0(r2)
 20094a0:	20094881 	jmpi	2009488 <_cleanup_r>

020094a4 <__sfmoreglue>:
 20094a4:	defffc04 	addi	sp,sp,-16
 20094a8:	dc400115 	stw	r17,4(sp)
 20094ac:	2c401724 	muli	r17,r5,92
 20094b0:	dc800215 	stw	r18,8(sp)
 20094b4:	2825883a 	mov	r18,r5
 20094b8:	89400304 	addi	r5,r17,12
 20094bc:	dc000015 	stw	r16,0(sp)
 20094c0:	dfc00315 	stw	ra,12(sp)
 20094c4:	20037900 	call	2003790 <_malloc_r>
 20094c8:	0021883a 	mov	r16,zero
 20094cc:	880d883a 	mov	r6,r17
 20094d0:	000b883a 	mov	r5,zero
 20094d4:	10000626 	beq	r2,zero,20094f0 <__sfmoreglue+0x4c>
 20094d8:	11000304 	addi	r4,r2,12
 20094dc:	14800115 	stw	r18,4(r2)
 20094e0:	10000015 	stw	zero,0(r2)
 20094e4:	11000215 	stw	r4,8(r2)
 20094e8:	1021883a 	mov	r16,r2
 20094ec:	200a87c0 	call	200a87c <memset>
 20094f0:	8005883a 	mov	r2,r16
 20094f4:	dfc00317 	ldw	ra,12(sp)
 20094f8:	dc800217 	ldw	r18,8(sp)
 20094fc:	dc400117 	ldw	r17,4(sp)
 2009500:	dc000017 	ldw	r16,0(sp)
 2009504:	dec00404 	addi	sp,sp,16
 2009508:	f800283a 	ret

0200950c <__sfp>:
 200950c:	defffd04 	addi	sp,sp,-12
 2009510:	00808074 	movhi	r2,513
 2009514:	109f0b04 	addi	r2,r2,31788
 2009518:	dc000015 	stw	r16,0(sp)
 200951c:	14000017 	ldw	r16,0(r2)
 2009520:	dc400115 	stw	r17,4(sp)
 2009524:	dfc00215 	stw	ra,8(sp)
 2009528:	80800e17 	ldw	r2,56(r16)
 200952c:	2023883a 	mov	r17,r4
 2009530:	10002626 	beq	r2,zero,20095cc <__sfp+0xc0>
 2009534:	8400b804 	addi	r16,r16,736
 2009538:	80800117 	ldw	r2,4(r16)
 200953c:	81000217 	ldw	r4,8(r16)
 2009540:	10ffffc4 	addi	r3,r2,-1
 2009544:	18000916 	blt	r3,zero,200956c <__sfp+0x60>
 2009548:	2080030f 	ldh	r2,12(r4)
 200954c:	10000b26 	beq	r2,zero,200957c <__sfp+0x70>
 2009550:	017fffc4 	movi	r5,-1
 2009554:	00000206 	br	2009560 <__sfp+0x54>
 2009558:	2080030f 	ldh	r2,12(r4)
 200955c:	10000726 	beq	r2,zero,200957c <__sfp+0x70>
 2009560:	18ffffc4 	addi	r3,r3,-1
 2009564:	21001704 	addi	r4,r4,92
 2009568:	197ffb1e 	bne	r3,r5,2009558 <__sfp+0x4c>
 200956c:	80800017 	ldw	r2,0(r16)
 2009570:	10001926 	beq	r2,zero,20095d8 <__sfp+0xcc>
 2009574:	1021883a 	mov	r16,r2
 2009578:	003fef06 	br	2009538 <__sfp+0x2c>
 200957c:	00bfffc4 	movi	r2,-1
 2009580:	00c00044 	movi	r3,1
 2009584:	2080038d 	sth	r2,14(r4)
 2009588:	20c0030d 	sth	r3,12(r4)
 200958c:	20000015 	stw	zero,0(r4)
 2009590:	20000215 	stw	zero,8(r4)
 2009594:	20000115 	stw	zero,4(r4)
 2009598:	20000415 	stw	zero,16(r4)
 200959c:	20000515 	stw	zero,20(r4)
 20095a0:	20000615 	stw	zero,24(r4)
 20095a4:	20000c15 	stw	zero,48(r4)
 20095a8:	20000d15 	stw	zero,52(r4)
 20095ac:	20001115 	stw	zero,68(r4)
 20095b0:	20001215 	stw	zero,72(r4)
 20095b4:	2005883a 	mov	r2,r4
 20095b8:	dfc00217 	ldw	ra,8(sp)
 20095bc:	dc400117 	ldw	r17,4(sp)
 20095c0:	dc000017 	ldw	r16,0(sp)
 20095c4:	dec00304 	addi	sp,sp,12
 20095c8:	f800283a 	ret
 20095cc:	8009883a 	mov	r4,r16
 20095d0:	20093a40 	call	20093a4 <__sinit>
 20095d4:	003fd706 	br	2009534 <__sfp+0x28>
 20095d8:	8809883a 	mov	r4,r17
 20095dc:	01400104 	movi	r5,4
 20095e0:	20094a40 	call	20094a4 <__sfmoreglue>
 20095e4:	80800015 	stw	r2,0(r16)
 20095e8:	103fe21e 	bne	r2,zero,2009574 <__sfp+0x68>
 20095ec:	00800304 	movi	r2,12
 20095f0:	0009883a 	mov	r4,zero
 20095f4:	88800015 	stw	r2,0(r17)
 20095f8:	003fee06 	br	20095b4 <__sfp+0xa8>

020095fc <_fread_r>:
 20095fc:	defff504 	addi	sp,sp,-44
 2009600:	ddc00815 	stw	r23,32(sp)
 2009604:	39af383a 	mul	r23,r7,r6
 2009608:	df000915 	stw	fp,36(sp)
 200960c:	dd800715 	stw	r22,28(sp)
 2009610:	dcc00415 	stw	r19,16(sp)
 2009614:	dc000115 	stw	r16,4(sp)
 2009618:	dfc00a15 	stw	ra,40(sp)
 200961c:	dd400615 	stw	r21,24(sp)
 2009620:	dd000515 	stw	r20,20(sp)
 2009624:	dc800315 	stw	r18,12(sp)
 2009628:	dc400215 	stw	r17,8(sp)
 200962c:	d9800015 	stw	r6,0(sp)
 2009630:	3839883a 	mov	fp,r7
 2009634:	2821883a 	mov	r16,r5
 2009638:	202d883a 	mov	r22,r4
 200963c:	dcc00b17 	ldw	r19,44(sp)
 2009640:	b8005926 	beq	r23,zero,20097a8 <_fread_r+0x1ac>
 2009644:	20000226 	beq	r4,zero,2009650 <_fread_r+0x54>
 2009648:	20800e17 	ldw	r2,56(r4)
 200964c:	10005826 	beq	r2,zero,20097b0 <_fread_r+0x1b4>
 2009650:	9c400117 	ldw	r17,4(r19)
 2009654:	88005916 	blt	r17,zero,20097bc <_fread_r+0x1c0>
 2009658:	9880030b 	ldhu	r2,12(r19)
 200965c:	8029883a 	mov	r20,r16
 2009660:	1080008c 	andi	r2,r2,2
 2009664:	1000221e 	bne	r2,zero,20096f0 <_fread_r+0xf4>
 2009668:	b825883a 	mov	r18,r23
 200966c:	00000106 	br	2009674 <_fread_r+0x78>
 2009670:	9c400117 	ldw	r17,4(r19)
 2009674:	a009883a 	mov	r4,r20
 2009678:	880d883a 	mov	r6,r17
 200967c:	8c80542e 	bgeu	r17,r18,20097d0 <_fread_r+0x1d4>
 2009680:	99400017 	ldw	r5,0(r19)
 2009684:	a469883a 	add	r20,r20,r17
 2009688:	9465c83a 	sub	r18,r18,r17
 200968c:	200a6fc0 	call	200a6fc <memcpy>
 2009690:	98800017 	ldw	r2,0(r19)
 2009694:	b009883a 	mov	r4,r22
 2009698:	980b883a 	mov	r5,r19
 200969c:	1461883a 	add	r16,r2,r17
 20096a0:	9c000015 	stw	r16,0(r19)
 20096a4:	200befc0 	call	200befc <__srefill_r>
 20096a8:	103ff126 	beq	r2,zero,2009670 <_fread_r+0x74>
 20096ac:	d9400017 	ldw	r5,0(sp)
 20096b0:	bc89c83a 	sub	r4,r23,r18
 20096b4:	2002fcc0 	call	2002fcc <__udivsi3>
 20096b8:	1039883a 	mov	fp,r2
 20096bc:	e005883a 	mov	r2,fp
 20096c0:	dfc00a17 	ldw	ra,40(sp)
 20096c4:	df000917 	ldw	fp,36(sp)
 20096c8:	ddc00817 	ldw	r23,32(sp)
 20096cc:	dd800717 	ldw	r22,28(sp)
 20096d0:	dd400617 	ldw	r21,24(sp)
 20096d4:	dd000517 	ldw	r20,20(sp)
 20096d8:	dcc00417 	ldw	r19,16(sp)
 20096dc:	dc800317 	ldw	r18,12(sp)
 20096e0:	dc400217 	ldw	r17,8(sp)
 20096e4:	dc000117 	ldw	r16,4(sp)
 20096e8:	dec00b04 	addi	sp,sp,44
 20096ec:	f800283a 	ret
 20096f0:	b825883a 	mov	r18,r23
 20096f4:	8dc03436 	bltu	r17,r23,20097c8 <_fread_r+0x1cc>
 20096f8:	99400017 	ldw	r5,0(r19)
 20096fc:	a009883a 	mov	r4,r20
 2009700:	900d883a 	mov	r6,r18
 2009704:	200a6fc0 	call	200a6fc <memcpy>
 2009708:	9c000017 	ldw	r16,0(r19)
 200970c:	98800117 	ldw	r2,4(r19)
 2009710:	99400c17 	ldw	r5,48(r19)
 2009714:	84a1883a 	add	r16,r16,r18
 2009718:	14a3c83a 	sub	r17,r2,r18
 200971c:	a4ab883a 	add	r21,r20,r18
 2009720:	9c400115 	stw	r17,4(r19)
 2009724:	9c000015 	stw	r16,0(r19)
 2009728:	bca9c83a 	sub	r20,r23,r18
 200972c:	28000826 	beq	r5,zero,2009750 <_fread_r+0x154>
 2009730:	a03fe226 	beq	r20,zero,20096bc <_fread_r+0xc0>
 2009734:	98801004 	addi	r2,r19,64
 2009738:	28800326 	beq	r5,r2,2009748 <_fread_r+0x14c>
 200973c:	b009883a 	mov	r4,r22
 2009740:	20099640 	call	2009964 <_free_r>
 2009744:	9c000017 	ldw	r16,0(r19)
 2009748:	98000c15 	stw	zero,48(r19)
 200974c:	00000106 	br	2009754 <_fread_r+0x158>
 2009750:	a03fda26 	beq	r20,zero,20096bc <_fread_r+0xc0>
 2009754:	9c800417 	ldw	r18,16(r19)
 2009758:	9c400517 	ldw	r17,20(r19)
 200975c:	9d400015 	stw	r21,0(r19)
 2009760:	9d400415 	stw	r21,16(r19)
 2009764:	9d000515 	stw	r20,20(r19)
 2009768:	b009883a 	mov	r4,r22
 200976c:	980b883a 	mov	r5,r19
 2009770:	200befc0 	call	200befc <__srefill_r>
 2009774:	98c00117 	ldw	r3,4(r19)
 2009778:	9c800415 	stw	r18,16(r19)
 200977c:	9c400515 	stw	r17,20(r19)
 2009780:	a8eb883a 	add	r21,r21,r3
 2009784:	9c000015 	stw	r16,0(r19)
 2009788:	a0e9c83a 	sub	r20,r20,r3
 200978c:	98000115 	stw	zero,4(r19)
 2009790:	103fef26 	beq	r2,zero,2009750 <_fread_r+0x154>
 2009794:	d9400017 	ldw	r5,0(sp)
 2009798:	bd09c83a 	sub	r4,r23,r20
 200979c:	2002fcc0 	call	2002fcc <__udivsi3>
 20097a0:	1039883a 	mov	fp,r2
 20097a4:	003fc506 	br	20096bc <_fread_r+0xc0>
 20097a8:	0039883a 	mov	fp,zero
 20097ac:	003fc306 	br	20096bc <_fread_r+0xc0>
 20097b0:	20093a40 	call	20093a4 <__sinit>
 20097b4:	9c400117 	ldw	r17,4(r19)
 20097b8:	883fa70e 	bge	r17,zero,2009658 <_fread_r+0x5c>
 20097bc:	0023883a 	mov	r17,zero
 20097c0:	98000115 	stw	zero,4(r19)
 20097c4:	003fa406 	br	2009658 <_fread_r+0x5c>
 20097c8:	8825883a 	mov	r18,r17
 20097cc:	003fca06 	br	20096f8 <_fread_r+0xfc>
 20097d0:	99400017 	ldw	r5,0(r19)
 20097d4:	900d883a 	mov	r6,r18
 20097d8:	200a6fc0 	call	200a6fc <memcpy>
 20097dc:	98c00117 	ldw	r3,4(r19)
 20097e0:	98800017 	ldw	r2,0(r19)
 20097e4:	1c87c83a 	sub	r3,r3,r18
 20097e8:	1485883a 	add	r2,r2,r18
 20097ec:	98800015 	stw	r2,0(r19)
 20097f0:	98c00115 	stw	r3,4(r19)
 20097f4:	003fb106 	br	20096bc <_fread_r+0xc0>

020097f8 <fread>:
 20097f8:	00808074 	movhi	r2,513
 20097fc:	109f0a04 	addi	r2,r2,31784
 2009800:	2017883a 	mov	r11,r4
 2009804:	11000017 	ldw	r4,0(r2)
 2009808:	defffe04 	addi	sp,sp,-8
 200980c:	3013883a 	mov	r9,r6
 2009810:	2805883a 	mov	r2,r5
 2009814:	d9c00015 	stw	r7,0(sp)
 2009818:	580b883a 	mov	r5,r11
 200981c:	100d883a 	mov	r6,r2
 2009820:	480f883a 	mov	r7,r9
 2009824:	dfc00115 	stw	ra,4(sp)
 2009828:	20095fc0 	call	20095fc <_fread_r>
 200982c:	dfc00117 	ldw	ra,4(sp)
 2009830:	dec00204 	addi	sp,sp,8
 2009834:	f800283a 	ret

02009838 <_malloc_trim_r>:
 2009838:	defffb04 	addi	sp,sp,-20
 200983c:	dcc00315 	stw	r19,12(sp)
 2009840:	04c08074 	movhi	r19,513
 2009844:	9cd84404 	addi	r19,r19,24848
 2009848:	dc800215 	stw	r18,8(sp)
 200984c:	dc400115 	stw	r17,4(sp)
 2009850:	dc000015 	stw	r16,0(sp)
 2009854:	2823883a 	mov	r17,r5
 2009858:	2025883a 	mov	r18,r4
 200985c:	dfc00415 	stw	ra,16(sp)
 2009860:	2011de00 	call	2011de0 <__malloc_lock>
 2009864:	98800217 	ldw	r2,8(r19)
 2009868:	9009883a 	mov	r4,r18
 200986c:	000b883a 	mov	r5,zero
 2009870:	10c00117 	ldw	r3,4(r2)
 2009874:	00bfff04 	movi	r2,-4
 2009878:	18a0703a 	and	r16,r3,r2
 200987c:	8463c83a 	sub	r17,r16,r17
 2009880:	8c43fbc4 	addi	r17,r17,4079
 2009884:	8822d33a 	srli	r17,r17,12
 2009888:	0083ffc4 	movi	r2,4095
 200988c:	8c7fffc4 	addi	r17,r17,-1
 2009890:	8822933a 	slli	r17,r17,12
 2009894:	1440060e 	bge	r2,r17,20098b0 <_malloc_trim_r+0x78>
 2009898:	2003ffc0 	call	2003ffc <_sbrk_r>
 200989c:	98c00217 	ldw	r3,8(r19)
 20098a0:	9009883a 	mov	r4,r18
 20098a4:	044bc83a 	sub	r5,zero,r17
 20098a8:	80c7883a 	add	r3,r16,r3
 20098ac:	10c00926 	beq	r2,r3,20098d4 <_malloc_trim_r+0x9c>
 20098b0:	2011e000 	call	2011e00 <__malloc_unlock>
 20098b4:	0005883a 	mov	r2,zero
 20098b8:	dfc00417 	ldw	ra,16(sp)
 20098bc:	dcc00317 	ldw	r19,12(sp)
 20098c0:	dc800217 	ldw	r18,8(sp)
 20098c4:	dc400117 	ldw	r17,4(sp)
 20098c8:	dc000017 	ldw	r16,0(sp)
 20098cc:	dec00504 	addi	sp,sp,20
 20098d0:	f800283a 	ret
 20098d4:	9009883a 	mov	r4,r18
 20098d8:	2003ffc0 	call	2003ffc <_sbrk_r>
 20098dc:	844dc83a 	sub	r6,r16,r17
 20098e0:	00ffffc4 	movi	r3,-1
 20098e4:	9009883a 	mov	r4,r18
 20098e8:	000b883a 	mov	r5,zero
 20098ec:	01c080b4 	movhi	r7,514
 20098f0:	39e64604 	addi	r7,r7,-26344
 20098f4:	31800054 	ori	r6,r6,1
 20098f8:	10c00926 	beq	r2,r3,2009920 <_malloc_trim_r+0xe8>
 20098fc:	38800017 	ldw	r2,0(r7)
 2009900:	98c00217 	ldw	r3,8(r19)
 2009904:	9009883a 	mov	r4,r18
 2009908:	1445c83a 	sub	r2,r2,r17
 200990c:	38800015 	stw	r2,0(r7)
 2009910:	19800115 	stw	r6,4(r3)
 2009914:	2011e000 	call	2011e00 <__malloc_unlock>
 2009918:	00800044 	movi	r2,1
 200991c:	003fe606 	br	20098b8 <_malloc_trim_r+0x80>
 2009920:	2003ffc0 	call	2003ffc <_sbrk_r>
 2009924:	99800217 	ldw	r6,8(r19)
 2009928:	100f883a 	mov	r7,r2
 200992c:	9009883a 	mov	r4,r18
 2009930:	1187c83a 	sub	r3,r2,r6
 2009934:	008003c4 	movi	r2,15
 2009938:	19400054 	ori	r5,r3,1
 200993c:	10ffdc0e 	bge	r2,r3,20098b0 <_malloc_trim_r+0x78>
 2009940:	00808074 	movhi	r2,513
 2009944:	109f0804 	addi	r2,r2,31776
 2009948:	10c00017 	ldw	r3,0(r2)
 200994c:	008080b4 	movhi	r2,514
 2009950:	10a64604 	addi	r2,r2,-26344
 2009954:	31400115 	stw	r5,4(r6)
 2009958:	38c7c83a 	sub	r3,r7,r3
 200995c:	10c00015 	stw	r3,0(r2)
 2009960:	003fd306 	br	20098b0 <_malloc_trim_r+0x78>

02009964 <_free_r>:
 2009964:	defffd04 	addi	sp,sp,-12
 2009968:	dc400115 	stw	r17,4(sp)
 200996c:	dc000015 	stw	r16,0(sp)
 2009970:	dfc00215 	stw	ra,8(sp)
 2009974:	2821883a 	mov	r16,r5
 2009978:	2023883a 	mov	r17,r4
 200997c:	28005a26 	beq	r5,zero,2009ae8 <_free_r+0x184>
 2009980:	2011de00 	call	2011de0 <__malloc_lock>
 2009984:	823ffe04 	addi	r8,r16,-8
 2009988:	41400117 	ldw	r5,4(r8)
 200998c:	00bfff84 	movi	r2,-2
 2009990:	02808074 	movhi	r10,513
 2009994:	52984404 	addi	r10,r10,24848
 2009998:	288e703a 	and	r7,r5,r2
 200999c:	41cd883a 	add	r6,r8,r7
 20099a0:	30c00117 	ldw	r3,4(r6)
 20099a4:	51000217 	ldw	r4,8(r10)
 20099a8:	00bfff04 	movi	r2,-4
 20099ac:	1892703a 	and	r9,r3,r2
 20099b0:	5017883a 	mov	r11,r10
 20099b4:	31006726 	beq	r6,r4,2009b54 <_free_r+0x1f0>
 20099b8:	2880004c 	andi	r2,r5,1
 20099bc:	1005003a 	cmpeq	r2,r2,zero
 20099c0:	32400115 	stw	r9,4(r6)
 20099c4:	10001a1e 	bne	r2,zero,2009a30 <_free_r+0xcc>
 20099c8:	000b883a 	mov	r5,zero
 20099cc:	3247883a 	add	r3,r6,r9
 20099d0:	18800117 	ldw	r2,4(r3)
 20099d4:	1080004c 	andi	r2,r2,1
 20099d8:	1000231e 	bne	r2,zero,2009a68 <_free_r+0x104>
 20099dc:	280ac03a 	cmpne	r5,r5,zero
 20099e0:	3a4f883a 	add	r7,r7,r9
 20099e4:	2800451e 	bne	r5,zero,2009afc <_free_r+0x198>
 20099e8:	31000217 	ldw	r4,8(r6)
 20099ec:	00808074 	movhi	r2,513
 20099f0:	10984604 	addi	r2,r2,24856
 20099f4:	20807b26 	beq	r4,r2,2009be4 <_free_r+0x280>
 20099f8:	30800317 	ldw	r2,12(r6)
 20099fc:	3a07883a 	add	r3,r7,r8
 2009a00:	19c00015 	stw	r7,0(r3)
 2009a04:	11000215 	stw	r4,8(r2)
 2009a08:	20800315 	stw	r2,12(r4)
 2009a0c:	38800054 	ori	r2,r7,1
 2009a10:	40800115 	stw	r2,4(r8)
 2009a14:	28001a26 	beq	r5,zero,2009a80 <_free_r+0x11c>
 2009a18:	8809883a 	mov	r4,r17
 2009a1c:	dfc00217 	ldw	ra,8(sp)
 2009a20:	dc400117 	ldw	r17,4(sp)
 2009a24:	dc000017 	ldw	r16,0(sp)
 2009a28:	dec00304 	addi	sp,sp,12
 2009a2c:	2011e001 	jmpi	2011e00 <__malloc_unlock>
 2009a30:	80bffe17 	ldw	r2,-8(r16)
 2009a34:	50c00204 	addi	r3,r10,8
 2009a38:	4091c83a 	sub	r8,r8,r2
 2009a3c:	41000217 	ldw	r4,8(r8)
 2009a40:	388f883a 	add	r7,r7,r2
 2009a44:	20c06126 	beq	r4,r3,2009bcc <_free_r+0x268>
 2009a48:	40800317 	ldw	r2,12(r8)
 2009a4c:	3247883a 	add	r3,r6,r9
 2009a50:	000b883a 	mov	r5,zero
 2009a54:	11000215 	stw	r4,8(r2)
 2009a58:	20800315 	stw	r2,12(r4)
 2009a5c:	18800117 	ldw	r2,4(r3)
 2009a60:	1080004c 	andi	r2,r2,1
 2009a64:	103fdd26 	beq	r2,zero,20099dc <_free_r+0x78>
 2009a68:	38800054 	ori	r2,r7,1
 2009a6c:	3a07883a 	add	r3,r7,r8
 2009a70:	280ac03a 	cmpne	r5,r5,zero
 2009a74:	40800115 	stw	r2,4(r8)
 2009a78:	19c00015 	stw	r7,0(r3)
 2009a7c:	283fe61e 	bne	r5,zero,2009a18 <_free_r+0xb4>
 2009a80:	00807fc4 	movi	r2,511
 2009a84:	11c01f2e 	bgeu	r2,r7,2009b04 <_free_r+0x1a0>
 2009a88:	3806d27a 	srli	r3,r7,9
 2009a8c:	1800481e 	bne	r3,zero,2009bb0 <_free_r+0x24c>
 2009a90:	3804d0fa 	srli	r2,r7,3
 2009a94:	100690fa 	slli	r3,r2,3
 2009a98:	1acd883a 	add	r6,r3,r11
 2009a9c:	31400217 	ldw	r5,8(r6)
 2009aa0:	31405926 	beq	r6,r5,2009c08 <_free_r+0x2a4>
 2009aa4:	28800117 	ldw	r2,4(r5)
 2009aa8:	00ffff04 	movi	r3,-4
 2009aac:	10c4703a 	and	r2,r2,r3
 2009ab0:	3880022e 	bgeu	r7,r2,2009abc <_free_r+0x158>
 2009ab4:	29400217 	ldw	r5,8(r5)
 2009ab8:	317ffa1e 	bne	r6,r5,2009aa4 <_free_r+0x140>
 2009abc:	29800317 	ldw	r6,12(r5)
 2009ac0:	41800315 	stw	r6,12(r8)
 2009ac4:	41400215 	stw	r5,8(r8)
 2009ac8:	8809883a 	mov	r4,r17
 2009acc:	2a000315 	stw	r8,12(r5)
 2009ad0:	32000215 	stw	r8,8(r6)
 2009ad4:	dfc00217 	ldw	ra,8(sp)
 2009ad8:	dc400117 	ldw	r17,4(sp)
 2009adc:	dc000017 	ldw	r16,0(sp)
 2009ae0:	dec00304 	addi	sp,sp,12
 2009ae4:	2011e001 	jmpi	2011e00 <__malloc_unlock>
 2009ae8:	dfc00217 	ldw	ra,8(sp)
 2009aec:	dc400117 	ldw	r17,4(sp)
 2009af0:	dc000017 	ldw	r16,0(sp)
 2009af4:	dec00304 	addi	sp,sp,12
 2009af8:	f800283a 	ret
 2009afc:	31000217 	ldw	r4,8(r6)
 2009b00:	003fbd06 	br	20099f8 <_free_r+0x94>
 2009b04:	3806d0fa 	srli	r3,r7,3
 2009b08:	00800044 	movi	r2,1
 2009b0c:	51400117 	ldw	r5,4(r10)
 2009b10:	180890fa 	slli	r4,r3,3
 2009b14:	1807d0ba 	srai	r3,r3,2
 2009b18:	22c9883a 	add	r4,r4,r11
 2009b1c:	21800217 	ldw	r6,8(r4)
 2009b20:	10c4983a 	sll	r2,r2,r3
 2009b24:	41000315 	stw	r4,12(r8)
 2009b28:	41800215 	stw	r6,8(r8)
 2009b2c:	288ab03a 	or	r5,r5,r2
 2009b30:	22000215 	stw	r8,8(r4)
 2009b34:	8809883a 	mov	r4,r17
 2009b38:	51400115 	stw	r5,4(r10)
 2009b3c:	32000315 	stw	r8,12(r6)
 2009b40:	dfc00217 	ldw	ra,8(sp)
 2009b44:	dc400117 	ldw	r17,4(sp)
 2009b48:	dc000017 	ldw	r16,0(sp)
 2009b4c:	dec00304 	addi	sp,sp,12
 2009b50:	2011e001 	jmpi	2011e00 <__malloc_unlock>
 2009b54:	2880004c 	andi	r2,r5,1
 2009b58:	3a4d883a 	add	r6,r7,r9
 2009b5c:	1000071e 	bne	r2,zero,2009b7c <_free_r+0x218>
 2009b60:	80bffe17 	ldw	r2,-8(r16)
 2009b64:	4091c83a 	sub	r8,r8,r2
 2009b68:	41000317 	ldw	r4,12(r8)
 2009b6c:	40c00217 	ldw	r3,8(r8)
 2009b70:	308d883a 	add	r6,r6,r2
 2009b74:	20c00215 	stw	r3,8(r4)
 2009b78:	19000315 	stw	r4,12(r3)
 2009b7c:	00808074 	movhi	r2,513
 2009b80:	109f0704 	addi	r2,r2,31772
 2009b84:	11000017 	ldw	r4,0(r2)
 2009b88:	30c00054 	ori	r3,r6,1
 2009b8c:	52000215 	stw	r8,8(r10)
 2009b90:	40c00115 	stw	r3,4(r8)
 2009b94:	313fa036 	bltu	r6,r4,2009a18 <_free_r+0xb4>
 2009b98:	008080b4 	movhi	r2,514
 2009b9c:	10a63904 	addi	r2,r2,-26396
 2009ba0:	11400017 	ldw	r5,0(r2)
 2009ba4:	8809883a 	mov	r4,r17
 2009ba8:	20098380 	call	2009838 <_malloc_trim_r>
 2009bac:	003f9a06 	br	2009a18 <_free_r+0xb4>
 2009bb0:	00800104 	movi	r2,4
 2009bb4:	10c0072e 	bgeu	r2,r3,2009bd4 <_free_r+0x270>
 2009bb8:	00800504 	movi	r2,20
 2009bbc:	10c01936 	bltu	r2,r3,2009c24 <_free_r+0x2c0>
 2009bc0:	188016c4 	addi	r2,r3,91
 2009bc4:	100690fa 	slli	r3,r2,3
 2009bc8:	003fb306 	br	2009a98 <_free_r+0x134>
 2009bcc:	01400044 	movi	r5,1
 2009bd0:	003f7e06 	br	20099cc <_free_r+0x68>
 2009bd4:	3804d1ba 	srli	r2,r7,6
 2009bd8:	10800e04 	addi	r2,r2,56
 2009bdc:	100690fa 	slli	r3,r2,3
 2009be0:	003fad06 	br	2009a98 <_free_r+0x134>
 2009be4:	22000315 	stw	r8,12(r4)
 2009be8:	22000215 	stw	r8,8(r4)
 2009bec:	3a05883a 	add	r2,r7,r8
 2009bf0:	38c00054 	ori	r3,r7,1
 2009bf4:	11c00015 	stw	r7,0(r2)
 2009bf8:	41000215 	stw	r4,8(r8)
 2009bfc:	40c00115 	stw	r3,4(r8)
 2009c00:	41000315 	stw	r4,12(r8)
 2009c04:	003f8406 	br	2009a18 <_free_r+0xb4>
 2009c08:	1005d0ba 	srai	r2,r2,2
 2009c0c:	00c00044 	movi	r3,1
 2009c10:	51000117 	ldw	r4,4(r10)
 2009c14:	1886983a 	sll	r3,r3,r2
 2009c18:	20c8b03a 	or	r4,r4,r3
 2009c1c:	51000115 	stw	r4,4(r10)
 2009c20:	003fa706 	br	2009ac0 <_free_r+0x15c>
 2009c24:	00801504 	movi	r2,84
 2009c28:	10c00436 	bltu	r2,r3,2009c3c <_free_r+0x2d8>
 2009c2c:	3804d33a 	srli	r2,r7,12
 2009c30:	10801b84 	addi	r2,r2,110
 2009c34:	100690fa 	slli	r3,r2,3
 2009c38:	003f9706 	br	2009a98 <_free_r+0x134>
 2009c3c:	00805504 	movi	r2,340
 2009c40:	10c00436 	bltu	r2,r3,2009c54 <_free_r+0x2f0>
 2009c44:	3804d3fa 	srli	r2,r7,15
 2009c48:	10801dc4 	addi	r2,r2,119
 2009c4c:	100690fa 	slli	r3,r2,3
 2009c50:	003f9106 	br	2009a98 <_free_r+0x134>
 2009c54:	00815504 	movi	r2,1364
 2009c58:	10c0032e 	bgeu	r2,r3,2009c68 <_free_r+0x304>
 2009c5c:	00801f84 	movi	r2,126
 2009c60:	00c0fc04 	movi	r3,1008
 2009c64:	003f8c06 	br	2009a98 <_free_r+0x134>
 2009c68:	3804d4ba 	srli	r2,r7,18
 2009c6c:	10801f04 	addi	r2,r2,124
 2009c70:	100690fa 	slli	r3,r2,3
 2009c74:	003f8806 	br	2009a98 <_free_r+0x134>

02009c78 <__sfvwrite_r>:
 2009c78:	30800217 	ldw	r2,8(r6)
 2009c7c:	defff504 	addi	sp,sp,-44
 2009c80:	df000915 	stw	fp,36(sp)
 2009c84:	dd800715 	stw	r22,28(sp)
 2009c88:	dc800315 	stw	r18,12(sp)
 2009c8c:	dfc00a15 	stw	ra,40(sp)
 2009c90:	ddc00815 	stw	r23,32(sp)
 2009c94:	dd400615 	stw	r21,24(sp)
 2009c98:	dd000515 	stw	r20,20(sp)
 2009c9c:	dcc00415 	stw	r19,16(sp)
 2009ca0:	dc400215 	stw	r17,8(sp)
 2009ca4:	dc000115 	stw	r16,4(sp)
 2009ca8:	302d883a 	mov	r22,r6
 2009cac:	2039883a 	mov	fp,r4
 2009cb0:	2825883a 	mov	r18,r5
 2009cb4:	10001c26 	beq	r2,zero,2009d28 <__sfvwrite_r+0xb0>
 2009cb8:	29c0030b 	ldhu	r7,12(r5)
 2009cbc:	3880020c 	andi	r2,r7,8
 2009cc0:	10002726 	beq	r2,zero,2009d60 <__sfvwrite_r+0xe8>
 2009cc4:	28800417 	ldw	r2,16(r5)
 2009cc8:	10002526 	beq	r2,zero,2009d60 <__sfvwrite_r+0xe8>
 2009ccc:	3880008c 	andi	r2,r7,2
 2009cd0:	b5400017 	ldw	r21,0(r22)
 2009cd4:	10002826 	beq	r2,zero,2009d78 <__sfvwrite_r+0x100>
 2009cd8:	0021883a 	mov	r16,zero
 2009cdc:	0023883a 	mov	r17,zero
 2009ce0:	880d883a 	mov	r6,r17
 2009ce4:	e009883a 	mov	r4,fp
 2009ce8:	00810004 	movi	r2,1024
 2009cec:	80006e26 	beq	r16,zero,2009ea8 <__sfvwrite_r+0x230>
 2009cf0:	800f883a 	mov	r7,r16
 2009cf4:	91400717 	ldw	r5,28(r18)
 2009cf8:	1400012e 	bgeu	r2,r16,2009d00 <__sfvwrite_r+0x88>
 2009cfc:	100f883a 	mov	r7,r2
 2009d00:	90c00917 	ldw	r3,36(r18)
 2009d04:	183ee83a 	callr	r3
 2009d08:	1007883a 	mov	r3,r2
 2009d0c:	80a1c83a 	sub	r16,r16,r2
 2009d10:	88a3883a 	add	r17,r17,r2
 2009d14:	00806d0e 	bge	zero,r2,2009ecc <__sfvwrite_r+0x254>
 2009d18:	b0800217 	ldw	r2,8(r22)
 2009d1c:	10c5c83a 	sub	r2,r2,r3
 2009d20:	b0800215 	stw	r2,8(r22)
 2009d24:	103fee1e 	bne	r2,zero,2009ce0 <__sfvwrite_r+0x68>
 2009d28:	0009883a 	mov	r4,zero
 2009d2c:	2005883a 	mov	r2,r4
 2009d30:	dfc00a17 	ldw	ra,40(sp)
 2009d34:	df000917 	ldw	fp,36(sp)
 2009d38:	ddc00817 	ldw	r23,32(sp)
 2009d3c:	dd800717 	ldw	r22,28(sp)
 2009d40:	dd400617 	ldw	r21,24(sp)
 2009d44:	dd000517 	ldw	r20,20(sp)
 2009d48:	dcc00417 	ldw	r19,16(sp)
 2009d4c:	dc800317 	ldw	r18,12(sp)
 2009d50:	dc400217 	ldw	r17,8(sp)
 2009d54:	dc000117 	ldw	r16,4(sp)
 2009d58:	dec00b04 	addi	sp,sp,44
 2009d5c:	f800283a 	ret
 2009d60:	20078040 	call	2007804 <__swsetup_r>
 2009d64:	1000e41e 	bne	r2,zero,200a0f8 <__sfvwrite_r+0x480>
 2009d68:	91c0030b 	ldhu	r7,12(r18)
 2009d6c:	b5400017 	ldw	r21,0(r22)
 2009d70:	3880008c 	andi	r2,r7,2
 2009d74:	103fd81e 	bne	r2,zero,2009cd8 <__sfvwrite_r+0x60>
 2009d78:	3880004c 	andi	r2,r7,1
 2009d7c:	1005003a 	cmpeq	r2,r2,zero
 2009d80:	10005726 	beq	r2,zero,2009ee0 <__sfvwrite_r+0x268>
 2009d84:	0029883a 	mov	r20,zero
 2009d88:	002f883a 	mov	r23,zero
 2009d8c:	a0004226 	beq	r20,zero,2009e98 <__sfvwrite_r+0x220>
 2009d90:	3880800c 	andi	r2,r7,512
 2009d94:	94000217 	ldw	r16,8(r18)
 2009d98:	10008b26 	beq	r2,zero,2009fc8 <__sfvwrite_r+0x350>
 2009d9c:	800d883a 	mov	r6,r16
 2009da0:	a400a536 	bltu	r20,r16,200a038 <__sfvwrite_r+0x3c0>
 2009da4:	3881200c 	andi	r2,r7,1152
 2009da8:	10002726 	beq	r2,zero,2009e48 <__sfvwrite_r+0x1d0>
 2009dac:	90800517 	ldw	r2,20(r18)
 2009db0:	92000417 	ldw	r8,16(r18)
 2009db4:	91400017 	ldw	r5,0(r18)
 2009db8:	1087883a 	add	r3,r2,r2
 2009dbc:	1887883a 	add	r3,r3,r2
 2009dc0:	1808d7fa 	srli	r4,r3,31
 2009dc4:	2a21c83a 	sub	r16,r5,r8
 2009dc8:	80800044 	addi	r2,r16,1
 2009dcc:	20c9883a 	add	r4,r4,r3
 2009dd0:	2027d07a 	srai	r19,r4,1
 2009dd4:	a085883a 	add	r2,r20,r2
 2009dd8:	980d883a 	mov	r6,r19
 2009ddc:	9880022e 	bgeu	r19,r2,2009de8 <__sfvwrite_r+0x170>
 2009de0:	1027883a 	mov	r19,r2
 2009de4:	100d883a 	mov	r6,r2
 2009de8:	3881000c 	andi	r2,r7,1024
 2009dec:	1000b826 	beq	r2,zero,200a0d0 <__sfvwrite_r+0x458>
 2009df0:	300b883a 	mov	r5,r6
 2009df4:	e009883a 	mov	r4,fp
 2009df8:	20037900 	call	2003790 <_malloc_r>
 2009dfc:	10003126 	beq	r2,zero,2009ec4 <__sfvwrite_r+0x24c>
 2009e00:	91400417 	ldw	r5,16(r18)
 2009e04:	1009883a 	mov	r4,r2
 2009e08:	800d883a 	mov	r6,r16
 2009e0c:	1023883a 	mov	r17,r2
 2009e10:	200a6fc0 	call	200a6fc <memcpy>
 2009e14:	90c0030b 	ldhu	r3,12(r18)
 2009e18:	00beffc4 	movi	r2,-1025
 2009e1c:	1886703a 	and	r3,r3,r2
 2009e20:	18c02014 	ori	r3,r3,128
 2009e24:	90c0030d 	sth	r3,12(r18)
 2009e28:	9c07c83a 	sub	r3,r19,r16
 2009e2c:	8c05883a 	add	r2,r17,r16
 2009e30:	a00d883a 	mov	r6,r20
 2009e34:	a021883a 	mov	r16,r20
 2009e38:	90800015 	stw	r2,0(r18)
 2009e3c:	90c00215 	stw	r3,8(r18)
 2009e40:	94400415 	stw	r17,16(r18)
 2009e44:	94c00515 	stw	r19,20(r18)
 2009e48:	91000017 	ldw	r4,0(r18)
 2009e4c:	b80b883a 	mov	r5,r23
 2009e50:	a023883a 	mov	r17,r20
 2009e54:	200a79c0 	call	200a79c <memmove>
 2009e58:	90c00217 	ldw	r3,8(r18)
 2009e5c:	90800017 	ldw	r2,0(r18)
 2009e60:	a027883a 	mov	r19,r20
 2009e64:	1c07c83a 	sub	r3,r3,r16
 2009e68:	1405883a 	add	r2,r2,r16
 2009e6c:	90c00215 	stw	r3,8(r18)
 2009e70:	a021883a 	mov	r16,r20
 2009e74:	90800015 	stw	r2,0(r18)
 2009e78:	b0800217 	ldw	r2,8(r22)
 2009e7c:	1405c83a 	sub	r2,r2,r16
 2009e80:	b0800215 	stw	r2,8(r22)
 2009e84:	103fa826 	beq	r2,zero,2009d28 <__sfvwrite_r+0xb0>
 2009e88:	a469c83a 	sub	r20,r20,r17
 2009e8c:	91c0030b 	ldhu	r7,12(r18)
 2009e90:	bcef883a 	add	r23,r23,r19
 2009e94:	a03fbe1e 	bne	r20,zero,2009d90 <__sfvwrite_r+0x118>
 2009e98:	adc00017 	ldw	r23,0(r21)
 2009e9c:	ad000117 	ldw	r20,4(r21)
 2009ea0:	ad400204 	addi	r21,r21,8
 2009ea4:	003fb906 	br	2009d8c <__sfvwrite_r+0x114>
 2009ea8:	ac400017 	ldw	r17,0(r21)
 2009eac:	ac000117 	ldw	r16,4(r21)
 2009eb0:	ad400204 	addi	r21,r21,8
 2009eb4:	003f8a06 	br	2009ce0 <__sfvwrite_r+0x68>
 2009eb8:	91400417 	ldw	r5,16(r18)
 2009ebc:	e009883a 	mov	r4,fp
 2009ec0:	20099640 	call	2009964 <_free_r>
 2009ec4:	00800304 	movi	r2,12
 2009ec8:	e0800015 	stw	r2,0(fp)
 2009ecc:	9080030b 	ldhu	r2,12(r18)
 2009ed0:	013fffc4 	movi	r4,-1
 2009ed4:	10801014 	ori	r2,r2,64
 2009ed8:	9080030d 	sth	r2,12(r18)
 2009edc:	003f9306 	br	2009d2c <__sfvwrite_r+0xb4>
 2009ee0:	0027883a 	mov	r19,zero
 2009ee4:	002f883a 	mov	r23,zero
 2009ee8:	d8000015 	stw	zero,0(sp)
 2009eec:	0029883a 	mov	r20,zero
 2009ef0:	98001e26 	beq	r19,zero,2009f6c <__sfvwrite_r+0x2f4>
 2009ef4:	d8c00017 	ldw	r3,0(sp)
 2009ef8:	1804c03a 	cmpne	r2,r3,zero
 2009efc:	10005e26 	beq	r2,zero,200a078 <__sfvwrite_r+0x400>
 2009f00:	9821883a 	mov	r16,r19
 2009f04:	a4c0012e 	bgeu	r20,r19,2009f0c <__sfvwrite_r+0x294>
 2009f08:	a021883a 	mov	r16,r20
 2009f0c:	91000017 	ldw	r4,0(r18)
 2009f10:	90800417 	ldw	r2,16(r18)
 2009f14:	91800217 	ldw	r6,8(r18)
 2009f18:	91c00517 	ldw	r7,20(r18)
 2009f1c:	1100022e 	bgeu	r2,r4,2009f28 <__sfvwrite_r+0x2b0>
 2009f20:	31e3883a 	add	r17,r6,r7
 2009f24:	8c001616 	blt	r17,r16,2009f80 <__sfvwrite_r+0x308>
 2009f28:	81c03816 	blt	r16,r7,200a00c <__sfvwrite_r+0x394>
 2009f2c:	90c00917 	ldw	r3,36(r18)
 2009f30:	91400717 	ldw	r5,28(r18)
 2009f34:	e009883a 	mov	r4,fp
 2009f38:	b80d883a 	mov	r6,r23
 2009f3c:	183ee83a 	callr	r3
 2009f40:	1023883a 	mov	r17,r2
 2009f44:	00bfe10e 	bge	zero,r2,2009ecc <__sfvwrite_r+0x254>
 2009f48:	a469c83a 	sub	r20,r20,r17
 2009f4c:	a0001826 	beq	r20,zero,2009fb0 <__sfvwrite_r+0x338>
 2009f50:	b0800217 	ldw	r2,8(r22)
 2009f54:	1445c83a 	sub	r2,r2,r17
 2009f58:	b0800215 	stw	r2,8(r22)
 2009f5c:	103f7226 	beq	r2,zero,2009d28 <__sfvwrite_r+0xb0>
 2009f60:	9c67c83a 	sub	r19,r19,r17
 2009f64:	bc6f883a 	add	r23,r23,r17
 2009f68:	983fe21e 	bne	r19,zero,2009ef4 <__sfvwrite_r+0x27c>
 2009f6c:	adc00017 	ldw	r23,0(r21)
 2009f70:	acc00117 	ldw	r19,4(r21)
 2009f74:	ad400204 	addi	r21,r21,8
 2009f78:	d8000015 	stw	zero,0(sp)
 2009f7c:	003fdc06 	br	2009ef0 <__sfvwrite_r+0x278>
 2009f80:	b80b883a 	mov	r5,r23
 2009f84:	880d883a 	mov	r6,r17
 2009f88:	200a79c0 	call	200a79c <memmove>
 2009f8c:	90c00017 	ldw	r3,0(r18)
 2009f90:	e009883a 	mov	r4,fp
 2009f94:	900b883a 	mov	r5,r18
 2009f98:	1c47883a 	add	r3,r3,r17
 2009f9c:	90c00015 	stw	r3,0(r18)
 2009fa0:	200910c0 	call	200910c <_fflush_r>
 2009fa4:	103fc91e 	bne	r2,zero,2009ecc <__sfvwrite_r+0x254>
 2009fa8:	a469c83a 	sub	r20,r20,r17
 2009fac:	a03fe81e 	bne	r20,zero,2009f50 <__sfvwrite_r+0x2d8>
 2009fb0:	e009883a 	mov	r4,fp
 2009fb4:	900b883a 	mov	r5,r18
 2009fb8:	200910c0 	call	200910c <_fflush_r>
 2009fbc:	103fc31e 	bne	r2,zero,2009ecc <__sfvwrite_r+0x254>
 2009fc0:	d8000015 	stw	zero,0(sp)
 2009fc4:	003fe206 	br	2009f50 <__sfvwrite_r+0x2d8>
 2009fc8:	91000017 	ldw	r4,0(r18)
 2009fcc:	90800417 	ldw	r2,16(r18)
 2009fd0:	1100022e 	bgeu	r2,r4,2009fdc <__sfvwrite_r+0x364>
 2009fd4:	8023883a 	mov	r17,r16
 2009fd8:	85003136 	bltu	r16,r20,200a0a0 <__sfvwrite_r+0x428>
 2009fdc:	91c00517 	ldw	r7,20(r18)
 2009fe0:	a1c01836 	bltu	r20,r7,200a044 <__sfvwrite_r+0x3cc>
 2009fe4:	90c00917 	ldw	r3,36(r18)
 2009fe8:	91400717 	ldw	r5,28(r18)
 2009fec:	e009883a 	mov	r4,fp
 2009ff0:	b80d883a 	mov	r6,r23
 2009ff4:	183ee83a 	callr	r3
 2009ff8:	1021883a 	mov	r16,r2
 2009ffc:	00bfb30e 	bge	zero,r2,2009ecc <__sfvwrite_r+0x254>
 200a000:	1023883a 	mov	r17,r2
 200a004:	1027883a 	mov	r19,r2
 200a008:	003f9b06 	br	2009e78 <__sfvwrite_r+0x200>
 200a00c:	b80b883a 	mov	r5,r23
 200a010:	800d883a 	mov	r6,r16
 200a014:	200a79c0 	call	200a79c <memmove>
 200a018:	90c00217 	ldw	r3,8(r18)
 200a01c:	90800017 	ldw	r2,0(r18)
 200a020:	8023883a 	mov	r17,r16
 200a024:	1c07c83a 	sub	r3,r3,r16
 200a028:	1405883a 	add	r2,r2,r16
 200a02c:	90c00215 	stw	r3,8(r18)
 200a030:	90800015 	stw	r2,0(r18)
 200a034:	003fc406 	br	2009f48 <__sfvwrite_r+0x2d0>
 200a038:	a00d883a 	mov	r6,r20
 200a03c:	a021883a 	mov	r16,r20
 200a040:	003f8106 	br	2009e48 <__sfvwrite_r+0x1d0>
 200a044:	b80b883a 	mov	r5,r23
 200a048:	a00d883a 	mov	r6,r20
 200a04c:	200a79c0 	call	200a79c <memmove>
 200a050:	90c00217 	ldw	r3,8(r18)
 200a054:	90800017 	ldw	r2,0(r18)
 200a058:	a021883a 	mov	r16,r20
 200a05c:	1d07c83a 	sub	r3,r3,r20
 200a060:	1505883a 	add	r2,r2,r20
 200a064:	a023883a 	mov	r17,r20
 200a068:	a027883a 	mov	r19,r20
 200a06c:	90c00215 	stw	r3,8(r18)
 200a070:	90800015 	stw	r2,0(r18)
 200a074:	003f8006 	br	2009e78 <__sfvwrite_r+0x200>
 200a078:	b809883a 	mov	r4,r23
 200a07c:	01400284 	movi	r5,10
 200a080:	980d883a 	mov	r6,r19
 200a084:	200a6180 	call	200a618 <memchr>
 200a088:	10001726 	beq	r2,zero,200a0e8 <__sfvwrite_r+0x470>
 200a08c:	15c5c83a 	sub	r2,r2,r23
 200a090:	15000044 	addi	r20,r2,1
 200a094:	00800044 	movi	r2,1
 200a098:	d8800015 	stw	r2,0(sp)
 200a09c:	003f9806 	br	2009f00 <__sfvwrite_r+0x288>
 200a0a0:	b80b883a 	mov	r5,r23
 200a0a4:	800d883a 	mov	r6,r16
 200a0a8:	200a79c0 	call	200a79c <memmove>
 200a0ac:	90c00017 	ldw	r3,0(r18)
 200a0b0:	e009883a 	mov	r4,fp
 200a0b4:	900b883a 	mov	r5,r18
 200a0b8:	1c07883a 	add	r3,r3,r16
 200a0bc:	90c00015 	stw	r3,0(r18)
 200a0c0:	8027883a 	mov	r19,r16
 200a0c4:	200910c0 	call	200910c <_fflush_r>
 200a0c8:	103f6b26 	beq	r2,zero,2009e78 <__sfvwrite_r+0x200>
 200a0cc:	003f7f06 	br	2009ecc <__sfvwrite_r+0x254>
 200a0d0:	400b883a 	mov	r5,r8
 200a0d4:	e009883a 	mov	r4,fp
 200a0d8:	200b9080 	call	200b908 <_realloc_r>
 200a0dc:	103f7626 	beq	r2,zero,2009eb8 <__sfvwrite_r+0x240>
 200a0e0:	1023883a 	mov	r17,r2
 200a0e4:	003f5006 	br	2009e28 <__sfvwrite_r+0x1b0>
 200a0e8:	00c00044 	movi	r3,1
 200a0ec:	9d000044 	addi	r20,r19,1
 200a0f0:	d8c00015 	stw	r3,0(sp)
 200a0f4:	003f8206 	br	2009f00 <__sfvwrite_r+0x288>
 200a0f8:	9080030b 	ldhu	r2,12(r18)
 200a0fc:	00c00244 	movi	r3,9
 200a100:	013fffc4 	movi	r4,-1
 200a104:	10801014 	ori	r2,r2,64
 200a108:	9080030d 	sth	r2,12(r18)
 200a10c:	e0c00015 	stw	r3,0(fp)
 200a110:	003f0606 	br	2009d2c <__sfvwrite_r+0xb4>

0200a114 <_fwalk_reent>:
 200a114:	defff704 	addi	sp,sp,-36
 200a118:	dcc00315 	stw	r19,12(sp)
 200a11c:	24c0b804 	addi	r19,r4,736
 200a120:	dd800615 	stw	r22,24(sp)
 200a124:	dd400515 	stw	r21,20(sp)
 200a128:	dfc00815 	stw	ra,32(sp)
 200a12c:	ddc00715 	stw	r23,28(sp)
 200a130:	dd000415 	stw	r20,16(sp)
 200a134:	dc800215 	stw	r18,8(sp)
 200a138:	dc400115 	stw	r17,4(sp)
 200a13c:	dc000015 	stw	r16,0(sp)
 200a140:	202b883a 	mov	r21,r4
 200a144:	282d883a 	mov	r22,r5
 200a148:	20093940 	call	2009394 <__sfp_lock_acquire>
 200a14c:	98002126 	beq	r19,zero,200a1d4 <_fwalk_reent+0xc0>
 200a150:	002f883a 	mov	r23,zero
 200a154:	9c800117 	ldw	r18,4(r19)
 200a158:	9c000217 	ldw	r16,8(r19)
 200a15c:	90bfffc4 	addi	r2,r18,-1
 200a160:	10000d16 	blt	r2,zero,200a198 <_fwalk_reent+0x84>
 200a164:	0023883a 	mov	r17,zero
 200a168:	053fffc4 	movi	r20,-1
 200a16c:	8080030f 	ldh	r2,12(r16)
 200a170:	8c400044 	addi	r17,r17,1
 200a174:	10000626 	beq	r2,zero,200a190 <_fwalk_reent+0x7c>
 200a178:	8080038f 	ldh	r2,14(r16)
 200a17c:	800b883a 	mov	r5,r16
 200a180:	a809883a 	mov	r4,r21
 200a184:	15000226 	beq	r2,r20,200a190 <_fwalk_reent+0x7c>
 200a188:	b03ee83a 	callr	r22
 200a18c:	b8aeb03a 	or	r23,r23,r2
 200a190:	84001704 	addi	r16,r16,92
 200a194:	947ff51e 	bne	r18,r17,200a16c <_fwalk_reent+0x58>
 200a198:	9cc00017 	ldw	r19,0(r19)
 200a19c:	983fed1e 	bne	r19,zero,200a154 <_fwalk_reent+0x40>
 200a1a0:	20093980 	call	2009398 <__sfp_lock_release>
 200a1a4:	b805883a 	mov	r2,r23
 200a1a8:	dfc00817 	ldw	ra,32(sp)
 200a1ac:	ddc00717 	ldw	r23,28(sp)
 200a1b0:	dd800617 	ldw	r22,24(sp)
 200a1b4:	dd400517 	ldw	r21,20(sp)
 200a1b8:	dd000417 	ldw	r20,16(sp)
 200a1bc:	dcc00317 	ldw	r19,12(sp)
 200a1c0:	dc800217 	ldw	r18,8(sp)
 200a1c4:	dc400117 	ldw	r17,4(sp)
 200a1c8:	dc000017 	ldw	r16,0(sp)
 200a1cc:	dec00904 	addi	sp,sp,36
 200a1d0:	f800283a 	ret
 200a1d4:	002f883a 	mov	r23,zero
 200a1d8:	003ff106 	br	200a1a0 <_fwalk_reent+0x8c>

0200a1dc <_fwalk>:
 200a1dc:	defff804 	addi	sp,sp,-32
 200a1e0:	dcc00315 	stw	r19,12(sp)
 200a1e4:	24c0b804 	addi	r19,r4,736
 200a1e8:	dd400515 	stw	r21,20(sp)
 200a1ec:	dfc00715 	stw	ra,28(sp)
 200a1f0:	dd800615 	stw	r22,24(sp)
 200a1f4:	dd000415 	stw	r20,16(sp)
 200a1f8:	dc800215 	stw	r18,8(sp)
 200a1fc:	dc400115 	stw	r17,4(sp)
 200a200:	dc000015 	stw	r16,0(sp)
 200a204:	282b883a 	mov	r21,r5
 200a208:	20093940 	call	2009394 <__sfp_lock_acquire>
 200a20c:	98001f26 	beq	r19,zero,200a28c <_fwalk+0xb0>
 200a210:	002d883a 	mov	r22,zero
 200a214:	9c800117 	ldw	r18,4(r19)
 200a218:	9c000217 	ldw	r16,8(r19)
 200a21c:	90bfffc4 	addi	r2,r18,-1
 200a220:	10000c16 	blt	r2,zero,200a254 <_fwalk+0x78>
 200a224:	0023883a 	mov	r17,zero
 200a228:	053fffc4 	movi	r20,-1
 200a22c:	8080030f 	ldh	r2,12(r16)
 200a230:	8c400044 	addi	r17,r17,1
 200a234:	10000526 	beq	r2,zero,200a24c <_fwalk+0x70>
 200a238:	8080038f 	ldh	r2,14(r16)
 200a23c:	8009883a 	mov	r4,r16
 200a240:	15000226 	beq	r2,r20,200a24c <_fwalk+0x70>
 200a244:	a83ee83a 	callr	r21
 200a248:	b0acb03a 	or	r22,r22,r2
 200a24c:	84001704 	addi	r16,r16,92
 200a250:	947ff61e 	bne	r18,r17,200a22c <_fwalk+0x50>
 200a254:	9cc00017 	ldw	r19,0(r19)
 200a258:	983fee1e 	bne	r19,zero,200a214 <_fwalk+0x38>
 200a25c:	20093980 	call	2009398 <__sfp_lock_release>
 200a260:	b005883a 	mov	r2,r22
 200a264:	dfc00717 	ldw	ra,28(sp)
 200a268:	dd800617 	ldw	r22,24(sp)
 200a26c:	dd400517 	ldw	r21,20(sp)
 200a270:	dd000417 	ldw	r20,16(sp)
 200a274:	dcc00317 	ldw	r19,12(sp)
 200a278:	dc800217 	ldw	r18,8(sp)
 200a27c:	dc400117 	ldw	r17,4(sp)
 200a280:	dc000017 	ldw	r16,0(sp)
 200a284:	dec00804 	addi	sp,sp,32
 200a288:	f800283a 	ret
 200a28c:	002d883a 	mov	r22,zero
 200a290:	003ff206 	br	200a25c <_fwalk+0x80>

0200a294 <iswspace>:
 200a294:	00803fc4 	movi	r2,255
 200a298:	0007883a 	mov	r3,zero
 200a29c:	11000636 	bltu	r2,r4,200a2b8 <iswspace+0x24>
 200a2a0:	00808074 	movhi	r2,513
 200a2a4:	109f0904 	addi	r2,r2,31780
 200a2a8:	10c00017 	ldw	r3,0(r2)
 200a2ac:	1907883a 	add	r3,r3,r4
 200a2b0:	18800003 	ldbu	r2,0(r3)
 200a2b4:	10c0020c 	andi	r3,r2,8
 200a2b8:	1805883a 	mov	r2,r3
 200a2bc:	f800283a 	ret

0200a2c0 <__locale_charset>:
 200a2c0:	d0a00617 	ldw	r2,-32744(gp)
 200a2c4:	f800283a 	ret

0200a2c8 <_localeconv_r>:
 200a2c8:	00808074 	movhi	r2,513
 200a2cc:	10978404 	addi	r2,r2,24080
 200a2d0:	f800283a 	ret

0200a2d4 <localeconv>:
 200a2d4:	00808074 	movhi	r2,513
 200a2d8:	109f0a04 	addi	r2,r2,31784
 200a2dc:	11000017 	ldw	r4,0(r2)
 200a2e0:	200a2c81 	jmpi	200a2c8 <_localeconv_r>

0200a2e4 <_setlocale_r>:
 200a2e4:	defffc04 	addi	sp,sp,-16
 200a2e8:	00c08074 	movhi	r3,513
 200a2ec:	18d77f04 	addi	r3,r3,24060
 200a2f0:	dc800215 	stw	r18,8(sp)
 200a2f4:	dc400115 	stw	r17,4(sp)
 200a2f8:	dc000015 	stw	r16,0(sp)
 200a2fc:	2023883a 	mov	r17,r4
 200a300:	2825883a 	mov	r18,r5
 200a304:	dfc00315 	stw	ra,12(sp)
 200a308:	3021883a 	mov	r16,r6
 200a30c:	3009883a 	mov	r4,r6
 200a310:	180b883a 	mov	r5,r3
 200a314:	30000926 	beq	r6,zero,200a33c <_setlocale_r+0x58>
 200a318:	200c4340 	call	200c434 <strcmp>
 200a31c:	8009883a 	mov	r4,r16
 200a320:	01408074 	movhi	r5,513
 200a324:	2956bf04 	addi	r5,r5,23292
 200a328:	10000b1e 	bne	r2,zero,200a358 <_setlocale_r+0x74>
 200a32c:	8c000d15 	stw	r16,52(r17)
 200a330:	8c800c15 	stw	r18,48(r17)
 200a334:	00c08074 	movhi	r3,513
 200a338:	18d77f04 	addi	r3,r3,24060
 200a33c:	1805883a 	mov	r2,r3
 200a340:	dfc00317 	ldw	ra,12(sp)
 200a344:	dc800217 	ldw	r18,8(sp)
 200a348:	dc400117 	ldw	r17,4(sp)
 200a34c:	dc000017 	ldw	r16,0(sp)
 200a350:	dec00404 	addi	sp,sp,16
 200a354:	f800283a 	ret
 200a358:	200c4340 	call	200c434 <strcmp>
 200a35c:	0007883a 	mov	r3,zero
 200a360:	103ff226 	beq	r2,zero,200a32c <_setlocale_r+0x48>
 200a364:	003ff506 	br	200a33c <_setlocale_r+0x58>

0200a368 <setlocale>:
 200a368:	01808074 	movhi	r6,513
 200a36c:	319f0a04 	addi	r6,r6,31784
 200a370:	2007883a 	mov	r3,r4
 200a374:	31000017 	ldw	r4,0(r6)
 200a378:	280d883a 	mov	r6,r5
 200a37c:	180b883a 	mov	r5,r3
 200a380:	200a2e41 	jmpi	200a2e4 <_setlocale_r>

0200a384 <__smakebuf_r>:
 200a384:	2880030b 	ldhu	r2,12(r5)
 200a388:	deffed04 	addi	sp,sp,-76
 200a38c:	dc401015 	stw	r17,64(sp)
 200a390:	1080008c 	andi	r2,r2,2
 200a394:	dc000f15 	stw	r16,60(sp)
 200a398:	dfc01215 	stw	ra,72(sp)
 200a39c:	dc801115 	stw	r18,68(sp)
 200a3a0:	2821883a 	mov	r16,r5
 200a3a4:	2023883a 	mov	r17,r4
 200a3a8:	10000b26 	beq	r2,zero,200a3d8 <__smakebuf_r+0x54>
 200a3ac:	28c010c4 	addi	r3,r5,67
 200a3b0:	00800044 	movi	r2,1
 200a3b4:	28800515 	stw	r2,20(r5)
 200a3b8:	28c00415 	stw	r3,16(r5)
 200a3bc:	28c00015 	stw	r3,0(r5)
 200a3c0:	dfc01217 	ldw	ra,72(sp)
 200a3c4:	dc801117 	ldw	r18,68(sp)
 200a3c8:	dc401017 	ldw	r17,64(sp)
 200a3cc:	dc000f17 	ldw	r16,60(sp)
 200a3d0:	dec01304 	addi	sp,sp,76
 200a3d4:	f800283a 	ret
 200a3d8:	2940038f 	ldh	r5,14(r5)
 200a3dc:	28002116 	blt	r5,zero,200a464 <__smakebuf_r+0xe0>
 200a3e0:	d80d883a 	mov	r6,sp
 200a3e4:	200eb740 	call	200eb74 <_fstat_r>
 200a3e8:	10001e16 	blt	r2,zero,200a464 <__smakebuf_r+0xe0>
 200a3ec:	d8800117 	ldw	r2,4(sp)
 200a3f0:	00e00014 	movui	r3,32768
 200a3f4:	113c000c 	andi	r4,r2,61440
 200a3f8:	20c03126 	beq	r4,r3,200a4c0 <__smakebuf_r+0x13c>
 200a3fc:	8080030b 	ldhu	r2,12(r16)
 200a400:	00c80004 	movi	r3,8192
 200a404:	10820014 	ori	r2,r2,2048
 200a408:	8080030d 	sth	r2,12(r16)
 200a40c:	20c01e26 	beq	r4,r3,200a488 <__smakebuf_r+0x104>
 200a410:	04810004 	movi	r18,1024
 200a414:	8809883a 	mov	r4,r17
 200a418:	900b883a 	mov	r5,r18
 200a41c:	20037900 	call	2003790 <_malloc_r>
 200a420:	1009883a 	mov	r4,r2
 200a424:	10003126 	beq	r2,zero,200a4ec <__smakebuf_r+0x168>
 200a428:	80c0030b 	ldhu	r3,12(r16)
 200a42c:	00808074 	movhi	r2,513
 200a430:	10a52204 	addi	r2,r2,-27512
 200a434:	88800f15 	stw	r2,60(r17)
 200a438:	18c02014 	ori	r3,r3,128
 200a43c:	84800515 	stw	r18,20(r16)
 200a440:	80c0030d 	sth	r3,12(r16)
 200a444:	81000415 	stw	r4,16(r16)
 200a448:	81000015 	stw	r4,0(r16)
 200a44c:	dfc01217 	ldw	ra,72(sp)
 200a450:	dc801117 	ldw	r18,68(sp)
 200a454:	dc401017 	ldw	r17,64(sp)
 200a458:	dc000f17 	ldw	r16,60(sp)
 200a45c:	dec01304 	addi	sp,sp,76
 200a460:	f800283a 	ret
 200a464:	80c0030b 	ldhu	r3,12(r16)
 200a468:	1880200c 	andi	r2,r3,128
 200a46c:	10000426 	beq	r2,zero,200a480 <__smakebuf_r+0xfc>
 200a470:	04801004 	movi	r18,64
 200a474:	18820014 	ori	r2,r3,2048
 200a478:	8080030d 	sth	r2,12(r16)
 200a47c:	003fe506 	br	200a414 <__smakebuf_r+0x90>
 200a480:	04810004 	movi	r18,1024
 200a484:	003ffb06 	br	200a474 <__smakebuf_r+0xf0>
 200a488:	8140038f 	ldh	r5,14(r16)
 200a48c:	8809883a 	mov	r4,r17
 200a490:	200f7700 	call	200f770 <_isatty_r>
 200a494:	103fde26 	beq	r2,zero,200a410 <__smakebuf_r+0x8c>
 200a498:	8080030b 	ldhu	r2,12(r16)
 200a49c:	80c010c4 	addi	r3,r16,67
 200a4a0:	04810004 	movi	r18,1024
 200a4a4:	10800054 	ori	r2,r2,1
 200a4a8:	8080030d 	sth	r2,12(r16)
 200a4ac:	00800044 	movi	r2,1
 200a4b0:	80c00415 	stw	r3,16(r16)
 200a4b4:	80800515 	stw	r2,20(r16)
 200a4b8:	80c00015 	stw	r3,0(r16)
 200a4bc:	003fd506 	br	200a414 <__smakebuf_r+0x90>
 200a4c0:	80c00a17 	ldw	r3,40(r16)
 200a4c4:	00808074 	movhi	r2,513
 200a4c8:	10b0bc04 	addi	r2,r2,-15632
 200a4cc:	18bfcb1e 	bne	r3,r2,200a3fc <__smakebuf_r+0x78>
 200a4d0:	8080030b 	ldhu	r2,12(r16)
 200a4d4:	00c10004 	movi	r3,1024
 200a4d8:	1825883a 	mov	r18,r3
 200a4dc:	10c4b03a 	or	r2,r2,r3
 200a4e0:	8080030d 	sth	r2,12(r16)
 200a4e4:	80c01315 	stw	r3,76(r16)
 200a4e8:	003fca06 	br	200a414 <__smakebuf_r+0x90>
 200a4ec:	8100030b 	ldhu	r4,12(r16)
 200a4f0:	2080800c 	andi	r2,r4,512
 200a4f4:	103fb21e 	bne	r2,zero,200a3c0 <__smakebuf_r+0x3c>
 200a4f8:	80c010c4 	addi	r3,r16,67
 200a4fc:	21000094 	ori	r4,r4,2
 200a500:	00800044 	movi	r2,1
 200a504:	80800515 	stw	r2,20(r16)
 200a508:	8100030d 	sth	r4,12(r16)
 200a50c:	80c00415 	stw	r3,16(r16)
 200a510:	80c00015 	stw	r3,0(r16)
 200a514:	003faa06 	br	200a3c0 <__smakebuf_r+0x3c>

0200a518 <_mbrtowc_r>:
 200a518:	defffc04 	addi	sp,sp,-16
 200a51c:	dc400215 	stw	r17,8(sp)
 200a520:	dc000115 	stw	r16,4(sp)
 200a524:	dfc00315 	stw	ra,12(sp)
 200a528:	dc000417 	ldw	r16,16(sp)
 200a52c:	2023883a 	mov	r17,r4
 200a530:	30000f26 	beq	r6,zero,200a570 <_mbrtowc_r+0x58>
 200a534:	dc000015 	stw	r16,0(sp)
 200a538:	200a5d80 	call	200a5d8 <_mbtowc_r>
 200a53c:	1007883a 	mov	r3,r2
 200a540:	00bfffc4 	movi	r2,-1
 200a544:	1809883a 	mov	r4,r3
 200a548:	1880111e 	bne	r3,r2,200a590 <_mbrtowc_r+0x78>
 200a54c:	80000015 	stw	zero,0(r16)
 200a550:	00802284 	movi	r2,138
 200a554:	88800015 	stw	r2,0(r17)
 200a558:	2005883a 	mov	r2,r4
 200a55c:	dfc00317 	ldw	ra,12(sp)
 200a560:	dc400217 	ldw	r17,8(sp)
 200a564:	dc000117 	ldw	r16,4(sp)
 200a568:	dec00404 	addi	sp,sp,16
 200a56c:	f800283a 	ret
 200a570:	000b883a 	mov	r5,zero
 200a574:	01808074 	movhi	r6,513
 200a578:	3196bf04 	addi	r6,r6,23292
 200a57c:	01c00044 	movi	r7,1
 200a580:	dc000015 	stw	r16,0(sp)
 200a584:	200a5d80 	call	200a5d8 <_mbtowc_r>
 200a588:	1007883a 	mov	r3,r2
 200a58c:	003fec06 	br	200a540 <_mbrtowc_r+0x28>
 200a590:	1809883a 	mov	r4,r3
 200a594:	003ff006 	br	200a558 <_mbrtowc_r+0x40>

0200a598 <mbrtowc>:
 200a598:	00808074 	movhi	r2,513
 200a59c:	109f0a04 	addi	r2,r2,31784
 200a5a0:	2017883a 	mov	r11,r4
 200a5a4:	11000017 	ldw	r4,0(r2)
 200a5a8:	defffe04 	addi	sp,sp,-8
 200a5ac:	3013883a 	mov	r9,r6
 200a5b0:	2805883a 	mov	r2,r5
 200a5b4:	d9c00015 	stw	r7,0(sp)
 200a5b8:	580b883a 	mov	r5,r11
 200a5bc:	100d883a 	mov	r6,r2
 200a5c0:	480f883a 	mov	r7,r9
 200a5c4:	dfc00115 	stw	ra,4(sp)
 200a5c8:	200a5180 	call	200a518 <_mbrtowc_r>
 200a5cc:	dfc00117 	ldw	ra,4(sp)
 200a5d0:	dec00204 	addi	sp,sp,8
 200a5d4:	f800283a 	ret

0200a5d8 <_mbtowc_r>:
 200a5d8:	deffff04 	addi	sp,sp,-4
 200a5dc:	0005883a 	mov	r2,zero
 200a5e0:	28000326 	beq	r5,zero,200a5f0 <_mbtowc_r+0x18>
 200a5e4:	3000041e 	bne	r6,zero,200a5f8 <_mbtowc_r+0x20>
 200a5e8:	dec00104 	addi	sp,sp,4
 200a5ec:	f800283a 	ret
 200a5f0:	d80b883a 	mov	r5,sp
 200a5f4:	303ffc26 	beq	r6,zero,200a5e8 <_mbtowc_r+0x10>
 200a5f8:	00bfff84 	movi	r2,-2
 200a5fc:	383ffa26 	beq	r7,zero,200a5e8 <_mbtowc_r+0x10>
 200a600:	30800003 	ldbu	r2,0(r6)
 200a604:	28800015 	stw	r2,0(r5)
 200a608:	30c00003 	ldbu	r3,0(r6)
 200a60c:	1804c03a 	cmpne	r2,r3,zero
 200a610:	dec00104 	addi	sp,sp,4
 200a614:	f800283a 	ret

0200a618 <memchr>:
 200a618:	008000c4 	movi	r2,3
 200a61c:	29403fcc 	andi	r5,r5,255
 200a620:	2007883a 	mov	r3,r4
 200a624:	1180022e 	bgeu	r2,r6,200a630 <memchr+0x18>
 200a628:	2084703a 	and	r2,r4,r2
 200a62c:	10000b26 	beq	r2,zero,200a65c <memchr+0x44>
 200a630:	313fffc4 	addi	r4,r6,-1
 200a634:	3000051e 	bne	r6,zero,200a64c <memchr+0x34>
 200a638:	00002c06 	br	200a6ec <memchr+0xd4>
 200a63c:	213fffc4 	addi	r4,r4,-1
 200a640:	00bfffc4 	movi	r2,-1
 200a644:	18c00044 	addi	r3,r3,1
 200a648:	20802826 	beq	r4,r2,200a6ec <memchr+0xd4>
 200a64c:	18800003 	ldbu	r2,0(r3)
 200a650:	28bffa1e 	bne	r5,r2,200a63c <memchr+0x24>
 200a654:	1805883a 	mov	r2,r3
 200a658:	f800283a 	ret
 200a65c:	0011883a 	mov	r8,zero
 200a660:	0007883a 	mov	r3,zero
 200a664:	01c00104 	movi	r7,4
 200a668:	4004923a 	slli	r2,r8,8
 200a66c:	18c00044 	addi	r3,r3,1
 200a670:	1151883a 	add	r8,r2,r5
 200a674:	19fffc1e 	bne	r3,r7,200a668 <memchr+0x50>
 200a678:	02bfbff4 	movhi	r10,65279
 200a67c:	52bfbfc4 	addi	r10,r10,-257
 200a680:	02602074 	movhi	r9,32897
 200a684:	4a602004 	addi	r9,r9,-32640
 200a688:	02c000c4 	movi	r11,3
 200a68c:	20800017 	ldw	r2,0(r4)
 200a690:	31bfff04 	addi	r6,r6,-4
 200a694:	200f883a 	mov	r7,r4
 200a698:	1204f03a 	xor	r2,r2,r8
 200a69c:	1287883a 	add	r3,r2,r10
 200a6a0:	1a46703a 	and	r3,r3,r9
 200a6a4:	0084303a 	nor	r2,zero,r2
 200a6a8:	10c4703a 	and	r2,r2,r3
 200a6ac:	10000b26 	beq	r2,zero,200a6dc <memchr+0xc4>
 200a6b0:	20800003 	ldbu	r2,0(r4)
 200a6b4:	28800f26 	beq	r5,r2,200a6f4 <memchr+0xdc>
 200a6b8:	20800043 	ldbu	r2,1(r4)
 200a6bc:	21c00044 	addi	r7,r4,1
 200a6c0:	28800c26 	beq	r5,r2,200a6f4 <memchr+0xdc>
 200a6c4:	20800083 	ldbu	r2,2(r4)
 200a6c8:	21c00084 	addi	r7,r4,2
 200a6cc:	28800926 	beq	r5,r2,200a6f4 <memchr+0xdc>
 200a6d0:	208000c3 	ldbu	r2,3(r4)
 200a6d4:	21c000c4 	addi	r7,r4,3
 200a6d8:	28800626 	beq	r5,r2,200a6f4 <memchr+0xdc>
 200a6dc:	21000104 	addi	r4,r4,4
 200a6e0:	59bfea36 	bltu	r11,r6,200a68c <memchr+0x74>
 200a6e4:	2007883a 	mov	r3,r4
 200a6e8:	003fd106 	br	200a630 <memchr+0x18>
 200a6ec:	0005883a 	mov	r2,zero
 200a6f0:	f800283a 	ret
 200a6f4:	3805883a 	mov	r2,r7
 200a6f8:	f800283a 	ret

0200a6fc <memcpy>:
 200a6fc:	01c003c4 	movi	r7,15
 200a700:	2007883a 	mov	r3,r4
 200a704:	3980032e 	bgeu	r7,r6,200a714 <memcpy+0x18>
 200a708:	2904b03a 	or	r2,r5,r4
 200a70c:	108000cc 	andi	r2,r2,3
 200a710:	10000926 	beq	r2,zero,200a738 <memcpy+0x3c>
 200a714:	30000626 	beq	r6,zero,200a730 <memcpy+0x34>
 200a718:	30cd883a 	add	r6,r6,r3
 200a71c:	28800003 	ldbu	r2,0(r5)
 200a720:	29400044 	addi	r5,r5,1
 200a724:	18800005 	stb	r2,0(r3)
 200a728:	18c00044 	addi	r3,r3,1
 200a72c:	30fffb1e 	bne	r6,r3,200a71c <memcpy+0x20>
 200a730:	2005883a 	mov	r2,r4
 200a734:	f800283a 	ret
 200a738:	3811883a 	mov	r8,r7
 200a73c:	200f883a 	mov	r7,r4
 200a740:	28c00017 	ldw	r3,0(r5)
 200a744:	31bffc04 	addi	r6,r6,-16
 200a748:	38c00015 	stw	r3,0(r7)
 200a74c:	28800117 	ldw	r2,4(r5)
 200a750:	38800115 	stw	r2,4(r7)
 200a754:	28c00217 	ldw	r3,8(r5)
 200a758:	38c00215 	stw	r3,8(r7)
 200a75c:	28800317 	ldw	r2,12(r5)
 200a760:	29400404 	addi	r5,r5,16
 200a764:	38800315 	stw	r2,12(r7)
 200a768:	39c00404 	addi	r7,r7,16
 200a76c:	41bff436 	bltu	r8,r6,200a740 <memcpy+0x44>
 200a770:	008000c4 	movi	r2,3
 200a774:	1180072e 	bgeu	r2,r6,200a794 <memcpy+0x98>
 200a778:	1007883a 	mov	r3,r2
 200a77c:	28800017 	ldw	r2,0(r5)
 200a780:	31bfff04 	addi	r6,r6,-4
 200a784:	29400104 	addi	r5,r5,4
 200a788:	38800015 	stw	r2,0(r7)
 200a78c:	39c00104 	addi	r7,r7,4
 200a790:	19bffa36 	bltu	r3,r6,200a77c <memcpy+0x80>
 200a794:	3807883a 	mov	r3,r7
 200a798:	003fde06 	br	200a714 <memcpy+0x18>

0200a79c <memmove>:
 200a79c:	2807883a 	mov	r3,r5
 200a7a0:	2011883a 	mov	r8,r4
 200a7a4:	29000c2e 	bgeu	r5,r4,200a7d8 <memmove+0x3c>
 200a7a8:	298f883a 	add	r7,r5,r6
 200a7ac:	21c00a2e 	bgeu	r4,r7,200a7d8 <memmove+0x3c>
 200a7b0:	30000726 	beq	r6,zero,200a7d0 <memmove+0x34>
 200a7b4:	2187883a 	add	r3,r4,r6
 200a7b8:	198dc83a 	sub	r6,r3,r6
 200a7bc:	39ffffc4 	addi	r7,r7,-1
 200a7c0:	38800003 	ldbu	r2,0(r7)
 200a7c4:	18ffffc4 	addi	r3,r3,-1
 200a7c8:	18800005 	stb	r2,0(r3)
 200a7cc:	19bffb1e 	bne	r3,r6,200a7bc <memmove+0x20>
 200a7d0:	2005883a 	mov	r2,r4
 200a7d4:	f800283a 	ret
 200a7d8:	01c003c4 	movi	r7,15
 200a7dc:	39800a36 	bltu	r7,r6,200a808 <memmove+0x6c>
 200a7e0:	303ffb26 	beq	r6,zero,200a7d0 <memmove+0x34>
 200a7e4:	400f883a 	mov	r7,r8
 200a7e8:	320d883a 	add	r6,r6,r8
 200a7ec:	28800003 	ldbu	r2,0(r5)
 200a7f0:	29400044 	addi	r5,r5,1
 200a7f4:	38800005 	stb	r2,0(r7)
 200a7f8:	39c00044 	addi	r7,r7,1
 200a7fc:	39bffb1e 	bne	r7,r6,200a7ec <memmove+0x50>
 200a800:	2005883a 	mov	r2,r4
 200a804:	f800283a 	ret
 200a808:	1904b03a 	or	r2,r3,r4
 200a80c:	108000cc 	andi	r2,r2,3
 200a810:	103ff31e 	bne	r2,zero,200a7e0 <memmove+0x44>
 200a814:	3811883a 	mov	r8,r7
 200a818:	180b883a 	mov	r5,r3
 200a81c:	200f883a 	mov	r7,r4
 200a820:	28c00017 	ldw	r3,0(r5)
 200a824:	31bffc04 	addi	r6,r6,-16
 200a828:	38c00015 	stw	r3,0(r7)
 200a82c:	28800117 	ldw	r2,4(r5)
 200a830:	38800115 	stw	r2,4(r7)
 200a834:	28c00217 	ldw	r3,8(r5)
 200a838:	38c00215 	stw	r3,8(r7)
 200a83c:	28800317 	ldw	r2,12(r5)
 200a840:	29400404 	addi	r5,r5,16
 200a844:	38800315 	stw	r2,12(r7)
 200a848:	39c00404 	addi	r7,r7,16
 200a84c:	41bff436 	bltu	r8,r6,200a820 <memmove+0x84>
 200a850:	008000c4 	movi	r2,3
 200a854:	1180072e 	bgeu	r2,r6,200a874 <memmove+0xd8>
 200a858:	1007883a 	mov	r3,r2
 200a85c:	28800017 	ldw	r2,0(r5)
 200a860:	31bfff04 	addi	r6,r6,-4
 200a864:	29400104 	addi	r5,r5,4
 200a868:	38800015 	stw	r2,0(r7)
 200a86c:	39c00104 	addi	r7,r7,4
 200a870:	19bffa36 	bltu	r3,r6,200a85c <memmove+0xc0>
 200a874:	3811883a 	mov	r8,r7
 200a878:	003fd906 	br	200a7e0 <memmove+0x44>

0200a87c <memset>:
 200a87c:	008000c4 	movi	r2,3
 200a880:	29403fcc 	andi	r5,r5,255
 200a884:	2007883a 	mov	r3,r4
 200a888:	1180022e 	bgeu	r2,r6,200a894 <memset+0x18>
 200a88c:	2084703a 	and	r2,r4,r2
 200a890:	10000826 	beq	r2,zero,200a8b4 <memset+0x38>
 200a894:	30000526 	beq	r6,zero,200a8ac <memset+0x30>
 200a898:	2805883a 	mov	r2,r5
 200a89c:	30cd883a 	add	r6,r6,r3
 200a8a0:	18800005 	stb	r2,0(r3)
 200a8a4:	18c00044 	addi	r3,r3,1
 200a8a8:	19bffd1e 	bne	r3,r6,200a8a0 <memset+0x24>
 200a8ac:	2005883a 	mov	r2,r4
 200a8b0:	f800283a 	ret
 200a8b4:	2804923a 	slli	r2,r5,8
 200a8b8:	020003c4 	movi	r8,15
 200a8bc:	200f883a 	mov	r7,r4
 200a8c0:	2884b03a 	or	r2,r5,r2
 200a8c4:	1006943a 	slli	r3,r2,16
 200a8c8:	10c6b03a 	or	r3,r2,r3
 200a8cc:	41800a2e 	bgeu	r8,r6,200a8f8 <memset+0x7c>
 200a8d0:	4005883a 	mov	r2,r8
 200a8d4:	31bffc04 	addi	r6,r6,-16
 200a8d8:	38c00015 	stw	r3,0(r7)
 200a8dc:	38c00115 	stw	r3,4(r7)
 200a8e0:	38c00215 	stw	r3,8(r7)
 200a8e4:	38c00315 	stw	r3,12(r7)
 200a8e8:	39c00404 	addi	r7,r7,16
 200a8ec:	11bff936 	bltu	r2,r6,200a8d4 <memset+0x58>
 200a8f0:	008000c4 	movi	r2,3
 200a8f4:	1180052e 	bgeu	r2,r6,200a90c <memset+0x90>
 200a8f8:	31bfff04 	addi	r6,r6,-4
 200a8fc:	008000c4 	movi	r2,3
 200a900:	38c00015 	stw	r3,0(r7)
 200a904:	39c00104 	addi	r7,r7,4
 200a908:	11bffb36 	bltu	r2,r6,200a8f8 <memset+0x7c>
 200a90c:	3807883a 	mov	r3,r7
 200a910:	003fe006 	br	200a894 <memset+0x18>

0200a914 <_Bfree>:
 200a914:	28000826 	beq	r5,zero,200a938 <_Bfree+0x24>
 200a918:	28800117 	ldw	r2,4(r5)
 200a91c:	21001317 	ldw	r4,76(r4)
 200a920:	1085883a 	add	r2,r2,r2
 200a924:	1085883a 	add	r2,r2,r2
 200a928:	1105883a 	add	r2,r2,r4
 200a92c:	10c00017 	ldw	r3,0(r2)
 200a930:	28c00015 	stw	r3,0(r5)
 200a934:	11400015 	stw	r5,0(r2)
 200a938:	f800283a 	ret

0200a93c <__hi0bits>:
 200a93c:	20bfffec 	andhi	r2,r4,65535
 200a940:	10001426 	beq	r2,zero,200a994 <__hi0bits+0x58>
 200a944:	0007883a 	mov	r3,zero
 200a948:	20bfc02c 	andhi	r2,r4,65280
 200a94c:	1000021e 	bne	r2,zero,200a958 <__hi0bits+0x1c>
 200a950:	2008923a 	slli	r4,r4,8
 200a954:	18c00204 	addi	r3,r3,8
 200a958:	20bc002c 	andhi	r2,r4,61440
 200a95c:	1000021e 	bne	r2,zero,200a968 <__hi0bits+0x2c>
 200a960:	2008913a 	slli	r4,r4,4
 200a964:	18c00104 	addi	r3,r3,4
 200a968:	20b0002c 	andhi	r2,r4,49152
 200a96c:	1000031e 	bne	r2,zero,200a97c <__hi0bits+0x40>
 200a970:	2105883a 	add	r2,r4,r4
 200a974:	18c00084 	addi	r3,r3,2
 200a978:	1089883a 	add	r4,r2,r2
 200a97c:	20000316 	blt	r4,zero,200a98c <__hi0bits+0x50>
 200a980:	2090002c 	andhi	r2,r4,16384
 200a984:	10000626 	beq	r2,zero,200a9a0 <__hi0bits+0x64>
 200a988:	18c00044 	addi	r3,r3,1
 200a98c:	1805883a 	mov	r2,r3
 200a990:	f800283a 	ret
 200a994:	2008943a 	slli	r4,r4,16
 200a998:	00c00404 	movi	r3,16
 200a99c:	003fea06 	br	200a948 <__hi0bits+0xc>
 200a9a0:	00c00804 	movi	r3,32
 200a9a4:	1805883a 	mov	r2,r3
 200a9a8:	f800283a 	ret

0200a9ac <__lo0bits>:
 200a9ac:	20c00017 	ldw	r3,0(r4)
 200a9b0:	188001cc 	andi	r2,r3,7
 200a9b4:	10000a26 	beq	r2,zero,200a9e0 <__lo0bits+0x34>
 200a9b8:	1880004c 	andi	r2,r3,1
 200a9bc:	1005003a 	cmpeq	r2,r2,zero
 200a9c0:	10002126 	beq	r2,zero,200aa48 <__lo0bits+0x9c>
 200a9c4:	1880008c 	andi	r2,r3,2
 200a9c8:	1000251e 	bne	r2,zero,200aa60 <__lo0bits+0xb4>
 200a9cc:	1804d0ba 	srli	r2,r3,2
 200a9d0:	01400084 	movi	r5,2
 200a9d4:	20800015 	stw	r2,0(r4)
 200a9d8:	2805883a 	mov	r2,r5
 200a9dc:	f800283a 	ret
 200a9e0:	18bfffcc 	andi	r2,r3,65535
 200a9e4:	10001526 	beq	r2,zero,200aa3c <__lo0bits+0x90>
 200a9e8:	000b883a 	mov	r5,zero
 200a9ec:	18803fcc 	andi	r2,r3,255
 200a9f0:	1000021e 	bne	r2,zero,200a9fc <__lo0bits+0x50>
 200a9f4:	1806d23a 	srli	r3,r3,8
 200a9f8:	29400204 	addi	r5,r5,8
 200a9fc:	188003cc 	andi	r2,r3,15
 200aa00:	1000021e 	bne	r2,zero,200aa0c <__lo0bits+0x60>
 200aa04:	1806d13a 	srli	r3,r3,4
 200aa08:	29400104 	addi	r5,r5,4
 200aa0c:	188000cc 	andi	r2,r3,3
 200aa10:	1000021e 	bne	r2,zero,200aa1c <__lo0bits+0x70>
 200aa14:	1806d0ba 	srli	r3,r3,2
 200aa18:	29400084 	addi	r5,r5,2
 200aa1c:	1880004c 	andi	r2,r3,1
 200aa20:	1000031e 	bne	r2,zero,200aa30 <__lo0bits+0x84>
 200aa24:	1806d07a 	srli	r3,r3,1
 200aa28:	18000a26 	beq	r3,zero,200aa54 <__lo0bits+0xa8>
 200aa2c:	29400044 	addi	r5,r5,1
 200aa30:	2805883a 	mov	r2,r5
 200aa34:	20c00015 	stw	r3,0(r4)
 200aa38:	f800283a 	ret
 200aa3c:	1806d43a 	srli	r3,r3,16
 200aa40:	01400404 	movi	r5,16
 200aa44:	003fe906 	br	200a9ec <__lo0bits+0x40>
 200aa48:	000b883a 	mov	r5,zero
 200aa4c:	2805883a 	mov	r2,r5
 200aa50:	f800283a 	ret
 200aa54:	01400804 	movi	r5,32
 200aa58:	2805883a 	mov	r2,r5
 200aa5c:	f800283a 	ret
 200aa60:	1804d07a 	srli	r2,r3,1
 200aa64:	01400044 	movi	r5,1
 200aa68:	20800015 	stw	r2,0(r4)
 200aa6c:	003fda06 	br	200a9d8 <__lo0bits+0x2c>

0200aa70 <__mcmp>:
 200aa70:	20800417 	ldw	r2,16(r4)
 200aa74:	28c00417 	ldw	r3,16(r5)
 200aa78:	10cfc83a 	sub	r7,r2,r3
 200aa7c:	38000c1e 	bne	r7,zero,200aab0 <__mcmp+0x40>
 200aa80:	18c5883a 	add	r2,r3,r3
 200aa84:	1085883a 	add	r2,r2,r2
 200aa88:	10c00504 	addi	r3,r2,20
 200aa8c:	21000504 	addi	r4,r4,20
 200aa90:	28cb883a 	add	r5,r5,r3
 200aa94:	2085883a 	add	r2,r4,r2
 200aa98:	10bfff04 	addi	r2,r2,-4
 200aa9c:	297fff04 	addi	r5,r5,-4
 200aaa0:	11800017 	ldw	r6,0(r2)
 200aaa4:	28c00017 	ldw	r3,0(r5)
 200aaa8:	30c0031e 	bne	r6,r3,200aab8 <__mcmp+0x48>
 200aaac:	20bffa36 	bltu	r4,r2,200aa98 <__mcmp+0x28>
 200aab0:	3805883a 	mov	r2,r7
 200aab4:	f800283a 	ret
 200aab8:	30c00336 	bltu	r6,r3,200aac8 <__mcmp+0x58>
 200aabc:	01c00044 	movi	r7,1
 200aac0:	3805883a 	mov	r2,r7
 200aac4:	f800283a 	ret
 200aac8:	01ffffc4 	movi	r7,-1
 200aacc:	003ff806 	br	200aab0 <__mcmp+0x40>

0200aad0 <__ulp>:
 200aad0:	295ffc2c 	andhi	r5,r5,32752
 200aad4:	013f3034 	movhi	r4,64704
 200aad8:	290b883a 	add	r5,r5,r4
 200aadc:	0145c83a 	sub	r2,zero,r5
 200aae0:	1007d53a 	srai	r3,r2,20
 200aae4:	000d883a 	mov	r6,zero
 200aae8:	0140040e 	bge	zero,r5,200aafc <__ulp+0x2c>
 200aaec:	280f883a 	mov	r7,r5
 200aaf0:	3807883a 	mov	r3,r7
 200aaf4:	3005883a 	mov	r2,r6
 200aaf8:	f800283a 	ret
 200aafc:	008004c4 	movi	r2,19
 200ab00:	193ffb04 	addi	r4,r3,-20
 200ab04:	10c00c0e 	bge	r2,r3,200ab38 <__ulp+0x68>
 200ab08:	008007c4 	movi	r2,31
 200ab0c:	1107c83a 	sub	r3,r2,r4
 200ab10:	00800784 	movi	r2,30
 200ab14:	01400044 	movi	r5,1
 200ab18:	11000216 	blt	r2,r4,200ab24 <__ulp+0x54>
 200ab1c:	00800044 	movi	r2,1
 200ab20:	10ca983a 	sll	r5,r2,r3
 200ab24:	000f883a 	mov	r7,zero
 200ab28:	280d883a 	mov	r6,r5
 200ab2c:	3807883a 	mov	r3,r7
 200ab30:	3005883a 	mov	r2,r6
 200ab34:	f800283a 	ret
 200ab38:	00800234 	movhi	r2,8
 200ab3c:	10cfd83a 	sra	r7,r2,r3
 200ab40:	000d883a 	mov	r6,zero
 200ab44:	3005883a 	mov	r2,r6
 200ab48:	3807883a 	mov	r3,r7
 200ab4c:	f800283a 	ret

0200ab50 <__b2d>:
 200ab50:	20800417 	ldw	r2,16(r4)
 200ab54:	defff904 	addi	sp,sp,-28
 200ab58:	dd000415 	stw	r20,16(sp)
 200ab5c:	1085883a 	add	r2,r2,r2
 200ab60:	25000504 	addi	r20,r4,20
 200ab64:	1085883a 	add	r2,r2,r2
 200ab68:	dc000015 	stw	r16,0(sp)
 200ab6c:	a0a1883a 	add	r16,r20,r2
 200ab70:	dd400515 	stw	r21,20(sp)
 200ab74:	857fff17 	ldw	r21,-4(r16)
 200ab78:	dc400115 	stw	r17,4(sp)
 200ab7c:	dfc00615 	stw	ra,24(sp)
 200ab80:	a809883a 	mov	r4,r21
 200ab84:	2823883a 	mov	r17,r5
 200ab88:	dcc00315 	stw	r19,12(sp)
 200ab8c:	dc800215 	stw	r18,8(sp)
 200ab90:	200a93c0 	call	200a93c <__hi0bits>
 200ab94:	100b883a 	mov	r5,r2
 200ab98:	00800804 	movi	r2,32
 200ab9c:	1145c83a 	sub	r2,r2,r5
 200aba0:	88800015 	stw	r2,0(r17)
 200aba4:	00800284 	movi	r2,10
 200aba8:	80ffff04 	addi	r3,r16,-4
 200abac:	11401416 	blt	r2,r5,200ac00 <__b2d+0xb0>
 200abb0:	008002c4 	movi	r2,11
 200abb4:	1149c83a 	sub	r4,r2,r5
 200abb8:	a0c02736 	bltu	r20,r3,200ac58 <__b2d+0x108>
 200abbc:	000d883a 	mov	r6,zero
 200abc0:	28800544 	addi	r2,r5,21
 200abc4:	a906d83a 	srl	r3,r21,r4
 200abc8:	a884983a 	sll	r2,r21,r2
 200abcc:	1ccffc34 	orhi	r19,r3,16368
 200abd0:	11a4b03a 	or	r18,r2,r6
 200abd4:	9005883a 	mov	r2,r18
 200abd8:	9807883a 	mov	r3,r19
 200abdc:	dfc00617 	ldw	ra,24(sp)
 200abe0:	dd400517 	ldw	r21,20(sp)
 200abe4:	dd000417 	ldw	r20,16(sp)
 200abe8:	dcc00317 	ldw	r19,12(sp)
 200abec:	dc800217 	ldw	r18,8(sp)
 200abf0:	dc400117 	ldw	r17,4(sp)
 200abf4:	dc000017 	ldw	r16,0(sp)
 200abf8:	dec00704 	addi	sp,sp,28
 200abfc:	f800283a 	ret
 200ac00:	a0c00e36 	bltu	r20,r3,200ac3c <__b2d+0xec>
 200ac04:	293ffd44 	addi	r4,r5,-11
 200ac08:	000d883a 	mov	r6,zero
 200ac0c:	20000f26 	beq	r4,zero,200ac4c <__b2d+0xfc>
 200ac10:	00800804 	movi	r2,32
 200ac14:	110bc83a 	sub	r5,r2,r4
 200ac18:	a0c01236 	bltu	r20,r3,200ac64 <__b2d+0x114>
 200ac1c:	000f883a 	mov	r7,zero
 200ac20:	a904983a 	sll	r2,r21,r4
 200ac24:	3146d83a 	srl	r3,r6,r5
 200ac28:	3108983a 	sll	r4,r6,r4
 200ac2c:	108ffc34 	orhi	r2,r2,16368
 200ac30:	18a6b03a 	or	r19,r3,r2
 200ac34:	3924b03a 	or	r18,r7,r4
 200ac38:	003fe606 	br	200abd4 <__b2d+0x84>
 200ac3c:	293ffd44 	addi	r4,r5,-11
 200ac40:	81bffe17 	ldw	r6,-8(r16)
 200ac44:	80fffe04 	addi	r3,r16,-8
 200ac48:	203ff11e 	bne	r4,zero,200ac10 <__b2d+0xc0>
 200ac4c:	accffc34 	orhi	r19,r21,16368
 200ac50:	3025883a 	mov	r18,r6
 200ac54:	003fdf06 	br	200abd4 <__b2d+0x84>
 200ac58:	18bfff17 	ldw	r2,-4(r3)
 200ac5c:	110cd83a 	srl	r6,r2,r4
 200ac60:	003fd706 	br	200abc0 <__b2d+0x70>
 200ac64:	18bfff17 	ldw	r2,-4(r3)
 200ac68:	114ed83a 	srl	r7,r2,r5
 200ac6c:	003fec06 	br	200ac20 <__b2d+0xd0>

0200ac70 <__ratio>:
 200ac70:	defff904 	addi	sp,sp,-28
 200ac74:	dc400215 	stw	r17,8(sp)
 200ac78:	2823883a 	mov	r17,r5
 200ac7c:	d80b883a 	mov	r5,sp
 200ac80:	dfc00615 	stw	ra,24(sp)
 200ac84:	dd000515 	stw	r20,20(sp)
 200ac88:	dcc00415 	stw	r19,16(sp)
 200ac8c:	dc800315 	stw	r18,12(sp)
 200ac90:	2025883a 	mov	r18,r4
 200ac94:	200ab500 	call	200ab50 <__b2d>
 200ac98:	8809883a 	mov	r4,r17
 200ac9c:	d9400104 	addi	r5,sp,4
 200aca0:	1027883a 	mov	r19,r2
 200aca4:	1829883a 	mov	r20,r3
 200aca8:	200ab500 	call	200ab50 <__b2d>
 200acac:	89000417 	ldw	r4,16(r17)
 200acb0:	91c00417 	ldw	r7,16(r18)
 200acb4:	d9800117 	ldw	r6,4(sp)
 200acb8:	180b883a 	mov	r5,r3
 200acbc:	390fc83a 	sub	r7,r7,r4
 200acc0:	1009883a 	mov	r4,r2
 200acc4:	d8800017 	ldw	r2,0(sp)
 200acc8:	380e917a 	slli	r7,r7,5
 200accc:	2011883a 	mov	r8,r4
 200acd0:	1185c83a 	sub	r2,r2,r6
 200acd4:	11c5883a 	add	r2,r2,r7
 200acd8:	1006953a 	slli	r3,r2,20
 200acdc:	2813883a 	mov	r9,r5
 200ace0:	00800d0e 	bge	zero,r2,200ad18 <__ratio+0xa8>
 200ace4:	1d29883a 	add	r20,r3,r20
 200ace8:	a00b883a 	mov	r5,r20
 200acec:	480f883a 	mov	r7,r9
 200acf0:	9809883a 	mov	r4,r19
 200acf4:	400d883a 	mov	r6,r8
 200acf8:	2002c000 	call	2002c00 <__divdf3>
 200acfc:	dfc00617 	ldw	ra,24(sp)
 200ad00:	dd000517 	ldw	r20,20(sp)
 200ad04:	dcc00417 	ldw	r19,16(sp)
 200ad08:	dc800317 	ldw	r18,12(sp)
 200ad0c:	dc400217 	ldw	r17,8(sp)
 200ad10:	dec00704 	addi	sp,sp,28
 200ad14:	f800283a 	ret
 200ad18:	28d3c83a 	sub	r9,r5,r3
 200ad1c:	003ff206 	br	200ace8 <__ratio+0x78>

0200ad20 <_mprec_log10>:
 200ad20:	defffe04 	addi	sp,sp,-8
 200ad24:	008005c4 	movi	r2,23
 200ad28:	dc000015 	stw	r16,0(sp)
 200ad2c:	dfc00115 	stw	ra,4(sp)
 200ad30:	2021883a 	mov	r16,r4
 200ad34:	11000c16 	blt	r2,r4,200ad68 <_mprec_log10+0x48>
 200ad38:	200490fa 	slli	r2,r4,3
 200ad3c:	00c08074 	movhi	r3,513
 200ad40:	18d79004 	addi	r3,r3,24128
 200ad44:	10c5883a 	add	r2,r2,r3
 200ad48:	12400117 	ldw	r9,4(r2)
 200ad4c:	12000017 	ldw	r8,0(r2)
 200ad50:	4807883a 	mov	r3,r9
 200ad54:	4005883a 	mov	r2,r8
 200ad58:	dfc00117 	ldw	ra,4(sp)
 200ad5c:	dc000017 	ldw	r16,0(sp)
 200ad60:	dec00204 	addi	sp,sp,8
 200ad64:	f800283a 	ret
 200ad68:	0011883a 	mov	r8,zero
 200ad6c:	024ffc34 	movhi	r9,16368
 200ad70:	0005883a 	mov	r2,zero
 200ad74:	00d00934 	movhi	r3,16420
 200ad78:	480b883a 	mov	r5,r9
 200ad7c:	4009883a 	mov	r4,r8
 200ad80:	180f883a 	mov	r7,r3
 200ad84:	100d883a 	mov	r6,r2
 200ad88:	200283c0 	call	200283c <__muldf3>
 200ad8c:	843fffc4 	addi	r16,r16,-1
 200ad90:	1011883a 	mov	r8,r2
 200ad94:	1813883a 	mov	r9,r3
 200ad98:	803ff51e 	bne	r16,zero,200ad70 <_mprec_log10+0x50>
 200ad9c:	4005883a 	mov	r2,r8
 200ada0:	4807883a 	mov	r3,r9
 200ada4:	dfc00117 	ldw	ra,4(sp)
 200ada8:	dc000017 	ldw	r16,0(sp)
 200adac:	dec00204 	addi	sp,sp,8
 200adb0:	f800283a 	ret

0200adb4 <__copybits>:
 200adb4:	297fffc4 	addi	r5,r5,-1
 200adb8:	30800417 	ldw	r2,16(r6)
 200adbc:	280bd17a 	srai	r5,r5,5
 200adc0:	31800504 	addi	r6,r6,20
 200adc4:	1085883a 	add	r2,r2,r2
 200adc8:	294b883a 	add	r5,r5,r5
 200adcc:	294b883a 	add	r5,r5,r5
 200add0:	1085883a 	add	r2,r2,r2
 200add4:	290b883a 	add	r5,r5,r4
 200add8:	3087883a 	add	r3,r6,r2
 200addc:	29400104 	addi	r5,r5,4
 200ade0:	30c0052e 	bgeu	r6,r3,200adf8 <__copybits+0x44>
 200ade4:	30800017 	ldw	r2,0(r6)
 200ade8:	31800104 	addi	r6,r6,4
 200adec:	20800015 	stw	r2,0(r4)
 200adf0:	21000104 	addi	r4,r4,4
 200adf4:	30fffb36 	bltu	r6,r3,200ade4 <__copybits+0x30>
 200adf8:	2140032e 	bgeu	r4,r5,200ae08 <__copybits+0x54>
 200adfc:	20000015 	stw	zero,0(r4)
 200ae00:	21000104 	addi	r4,r4,4
 200ae04:	217ffd36 	bltu	r4,r5,200adfc <__copybits+0x48>
 200ae08:	f800283a 	ret

0200ae0c <__any_on>:
 200ae0c:	20800417 	ldw	r2,16(r4)
 200ae10:	2807d17a 	srai	r3,r5,5
 200ae14:	21000504 	addi	r4,r4,20
 200ae18:	10c00d0e 	bge	r2,r3,200ae50 <__any_on+0x44>
 200ae1c:	1085883a 	add	r2,r2,r2
 200ae20:	1085883a 	add	r2,r2,r2
 200ae24:	208d883a 	add	r6,r4,r2
 200ae28:	2180182e 	bgeu	r4,r6,200ae8c <__any_on+0x80>
 200ae2c:	30bfff17 	ldw	r2,-4(r6)
 200ae30:	30ffff04 	addi	r3,r6,-4
 200ae34:	1000041e 	bne	r2,zero,200ae48 <__any_on+0x3c>
 200ae38:	20c0142e 	bgeu	r4,r3,200ae8c <__any_on+0x80>
 200ae3c:	18ffff04 	addi	r3,r3,-4
 200ae40:	18800017 	ldw	r2,0(r3)
 200ae44:	103ffc26 	beq	r2,zero,200ae38 <__any_on+0x2c>
 200ae48:	00800044 	movi	r2,1
 200ae4c:	f800283a 	ret
 200ae50:	18800a0e 	bge	r3,r2,200ae7c <__any_on+0x70>
 200ae54:	294007cc 	andi	r5,r5,31
 200ae58:	28000826 	beq	r5,zero,200ae7c <__any_on+0x70>
 200ae5c:	18c5883a 	add	r2,r3,r3
 200ae60:	1085883a 	add	r2,r2,r2
 200ae64:	208d883a 	add	r6,r4,r2
 200ae68:	30c00017 	ldw	r3,0(r6)
 200ae6c:	1944d83a 	srl	r2,r3,r5
 200ae70:	1144983a 	sll	r2,r2,r5
 200ae74:	18bff41e 	bne	r3,r2,200ae48 <__any_on+0x3c>
 200ae78:	003feb06 	br	200ae28 <__any_on+0x1c>
 200ae7c:	18c5883a 	add	r2,r3,r3
 200ae80:	1085883a 	add	r2,r2,r2
 200ae84:	208d883a 	add	r6,r4,r2
 200ae88:	003fe706 	br	200ae28 <__any_on+0x1c>
 200ae8c:	0005883a 	mov	r2,zero
 200ae90:	f800283a 	ret

0200ae94 <_Balloc>:
 200ae94:	20c01317 	ldw	r3,76(r4)
 200ae98:	defffb04 	addi	sp,sp,-20
 200ae9c:	dcc00315 	stw	r19,12(sp)
 200aea0:	dc800215 	stw	r18,8(sp)
 200aea4:	dfc00415 	stw	ra,16(sp)
 200aea8:	2825883a 	mov	r18,r5
 200aeac:	dc400115 	stw	r17,4(sp)
 200aeb0:	dc000015 	stw	r16,0(sp)
 200aeb4:	2027883a 	mov	r19,r4
 200aeb8:	01800404 	movi	r6,16
 200aebc:	01400104 	movi	r5,4
 200aec0:	18001726 	beq	r3,zero,200af20 <_Balloc+0x8c>
 200aec4:	01400044 	movi	r5,1
 200aec8:	9485883a 	add	r2,r18,r18
 200aecc:	2ca2983a 	sll	r17,r5,r18
 200aed0:	1085883a 	add	r2,r2,r2
 200aed4:	10c7883a 	add	r3,r2,r3
 200aed8:	1c000017 	ldw	r16,0(r3)
 200aedc:	8c4d883a 	add	r6,r17,r17
 200aee0:	318d883a 	add	r6,r6,r6
 200aee4:	9809883a 	mov	r4,r19
 200aee8:	31800504 	addi	r6,r6,20
 200aeec:	80001226 	beq	r16,zero,200af38 <_Balloc+0xa4>
 200aef0:	80800017 	ldw	r2,0(r16)
 200aef4:	18800015 	stw	r2,0(r3)
 200aef8:	80000415 	stw	zero,16(r16)
 200aefc:	80000315 	stw	zero,12(r16)
 200af00:	8005883a 	mov	r2,r16
 200af04:	dfc00417 	ldw	ra,16(sp)
 200af08:	dcc00317 	ldw	r19,12(sp)
 200af0c:	dc800217 	ldw	r18,8(sp)
 200af10:	dc400117 	ldw	r17,4(sp)
 200af14:	dc000017 	ldw	r16,0(sp)
 200af18:	dec00504 	addi	sp,sp,20
 200af1c:	f800283a 	ret
 200af20:	200e92c0 	call	200e92c <_calloc_r>
 200af24:	1007883a 	mov	r3,r2
 200af28:	0021883a 	mov	r16,zero
 200af2c:	98801315 	stw	r2,76(r19)
 200af30:	103fe41e 	bne	r2,zero,200aec4 <_Balloc+0x30>
 200af34:	003ff206 	br	200af00 <_Balloc+0x6c>
 200af38:	200e92c0 	call	200e92c <_calloc_r>
 200af3c:	103ff026 	beq	r2,zero,200af00 <_Balloc+0x6c>
 200af40:	1021883a 	mov	r16,r2
 200af44:	14800115 	stw	r18,4(r2)
 200af48:	14400215 	stw	r17,8(r2)
 200af4c:	003fea06 	br	200aef8 <_Balloc+0x64>

0200af50 <__d2b>:
 200af50:	defff504 	addi	sp,sp,-44
 200af54:	dcc00515 	stw	r19,20(sp)
 200af58:	04c00044 	movi	r19,1
 200af5c:	dc000215 	stw	r16,8(sp)
 200af60:	2821883a 	mov	r16,r5
 200af64:	980b883a 	mov	r5,r19
 200af68:	ddc00915 	stw	r23,36(sp)
 200af6c:	dd800815 	stw	r22,32(sp)
 200af70:	dd400715 	stw	r21,28(sp)
 200af74:	dd000615 	stw	r20,24(sp)
 200af78:	dc800415 	stw	r18,16(sp)
 200af7c:	dc400315 	stw	r17,12(sp)
 200af80:	dfc00a15 	stw	ra,40(sp)
 200af84:	3023883a 	mov	r17,r6
 200af88:	382d883a 	mov	r22,r7
 200af8c:	ddc00b17 	ldw	r23,44(sp)
 200af90:	200ae940 	call	200ae94 <_Balloc>
 200af94:	1025883a 	mov	r18,r2
 200af98:	00a00034 	movhi	r2,32768
 200af9c:	10bfffc4 	addi	r2,r2,-1
 200afa0:	8888703a 	and	r4,r17,r2
 200afa4:	202ad53a 	srli	r21,r4,20
 200afa8:	00800434 	movhi	r2,16
 200afac:	10bfffc4 	addi	r2,r2,-1
 200afb0:	8886703a 	and	r3,r17,r2
 200afb4:	a829003a 	cmpeq	r20,r21,zero
 200afb8:	800b883a 	mov	r5,r16
 200afbc:	d8c00115 	stw	r3,4(sp)
 200afc0:	94000504 	addi	r16,r18,20
 200afc4:	a000021e 	bne	r20,zero,200afd0 <__d2b+0x80>
 200afc8:	18c00434 	orhi	r3,r3,16
 200afcc:	d8c00115 	stw	r3,4(sp)
 200afd0:	28002726 	beq	r5,zero,200b070 <__d2b+0x120>
 200afd4:	d809883a 	mov	r4,sp
 200afd8:	d9400015 	stw	r5,0(sp)
 200afdc:	200a9ac0 	call	200a9ac <__lo0bits>
 200afe0:	100d883a 	mov	r6,r2
 200afe4:	10003526 	beq	r2,zero,200b0bc <__d2b+0x16c>
 200afe8:	d8c00117 	ldw	r3,4(sp)
 200afec:	00800804 	movi	r2,32
 200aff0:	1185c83a 	sub	r2,r2,r6
 200aff4:	d9000017 	ldw	r4,0(sp)
 200aff8:	1886983a 	sll	r3,r3,r2
 200affc:	1906b03a 	or	r3,r3,r4
 200b000:	90c00515 	stw	r3,20(r18)
 200b004:	d8c00117 	ldw	r3,4(sp)
 200b008:	1986d83a 	srl	r3,r3,r6
 200b00c:	d8c00115 	stw	r3,4(sp)
 200b010:	180b003a 	cmpeq	r5,r3,zero
 200b014:	00800084 	movi	r2,2
 200b018:	114bc83a 	sub	r5,r2,r5
 200b01c:	80c00115 	stw	r3,4(r16)
 200b020:	91400415 	stw	r5,16(r18)
 200b024:	a0001a1e 	bne	r20,zero,200b090 <__d2b+0x140>
 200b028:	3545883a 	add	r2,r6,r21
 200b02c:	10bef344 	addi	r2,r2,-1075
 200b030:	00c00d44 	movi	r3,53
 200b034:	b0800015 	stw	r2,0(r22)
 200b038:	1987c83a 	sub	r3,r3,r6
 200b03c:	b8c00015 	stw	r3,0(r23)
 200b040:	9005883a 	mov	r2,r18
 200b044:	dfc00a17 	ldw	ra,40(sp)
 200b048:	ddc00917 	ldw	r23,36(sp)
 200b04c:	dd800817 	ldw	r22,32(sp)
 200b050:	dd400717 	ldw	r21,28(sp)
 200b054:	dd000617 	ldw	r20,24(sp)
 200b058:	dcc00517 	ldw	r19,20(sp)
 200b05c:	dc800417 	ldw	r18,16(sp)
 200b060:	dc400317 	ldw	r17,12(sp)
 200b064:	dc000217 	ldw	r16,8(sp)
 200b068:	dec00b04 	addi	sp,sp,44
 200b06c:	f800283a 	ret
 200b070:	d9000104 	addi	r4,sp,4
 200b074:	200a9ac0 	call	200a9ac <__lo0bits>
 200b078:	11800804 	addi	r6,r2,32
 200b07c:	d8800117 	ldw	r2,4(sp)
 200b080:	94c00415 	stw	r19,16(r18)
 200b084:	980b883a 	mov	r5,r19
 200b088:	90800515 	stw	r2,20(r18)
 200b08c:	a03fe626 	beq	r20,zero,200b028 <__d2b+0xd8>
 200b090:	2945883a 	add	r2,r5,r5
 200b094:	1085883a 	add	r2,r2,r2
 200b098:	1405883a 	add	r2,r2,r16
 200b09c:	113fff17 	ldw	r4,-4(r2)
 200b0a0:	30fef384 	addi	r3,r6,-1074
 200b0a4:	2820917a 	slli	r16,r5,5
 200b0a8:	b0c00015 	stw	r3,0(r22)
 200b0ac:	200a93c0 	call	200a93c <__hi0bits>
 200b0b0:	80a1c83a 	sub	r16,r16,r2
 200b0b4:	bc000015 	stw	r16,0(r23)
 200b0b8:	003fe106 	br	200b040 <__d2b+0xf0>
 200b0bc:	d8800017 	ldw	r2,0(sp)
 200b0c0:	90800515 	stw	r2,20(r18)
 200b0c4:	d8c00117 	ldw	r3,4(sp)
 200b0c8:	003fd106 	br	200b010 <__d2b+0xc0>

0200b0cc <__mdiff>:
 200b0cc:	defffb04 	addi	sp,sp,-20
 200b0d0:	dc000015 	stw	r16,0(sp)
 200b0d4:	2821883a 	mov	r16,r5
 200b0d8:	dc800215 	stw	r18,8(sp)
 200b0dc:	300b883a 	mov	r5,r6
 200b0e0:	2025883a 	mov	r18,r4
 200b0e4:	8009883a 	mov	r4,r16
 200b0e8:	dc400115 	stw	r17,4(sp)
 200b0ec:	dfc00415 	stw	ra,16(sp)
 200b0f0:	dcc00315 	stw	r19,12(sp)
 200b0f4:	3023883a 	mov	r17,r6
 200b0f8:	200aa700 	call	200aa70 <__mcmp>
 200b0fc:	10004226 	beq	r2,zero,200b208 <__mdiff+0x13c>
 200b100:	10005016 	blt	r2,zero,200b244 <__mdiff+0x178>
 200b104:	0027883a 	mov	r19,zero
 200b108:	81400117 	ldw	r5,4(r16)
 200b10c:	9009883a 	mov	r4,r18
 200b110:	200ae940 	call	200ae94 <_Balloc>
 200b114:	1019883a 	mov	r12,r2
 200b118:	82800417 	ldw	r10,16(r16)
 200b11c:	88800417 	ldw	r2,16(r17)
 200b120:	81800504 	addi	r6,r16,20
 200b124:	5287883a 	add	r3,r10,r10
 200b128:	1085883a 	add	r2,r2,r2
 200b12c:	18c7883a 	add	r3,r3,r3
 200b130:	1085883a 	add	r2,r2,r2
 200b134:	8a000504 	addi	r8,r17,20
 200b138:	64c00315 	stw	r19,12(r12)
 200b13c:	30db883a 	add	r13,r6,r3
 200b140:	4097883a 	add	r11,r8,r2
 200b144:	61c00504 	addi	r7,r12,20
 200b148:	0013883a 	mov	r9,zero
 200b14c:	31000017 	ldw	r4,0(r6)
 200b150:	41400017 	ldw	r5,0(r8)
 200b154:	42000104 	addi	r8,r8,4
 200b158:	20bfffcc 	andi	r2,r4,65535
 200b15c:	28ffffcc 	andi	r3,r5,65535
 200b160:	10c5c83a 	sub	r2,r2,r3
 200b164:	1245883a 	add	r2,r2,r9
 200b168:	2008d43a 	srli	r4,r4,16
 200b16c:	280ad43a 	srli	r5,r5,16
 200b170:	1007d43a 	srai	r3,r2,16
 200b174:	3880000d 	sth	r2,0(r7)
 200b178:	2149c83a 	sub	r4,r4,r5
 200b17c:	20c9883a 	add	r4,r4,r3
 200b180:	3900008d 	sth	r4,2(r7)
 200b184:	31800104 	addi	r6,r6,4
 200b188:	39c00104 	addi	r7,r7,4
 200b18c:	2013d43a 	srai	r9,r4,16
 200b190:	42ffee36 	bltu	r8,r11,200b14c <__mdiff+0x80>
 200b194:	33400c2e 	bgeu	r6,r13,200b1c8 <__mdiff+0xfc>
 200b198:	30800017 	ldw	r2,0(r6)
 200b19c:	31800104 	addi	r6,r6,4
 200b1a0:	10ffffcc 	andi	r3,r2,65535
 200b1a4:	1a47883a 	add	r3,r3,r9
 200b1a8:	1004d43a 	srli	r2,r2,16
 200b1ac:	1809d43a 	srai	r4,r3,16
 200b1b0:	38c0000d 	sth	r3,0(r7)
 200b1b4:	1105883a 	add	r2,r2,r4
 200b1b8:	3880008d 	sth	r2,2(r7)
 200b1bc:	1013d43a 	srai	r9,r2,16
 200b1c0:	39c00104 	addi	r7,r7,4
 200b1c4:	337ff436 	bltu	r6,r13,200b198 <__mdiff+0xcc>
 200b1c8:	38bfff17 	ldw	r2,-4(r7)
 200b1cc:	38ffff04 	addi	r3,r7,-4
 200b1d0:	1000041e 	bne	r2,zero,200b1e4 <__mdiff+0x118>
 200b1d4:	18ffff04 	addi	r3,r3,-4
 200b1d8:	18800017 	ldw	r2,0(r3)
 200b1dc:	52bfffc4 	addi	r10,r10,-1
 200b1e0:	103ffc26 	beq	r2,zero,200b1d4 <__mdiff+0x108>
 200b1e4:	6005883a 	mov	r2,r12
 200b1e8:	62800415 	stw	r10,16(r12)
 200b1ec:	dfc00417 	ldw	ra,16(sp)
 200b1f0:	dcc00317 	ldw	r19,12(sp)
 200b1f4:	dc800217 	ldw	r18,8(sp)
 200b1f8:	dc400117 	ldw	r17,4(sp)
 200b1fc:	dc000017 	ldw	r16,0(sp)
 200b200:	dec00504 	addi	sp,sp,20
 200b204:	f800283a 	ret
 200b208:	9009883a 	mov	r4,r18
 200b20c:	000b883a 	mov	r5,zero
 200b210:	200ae940 	call	200ae94 <_Balloc>
 200b214:	1019883a 	mov	r12,r2
 200b218:	00800044 	movi	r2,1
 200b21c:	60800415 	stw	r2,16(r12)
 200b220:	6005883a 	mov	r2,r12
 200b224:	60000515 	stw	zero,20(r12)
 200b228:	dfc00417 	ldw	ra,16(sp)
 200b22c:	dcc00317 	ldw	r19,12(sp)
 200b230:	dc800217 	ldw	r18,8(sp)
 200b234:	dc400117 	ldw	r17,4(sp)
 200b238:	dc000017 	ldw	r16,0(sp)
 200b23c:	dec00504 	addi	sp,sp,20
 200b240:	f800283a 	ret
 200b244:	880d883a 	mov	r6,r17
 200b248:	04c00044 	movi	r19,1
 200b24c:	8023883a 	mov	r17,r16
 200b250:	3021883a 	mov	r16,r6
 200b254:	003fac06 	br	200b108 <__mdiff+0x3c>

0200b258 <__lshift>:
 200b258:	defff904 	addi	sp,sp,-28
 200b25c:	28800417 	ldw	r2,16(r5)
 200b260:	dc000015 	stw	r16,0(sp)
 200b264:	3021d17a 	srai	r16,r6,5
 200b268:	28c00217 	ldw	r3,8(r5)
 200b26c:	10800044 	addi	r2,r2,1
 200b270:	dc400115 	stw	r17,4(sp)
 200b274:	80a3883a 	add	r17,r16,r2
 200b278:	dd400515 	stw	r21,20(sp)
 200b27c:	dd000415 	stw	r20,16(sp)
 200b280:	dc800215 	stw	r18,8(sp)
 200b284:	dfc00615 	stw	ra,24(sp)
 200b288:	2825883a 	mov	r18,r5
 200b28c:	dcc00315 	stw	r19,12(sp)
 200b290:	3029883a 	mov	r20,r6
 200b294:	202b883a 	mov	r21,r4
 200b298:	29400117 	ldw	r5,4(r5)
 200b29c:	1c40030e 	bge	r3,r17,200b2ac <__lshift+0x54>
 200b2a0:	18c7883a 	add	r3,r3,r3
 200b2a4:	29400044 	addi	r5,r5,1
 200b2a8:	1c7ffd16 	blt	r3,r17,200b2a0 <__lshift+0x48>
 200b2ac:	a809883a 	mov	r4,r21
 200b2b0:	200ae940 	call	200ae94 <_Balloc>
 200b2b4:	1027883a 	mov	r19,r2
 200b2b8:	11400504 	addi	r5,r2,20
 200b2bc:	0400090e 	bge	zero,r16,200b2e4 <__lshift+0x8c>
 200b2c0:	2805883a 	mov	r2,r5
 200b2c4:	0007883a 	mov	r3,zero
 200b2c8:	18c00044 	addi	r3,r3,1
 200b2cc:	10000015 	stw	zero,0(r2)
 200b2d0:	10800104 	addi	r2,r2,4
 200b2d4:	80fffc1e 	bne	r16,r3,200b2c8 <__lshift+0x70>
 200b2d8:	8405883a 	add	r2,r16,r16
 200b2dc:	1085883a 	add	r2,r2,r2
 200b2e0:	288b883a 	add	r5,r5,r2
 200b2e4:	90800417 	ldw	r2,16(r18)
 200b2e8:	91000504 	addi	r4,r18,20
 200b2ec:	a18007cc 	andi	r6,r20,31
 200b2f0:	1085883a 	add	r2,r2,r2
 200b2f4:	1085883a 	add	r2,r2,r2
 200b2f8:	208f883a 	add	r7,r4,r2
 200b2fc:	30001e26 	beq	r6,zero,200b378 <__lshift+0x120>
 200b300:	00800804 	movi	r2,32
 200b304:	1191c83a 	sub	r8,r2,r6
 200b308:	0007883a 	mov	r3,zero
 200b30c:	20800017 	ldw	r2,0(r4)
 200b310:	1184983a 	sll	r2,r2,r6
 200b314:	1884b03a 	or	r2,r3,r2
 200b318:	28800015 	stw	r2,0(r5)
 200b31c:	20c00017 	ldw	r3,0(r4)
 200b320:	21000104 	addi	r4,r4,4
 200b324:	29400104 	addi	r5,r5,4
 200b328:	1a06d83a 	srl	r3,r3,r8
 200b32c:	21fff736 	bltu	r4,r7,200b30c <__lshift+0xb4>
 200b330:	28c00015 	stw	r3,0(r5)
 200b334:	18000126 	beq	r3,zero,200b33c <__lshift+0xe4>
 200b338:	8c400044 	addi	r17,r17,1
 200b33c:	88bfffc4 	addi	r2,r17,-1
 200b340:	98800415 	stw	r2,16(r19)
 200b344:	a809883a 	mov	r4,r21
 200b348:	900b883a 	mov	r5,r18
 200b34c:	200a9140 	call	200a914 <_Bfree>
 200b350:	9805883a 	mov	r2,r19
 200b354:	dfc00617 	ldw	ra,24(sp)
 200b358:	dd400517 	ldw	r21,20(sp)
 200b35c:	dd000417 	ldw	r20,16(sp)
 200b360:	dcc00317 	ldw	r19,12(sp)
 200b364:	dc800217 	ldw	r18,8(sp)
 200b368:	dc400117 	ldw	r17,4(sp)
 200b36c:	dc000017 	ldw	r16,0(sp)
 200b370:	dec00704 	addi	sp,sp,28
 200b374:	f800283a 	ret
 200b378:	20800017 	ldw	r2,0(r4)
 200b37c:	21000104 	addi	r4,r4,4
 200b380:	28800015 	stw	r2,0(r5)
 200b384:	29400104 	addi	r5,r5,4
 200b388:	21ffec2e 	bgeu	r4,r7,200b33c <__lshift+0xe4>
 200b38c:	20800017 	ldw	r2,0(r4)
 200b390:	21000104 	addi	r4,r4,4
 200b394:	28800015 	stw	r2,0(r5)
 200b398:	29400104 	addi	r5,r5,4
 200b39c:	21fff636 	bltu	r4,r7,200b378 <__lshift+0x120>
 200b3a0:	003fe606 	br	200b33c <__lshift+0xe4>

0200b3a4 <__multiply>:
 200b3a4:	defff904 	addi	sp,sp,-28
 200b3a8:	dcc00315 	stw	r19,12(sp)
 200b3ac:	dc800215 	stw	r18,8(sp)
 200b3b0:	2cc00417 	ldw	r19,16(r5)
 200b3b4:	34800417 	ldw	r18,16(r6)
 200b3b8:	dd000415 	stw	r20,16(sp)
 200b3bc:	dc400115 	stw	r17,4(sp)
 200b3c0:	dfc00615 	stw	ra,24(sp)
 200b3c4:	dd400515 	stw	r21,20(sp)
 200b3c8:	dc000015 	stw	r16,0(sp)
 200b3cc:	2823883a 	mov	r17,r5
 200b3d0:	3029883a 	mov	r20,r6
 200b3d4:	9c80040e 	bge	r19,r18,200b3e8 <__multiply+0x44>
 200b3d8:	9027883a 	mov	r19,r18
 200b3dc:	2c800417 	ldw	r18,16(r5)
 200b3e0:	2829883a 	mov	r20,r5
 200b3e4:	3023883a 	mov	r17,r6
 200b3e8:	88800217 	ldw	r2,8(r17)
 200b3ec:	9ca1883a 	add	r16,r19,r18
 200b3f0:	89400117 	ldw	r5,4(r17)
 200b3f4:	1400010e 	bge	r2,r16,200b3fc <__multiply+0x58>
 200b3f8:	29400044 	addi	r5,r5,1
 200b3fc:	200ae940 	call	200ae94 <_Balloc>
 200b400:	102b883a 	mov	r21,r2
 200b404:	8405883a 	add	r2,r16,r16
 200b408:	1085883a 	add	r2,r2,r2
 200b40c:	a9000504 	addi	r4,r21,20
 200b410:	209d883a 	add	r14,r4,r2
 200b414:	2380042e 	bgeu	r4,r14,200b428 <__multiply+0x84>
 200b418:	2005883a 	mov	r2,r4
 200b41c:	10000015 	stw	zero,0(r2)
 200b420:	10800104 	addi	r2,r2,4
 200b424:	13bffd36 	bltu	r2,r14,200b41c <__multiply+0x78>
 200b428:	9485883a 	add	r2,r18,r18
 200b42c:	9cc7883a 	add	r3,r19,r19
 200b430:	a1800504 	addi	r6,r20,20
 200b434:	1085883a 	add	r2,r2,r2
 200b438:	8b400504 	addi	r13,r17,20
 200b43c:	18c7883a 	add	r3,r3,r3
 200b440:	309f883a 	add	r15,r6,r2
 200b444:	68d7883a 	add	r11,r13,r3
 200b448:	33c03b2e 	bgeu	r6,r15,200b538 <__multiply+0x194>
 200b44c:	2019883a 	mov	r12,r4
 200b450:	30800017 	ldw	r2,0(r6)
 200b454:	127fffcc 	andi	r9,r2,65535
 200b458:	48001826 	beq	r9,zero,200b4bc <__multiply+0x118>
 200b45c:	6811883a 	mov	r8,r13
 200b460:	600f883a 	mov	r7,r12
 200b464:	0015883a 	mov	r10,zero
 200b468:	40c00017 	ldw	r3,0(r8)
 200b46c:	39400017 	ldw	r5,0(r7)
 200b470:	42000104 	addi	r8,r8,4
 200b474:	193fffcc 	andi	r4,r3,65535
 200b478:	4909383a 	mul	r4,r9,r4
 200b47c:	1806d43a 	srli	r3,r3,16
 200b480:	28bfffcc 	andi	r2,r5,65535
 200b484:	5085883a 	add	r2,r10,r2
 200b488:	2089883a 	add	r4,r4,r2
 200b48c:	48c7383a 	mul	r3,r9,r3
 200b490:	280ad43a 	srli	r5,r5,16
 200b494:	2004d43a 	srli	r2,r4,16
 200b498:	3900000d 	sth	r4,0(r7)
 200b49c:	1947883a 	add	r3,r3,r5
 200b4a0:	10c5883a 	add	r2,r2,r3
 200b4a4:	3880008d 	sth	r2,2(r7)
 200b4a8:	1014d43a 	srli	r10,r2,16
 200b4ac:	39c00104 	addi	r7,r7,4
 200b4b0:	42ffed36 	bltu	r8,r11,200b468 <__multiply+0xc4>
 200b4b4:	3a800015 	stw	r10,0(r7)
 200b4b8:	30800017 	ldw	r2,0(r6)
 200b4bc:	1012d43a 	srli	r9,r2,16
 200b4c0:	48001926 	beq	r9,zero,200b528 <__multiply+0x184>
 200b4c4:	60800017 	ldw	r2,0(r12)
 200b4c8:	6811883a 	mov	r8,r13
 200b4cc:	600f883a 	mov	r7,r12
 200b4d0:	0015883a 	mov	r10,zero
 200b4d4:	100b883a 	mov	r5,r2
 200b4d8:	41000017 	ldw	r4,0(r8)
 200b4dc:	2806d43a 	srli	r3,r5,16
 200b4e0:	3880000d 	sth	r2,0(r7)
 200b4e4:	20bfffcc 	andi	r2,r4,65535
 200b4e8:	4885383a 	mul	r2,r9,r2
 200b4ec:	50c7883a 	add	r3,r10,r3
 200b4f0:	2008d43a 	srli	r4,r4,16
 200b4f4:	10c5883a 	add	r2,r2,r3
 200b4f8:	3880008d 	sth	r2,2(r7)
 200b4fc:	39c00104 	addi	r7,r7,4
 200b500:	39400017 	ldw	r5,0(r7)
 200b504:	4909383a 	mul	r4,r9,r4
 200b508:	1004d43a 	srli	r2,r2,16
 200b50c:	28ffffcc 	andi	r3,r5,65535
 200b510:	20c9883a 	add	r4,r4,r3
 200b514:	1105883a 	add	r2,r2,r4
 200b518:	42000104 	addi	r8,r8,4
 200b51c:	1014d43a 	srli	r10,r2,16
 200b520:	42ffed36 	bltu	r8,r11,200b4d8 <__multiply+0x134>
 200b524:	38800015 	stw	r2,0(r7)
 200b528:	31800104 	addi	r6,r6,4
 200b52c:	33c0022e 	bgeu	r6,r15,200b538 <__multiply+0x194>
 200b530:	63000104 	addi	r12,r12,4
 200b534:	003fc606 	br	200b450 <__multiply+0xac>
 200b538:	0400090e 	bge	zero,r16,200b560 <__multiply+0x1bc>
 200b53c:	70bfff17 	ldw	r2,-4(r14)
 200b540:	70ffff04 	addi	r3,r14,-4
 200b544:	10000326 	beq	r2,zero,200b554 <__multiply+0x1b0>
 200b548:	00000506 	br	200b560 <__multiply+0x1bc>
 200b54c:	18800017 	ldw	r2,0(r3)
 200b550:	1000031e 	bne	r2,zero,200b560 <__multiply+0x1bc>
 200b554:	843fffc4 	addi	r16,r16,-1
 200b558:	18ffff04 	addi	r3,r3,-4
 200b55c:	803ffb1e 	bne	r16,zero,200b54c <__multiply+0x1a8>
 200b560:	a805883a 	mov	r2,r21
 200b564:	ac000415 	stw	r16,16(r21)
 200b568:	dfc00617 	ldw	ra,24(sp)
 200b56c:	dd400517 	ldw	r21,20(sp)
 200b570:	dd000417 	ldw	r20,16(sp)
 200b574:	dcc00317 	ldw	r19,12(sp)
 200b578:	dc800217 	ldw	r18,8(sp)
 200b57c:	dc400117 	ldw	r17,4(sp)
 200b580:	dc000017 	ldw	r16,0(sp)
 200b584:	dec00704 	addi	sp,sp,28
 200b588:	f800283a 	ret

0200b58c <__i2b>:
 200b58c:	defffd04 	addi	sp,sp,-12
 200b590:	dc000015 	stw	r16,0(sp)
 200b594:	04000044 	movi	r16,1
 200b598:	dc800115 	stw	r18,4(sp)
 200b59c:	2825883a 	mov	r18,r5
 200b5a0:	800b883a 	mov	r5,r16
 200b5a4:	dfc00215 	stw	ra,8(sp)
 200b5a8:	200ae940 	call	200ae94 <_Balloc>
 200b5ac:	14000415 	stw	r16,16(r2)
 200b5b0:	14800515 	stw	r18,20(r2)
 200b5b4:	dfc00217 	ldw	ra,8(sp)
 200b5b8:	dc800117 	ldw	r18,4(sp)
 200b5bc:	dc000017 	ldw	r16,0(sp)
 200b5c0:	dec00304 	addi	sp,sp,12
 200b5c4:	f800283a 	ret

0200b5c8 <__multadd>:
 200b5c8:	defffa04 	addi	sp,sp,-24
 200b5cc:	dc800215 	stw	r18,8(sp)
 200b5d0:	2c800417 	ldw	r18,16(r5)
 200b5d4:	dd000415 	stw	r20,16(sp)
 200b5d8:	dcc00315 	stw	r19,12(sp)
 200b5dc:	dc000015 	stw	r16,0(sp)
 200b5e0:	dfc00515 	stw	ra,20(sp)
 200b5e4:	3821883a 	mov	r16,r7
 200b5e8:	dc400115 	stw	r17,4(sp)
 200b5ec:	2827883a 	mov	r19,r5
 200b5f0:	2029883a 	mov	r20,r4
 200b5f4:	2a000504 	addi	r8,r5,20
 200b5f8:	000f883a 	mov	r7,zero
 200b5fc:	40800017 	ldw	r2,0(r8)
 200b600:	39c00044 	addi	r7,r7,1
 200b604:	10ffffcc 	andi	r3,r2,65535
 200b608:	1987383a 	mul	r3,r3,r6
 200b60c:	1004d43a 	srli	r2,r2,16
 200b610:	1c07883a 	add	r3,r3,r16
 200b614:	180ad43a 	srli	r5,r3,16
 200b618:	1185383a 	mul	r2,r2,r6
 200b61c:	18ffffcc 	andi	r3,r3,65535
 200b620:	1145883a 	add	r2,r2,r5
 200b624:	1008943a 	slli	r4,r2,16
 200b628:	1020d43a 	srli	r16,r2,16
 200b62c:	20c9883a 	add	r4,r4,r3
 200b630:	41000015 	stw	r4,0(r8)
 200b634:	42000104 	addi	r8,r8,4
 200b638:	3cbff016 	blt	r7,r18,200b5fc <__multadd+0x34>
 200b63c:	80000826 	beq	r16,zero,200b660 <__multadd+0x98>
 200b640:	98800217 	ldw	r2,8(r19)
 200b644:	90800f0e 	bge	r18,r2,200b684 <__multadd+0xbc>
 200b648:	9485883a 	add	r2,r18,r18
 200b64c:	1085883a 	add	r2,r2,r2
 200b650:	14c5883a 	add	r2,r2,r19
 200b654:	90c00044 	addi	r3,r18,1
 200b658:	14000515 	stw	r16,20(r2)
 200b65c:	98c00415 	stw	r3,16(r19)
 200b660:	9805883a 	mov	r2,r19
 200b664:	dfc00517 	ldw	ra,20(sp)
 200b668:	dd000417 	ldw	r20,16(sp)
 200b66c:	dcc00317 	ldw	r19,12(sp)
 200b670:	dc800217 	ldw	r18,8(sp)
 200b674:	dc400117 	ldw	r17,4(sp)
 200b678:	dc000017 	ldw	r16,0(sp)
 200b67c:	dec00604 	addi	sp,sp,24
 200b680:	f800283a 	ret
 200b684:	99400117 	ldw	r5,4(r19)
 200b688:	a009883a 	mov	r4,r20
 200b68c:	29400044 	addi	r5,r5,1
 200b690:	200ae940 	call	200ae94 <_Balloc>
 200b694:	99800417 	ldw	r6,16(r19)
 200b698:	99400304 	addi	r5,r19,12
 200b69c:	11000304 	addi	r4,r2,12
 200b6a0:	318d883a 	add	r6,r6,r6
 200b6a4:	318d883a 	add	r6,r6,r6
 200b6a8:	31800204 	addi	r6,r6,8
 200b6ac:	1023883a 	mov	r17,r2
 200b6b0:	200a6fc0 	call	200a6fc <memcpy>
 200b6b4:	980b883a 	mov	r5,r19
 200b6b8:	a009883a 	mov	r4,r20
 200b6bc:	200a9140 	call	200a914 <_Bfree>
 200b6c0:	8827883a 	mov	r19,r17
 200b6c4:	003fe006 	br	200b648 <__multadd+0x80>

0200b6c8 <__pow5mult>:
 200b6c8:	defffa04 	addi	sp,sp,-24
 200b6cc:	308000cc 	andi	r2,r6,3
 200b6d0:	dd000415 	stw	r20,16(sp)
 200b6d4:	dcc00315 	stw	r19,12(sp)
 200b6d8:	dc000015 	stw	r16,0(sp)
 200b6dc:	dfc00515 	stw	ra,20(sp)
 200b6e0:	dc800215 	stw	r18,8(sp)
 200b6e4:	dc400115 	stw	r17,4(sp)
 200b6e8:	3021883a 	mov	r16,r6
 200b6ec:	2027883a 	mov	r19,r4
 200b6f0:	2829883a 	mov	r20,r5
 200b6f4:	10002b1e 	bne	r2,zero,200b7a4 <__pow5mult+0xdc>
 200b6f8:	8025d0ba 	srai	r18,r16,2
 200b6fc:	90001b26 	beq	r18,zero,200b76c <__pow5mult+0xa4>
 200b700:	9c001217 	ldw	r16,72(r19)
 200b704:	8000081e 	bne	r16,zero,200b728 <__pow5mult+0x60>
 200b708:	00003006 	br	200b7cc <__pow5mult+0x104>
 200b70c:	800b883a 	mov	r5,r16
 200b710:	800d883a 	mov	r6,r16
 200b714:	9809883a 	mov	r4,r19
 200b718:	90001426 	beq	r18,zero,200b76c <__pow5mult+0xa4>
 200b71c:	80800017 	ldw	r2,0(r16)
 200b720:	10001b26 	beq	r2,zero,200b790 <__pow5mult+0xc8>
 200b724:	1021883a 	mov	r16,r2
 200b728:	9080004c 	andi	r2,r18,1
 200b72c:	1005003a 	cmpeq	r2,r2,zero
 200b730:	9025d07a 	srai	r18,r18,1
 200b734:	800d883a 	mov	r6,r16
 200b738:	9809883a 	mov	r4,r19
 200b73c:	a00b883a 	mov	r5,r20
 200b740:	103ff21e 	bne	r2,zero,200b70c <__pow5mult+0x44>
 200b744:	200b3a40 	call	200b3a4 <__multiply>
 200b748:	a00b883a 	mov	r5,r20
 200b74c:	9809883a 	mov	r4,r19
 200b750:	1023883a 	mov	r17,r2
 200b754:	200a9140 	call	200a914 <_Bfree>
 200b758:	8829883a 	mov	r20,r17
 200b75c:	800b883a 	mov	r5,r16
 200b760:	800d883a 	mov	r6,r16
 200b764:	9809883a 	mov	r4,r19
 200b768:	903fec1e 	bne	r18,zero,200b71c <__pow5mult+0x54>
 200b76c:	a005883a 	mov	r2,r20
 200b770:	dfc00517 	ldw	ra,20(sp)
 200b774:	dd000417 	ldw	r20,16(sp)
 200b778:	dcc00317 	ldw	r19,12(sp)
 200b77c:	dc800217 	ldw	r18,8(sp)
 200b780:	dc400117 	ldw	r17,4(sp)
 200b784:	dc000017 	ldw	r16,0(sp)
 200b788:	dec00604 	addi	sp,sp,24
 200b78c:	f800283a 	ret
 200b790:	200b3a40 	call	200b3a4 <__multiply>
 200b794:	80800015 	stw	r2,0(r16)
 200b798:	1021883a 	mov	r16,r2
 200b79c:	10000015 	stw	zero,0(r2)
 200b7a0:	003fe106 	br	200b728 <__pow5mult+0x60>
 200b7a4:	1085883a 	add	r2,r2,r2
 200b7a8:	00c08074 	movhi	r3,513
 200b7ac:	18d7d604 	addi	r3,r3,24408
 200b7b0:	1085883a 	add	r2,r2,r2
 200b7b4:	10c5883a 	add	r2,r2,r3
 200b7b8:	11bfff17 	ldw	r6,-4(r2)
 200b7bc:	000f883a 	mov	r7,zero
 200b7c0:	200b5c80 	call	200b5c8 <__multadd>
 200b7c4:	1029883a 	mov	r20,r2
 200b7c8:	003fcb06 	br	200b6f8 <__pow5mult+0x30>
 200b7cc:	9809883a 	mov	r4,r19
 200b7d0:	01409c44 	movi	r5,625
 200b7d4:	200b58c0 	call	200b58c <__i2b>
 200b7d8:	98801215 	stw	r2,72(r19)
 200b7dc:	1021883a 	mov	r16,r2
 200b7e0:	10000015 	stw	zero,0(r2)
 200b7e4:	003fd006 	br	200b728 <__pow5mult+0x60>

0200b7e8 <__s2b>:
 200b7e8:	defff904 	addi	sp,sp,-28
 200b7ec:	dcc00315 	stw	r19,12(sp)
 200b7f0:	dc800215 	stw	r18,8(sp)
 200b7f4:	2827883a 	mov	r19,r5
 200b7f8:	2025883a 	mov	r18,r4
 200b7fc:	01400244 	movi	r5,9
 200b800:	39000204 	addi	r4,r7,8
 200b804:	dd000415 	stw	r20,16(sp)
 200b808:	dc400115 	stw	r17,4(sp)
 200b80c:	dfc00615 	stw	ra,24(sp)
 200b810:	dd400515 	stw	r21,20(sp)
 200b814:	dc000015 	stw	r16,0(sp)
 200b818:	3829883a 	mov	r20,r7
 200b81c:	3023883a 	mov	r17,r6
 200b820:	2002f0c0 	call	2002f0c <__divsi3>
 200b824:	00c00044 	movi	r3,1
 200b828:	1880350e 	bge	r3,r2,200b900 <__s2b+0x118>
 200b82c:	000b883a 	mov	r5,zero
 200b830:	18c7883a 	add	r3,r3,r3
 200b834:	29400044 	addi	r5,r5,1
 200b838:	18bffd16 	blt	r3,r2,200b830 <__s2b+0x48>
 200b83c:	9009883a 	mov	r4,r18
 200b840:	200ae940 	call	200ae94 <_Balloc>
 200b844:	1011883a 	mov	r8,r2
 200b848:	d8800717 	ldw	r2,28(sp)
 200b84c:	00c00044 	movi	r3,1
 200b850:	01800244 	movi	r6,9
 200b854:	40800515 	stw	r2,20(r8)
 200b858:	40c00415 	stw	r3,16(r8)
 200b85c:	3440260e 	bge	r6,r17,200b8f8 <__s2b+0x110>
 200b860:	3021883a 	mov	r16,r6
 200b864:	99ab883a 	add	r21,r19,r6
 200b868:	9c05883a 	add	r2,r19,r16
 200b86c:	11c00007 	ldb	r7,0(r2)
 200b870:	400b883a 	mov	r5,r8
 200b874:	9009883a 	mov	r4,r18
 200b878:	39fff404 	addi	r7,r7,-48
 200b87c:	01800284 	movi	r6,10
 200b880:	200b5c80 	call	200b5c8 <__multadd>
 200b884:	84000044 	addi	r16,r16,1
 200b888:	1011883a 	mov	r8,r2
 200b88c:	8c3ff61e 	bne	r17,r16,200b868 <__s2b+0x80>
 200b890:	ac45883a 	add	r2,r21,r17
 200b894:	117ffe04 	addi	r5,r2,-8
 200b898:	880d883a 	mov	r6,r17
 200b89c:	35000c0e 	bge	r6,r20,200b8d0 <__s2b+0xe8>
 200b8a0:	a185c83a 	sub	r2,r20,r6
 200b8a4:	2821883a 	mov	r16,r5
 200b8a8:	28a3883a 	add	r17,r5,r2
 200b8ac:	81c00007 	ldb	r7,0(r16)
 200b8b0:	400b883a 	mov	r5,r8
 200b8b4:	9009883a 	mov	r4,r18
 200b8b8:	39fff404 	addi	r7,r7,-48
 200b8bc:	01800284 	movi	r6,10
 200b8c0:	200b5c80 	call	200b5c8 <__multadd>
 200b8c4:	84000044 	addi	r16,r16,1
 200b8c8:	1011883a 	mov	r8,r2
 200b8cc:	847ff71e 	bne	r16,r17,200b8ac <__s2b+0xc4>
 200b8d0:	4005883a 	mov	r2,r8
 200b8d4:	dfc00617 	ldw	ra,24(sp)
 200b8d8:	dd400517 	ldw	r21,20(sp)
 200b8dc:	dd000417 	ldw	r20,16(sp)
 200b8e0:	dcc00317 	ldw	r19,12(sp)
 200b8e4:	dc800217 	ldw	r18,8(sp)
 200b8e8:	dc400117 	ldw	r17,4(sp)
 200b8ec:	dc000017 	ldw	r16,0(sp)
 200b8f0:	dec00704 	addi	sp,sp,28
 200b8f4:	f800283a 	ret
 200b8f8:	99400284 	addi	r5,r19,10
 200b8fc:	003fe706 	br	200b89c <__s2b+0xb4>
 200b900:	000b883a 	mov	r5,zero
 200b904:	003fcd06 	br	200b83c <__s2b+0x54>

0200b908 <_realloc_r>:
 200b908:	defff404 	addi	sp,sp,-48
 200b90c:	dd800815 	stw	r22,32(sp)
 200b910:	dc800415 	stw	r18,16(sp)
 200b914:	dc400315 	stw	r17,12(sp)
 200b918:	dfc00b15 	stw	ra,44(sp)
 200b91c:	df000a15 	stw	fp,40(sp)
 200b920:	ddc00915 	stw	r23,36(sp)
 200b924:	dd400715 	stw	r21,28(sp)
 200b928:	dd000615 	stw	r20,24(sp)
 200b92c:	dcc00515 	stw	r19,20(sp)
 200b930:	dc000215 	stw	r16,8(sp)
 200b934:	2825883a 	mov	r18,r5
 200b938:	3023883a 	mov	r17,r6
 200b93c:	202d883a 	mov	r22,r4
 200b940:	2800c926 	beq	r5,zero,200bc68 <_realloc_r+0x360>
 200b944:	2011de00 	call	2011de0 <__malloc_lock>
 200b948:	943ffe04 	addi	r16,r18,-8
 200b94c:	88c002c4 	addi	r3,r17,11
 200b950:	00800584 	movi	r2,22
 200b954:	82000117 	ldw	r8,4(r16)
 200b958:	10c01b2e 	bgeu	r2,r3,200b9c8 <_realloc_r+0xc0>
 200b95c:	00bffe04 	movi	r2,-8
 200b960:	188e703a 	and	r7,r3,r2
 200b964:	3839883a 	mov	fp,r7
 200b968:	38001a16 	blt	r7,zero,200b9d4 <_realloc_r+0xcc>
 200b96c:	e4401936 	bltu	fp,r17,200b9d4 <_realloc_r+0xcc>
 200b970:	013fff04 	movi	r4,-4
 200b974:	4126703a 	and	r19,r8,r4
 200b978:	99c02616 	blt	r19,r7,200ba14 <_realloc_r+0x10c>
 200b97c:	802b883a 	mov	r21,r16
 200b980:	9829883a 	mov	r20,r19
 200b984:	84000204 	addi	r16,r16,8
 200b988:	a80f883a 	mov	r7,r21
 200b98c:	a70dc83a 	sub	r6,r20,fp
 200b990:	008003c4 	movi	r2,15
 200b994:	1180c136 	bltu	r2,r6,200bc9c <_realloc_r+0x394>
 200b998:	38800117 	ldw	r2,4(r7)
 200b99c:	a549883a 	add	r4,r20,r21
 200b9a0:	1080004c 	andi	r2,r2,1
 200b9a4:	a084b03a 	or	r2,r20,r2
 200b9a8:	38800115 	stw	r2,4(r7)
 200b9ac:	20c00117 	ldw	r3,4(r4)
 200b9b0:	18c00054 	ori	r3,r3,1
 200b9b4:	20c00115 	stw	r3,4(r4)
 200b9b8:	b009883a 	mov	r4,r22
 200b9bc:	2011e000 	call	2011e00 <__malloc_unlock>
 200b9c0:	8023883a 	mov	r17,r16
 200b9c4:	00000606 	br	200b9e0 <_realloc_r+0xd8>
 200b9c8:	01c00404 	movi	r7,16
 200b9cc:	3839883a 	mov	fp,r7
 200b9d0:	e47fe72e 	bgeu	fp,r17,200b970 <_realloc_r+0x68>
 200b9d4:	00800304 	movi	r2,12
 200b9d8:	0023883a 	mov	r17,zero
 200b9dc:	b0800015 	stw	r2,0(r22)
 200b9e0:	8805883a 	mov	r2,r17
 200b9e4:	dfc00b17 	ldw	ra,44(sp)
 200b9e8:	df000a17 	ldw	fp,40(sp)
 200b9ec:	ddc00917 	ldw	r23,36(sp)
 200b9f0:	dd800817 	ldw	r22,32(sp)
 200b9f4:	dd400717 	ldw	r21,28(sp)
 200b9f8:	dd000617 	ldw	r20,24(sp)
 200b9fc:	dcc00517 	ldw	r19,20(sp)
 200ba00:	dc800417 	ldw	r18,16(sp)
 200ba04:	dc400317 	ldw	r17,12(sp)
 200ba08:	dc000217 	ldw	r16,8(sp)
 200ba0c:	dec00c04 	addi	sp,sp,48
 200ba10:	f800283a 	ret
 200ba14:	00808074 	movhi	r2,513
 200ba18:	10984404 	addi	r2,r2,24848
 200ba1c:	12400217 	ldw	r9,8(r2)
 200ba20:	84cd883a 	add	r6,r16,r19
 200ba24:	802b883a 	mov	r21,r16
 200ba28:	3240b926 	beq	r6,r9,200bd10 <_realloc_r+0x408>
 200ba2c:	31400117 	ldw	r5,4(r6)
 200ba30:	00bfff84 	movi	r2,-2
 200ba34:	2884703a 	and	r2,r5,r2
 200ba38:	1185883a 	add	r2,r2,r6
 200ba3c:	10c00117 	ldw	r3,4(r2)
 200ba40:	18c0004c 	andi	r3,r3,1
 200ba44:	1807003a 	cmpeq	r3,r3,zero
 200ba48:	1800a326 	beq	r3,zero,200bcd8 <_realloc_r+0x3d0>
 200ba4c:	2908703a 	and	r4,r5,r4
 200ba50:	9929883a 	add	r20,r19,r4
 200ba54:	a1c0a30e 	bge	r20,r7,200bce4 <_realloc_r+0x3dc>
 200ba58:	4080004c 	andi	r2,r8,1
 200ba5c:	1000551e 	bne	r2,zero,200bbb4 <_realloc_r+0x2ac>
 200ba60:	80800017 	ldw	r2,0(r16)
 200ba64:	80afc83a 	sub	r23,r16,r2
 200ba68:	b8c00117 	ldw	r3,4(r23)
 200ba6c:	00bfff04 	movi	r2,-4
 200ba70:	1884703a 	and	r2,r3,r2
 200ba74:	30002e26 	beq	r6,zero,200bb30 <_realloc_r+0x228>
 200ba78:	3240b926 	beq	r6,r9,200bd60 <_realloc_r+0x458>
 200ba7c:	98a9883a 	add	r20,r19,r2
 200ba80:	2509883a 	add	r4,r4,r20
 200ba84:	d9000015 	stw	r4,0(sp)
 200ba88:	21c02a16 	blt	r4,r7,200bb34 <_realloc_r+0x22c>
 200ba8c:	30800317 	ldw	r2,12(r6)
 200ba90:	30c00217 	ldw	r3,8(r6)
 200ba94:	01400904 	movi	r5,36
 200ba98:	99bfff04 	addi	r6,r19,-4
 200ba9c:	18800315 	stw	r2,12(r3)
 200baa0:	10c00215 	stw	r3,8(r2)
 200baa4:	b9000317 	ldw	r4,12(r23)
 200baa8:	b8800217 	ldw	r2,8(r23)
 200baac:	b82b883a 	mov	r21,r23
 200bab0:	bc000204 	addi	r16,r23,8
 200bab4:	20800215 	stw	r2,8(r4)
 200bab8:	11000315 	stw	r4,12(r2)
 200babc:	2980e436 	bltu	r5,r6,200be50 <_realloc_r+0x548>
 200bac0:	008004c4 	movi	r2,19
 200bac4:	9009883a 	mov	r4,r18
 200bac8:	8011883a 	mov	r8,r16
 200bacc:	11800f2e 	bgeu	r2,r6,200bb0c <_realloc_r+0x204>
 200bad0:	90800017 	ldw	r2,0(r18)
 200bad4:	ba000404 	addi	r8,r23,16
 200bad8:	91000204 	addi	r4,r18,8
 200badc:	b8800215 	stw	r2,8(r23)
 200bae0:	90c00117 	ldw	r3,4(r18)
 200bae4:	008006c4 	movi	r2,27
 200bae8:	b8c00315 	stw	r3,12(r23)
 200baec:	1180072e 	bgeu	r2,r6,200bb0c <_realloc_r+0x204>
 200baf0:	90c00217 	ldw	r3,8(r18)
 200baf4:	ba000604 	addi	r8,r23,24
 200baf8:	91000404 	addi	r4,r18,16
 200bafc:	b8c00415 	stw	r3,16(r23)
 200bb00:	90800317 	ldw	r2,12(r18)
 200bb04:	b8800515 	stw	r2,20(r23)
 200bb08:	3140e726 	beq	r6,r5,200bea8 <_realloc_r+0x5a0>
 200bb0c:	20800017 	ldw	r2,0(r4)
 200bb10:	dd000017 	ldw	r20,0(sp)
 200bb14:	b80f883a 	mov	r7,r23
 200bb18:	40800015 	stw	r2,0(r8)
 200bb1c:	20c00117 	ldw	r3,4(r4)
 200bb20:	40c00115 	stw	r3,4(r8)
 200bb24:	20800217 	ldw	r2,8(r4)
 200bb28:	40800215 	stw	r2,8(r8)
 200bb2c:	003f9706 	br	200b98c <_realloc_r+0x84>
 200bb30:	98a9883a 	add	r20,r19,r2
 200bb34:	a1c01f16 	blt	r20,r7,200bbb4 <_realloc_r+0x2ac>
 200bb38:	b8c00317 	ldw	r3,12(r23)
 200bb3c:	b8800217 	ldw	r2,8(r23)
 200bb40:	99bfff04 	addi	r6,r19,-4
 200bb44:	01400904 	movi	r5,36
 200bb48:	b82b883a 	mov	r21,r23
 200bb4c:	18800215 	stw	r2,8(r3)
 200bb50:	10c00315 	stw	r3,12(r2)
 200bb54:	bc000204 	addi	r16,r23,8
 200bb58:	2980c336 	bltu	r5,r6,200be68 <_realloc_r+0x560>
 200bb5c:	008004c4 	movi	r2,19
 200bb60:	9009883a 	mov	r4,r18
 200bb64:	8011883a 	mov	r8,r16
 200bb68:	11800f2e 	bgeu	r2,r6,200bba8 <_realloc_r+0x2a0>
 200bb6c:	90800017 	ldw	r2,0(r18)
 200bb70:	ba000404 	addi	r8,r23,16
 200bb74:	91000204 	addi	r4,r18,8
 200bb78:	b8800215 	stw	r2,8(r23)
 200bb7c:	90c00117 	ldw	r3,4(r18)
 200bb80:	008006c4 	movi	r2,27
 200bb84:	b8c00315 	stw	r3,12(r23)
 200bb88:	1180072e 	bgeu	r2,r6,200bba8 <_realloc_r+0x2a0>
 200bb8c:	90c00217 	ldw	r3,8(r18)
 200bb90:	ba000604 	addi	r8,r23,24
 200bb94:	91000404 	addi	r4,r18,16
 200bb98:	b8c00415 	stw	r3,16(r23)
 200bb9c:	90800317 	ldw	r2,12(r18)
 200bba0:	b8800515 	stw	r2,20(r23)
 200bba4:	3140c726 	beq	r6,r5,200bec4 <_realloc_r+0x5bc>
 200bba8:	20800017 	ldw	r2,0(r4)
 200bbac:	b80f883a 	mov	r7,r23
 200bbb0:	003fd906 	br	200bb18 <_realloc_r+0x210>
 200bbb4:	880b883a 	mov	r5,r17
 200bbb8:	b009883a 	mov	r4,r22
 200bbbc:	20037900 	call	2003790 <_malloc_r>
 200bbc0:	1023883a 	mov	r17,r2
 200bbc4:	10002526 	beq	r2,zero,200bc5c <_realloc_r+0x354>
 200bbc8:	80800117 	ldw	r2,4(r16)
 200bbcc:	00ffff84 	movi	r3,-2
 200bbd0:	893ffe04 	addi	r4,r17,-8
 200bbd4:	10c4703a 	and	r2,r2,r3
 200bbd8:	8085883a 	add	r2,r16,r2
 200bbdc:	20809526 	beq	r4,r2,200be34 <_realloc_r+0x52c>
 200bbe0:	99bfff04 	addi	r6,r19,-4
 200bbe4:	01c00904 	movi	r7,36
 200bbe8:	39804536 	bltu	r7,r6,200bd00 <_realloc_r+0x3f8>
 200bbec:	008004c4 	movi	r2,19
 200bbf0:	9009883a 	mov	r4,r18
 200bbf4:	880b883a 	mov	r5,r17
 200bbf8:	11800f2e 	bgeu	r2,r6,200bc38 <_realloc_r+0x330>
 200bbfc:	90800017 	ldw	r2,0(r18)
 200bc00:	89400204 	addi	r5,r17,8
 200bc04:	91000204 	addi	r4,r18,8
 200bc08:	88800015 	stw	r2,0(r17)
 200bc0c:	90c00117 	ldw	r3,4(r18)
 200bc10:	008006c4 	movi	r2,27
 200bc14:	88c00115 	stw	r3,4(r17)
 200bc18:	1180072e 	bgeu	r2,r6,200bc38 <_realloc_r+0x330>
 200bc1c:	90c00217 	ldw	r3,8(r18)
 200bc20:	89400404 	addi	r5,r17,16
 200bc24:	91000404 	addi	r4,r18,16
 200bc28:	88c00215 	stw	r3,8(r17)
 200bc2c:	90800317 	ldw	r2,12(r18)
 200bc30:	88800315 	stw	r2,12(r17)
 200bc34:	31c09126 	beq	r6,r7,200be7c <_realloc_r+0x574>
 200bc38:	20800017 	ldw	r2,0(r4)
 200bc3c:	28800015 	stw	r2,0(r5)
 200bc40:	20c00117 	ldw	r3,4(r4)
 200bc44:	28c00115 	stw	r3,4(r5)
 200bc48:	20800217 	ldw	r2,8(r4)
 200bc4c:	28800215 	stw	r2,8(r5)
 200bc50:	900b883a 	mov	r5,r18
 200bc54:	b009883a 	mov	r4,r22
 200bc58:	20099640 	call	2009964 <_free_r>
 200bc5c:	b009883a 	mov	r4,r22
 200bc60:	2011e000 	call	2011e00 <__malloc_unlock>
 200bc64:	003f5e06 	br	200b9e0 <_realloc_r+0xd8>
 200bc68:	300b883a 	mov	r5,r6
 200bc6c:	dfc00b17 	ldw	ra,44(sp)
 200bc70:	df000a17 	ldw	fp,40(sp)
 200bc74:	ddc00917 	ldw	r23,36(sp)
 200bc78:	dd800817 	ldw	r22,32(sp)
 200bc7c:	dd400717 	ldw	r21,28(sp)
 200bc80:	dd000617 	ldw	r20,24(sp)
 200bc84:	dcc00517 	ldw	r19,20(sp)
 200bc88:	dc800417 	ldw	r18,16(sp)
 200bc8c:	dc400317 	ldw	r17,12(sp)
 200bc90:	dc000217 	ldw	r16,8(sp)
 200bc94:	dec00c04 	addi	sp,sp,48
 200bc98:	20037901 	jmpi	2003790 <_malloc_r>
 200bc9c:	38800117 	ldw	r2,4(r7)
 200bca0:	e54b883a 	add	r5,fp,r21
 200bca4:	31000054 	ori	r4,r6,1
 200bca8:	1080004c 	andi	r2,r2,1
 200bcac:	1704b03a 	or	r2,r2,fp
 200bcb0:	38800115 	stw	r2,4(r7)
 200bcb4:	29000115 	stw	r4,4(r5)
 200bcb8:	2987883a 	add	r3,r5,r6
 200bcbc:	18800117 	ldw	r2,4(r3)
 200bcc0:	29400204 	addi	r5,r5,8
 200bcc4:	b009883a 	mov	r4,r22
 200bcc8:	10800054 	ori	r2,r2,1
 200bccc:	18800115 	stw	r2,4(r3)
 200bcd0:	20099640 	call	2009964 <_free_r>
 200bcd4:	003f3806 	br	200b9b8 <_realloc_r+0xb0>
 200bcd8:	000d883a 	mov	r6,zero
 200bcdc:	0009883a 	mov	r4,zero
 200bce0:	003f5d06 	br	200ba58 <_realloc_r+0x150>
 200bce4:	30c00217 	ldw	r3,8(r6)
 200bce8:	30800317 	ldw	r2,12(r6)
 200bcec:	800f883a 	mov	r7,r16
 200bcf0:	84000204 	addi	r16,r16,8
 200bcf4:	10c00215 	stw	r3,8(r2)
 200bcf8:	18800315 	stw	r2,12(r3)
 200bcfc:	003f2306 	br	200b98c <_realloc_r+0x84>
 200bd00:	8809883a 	mov	r4,r17
 200bd04:	900b883a 	mov	r5,r18
 200bd08:	200a79c0 	call	200a79c <memmove>
 200bd0c:	003fd006 	br	200bc50 <_realloc_r+0x348>
 200bd10:	30800117 	ldw	r2,4(r6)
 200bd14:	e0c00404 	addi	r3,fp,16
 200bd18:	1108703a 	and	r4,r2,r4
 200bd1c:	9905883a 	add	r2,r19,r4
 200bd20:	10ff4d16 	blt	r2,r3,200ba58 <_realloc_r+0x150>
 200bd24:	1705c83a 	sub	r2,r2,fp
 200bd28:	870b883a 	add	r5,r16,fp
 200bd2c:	10800054 	ori	r2,r2,1
 200bd30:	28800115 	stw	r2,4(r5)
 200bd34:	80c00117 	ldw	r3,4(r16)
 200bd38:	00808074 	movhi	r2,513
 200bd3c:	10984404 	addi	r2,r2,24848
 200bd40:	b009883a 	mov	r4,r22
 200bd44:	18c0004c 	andi	r3,r3,1
 200bd48:	e0c6b03a 	or	r3,fp,r3
 200bd4c:	11400215 	stw	r5,8(r2)
 200bd50:	80c00115 	stw	r3,4(r16)
 200bd54:	2011e000 	call	2011e00 <__malloc_unlock>
 200bd58:	84400204 	addi	r17,r16,8
 200bd5c:	003f2006 	br	200b9e0 <_realloc_r+0xd8>
 200bd60:	98a9883a 	add	r20,r19,r2
 200bd64:	2509883a 	add	r4,r4,r20
 200bd68:	e0800404 	addi	r2,fp,16
 200bd6c:	d9000115 	stw	r4,4(sp)
 200bd70:	20bf7016 	blt	r4,r2,200bb34 <_realloc_r+0x22c>
 200bd74:	b8c00317 	ldw	r3,12(r23)
 200bd78:	b8800217 	ldw	r2,8(r23)
 200bd7c:	99bfff04 	addi	r6,r19,-4
 200bd80:	01400904 	movi	r5,36
 200bd84:	18800215 	stw	r2,8(r3)
 200bd88:	10c00315 	stw	r3,12(r2)
 200bd8c:	bc400204 	addi	r17,r23,8
 200bd90:	29804136 	bltu	r5,r6,200be98 <_realloc_r+0x590>
 200bd94:	008004c4 	movi	r2,19
 200bd98:	9009883a 	mov	r4,r18
 200bd9c:	880f883a 	mov	r7,r17
 200bda0:	11800f2e 	bgeu	r2,r6,200bde0 <_realloc_r+0x4d8>
 200bda4:	90800017 	ldw	r2,0(r18)
 200bda8:	b9c00404 	addi	r7,r23,16
 200bdac:	91000204 	addi	r4,r18,8
 200bdb0:	b8800215 	stw	r2,8(r23)
 200bdb4:	90c00117 	ldw	r3,4(r18)
 200bdb8:	008006c4 	movi	r2,27
 200bdbc:	b8c00315 	stw	r3,12(r23)
 200bdc0:	1180072e 	bgeu	r2,r6,200bde0 <_realloc_r+0x4d8>
 200bdc4:	90c00217 	ldw	r3,8(r18)
 200bdc8:	b9c00604 	addi	r7,r23,24
 200bdcc:	91000404 	addi	r4,r18,16
 200bdd0:	b8c00415 	stw	r3,16(r23)
 200bdd4:	90800317 	ldw	r2,12(r18)
 200bdd8:	b8800515 	stw	r2,20(r23)
 200bddc:	31404026 	beq	r6,r5,200bee0 <_realloc_r+0x5d8>
 200bde0:	20800017 	ldw	r2,0(r4)
 200bde4:	38800015 	stw	r2,0(r7)
 200bde8:	20c00117 	ldw	r3,4(r4)
 200bdec:	38c00115 	stw	r3,4(r7)
 200bdf0:	20800217 	ldw	r2,8(r4)
 200bdf4:	38800215 	stw	r2,8(r7)
 200bdf8:	d8c00117 	ldw	r3,4(sp)
 200bdfc:	bf0b883a 	add	r5,r23,fp
 200be00:	b009883a 	mov	r4,r22
 200be04:	1f05c83a 	sub	r2,r3,fp
 200be08:	10800054 	ori	r2,r2,1
 200be0c:	28800115 	stw	r2,4(r5)
 200be10:	b8c00117 	ldw	r3,4(r23)
 200be14:	00808074 	movhi	r2,513
 200be18:	10984404 	addi	r2,r2,24848
 200be1c:	11400215 	stw	r5,8(r2)
 200be20:	18c0004c 	andi	r3,r3,1
 200be24:	e0c6b03a 	or	r3,fp,r3
 200be28:	b8c00115 	stw	r3,4(r23)
 200be2c:	2011e000 	call	2011e00 <__malloc_unlock>
 200be30:	003eeb06 	br	200b9e0 <_realloc_r+0xd8>
 200be34:	20800117 	ldw	r2,4(r4)
 200be38:	00ffff04 	movi	r3,-4
 200be3c:	800f883a 	mov	r7,r16
 200be40:	10c4703a 	and	r2,r2,r3
 200be44:	98a9883a 	add	r20,r19,r2
 200be48:	84000204 	addi	r16,r16,8
 200be4c:	003ecf06 	br	200b98c <_realloc_r+0x84>
 200be50:	900b883a 	mov	r5,r18
 200be54:	8009883a 	mov	r4,r16
 200be58:	200a79c0 	call	200a79c <memmove>
 200be5c:	dd000017 	ldw	r20,0(sp)
 200be60:	b80f883a 	mov	r7,r23
 200be64:	003ec906 	br	200b98c <_realloc_r+0x84>
 200be68:	900b883a 	mov	r5,r18
 200be6c:	8009883a 	mov	r4,r16
 200be70:	200a79c0 	call	200a79c <memmove>
 200be74:	b80f883a 	mov	r7,r23
 200be78:	003ec406 	br	200b98c <_realloc_r+0x84>
 200be7c:	90c00417 	ldw	r3,16(r18)
 200be80:	89400604 	addi	r5,r17,24
 200be84:	91000604 	addi	r4,r18,24
 200be88:	88c00415 	stw	r3,16(r17)
 200be8c:	90800517 	ldw	r2,20(r18)
 200be90:	88800515 	stw	r2,20(r17)
 200be94:	003f6806 	br	200bc38 <_realloc_r+0x330>
 200be98:	900b883a 	mov	r5,r18
 200be9c:	8809883a 	mov	r4,r17
 200bea0:	200a79c0 	call	200a79c <memmove>
 200bea4:	003fd406 	br	200bdf8 <_realloc_r+0x4f0>
 200bea8:	90c00417 	ldw	r3,16(r18)
 200beac:	91000604 	addi	r4,r18,24
 200beb0:	ba000804 	addi	r8,r23,32
 200beb4:	b8c00615 	stw	r3,24(r23)
 200beb8:	90800517 	ldw	r2,20(r18)
 200bebc:	b8800715 	stw	r2,28(r23)
 200bec0:	003f1206 	br	200bb0c <_realloc_r+0x204>
 200bec4:	90c00417 	ldw	r3,16(r18)
 200bec8:	91000604 	addi	r4,r18,24
 200becc:	ba000804 	addi	r8,r23,32
 200bed0:	b8c00615 	stw	r3,24(r23)
 200bed4:	90800517 	ldw	r2,20(r18)
 200bed8:	b8800715 	stw	r2,28(r23)
 200bedc:	003f3206 	br	200bba8 <_realloc_r+0x2a0>
 200bee0:	90c00417 	ldw	r3,16(r18)
 200bee4:	91000604 	addi	r4,r18,24
 200bee8:	b9c00804 	addi	r7,r23,32
 200beec:	b8c00615 	stw	r3,24(r23)
 200bef0:	90800517 	ldw	r2,20(r18)
 200bef4:	b8800715 	stw	r2,28(r23)
 200bef8:	003fb906 	br	200bde0 <_realloc_r+0x4d8>

0200befc <__srefill_r>:
 200befc:	defffd04 	addi	sp,sp,-12
 200bf00:	dc400115 	stw	r17,4(sp)
 200bf04:	dc000015 	stw	r16,0(sp)
 200bf08:	dfc00215 	stw	ra,8(sp)
 200bf0c:	2023883a 	mov	r17,r4
 200bf10:	2821883a 	mov	r16,r5
 200bf14:	20000226 	beq	r4,zero,200bf20 <__srefill_r+0x24>
 200bf18:	20800e17 	ldw	r2,56(r4)
 200bf1c:	10004126 	beq	r2,zero,200c024 <__srefill_r+0x128>
 200bf20:	80c0030b 	ldhu	r3,12(r16)
 200bf24:	80000115 	stw	zero,4(r16)
 200bf28:	1880080c 	andi	r2,r3,32
 200bf2c:	1000361e 	bne	r2,zero,200c008 <__srefill_r+0x10c>
 200bf30:	1880010c 	andi	r2,r3,4
 200bf34:	1000211e 	bne	r2,zero,200bfbc <__srefill_r+0xc0>
 200bf38:	1880040c 	andi	r2,r3,16
 200bf3c:	10005026 	beq	r2,zero,200c080 <__srefill_r+0x184>
 200bf40:	1880020c 	andi	r2,r3,8
 200bf44:	1000541e 	bne	r2,zero,200c098 <__srefill_r+0x19c>
 200bf48:	8080030b 	ldhu	r2,12(r16)
 200bf4c:	10800114 	ori	r2,r2,4
 200bf50:	8080030d 	sth	r2,12(r16)
 200bf54:	80800417 	ldw	r2,16(r16)
 200bf58:	10004526 	beq	r2,zero,200c070 <__srefill_r+0x174>
 200bf5c:	8080030b 	ldhu	r2,12(r16)
 200bf60:	108000cc 	andi	r2,r2,3
 200bf64:	1000361e 	bne	r2,zero,200c040 <__srefill_r+0x144>
 200bf68:	81800417 	ldw	r6,16(r16)
 200bf6c:	80c00817 	ldw	r3,32(r16)
 200bf70:	81400717 	ldw	r5,28(r16)
 200bf74:	81c00517 	ldw	r7,20(r16)
 200bf78:	8809883a 	mov	r4,r17
 200bf7c:	81800015 	stw	r6,0(r16)
 200bf80:	183ee83a 	callr	r3
 200bf84:	80c0030b 	ldhu	r3,12(r16)
 200bf88:	1009883a 	mov	r4,r2
 200bf8c:	80800115 	stw	r2,4(r16)
 200bf90:	00b7ffc4 	movi	r2,-8193
 200bf94:	1884703a 	and	r2,r3,r2
 200bf98:	8080030d 	sth	r2,12(r16)
 200bf9c:	0100230e 	bge	zero,r4,200c02c <__srefill_r+0x130>
 200bfa0:	0009883a 	mov	r4,zero
 200bfa4:	2005883a 	mov	r2,r4
 200bfa8:	dfc00217 	ldw	ra,8(sp)
 200bfac:	dc400117 	ldw	r17,4(sp)
 200bfb0:	dc000017 	ldw	r16,0(sp)
 200bfb4:	dec00304 	addi	sp,sp,12
 200bfb8:	f800283a 	ret
 200bfbc:	81400c17 	ldw	r5,48(r16)
 200bfc0:	283fe426 	beq	r5,zero,200bf54 <__srefill_r+0x58>
 200bfc4:	80801004 	addi	r2,r16,64
 200bfc8:	28800226 	beq	r5,r2,200bfd4 <__srefill_r+0xd8>
 200bfcc:	8809883a 	mov	r4,r17
 200bfd0:	20099640 	call	2009964 <_free_r>
 200bfd4:	80800f17 	ldw	r2,60(r16)
 200bfd8:	80000c15 	stw	zero,48(r16)
 200bfdc:	80800115 	stw	r2,4(r16)
 200bfe0:	103fdc26 	beq	r2,zero,200bf54 <__srefill_r+0x58>
 200bfe4:	80800e17 	ldw	r2,56(r16)
 200bfe8:	0009883a 	mov	r4,zero
 200bfec:	80800015 	stw	r2,0(r16)
 200bff0:	2005883a 	mov	r2,r4
 200bff4:	dfc00217 	ldw	ra,8(sp)
 200bff8:	dc400117 	ldw	r17,4(sp)
 200bffc:	dc000017 	ldw	r16,0(sp)
 200c000:	dec00304 	addi	sp,sp,12
 200c004:	f800283a 	ret
 200c008:	013fffc4 	movi	r4,-1
 200c00c:	2005883a 	mov	r2,r4
 200c010:	dfc00217 	ldw	ra,8(sp)
 200c014:	dc400117 	ldw	r17,4(sp)
 200c018:	dc000017 	ldw	r16,0(sp)
 200c01c:	dec00304 	addi	sp,sp,12
 200c020:	f800283a 	ret
 200c024:	20093a40 	call	20093a4 <__sinit>
 200c028:	003fbd06 	br	200bf20 <__srefill_r+0x24>
 200c02c:	20000b1e 	bne	r4,zero,200c05c <__srefill_r+0x160>
 200c030:	10800814 	ori	r2,r2,32
 200c034:	013fffc4 	movi	r4,-1
 200c038:	8080030d 	sth	r2,12(r16)
 200c03c:	003fd906 	br	200bfa4 <__srefill_r+0xa8>
 200c040:	00808074 	movhi	r2,513
 200c044:	109f0b04 	addi	r2,r2,31788
 200c048:	11000017 	ldw	r4,0(r2)
 200c04c:	01408074 	movhi	r5,513
 200c050:	29703004 	addi	r5,r5,-16192
 200c054:	200a1dc0 	call	200a1dc <_fwalk>
 200c058:	003fc306 	br	200bf68 <__srefill_r+0x6c>
 200c05c:	10801014 	ori	r2,r2,64
 200c060:	013fffc4 	movi	r4,-1
 200c064:	8080030d 	sth	r2,12(r16)
 200c068:	80000115 	stw	zero,4(r16)
 200c06c:	003fcd06 	br	200bfa4 <__srefill_r+0xa8>
 200c070:	8809883a 	mov	r4,r17
 200c074:	800b883a 	mov	r5,r16
 200c078:	200a3840 	call	200a384 <__smakebuf_r>
 200c07c:	003fb706 	br	200bf5c <__srefill_r+0x60>
 200c080:	18c01014 	ori	r3,r3,64
 200c084:	00800244 	movi	r2,9
 200c088:	013fffc4 	movi	r4,-1
 200c08c:	88800015 	stw	r2,0(r17)
 200c090:	80c0030d 	sth	r3,12(r16)
 200c094:	003fc306 	br	200bfa4 <__srefill_r+0xa8>
 200c098:	8809883a 	mov	r4,r17
 200c09c:	800b883a 	mov	r5,r16
 200c0a0:	200910c0 	call	200910c <_fflush_r>
 200c0a4:	103fd81e 	bne	r2,zero,200c008 <__srefill_r+0x10c>
 200c0a8:	8080030b 	ldhu	r2,12(r16)
 200c0ac:	80000215 	stw	zero,8(r16)
 200c0b0:	80000615 	stw	zero,24(r16)
 200c0b4:	10bffdcc 	andi	r2,r2,65527
 200c0b8:	8080030d 	sth	r2,12(r16)
 200c0bc:	003fa206 	br	200bf48 <__srefill_r+0x4c>

0200c0c0 <lflush>:
 200c0c0:	20c0030b 	ldhu	r3,12(r4)
 200c0c4:	01400244 	movi	r5,9
 200c0c8:	0005883a 	mov	r2,zero
 200c0cc:	18c0024c 	andi	r3,r3,9
 200c0d0:	19400126 	beq	r3,r5,200c0d8 <lflush+0x18>
 200c0d4:	f800283a 	ret
 200c0d8:	20093081 	jmpi	2009308 <fflush>

0200c0dc <__isinfd>:
 200c0dc:	200d883a 	mov	r6,r4
 200c0e0:	0109c83a 	sub	r4,zero,r4
 200c0e4:	2188b03a 	or	r4,r4,r6
 200c0e8:	2008d7fa 	srli	r4,r4,31
 200c0ec:	00a00034 	movhi	r2,32768
 200c0f0:	10bfffc4 	addi	r2,r2,-1
 200c0f4:	1144703a 	and	r2,r2,r5
 200c0f8:	2088b03a 	or	r4,r4,r2
 200c0fc:	009ffc34 	movhi	r2,32752
 200c100:	1105c83a 	sub	r2,r2,r4
 200c104:	0087c83a 	sub	r3,zero,r2
 200c108:	10c4b03a 	or	r2,r2,r3
 200c10c:	1004d7fa 	srli	r2,r2,31
 200c110:	00c00044 	movi	r3,1
 200c114:	1885c83a 	sub	r2,r3,r2
 200c118:	f800283a 	ret

0200c11c <__isnand>:
 200c11c:	200d883a 	mov	r6,r4
 200c120:	0109c83a 	sub	r4,zero,r4
 200c124:	2188b03a 	or	r4,r4,r6
 200c128:	2008d7fa 	srli	r4,r4,31
 200c12c:	00a00034 	movhi	r2,32768
 200c130:	10bfffc4 	addi	r2,r2,-1
 200c134:	1144703a 	and	r2,r2,r5
 200c138:	2088b03a 	or	r4,r4,r2
 200c13c:	009ffc34 	movhi	r2,32752
 200c140:	1105c83a 	sub	r2,r2,r4
 200c144:	1004d7fa 	srli	r2,r2,31
 200c148:	f800283a 	ret

0200c14c <__sccl>:
 200c14c:	28c00003 	ldbu	r3,0(r5)
 200c150:	00801784 	movi	r2,94
 200c154:	2a000044 	addi	r8,r5,1
 200c158:	18802526 	beq	r3,r2,200c1f0 <__sccl+0xa4>
 200c15c:	180f883a 	mov	r7,r3
 200c160:	0013883a 	mov	r9,zero
 200c164:	000d883a 	mov	r6,zero
 200c168:	0007883a 	mov	r3,zero
 200c16c:	01404004 	movi	r5,256
 200c170:	1905883a 	add	r2,r3,r4
 200c174:	18c00044 	addi	r3,r3,1
 200c178:	11800005 	stb	r6,0(r2)
 200c17c:	197ffc1e 	bne	r3,r5,200c170 <__sccl+0x24>
 200c180:	38000c26 	beq	r7,zero,200c1b4 <__sccl+0x68>
 200c184:	00800044 	movi	r2,1
 200c188:	124dc83a 	sub	r6,r2,r9
 200c18c:	3905883a 	add	r2,r7,r4
 200c190:	11800005 	stb	r6,0(r2)
 200c194:	41400044 	addi	r5,r8,1
 200c198:	02400b44 	movi	r9,45
 200c19c:	02801744 	movi	r10,93
 200c1a0:	28bfffc3 	ldbu	r2,-1(r5)
 200c1a4:	2811883a 	mov	r8,r5
 200c1a8:	12400726 	beq	r2,r9,200c1c8 <__sccl+0x7c>
 200c1ac:	12800226 	beq	r2,r10,200c1b8 <__sccl+0x6c>
 200c1b0:	1000031e 	bne	r2,zero,200c1c0 <__sccl+0x74>
 200c1b4:	423fffc4 	addi	r8,r8,-1
 200c1b8:	4005883a 	mov	r2,r8
 200c1bc:	f800283a 	ret
 200c1c0:	100f883a 	mov	r7,r2
 200c1c4:	003ff106 	br	200c18c <__sccl+0x40>
 200c1c8:	28c00003 	ldbu	r3,0(r5)
 200c1cc:	1a800d26 	beq	r3,r10,200c204 <__sccl+0xb8>
 200c1d0:	19c00c16 	blt	r3,r7,200c204 <__sccl+0xb8>
 200c1d4:	21c5883a 	add	r2,r4,r7
 200c1d8:	39c00044 	addi	r7,r7,1
 200c1dc:	11800045 	stb	r6,1(r2)
 200c1e0:	10800044 	addi	r2,r2,1
 200c1e4:	38fffc16 	blt	r7,r3,200c1d8 <__sccl+0x8c>
 200c1e8:	29400084 	addi	r5,r5,2
 200c1ec:	003fec06 	br	200c1a0 <__sccl+0x54>
 200c1f0:	29c00043 	ldbu	r7,1(r5)
 200c1f4:	02400044 	movi	r9,1
 200c1f8:	2a000084 	addi	r8,r5,2
 200c1fc:	480d883a 	mov	r6,r9
 200c200:	003fd906 	br	200c168 <__sccl+0x1c>
 200c204:	01c00b44 	movi	r7,45
 200c208:	003fe006 	br	200c18c <__sccl+0x40>

0200c20c <nanf>:
 200c20c:	009ff034 	movhi	r2,32704
 200c210:	f800283a 	ret

0200c214 <sprintf>:
 200c214:	deffe504 	addi	sp,sp,-108
 200c218:	2013883a 	mov	r9,r4
 200c21c:	dfc01815 	stw	ra,96(sp)
 200c220:	d9801915 	stw	r6,100(sp)
 200c224:	d9c01a15 	stw	r7,104(sp)
 200c228:	d8801904 	addi	r2,sp,100
 200c22c:	d8800015 	stw	r2,0(sp)
 200c230:	00808074 	movhi	r2,513
 200c234:	109f0a04 	addi	r2,r2,31784
 200c238:	11000017 	ldw	r4,0(r2)
 200c23c:	d9c00017 	ldw	r7,0(sp)
 200c240:	00808204 	movi	r2,520
 200c244:	00e00034 	movhi	r3,32768
 200c248:	18ffffc4 	addi	r3,r3,-1
 200c24c:	280d883a 	mov	r6,r5
 200c250:	d880040d 	sth	r2,16(sp)
 200c254:	d9400104 	addi	r5,sp,4
 200c258:	00bfffc4 	movi	r2,-1
 200c25c:	d8c00615 	stw	r3,24(sp)
 200c260:	d8c00315 	stw	r3,12(sp)
 200c264:	da400515 	stw	r9,20(sp)
 200c268:	d880048d 	sth	r2,18(sp)
 200c26c:	da400115 	stw	r9,4(sp)
 200c270:	20041b40 	call	20041b4 <___vfprintf_internal_r>
 200c274:	d8c00117 	ldw	r3,4(sp)
 200c278:	18000005 	stb	zero,0(r3)
 200c27c:	dfc01817 	ldw	ra,96(sp)
 200c280:	dec01b04 	addi	sp,sp,108
 200c284:	f800283a 	ret

0200c288 <_sprintf_r>:
 200c288:	deffe604 	addi	sp,sp,-104
 200c28c:	2813883a 	mov	r9,r5
 200c290:	dfc01815 	stw	ra,96(sp)
 200c294:	d9c01915 	stw	r7,100(sp)
 200c298:	d8801904 	addi	r2,sp,100
 200c29c:	d8800015 	stw	r2,0(sp)
 200c2a0:	100f883a 	mov	r7,r2
 200c2a4:	00808204 	movi	r2,520
 200c2a8:	00e00034 	movhi	r3,32768
 200c2ac:	18ffffc4 	addi	r3,r3,-1
 200c2b0:	d880040d 	sth	r2,16(sp)
 200c2b4:	d9400104 	addi	r5,sp,4
 200c2b8:	00bfffc4 	movi	r2,-1
 200c2bc:	d8c00615 	stw	r3,24(sp)
 200c2c0:	d8c00315 	stw	r3,12(sp)
 200c2c4:	da400515 	stw	r9,20(sp)
 200c2c8:	d880048d 	sth	r2,18(sp)
 200c2cc:	da400115 	stw	r9,4(sp)
 200c2d0:	20041b40 	call	20041b4 <___vfprintf_internal_r>
 200c2d4:	d8c00117 	ldw	r3,4(sp)
 200c2d8:	18000005 	stb	zero,0(r3)
 200c2dc:	dfc01817 	ldw	ra,96(sp)
 200c2e0:	dec01a04 	addi	sp,sp,104
 200c2e4:	f800283a 	ret

0200c2e8 <__sclose>:
 200c2e8:	2940038f 	ldh	r5,14(r5)
 200c2ec:	200e9e01 	jmpi	200e9e0 <_close_r>

0200c2f0 <__sseek>:
 200c2f0:	defffe04 	addi	sp,sp,-8
 200c2f4:	dc000015 	stw	r16,0(sp)
 200c2f8:	2821883a 	mov	r16,r5
 200c2fc:	2940038f 	ldh	r5,14(r5)
 200c300:	dfc00115 	stw	ra,4(sp)
 200c304:	200f7e00 	call	200f7e0 <_lseek_r>
 200c308:	1007883a 	mov	r3,r2
 200c30c:	00bfffc4 	movi	r2,-1
 200c310:	18800926 	beq	r3,r2,200c338 <__sseek+0x48>
 200c314:	8080030b 	ldhu	r2,12(r16)
 200c318:	80c01415 	stw	r3,80(r16)
 200c31c:	10840014 	ori	r2,r2,4096
 200c320:	8080030d 	sth	r2,12(r16)
 200c324:	1805883a 	mov	r2,r3
 200c328:	dfc00117 	ldw	ra,4(sp)
 200c32c:	dc000017 	ldw	r16,0(sp)
 200c330:	dec00204 	addi	sp,sp,8
 200c334:	f800283a 	ret
 200c338:	8080030b 	ldhu	r2,12(r16)
 200c33c:	10bbffcc 	andi	r2,r2,61439
 200c340:	8080030d 	sth	r2,12(r16)
 200c344:	1805883a 	mov	r2,r3
 200c348:	dfc00117 	ldw	ra,4(sp)
 200c34c:	dc000017 	ldw	r16,0(sp)
 200c350:	dec00204 	addi	sp,sp,8
 200c354:	f800283a 	ret

0200c358 <__swrite>:
 200c358:	2880030b 	ldhu	r2,12(r5)
 200c35c:	defffb04 	addi	sp,sp,-20
 200c360:	dcc00315 	stw	r19,12(sp)
 200c364:	1080400c 	andi	r2,r2,256
 200c368:	dc800215 	stw	r18,8(sp)
 200c36c:	dc400115 	stw	r17,4(sp)
 200c370:	dc000015 	stw	r16,0(sp)
 200c374:	3027883a 	mov	r19,r6
 200c378:	3825883a 	mov	r18,r7
 200c37c:	dfc00415 	stw	ra,16(sp)
 200c380:	2821883a 	mov	r16,r5
 200c384:	000d883a 	mov	r6,zero
 200c388:	01c00084 	movi	r7,2
 200c38c:	2023883a 	mov	r17,r4
 200c390:	10000226 	beq	r2,zero,200c39c <__swrite+0x44>
 200c394:	2940038f 	ldh	r5,14(r5)
 200c398:	200f7e00 	call	200f7e0 <_lseek_r>
 200c39c:	8080030b 	ldhu	r2,12(r16)
 200c3a0:	8140038f 	ldh	r5,14(r16)
 200c3a4:	8809883a 	mov	r4,r17
 200c3a8:	10bbffcc 	andi	r2,r2,61439
 200c3ac:	980d883a 	mov	r6,r19
 200c3b0:	900f883a 	mov	r7,r18
 200c3b4:	8080030d 	sth	r2,12(r16)
 200c3b8:	dfc00417 	ldw	ra,16(sp)
 200c3bc:	dcc00317 	ldw	r19,12(sp)
 200c3c0:	dc800217 	ldw	r18,8(sp)
 200c3c4:	dc400117 	ldw	r17,4(sp)
 200c3c8:	dc000017 	ldw	r16,0(sp)
 200c3cc:	dec00504 	addi	sp,sp,20
 200c3d0:	200e8b41 	jmpi	200e8b4 <_write_r>

0200c3d4 <__sread>:
 200c3d4:	defffe04 	addi	sp,sp,-8
 200c3d8:	dc000015 	stw	r16,0(sp)
 200c3dc:	2821883a 	mov	r16,r5
 200c3e0:	2940038f 	ldh	r5,14(r5)
 200c3e4:	dfc00115 	stw	ra,4(sp)
 200c3e8:	200f8580 	call	200f858 <_read_r>
 200c3ec:	1007883a 	mov	r3,r2
 200c3f0:	10000816 	blt	r2,zero,200c414 <__sread+0x40>
 200c3f4:	80801417 	ldw	r2,80(r16)
 200c3f8:	10c5883a 	add	r2,r2,r3
 200c3fc:	80801415 	stw	r2,80(r16)
 200c400:	1805883a 	mov	r2,r3
 200c404:	dfc00117 	ldw	ra,4(sp)
 200c408:	dc000017 	ldw	r16,0(sp)
 200c40c:	dec00204 	addi	sp,sp,8
 200c410:	f800283a 	ret
 200c414:	8080030b 	ldhu	r2,12(r16)
 200c418:	10bbffcc 	andi	r2,r2,61439
 200c41c:	8080030d 	sth	r2,12(r16)
 200c420:	1805883a 	mov	r2,r3
 200c424:	dfc00117 	ldw	ra,4(sp)
 200c428:	dc000017 	ldw	r16,0(sp)
 200c42c:	dec00204 	addi	sp,sp,8
 200c430:	f800283a 	ret

0200c434 <strcmp>:
 200c434:	2144b03a 	or	r2,r4,r5
 200c438:	108000cc 	andi	r2,r2,3
 200c43c:	10001d1e 	bne	r2,zero,200c4b4 <strcmp+0x80>
 200c440:	200f883a 	mov	r7,r4
 200c444:	28800017 	ldw	r2,0(r5)
 200c448:	21000017 	ldw	r4,0(r4)
 200c44c:	280d883a 	mov	r6,r5
 200c450:	2080161e 	bne	r4,r2,200c4ac <strcmp+0x78>
 200c454:	023fbff4 	movhi	r8,65279
 200c458:	423fbfc4 	addi	r8,r8,-257
 200c45c:	2207883a 	add	r3,r4,r8
 200c460:	01602074 	movhi	r5,32897
 200c464:	29602004 	addi	r5,r5,-32640
 200c468:	1946703a 	and	r3,r3,r5
 200c46c:	0104303a 	nor	r2,zero,r4
 200c470:	10c4703a 	and	r2,r2,r3
 200c474:	10001c1e 	bne	r2,zero,200c4e8 <strcmp+0xb4>
 200c478:	4013883a 	mov	r9,r8
 200c47c:	2811883a 	mov	r8,r5
 200c480:	00000106 	br	200c488 <strcmp+0x54>
 200c484:	1800181e 	bne	r3,zero,200c4e8 <strcmp+0xb4>
 200c488:	39c00104 	addi	r7,r7,4
 200c48c:	39000017 	ldw	r4,0(r7)
 200c490:	31800104 	addi	r6,r6,4
 200c494:	31400017 	ldw	r5,0(r6)
 200c498:	2245883a 	add	r2,r4,r9
 200c49c:	1204703a 	and	r2,r2,r8
 200c4a0:	0106303a 	nor	r3,zero,r4
 200c4a4:	1886703a 	and	r3,r3,r2
 200c4a8:	217ff626 	beq	r4,r5,200c484 <strcmp+0x50>
 200c4ac:	3809883a 	mov	r4,r7
 200c4b0:	300b883a 	mov	r5,r6
 200c4b4:	20c00007 	ldb	r3,0(r4)
 200c4b8:	1800051e 	bne	r3,zero,200c4d0 <strcmp+0x9c>
 200c4bc:	00000606 	br	200c4d8 <strcmp+0xa4>
 200c4c0:	21000044 	addi	r4,r4,1
 200c4c4:	20c00007 	ldb	r3,0(r4)
 200c4c8:	29400044 	addi	r5,r5,1
 200c4cc:	18000226 	beq	r3,zero,200c4d8 <strcmp+0xa4>
 200c4d0:	28800007 	ldb	r2,0(r5)
 200c4d4:	18bffa26 	beq	r3,r2,200c4c0 <strcmp+0x8c>
 200c4d8:	20c00003 	ldbu	r3,0(r4)
 200c4dc:	28800003 	ldbu	r2,0(r5)
 200c4e0:	1885c83a 	sub	r2,r3,r2
 200c4e4:	f800283a 	ret
 200c4e8:	0005883a 	mov	r2,zero
 200c4ec:	f800283a 	ret

0200c4f0 <match>:
 200c4f0:	21800017 	ldw	r6,0(r4)
 200c4f4:	01c01004 	movi	r7,64
 200c4f8:	02001684 	movi	r8,90
 200c4fc:	28800007 	ldb	r2,0(r5)
 200c500:	29400044 	addi	r5,r5,1
 200c504:	10000826 	beq	r2,zero,200c528 <match+0x38>
 200c508:	31800044 	addi	r6,r6,1
 200c50c:	30c00007 	ldb	r3,0(r6)
 200c510:	38c0020e 	bge	r7,r3,200c51c <match+0x2c>
 200c514:	40c00116 	blt	r8,r3,200c51c <match+0x2c>
 200c518:	18c00804 	addi	r3,r3,32
 200c51c:	18bff726 	beq	r3,r2,200c4fc <match+0xc>
 200c520:	0005883a 	mov	r2,zero
 200c524:	f800283a 	ret
 200c528:	30800044 	addi	r2,r6,1
 200c52c:	20800015 	stw	r2,0(r4)
 200c530:	00800044 	movi	r2,1
 200c534:	f800283a 	ret

0200c538 <_strtod_r>:
 200c538:	deffde04 	addi	sp,sp,-136
 200c53c:	df002015 	stw	fp,128(sp)
 200c540:	dd401d15 	stw	r21,116(sp)
 200c544:	dc401915 	stw	r17,100(sp)
 200c548:	dfc02115 	stw	ra,132(sp)
 200c54c:	ddc01f15 	stw	r23,124(sp)
 200c550:	dd801e15 	stw	r22,120(sp)
 200c554:	dd001c15 	stw	r20,112(sp)
 200c558:	dcc01b15 	stw	r19,108(sp)
 200c55c:	dc801a15 	stw	r18,104(sp)
 200c560:	dc001815 	stw	r16,96(sp)
 200c564:	2823883a 	mov	r17,r5
 200c568:	202b883a 	mov	r21,r4
 200c56c:	d9801515 	stw	r6,84(sp)
 200c570:	d8000915 	stw	zero,36(sp)
 200c574:	d8000a15 	stw	zero,40(sp)
 200c578:	d9400415 	stw	r5,16(sp)
 200c57c:	df000904 	addi	fp,sp,36
 200c580:	da000417 	ldw	r8,16(sp)
 200c584:	00800b44 	movi	r2,45
 200c588:	40c00003 	ldbu	r3,0(r8)
 200c58c:	10c03536 	bltu	r2,r3,200c664 <_strtod_r+0x12c>
 200c590:	18c5883a 	add	r2,r3,r3
 200c594:	1085883a 	add	r2,r2,r2
 200c598:	00c08074 	movhi	r3,513
 200c59c:	18f16b04 	addi	r3,r3,-14932
 200c5a0:	10c5883a 	add	r2,r2,r3
 200c5a4:	11000017 	ldw	r4,0(r2)
 200c5a8:	2000683a 	jmp	r4
 200c5ac:	0200c7a0 	cmpeqi	r8,zero,798
 200c5b0:	0200c664 	muli	r8,zero,793
 200c5b4:	0200c664 	muli	r8,zero,793
 200c5b8:	0200c664 	muli	r8,zero,793
 200c5bc:	0200c664 	muli	r8,zero,793
 200c5c0:	0200c664 	muli	r8,zero,793
 200c5c4:	0200c664 	muli	r8,zero,793
 200c5c8:	0200c664 	muli	r8,zero,793
 200c5cc:	0200c664 	muli	r8,zero,793
 200c5d0:	0200cab8 	rdprs	r8,zero,810
 200c5d4:	0200cab8 	rdprs	r8,zero,810
 200c5d8:	0200cab8 	rdprs	r8,zero,810
 200c5dc:	0200cab8 	rdprs	r8,zero,810
 200c5e0:	0200cab8 	rdprs	r8,zero,810
 200c5e4:	0200c664 	muli	r8,zero,793
 200c5e8:	0200c664 	muli	r8,zero,793
 200c5ec:	0200c664 	muli	r8,zero,793
 200c5f0:	0200c664 	muli	r8,zero,793
 200c5f4:	0200c664 	muli	r8,zero,793
 200c5f8:	0200c664 	muli	r8,zero,793
 200c5fc:	0200c664 	muli	r8,zero,793
 200c600:	0200c664 	muli	r8,zero,793
 200c604:	0200c664 	muli	r8,zero,793
 200c608:	0200c664 	muli	r8,zero,793
 200c60c:	0200c664 	muli	r8,zero,793
 200c610:	0200c664 	muli	r8,zero,793
 200c614:	0200c664 	muli	r8,zero,793
 200c618:	0200c664 	muli	r8,zero,793
 200c61c:	0200c664 	muli	r8,zero,793
 200c620:	0200c664 	muli	r8,zero,793
 200c624:	0200c664 	muli	r8,zero,793
 200c628:	0200c664 	muli	r8,zero,793
 200c62c:	0200cab8 	rdprs	r8,zero,810
 200c630:	0200c664 	muli	r8,zero,793
 200c634:	0200c664 	muli	r8,zero,793
 200c638:	0200c664 	muli	r8,zero,793
 200c63c:	0200c664 	muli	r8,zero,793
 200c640:	0200c664 	muli	r8,zero,793
 200c644:	0200c664 	muli	r8,zero,793
 200c648:	0200c664 	muli	r8,zero,793
 200c64c:	0200c664 	muli	r8,zero,793
 200c650:	0200c664 	muli	r8,zero,793
 200c654:	0200c664 	muli	r8,zero,793
 200c658:	0200ca98 	cmpnei	r8,zero,810
 200c65c:	0200c664 	muli	r8,zero,793
 200c660:	0200cac4 	movi	r8,811
 200c664:	d8001115 	stw	zero,68(sp)
 200c668:	40c00007 	ldb	r3,0(r8)
 200c66c:	00800c04 	movi	r2,48
 200c670:	1880d026 	beq	r3,r2,200c9b4 <_strtod_r+0x47c>
 200c674:	001f883a 	mov	r15,zero
 200c678:	41000007 	ldb	r4,0(r8)
 200c67c:	00c00bc4 	movi	r3,47
 200c680:	402d883a 	mov	r22,r8
 200c684:	1903470e 	bge	r3,r4,200d3a4 <_strtod_r+0xe6c>
 200c688:	00800e44 	movi	r2,57
 200c68c:	11034516 	blt	r2,r4,200d3a4 <_strtod_r+0xe6c>
 200c690:	180f883a 	mov	r7,r3
 200c694:	1013883a 	mov	r9,r2
 200c698:	4007883a 	mov	r3,r8
 200c69c:	000d883a 	mov	r6,zero
 200c6a0:	0029883a 	mov	r20,zero
 200c6a4:	0021883a 	mov	r16,zero
 200c6a8:	01400204 	movi	r5,8
 200c6ac:	028003c4 	movi	r10,15
 200c6b0:	29803116 	blt	r5,r6,200c778 <_strtod_r+0x240>
 200c6b4:	a08002a4 	muli	r2,r20,10
 200c6b8:	1105883a 	add	r2,r2,r4
 200c6bc:	153ff404 	addi	r20,r2,-48
 200c6c0:	1a000044 	addi	r8,r3,1
 200c6c4:	da000415 	stw	r8,16(sp)
 200c6c8:	41000007 	ldb	r4,0(r8)
 200c6cc:	31800044 	addi	r6,r6,1
 200c6d0:	4007883a 	mov	r3,r8
 200c6d4:	3900010e 	bge	r7,r4,200c6dc <_strtod_r+0x1a4>
 200c6d8:	493ff50e 	bge	r9,r4,200c6b0 <_strtod_r+0x178>
 200c6dc:	00800b84 	movi	r2,46
 200c6e0:	2080c126 	beq	r4,r2,200c9e8 <_strtod_r+0x4b0>
 200c6e4:	3027883a 	mov	r19,r6
 200c6e8:	0025883a 	mov	r18,zero
 200c6ec:	0015883a 	mov	r10,zero
 200c6f0:	000f883a 	mov	r7,zero
 200c6f4:	00801944 	movi	r2,101
 200c6f8:	20802426 	beq	r4,r2,200c78c <_strtod_r+0x254>
 200c6fc:	00801144 	movi	r2,69
 200c700:	20802226 	beq	r4,r2,200c78c <_strtod_r+0x254>
 200c704:	9816c03a 	cmpne	r11,r19,zero
 200c708:	000b883a 	mov	r5,zero
 200c70c:	5800631e 	bne	r11,zero,200c89c <_strtod_r+0x364>
 200c710:	3800c126 	beq	r7,zero,200ca18 <_strtod_r+0x4e0>
 200c714:	d8c01517 	ldw	r3,84(sp)
 200c718:	18000226 	beq	r3,zero,200c724 <_strtod_r+0x1ec>
 200c71c:	d8800417 	ldw	r2,16(sp)
 200c720:	18800015 	stw	r2,0(r3)
 200c724:	d9001117 	ldw	r4,68(sp)
 200c728:	2005003a 	cmpeq	r2,r4,zero
 200c72c:	10001f1e 	bne	r2,zero,200c7ac <_strtod_r+0x274>
 200c730:	e0800017 	ldw	r2,0(fp)
 200c734:	e0c00117 	ldw	r3,4(fp)
 200c738:	1009883a 	mov	r4,r2
 200c73c:	1960003c 	xorhi	r5,r3,32768
 200c740:	2005883a 	mov	r2,r4
 200c744:	2807883a 	mov	r3,r5
 200c748:	dfc02117 	ldw	ra,132(sp)
 200c74c:	df002017 	ldw	fp,128(sp)
 200c750:	ddc01f17 	ldw	r23,124(sp)
 200c754:	dd801e17 	ldw	r22,120(sp)
 200c758:	dd401d17 	ldw	r21,116(sp)
 200c75c:	dd001c17 	ldw	r20,112(sp)
 200c760:	dcc01b17 	ldw	r19,108(sp)
 200c764:	dc801a17 	ldw	r18,104(sp)
 200c768:	dc401917 	ldw	r17,100(sp)
 200c76c:	dc001817 	ldw	r16,96(sp)
 200c770:	dec02204 	addi	sp,sp,136
 200c774:	f800283a 	ret
 200c778:	51bfd116 	blt	r10,r6,200c6c0 <_strtod_r+0x188>
 200c77c:	808002a4 	muli	r2,r16,10
 200c780:	1105883a 	add	r2,r2,r4
 200c784:	143ff404 	addi	r16,r2,-48
 200c788:	003fcd06 	br	200c6c0 <_strtod_r+0x188>
 200c78c:	9816c03a 	cmpne	r11,r19,zero
 200c790:	5800091e 	bne	r11,zero,200c7b8 <_strtod_r+0x280>
 200c794:	3800081e 	bne	r7,zero,200c7b8 <_strtod_r+0x280>
 200c798:	7805003a 	cmpeq	r2,r15,zero
 200c79c:	10000626 	beq	r2,zero,200c7b8 <_strtod_r+0x280>
 200c7a0:	d8001115 	stw	zero,68(sp)
 200c7a4:	dc400415 	stw	r17,16(sp)
 200c7a8:	003fda06 	br	200c714 <_strtod_r+0x1dc>
 200c7ac:	e1000017 	ldw	r4,0(fp)
 200c7b0:	e1400117 	ldw	r5,4(fp)
 200c7b4:	003fe206 	br	200c740 <_strtod_r+0x208>
 200c7b8:	dc400417 	ldw	r17,16(sp)
 200c7bc:	00800ac4 	movi	r2,43
 200c7c0:	8a000044 	addi	r8,r17,1
 200c7c4:	da000415 	stw	r8,16(sp)
 200c7c8:	88c00047 	ldb	r3,1(r17)
 200c7cc:	4009883a 	mov	r4,r8
 200c7d0:	1880bf26 	beq	r3,r2,200cad0 <_strtod_r+0x598>
 200c7d4:	00800b44 	movi	r2,45
 200c7d8:	18834526 	beq	r3,r2,200d4f0 <_strtod_r+0xfb8>
 200c7dc:	1809883a 	mov	r4,r3
 200c7e0:	20fff404 	addi	r3,r4,-48
 200c7e4:	00800244 	movi	r2,9
 200c7e8:	001d883a 	mov	r14,zero
 200c7ec:	10c0bf36 	bltu	r2,r3,200caec <_strtod_r+0x5b4>
 200c7f0:	00800c04 	movi	r2,48
 200c7f4:	2080061e 	bne	r4,r2,200c810 <_strtod_r+0x2d8>
 200c7f8:	da000417 	ldw	r8,16(sp)
 200c7fc:	2005883a 	mov	r2,r4
 200c800:	42000044 	addi	r8,r8,1
 200c804:	da000415 	stw	r8,16(sp)
 200c808:	41000007 	ldb	r4,0(r8)
 200c80c:	20bffc26 	beq	r4,r2,200c800 <_strtod_r+0x2c8>
 200c810:	20fff3c4 	addi	r3,r4,-49
 200c814:	00800204 	movi	r2,8
 200c818:	10ffbb36 	bltu	r2,r3,200c708 <_strtod_r+0x1d0>
 200c81c:	da000417 	ldw	r8,16(sp)
 200c820:	227ff404 	addi	r9,r4,-48
 200c824:	03000bc4 	movi	r12,47
 200c828:	4007883a 	mov	r3,r8
 200c82c:	42000044 	addi	r8,r8,1
 200c830:	da000415 	stw	r8,16(sp)
 200c834:	41000007 	ldb	r4,0(r8)
 200c838:	61000d0e 	bge	r12,r4,200c870 <_strtod_r+0x338>
 200c83c:	00800e44 	movi	r2,57
 200c840:	11000b16 	blt	r2,r4,200c870 <_strtod_r+0x338>
 200c844:	601b883a 	mov	r13,r12
 200c848:	1019883a 	mov	r12,r2
 200c84c:	00000106 	br	200c854 <_strtod_r+0x31c>
 200c850:	61000716 	blt	r12,r4,200c870 <_strtod_r+0x338>
 200c854:	488002a4 	muli	r2,r9,10
 200c858:	42000044 	addi	r8,r8,1
 200c85c:	da000415 	stw	r8,16(sp)
 200c860:	2085883a 	add	r2,r4,r2
 200c864:	41000007 	ldb	r4,0(r8)
 200c868:	127ff404 	addi	r9,r2,-48
 200c86c:	693ff816 	blt	r13,r4,200c850 <_strtod_r+0x318>
 200c870:	40c7c83a 	sub	r3,r8,r3
 200c874:	00800204 	movi	r2,8
 200c878:	10c2e416 	blt	r2,r3,200d40c <_strtod_r+0xed4>
 200c87c:	009387c4 	movi	r2,19999
 200c880:	480b883a 	mov	r5,r9
 200c884:	1240010e 	bge	r2,r9,200c88c <_strtod_r+0x354>
 200c888:	100b883a 	mov	r5,r2
 200c88c:	7005003a 	cmpeq	r2,r14,zero
 200c890:	103f9e1e 	bne	r2,zero,200c70c <_strtod_r+0x1d4>
 200c894:	014bc83a 	sub	r5,zero,r5
 200c898:	583f9d26 	beq	r11,zero,200c710 <_strtod_r+0x1d8>
 200c89c:	2a8bc83a 	sub	r5,r5,r10
 200c8a0:	d9400f15 	stw	r5,60(sp)
 200c8a4:	30007a1e 	bne	r6,zero,200ca90 <_strtod_r+0x558>
 200c8a8:	dcc01215 	stw	r19,72(sp)
 200c8ac:	00800404 	movi	r2,16
 200c8b0:	9825883a 	mov	r18,r19
 200c8b4:	14c0010e 	bge	r2,r19,200c8bc <_strtod_r+0x384>
 200c8b8:	1025883a 	mov	r18,r2
 200c8bc:	a009883a 	mov	r4,r20
 200c8c0:	20110e00 	call	20110e0 <__floatunsidf>
 200c8c4:	100f883a 	mov	r7,r2
 200c8c8:	e0800015 	stw	r2,0(fp)
 200c8cc:	00800244 	movi	r2,9
 200c8d0:	e0c00115 	stw	r3,4(fp)
 200c8d4:	1480160e 	bge	r2,r18,200c930 <_strtod_r+0x3f8>
 200c8d8:	900c90fa 	slli	r6,r18,3
 200c8dc:	01008074 	movhi	r4,513
 200c8e0:	21179004 	addi	r4,r4,24128
 200c8e4:	180b883a 	mov	r5,r3
 200c8e8:	310d883a 	add	r6,r6,r4
 200c8ec:	30ffef17 	ldw	r3,-68(r6)
 200c8f0:	30bfee17 	ldw	r2,-72(r6)
 200c8f4:	3809883a 	mov	r4,r7
 200c8f8:	180f883a 	mov	r7,r3
 200c8fc:	100d883a 	mov	r6,r2
 200c900:	200283c0 	call	200283c <__muldf3>
 200c904:	8009883a 	mov	r4,r16
 200c908:	1823883a 	mov	r17,r3
 200c90c:	1021883a 	mov	r16,r2
 200c910:	20110e00 	call	20110e0 <__floatunsidf>
 200c914:	880b883a 	mov	r5,r17
 200c918:	180f883a 	mov	r7,r3
 200c91c:	8009883a 	mov	r4,r16
 200c920:	100d883a 	mov	r6,r2
 200c924:	2010af80 	call	2010af8 <__adddf3>
 200c928:	e0c00115 	stw	r3,4(fp)
 200c92c:	e0800015 	stw	r2,0(fp)
 200c930:	010003c4 	movi	r4,15
 200c934:	24c09816 	blt	r4,r19,200cb98 <_strtod_r+0x660>
 200c938:	d9800f17 	ldw	r6,60(sp)
 200c93c:	303f7526 	beq	r6,zero,200c714 <_strtod_r+0x1dc>
 200c940:	0183be0e 	bge	zero,r6,200d83c <_strtod_r+0x1304>
 200c944:	00800584 	movi	r2,22
 200c948:	1182b20e 	bge	r2,r6,200d414 <_strtod_r+0xedc>
 200c94c:	d8c00f17 	ldw	r3,60(sp)
 200c950:	24e3c83a 	sub	r17,r4,r19
 200c954:	88800584 	addi	r2,r17,22
 200c958:	10c08f16 	blt	r2,r3,200cb98 <_strtod_r+0x660>
 200c95c:	880890fa 	slli	r4,r17,3
 200c960:	04008074 	movhi	r16,513
 200c964:	84179004 	addi	r16,r16,24128
 200c968:	e0800017 	ldw	r2,0(fp)
 200c96c:	2409883a 	add	r4,r4,r16
 200c970:	22000017 	ldw	r8,0(r4)
 200c974:	22400117 	ldw	r9,4(r4)
 200c978:	e0c00117 	ldw	r3,4(fp)
 200c97c:	1009883a 	mov	r4,r2
 200c980:	480f883a 	mov	r7,r9
 200c984:	180b883a 	mov	r5,r3
 200c988:	400d883a 	mov	r6,r8
 200c98c:	200283c0 	call	200283c <__muldf3>
 200c990:	d9000f17 	ldw	r4,60(sp)
 200c994:	180b883a 	mov	r5,r3
 200c998:	2455c83a 	sub	r10,r4,r17
 200c99c:	501490fa 	slli	r10,r10,3
 200c9a0:	1009883a 	mov	r4,r2
 200c9a4:	5415883a 	add	r10,r10,r16
 200c9a8:	52000017 	ldw	r8,0(r10)
 200c9ac:	52400117 	ldw	r9,4(r10)
 200c9b0:	0002a206 	br	200d43c <_strtod_r+0xf04>
 200c9b4:	40c00047 	ldb	r3,1(r8)
 200c9b8:	00801604 	movi	r2,88
 200c9bc:	18804e26 	beq	r3,r2,200caf8 <_strtod_r+0x5c0>
 200c9c0:	00801e04 	movi	r2,120
 200c9c4:	18804c26 	beq	r3,r2,200caf8 <_strtod_r+0x5c0>
 200c9c8:	42000044 	addi	r8,r8,1
 200c9cc:	da000415 	stw	r8,16(sp)
 200c9d0:	40c00007 	ldb	r3,0(r8)
 200c9d4:	00800c04 	movi	r2,48
 200c9d8:	18bffb26 	beq	r3,r2,200c9c8 <_strtod_r+0x490>
 200c9dc:	183f4d26 	beq	r3,zero,200c714 <_strtod_r+0x1dc>
 200c9e0:	03c00044 	movi	r15,1
 200c9e4:	003f2406 	br	200c678 <_strtod_r+0x140>
 200c9e8:	42000044 	addi	r8,r8,1
 200c9ec:	da000415 	stw	r8,16(sp)
 200c9f0:	19000047 	ldb	r4,1(r3)
 200c9f4:	3000b726 	beq	r6,zero,200ccd4 <_strtod_r+0x79c>
 200c9f8:	3027883a 	mov	r19,r6
 200c9fc:	0015883a 	mov	r10,zero
 200ca00:	000f883a 	mov	r7,zero
 200ca04:	227ff404 	addi	r9,r4,-48
 200ca08:	00800244 	movi	r2,9
 200ca0c:	1242592e 	bgeu	r2,r9,200d374 <_strtod_r+0xe3c>
 200ca10:	04800044 	movi	r18,1
 200ca14:	003f3706 	br	200c6f4 <_strtod_r+0x1bc>
 200ca18:	7804c03a 	cmpne	r2,r15,zero
 200ca1c:	103f3d1e 	bne	r2,zero,200c714 <_strtod_r+0x1dc>
 200ca20:	9004c03a 	cmpne	r2,r18,zero
 200ca24:	103f5e1e 	bne	r2,zero,200c7a0 <_strtod_r+0x268>
 200ca28:	00801384 	movi	r2,78
 200ca2c:	2083a226 	beq	r4,r2,200d8b8 <_strtod_r+0x1380>
 200ca30:	11039d16 	blt	r2,r4,200d8a8 <_strtod_r+0x1370>
 200ca34:	00801244 	movi	r2,73
 200ca38:	20bf591e 	bne	r4,r2,200c7a0 <_strtod_r+0x268>
 200ca3c:	dc000404 	addi	r16,sp,16
 200ca40:	8009883a 	mov	r4,r16
 200ca44:	01408074 	movhi	r5,513
 200ca48:	2957d904 	addi	r5,r5,24420
 200ca4c:	200c4f00 	call	200c4f0 <match>
 200ca50:	103f5326 	beq	r2,zero,200c7a0 <_strtod_r+0x268>
 200ca54:	d8800417 	ldw	r2,16(sp)
 200ca58:	8009883a 	mov	r4,r16
 200ca5c:	01408074 	movhi	r5,513
 200ca60:	2957da04 	addi	r5,r5,24424
 200ca64:	123fffc4 	addi	r8,r2,-1
 200ca68:	da000415 	stw	r8,16(sp)
 200ca6c:	200c4f00 	call	200c4f0 <match>
 200ca70:	1000031e 	bne	r2,zero,200ca80 <_strtod_r+0x548>
 200ca74:	d8800417 	ldw	r2,16(sp)
 200ca78:	12000044 	addi	r8,r2,1
 200ca7c:	da000415 	stw	r8,16(sp)
 200ca80:	019ffc34 	movhi	r6,32752
 200ca84:	e1800115 	stw	r6,4(fp)
 200ca88:	e0000015 	stw	zero,0(fp)
 200ca8c:	003f2106 	br	200c714 <_strtod_r+0x1dc>
 200ca90:	d9801215 	stw	r6,72(sp)
 200ca94:	003f8506 	br	200c8ac <_strtod_r+0x374>
 200ca98:	d8001115 	stw	zero,68(sp)
 200ca9c:	42000044 	addi	r8,r8,1
 200caa0:	da000415 	stw	r8,16(sp)
 200caa4:	40800007 	ldb	r2,0(r8)
 200caa8:	103eef1e 	bne	r2,zero,200c668 <_strtod_r+0x130>
 200caac:	d8001115 	stw	zero,68(sp)
 200cab0:	dc400415 	stw	r17,16(sp)
 200cab4:	003f1706 	br	200c714 <_strtod_r+0x1dc>
 200cab8:	42000044 	addi	r8,r8,1
 200cabc:	da000415 	stw	r8,16(sp)
 200cac0:	003eaf06 	br	200c580 <_strtod_r+0x48>
 200cac4:	00800044 	movi	r2,1
 200cac8:	d8801115 	stw	r2,68(sp)
 200cacc:	003ff306 	br	200ca9c <_strtod_r+0x564>
 200cad0:	001d883a 	mov	r14,zero
 200cad4:	42000044 	addi	r8,r8,1
 200cad8:	da000415 	stw	r8,16(sp)
 200cadc:	21000047 	ldb	r4,1(r4)
 200cae0:	00800244 	movi	r2,9
 200cae4:	20fff404 	addi	r3,r4,-48
 200cae8:	10ff412e 	bgeu	r2,r3,200c7f0 <_strtod_r+0x2b8>
 200caec:	000b883a 	mov	r5,zero
 200caf0:	dc400415 	stw	r17,16(sp)
 200caf4:	003f0506 	br	200c70c <_strtod_r+0x1d4>
 200caf8:	d8c01117 	ldw	r3,68(sp)
 200cafc:	04808074 	movhi	r18,513
 200cb00:	949a4e04 	addi	r18,r18,26936
 200cb04:	d8800504 	addi	r2,sp,20
 200cb08:	a809883a 	mov	r4,r21
 200cb0c:	d9400404 	addi	r5,sp,16
 200cb10:	900d883a 	mov	r6,r18
 200cb14:	d9c00604 	addi	r7,sp,24
 200cb18:	d8800015 	stw	r2,0(sp)
 200cb1c:	d8c00115 	stw	r3,4(sp)
 200cb20:	200ed240 	call	200ed24 <__gethex>
 200cb24:	140001cc 	andi	r16,r2,7
 200cb28:	1027883a 	mov	r19,r2
 200cb2c:	803ef926 	beq	r16,zero,200c714 <_strtod_r+0x1dc>
 200cb30:	05000184 	movi	r20,6
 200cb34:	853f1a26 	beq	r16,r20,200c7a0 <_strtod_r+0x268>
 200cb38:	d9800517 	ldw	r6,20(sp)
 200cb3c:	30000626 	beq	r6,zero,200cb58 <_strtod_r+0x620>
 200cb40:	91400017 	ldw	r5,0(r18)
 200cb44:	d9000d04 	addi	r4,sp,52
 200cb48:	200adb40 	call	200adb4 <__copybits>
 200cb4c:	d9400517 	ldw	r5,20(sp)
 200cb50:	a809883a 	mov	r4,r21
 200cb54:	200a9140 	call	200a914 <_Bfree>
 200cb58:	d9400617 	ldw	r5,24(sp)
 200cb5c:	a4024136 	bltu	r20,r16,200d464 <_strtod_r+0xf2c>
 200cb60:	8405883a 	add	r2,r16,r16
 200cb64:	1085883a 	add	r2,r2,r2
 200cb68:	00c08074 	movhi	r3,513
 200cb6c:	18f2df04 	addi	r3,r3,-13444
 200cb70:	10c5883a 	add	r2,r2,r3
 200cb74:	11000017 	ldw	r4,0(r2)
 200cb78:	2000683a 	jmp	r4
 200cb7c:	0200d4a4 	muli	r8,zero,850
 200cb80:	0200d4b0 	cmpltui	r8,zero,850
 200cb84:	0200d454 	movui	r8,849
 200cb88:	0200d47c 	xorhi	r8,zero,849
 200cb8c:	0200d48c 	andi	r8,zero,850
 200cb90:	0200d4b0 	cmpltui	r8,zero,850
 200cb94:	0200d4a4 	muli	r8,zero,850
 200cb98:	d8c00f17 	ldw	r3,60(sp)
 200cb9c:	9c85c83a 	sub	r2,r19,r18
 200cba0:	18a1883a 	add	r16,r3,r2
 200cba4:	0402d00e 	bge	zero,r16,200d6e8 <_strtod_r+0x11b0>
 200cba8:	814003cc 	andi	r5,r16,15
 200cbac:	28000f26 	beq	r5,zero,200cbec <_strtod_r+0x6b4>
 200cbb0:	280a90fa 	slli	r5,r5,3
 200cbb4:	01008074 	movhi	r4,513
 200cbb8:	21179004 	addi	r4,r4,24128
 200cbbc:	e0800017 	ldw	r2,0(fp)
 200cbc0:	290b883a 	add	r5,r5,r4
 200cbc4:	2a000017 	ldw	r8,0(r5)
 200cbc8:	e0c00117 	ldw	r3,4(fp)
 200cbcc:	2a400117 	ldw	r9,4(r5)
 200cbd0:	1009883a 	mov	r4,r2
 200cbd4:	180b883a 	mov	r5,r3
 200cbd8:	480f883a 	mov	r7,r9
 200cbdc:	400d883a 	mov	r6,r8
 200cbe0:	200283c0 	call	200283c <__muldf3>
 200cbe4:	e0c00115 	stw	r3,4(fp)
 200cbe8:	e0800015 	stw	r2,0(fp)
 200cbec:	00bffc04 	movi	r2,-16
 200cbf0:	808c703a 	and	r6,r16,r2
 200cbf4:	30005b26 	beq	r6,zero,200cd64 <_strtod_r+0x82c>
 200cbf8:	00804d04 	movi	r2,308
 200cbfc:	1181fd16 	blt	r2,r6,200d3f4 <_strtod_r+0xebc>
 200cc00:	3021d13a 	srai	r16,r6,4
 200cc04:	00800044 	movi	r2,1
 200cc08:	1403610e 	bge	r2,r16,200d990 <_strtod_r+0x1458>
 200cc0c:	102f883a 	mov	r23,r2
 200cc10:	0025883a 	mov	r18,zero
 200cc14:	04408074 	movhi	r17,513
 200cc18:	8c57c204 	addi	r17,r17,24328
 200cc1c:	8080004c 	andi	r2,r16,1
 200cc20:	1005003a 	cmpeq	r2,r2,zero
 200cc24:	1000091e 	bne	r2,zero,200cc4c <_strtod_r+0x714>
 200cc28:	e0800017 	ldw	r2,0(fp)
 200cc2c:	e0c00117 	ldw	r3,4(fp)
 200cc30:	89800017 	ldw	r6,0(r17)
 200cc34:	89c00117 	ldw	r7,4(r17)
 200cc38:	180b883a 	mov	r5,r3
 200cc3c:	1009883a 	mov	r4,r2
 200cc40:	200283c0 	call	200283c <__muldf3>
 200cc44:	e0c00115 	stw	r3,4(fp)
 200cc48:	e0800015 	stw	r2,0(fp)
 200cc4c:	8021d07a 	srai	r16,r16,1
 200cc50:	94800044 	addi	r18,r18,1
 200cc54:	8c400204 	addi	r17,r17,8
 200cc58:	bc3ff016 	blt	r23,r16,200cc1c <_strtod_r+0x6e4>
 200cc5c:	900e90fa 	slli	r7,r18,3
 200cc60:	01808074 	movhi	r6,513
 200cc64:	3197c204 	addi	r6,r6,24328
 200cc68:	e2000117 	ldw	r8,4(fp)
 200cc6c:	398f883a 	add	r7,r7,r6
 200cc70:	38800017 	ldw	r2,0(r7)
 200cc74:	38c00117 	ldw	r3,4(r7)
 200cc78:	e1000017 	ldw	r4,0(fp)
 200cc7c:	01bf2c34 	movhi	r6,64688
 200cc80:	418d883a 	add	r6,r8,r6
 200cc84:	300b883a 	mov	r5,r6
 200cc88:	180f883a 	mov	r7,r3
 200cc8c:	100d883a 	mov	r6,r2
 200cc90:	200283c0 	call	200283c <__muldf3>
 200cc94:	1009883a 	mov	r4,r2
 200cc98:	180b883a 	mov	r5,r3
 200cc9c:	199ffc2c 	andhi	r6,r3,32752
 200cca0:	009f2834 	movhi	r2,31904
 200cca4:	e1000015 	stw	r4,0(fp)
 200cca8:	e1400115 	stw	r5,4(fp)
 200ccac:	1181d136 	bltu	r2,r6,200d3f4 <_strtod_r+0xebc>
 200ccb0:	009f2434 	movhi	r2,31888
 200ccb4:	1183202e 	bgeu	r2,r6,200d938 <_strtod_r+0x1400>
 200ccb8:	d8001415 	stw	zero,80(sp)
 200ccbc:	019ffc34 	movhi	r6,32752
 200ccc0:	31bfffc4 	addi	r6,r6,-1
 200ccc4:	01ffffc4 	movi	r7,-1
 200ccc8:	e1800115 	stw	r6,4(fp)
 200cccc:	e1c00015 	stw	r7,0(fp)
 200ccd0:	00002506 	br	200cd68 <_strtod_r+0x830>
 200ccd4:	00800c04 	movi	r2,48
 200ccd8:	2083151e 	bne	r4,r2,200d930 <_strtod_r+0x13f8>
 200ccdc:	2005883a 	mov	r2,r4
 200cce0:	000f883a 	mov	r7,zero
 200cce4:	42000044 	addi	r8,r8,1
 200cce8:	da000415 	stw	r8,16(sp)
 200ccec:	41000007 	ldb	r4,0(r8)
 200ccf0:	39c00044 	addi	r7,r7,1
 200ccf4:	20bffb26 	beq	r4,r2,200cce4 <_strtod_r+0x7ac>
 200ccf8:	20fff3c4 	addi	r3,r4,-49
 200ccfc:	00800204 	movi	r2,8
 200cd00:	10c1b836 	bltu	r2,r3,200d3e4 <_strtod_r+0xeac>
 200cd04:	dd800417 	ldw	r22,16(sp)
 200cd08:	3815883a 	mov	r10,r7
 200cd0c:	227ff404 	addi	r9,r4,-48
 200cd10:	b011883a 	mov	r8,r22
 200cd14:	0027883a 	mov	r19,zero
 200cd18:	01c00044 	movi	r7,1
 200cd1c:	4801fe26 	beq	r9,zero,200d518 <_strtod_r+0xfe0>
 200cd20:	00800044 	movi	r2,1
 200cd24:	51d5883a 	add	r10,r10,r7
 200cd28:	11c31f0e 	bge	r2,r7,200d9a8 <_strtod_r+0x1470>
 200cd2c:	1009883a 	mov	r4,r2
 200cd30:	9807883a 	mov	r3,r19
 200cd34:	02c00204 	movi	r11,8
 200cd38:	03000404 	movi	r12,16
 200cd3c:	00000306 	br	200cd4c <_strtod_r+0x814>
 200cd40:	a50002a4 	muli	r20,r20,10
 200cd44:	21000044 	addi	r4,r4,1
 200cd48:	21c1eb26 	beq	r4,r7,200d4f8 <_strtod_r+0xfc0>
 200cd4c:	18c00044 	addi	r3,r3,1
 200cd50:	18bfffc4 	addi	r2,r3,-1
 200cd54:	58bffa0e 	bge	r11,r2,200cd40 <_strtod_r+0x808>
 200cd58:	60fffa16 	blt	r12,r3,200cd44 <_strtod_r+0x80c>
 200cd5c:	840002a4 	muli	r16,r16,10
 200cd60:	003ff806 	br	200cd44 <_strtod_r+0x80c>
 200cd64:	d8001415 	stw	zero,80(sp)
 200cd68:	d9801217 	ldw	r6,72(sp)
 200cd6c:	a809883a 	mov	r4,r21
 200cd70:	b00b883a 	mov	r5,r22
 200cd74:	980f883a 	mov	r7,r19
 200cd78:	dd000015 	stw	r20,0(sp)
 200cd7c:	200b7e80 	call	200b7e8 <__s2b>
 200cd80:	d9800f17 	ldw	r6,60(sp)
 200cd84:	11000304 	addi	r4,r2,12
 200cd88:	d8801015 	stw	r2,64(sp)
 200cd8c:	300c803a 	cmplt	r6,r6,zero
 200cd90:	d9001715 	stw	r4,92(sp)
 200cd94:	d9801615 	stw	r6,88(sp)
 200cd98:	d8801017 	ldw	r2,64(sp)
 200cd9c:	a809883a 	mov	r4,r21
 200cda0:	11400117 	ldw	r5,4(r2)
 200cda4:	200ae940 	call	200ae94 <_Balloc>
 200cda8:	d8c01017 	ldw	r3,64(sp)
 200cdac:	d9401717 	ldw	r5,92(sp)
 200cdb0:	11000304 	addi	r4,r2,12
 200cdb4:	19800417 	ldw	r6,16(r3)
 200cdb8:	102f883a 	mov	r23,r2
 200cdbc:	318d883a 	add	r6,r6,r6
 200cdc0:	318d883a 	add	r6,r6,r6
 200cdc4:	31800204 	addi	r6,r6,8
 200cdc8:	200a6fc0 	call	200a6fc <memcpy>
 200cdcc:	e2000017 	ldw	r8,0(fp)
 200cdd0:	e2400117 	ldw	r9,4(fp)
 200cdd4:	d9800304 	addi	r6,sp,12
 200cdd8:	400b883a 	mov	r5,r8
 200cddc:	a809883a 	mov	r4,r21
 200cde0:	d9c00204 	addi	r7,sp,8
 200cde4:	d9800015 	stw	r6,0(sp)
 200cde8:	480d883a 	mov	r6,r9
 200cdec:	200af500 	call	200af50 <__d2b>
 200cdf0:	a809883a 	mov	r4,r21
 200cdf4:	01400044 	movi	r5,1
 200cdf8:	d8800515 	stw	r2,20(sp)
 200cdfc:	200b58c0 	call	200b58c <__i2b>
 200ce00:	102d883a 	mov	r22,r2
 200ce04:	d8801617 	ldw	r2,88(sp)
 200ce08:	1001051e 	bne	r2,zero,200d220 <_strtod_r+0xce8>
 200ce0c:	dd000f17 	ldw	r20,60(sp)
 200ce10:	000f883a 	mov	r7,zero
 200ce14:	0013883a 	mov	r9,zero
 200ce18:	a011883a 	mov	r8,r20
 200ce1c:	d8800217 	ldw	r2,8(sp)
 200ce20:	1000fd16 	blt	r2,zero,200d218 <_strtod_r+0xce0>
 200ce24:	388f883a 	add	r7,r7,r2
 200ce28:	d9801417 	ldw	r6,80(sp)
 200ce2c:	d9400317 	ldw	r5,12(sp)
 200ce30:	00ff0084 	movi	r3,-1022
 200ce34:	1189c83a 	sub	r4,r2,r6
 200ce38:	2145883a 	add	r2,r4,r5
 200ce3c:	10bfffc4 	addi	r2,r2,-1
 200ce40:	10c09f0e 	bge	r2,r3,200d0c0 <_strtod_r+0xb88>
 200ce44:	21810cc4 	addi	r6,r4,1075
 200ce48:	d8c01417 	ldw	r3,80(sp)
 200ce4c:	4185883a 	add	r2,r8,r6
 200ce50:	39a1883a 	add	r16,r7,r6
 200ce54:	18a5883a 	add	r18,r3,r2
 200ce58:	3807883a 	mov	r3,r7
 200ce5c:	81c0010e 	bge	r16,r7,200ce64 <_strtod_r+0x92c>
 200ce60:	8007883a 	mov	r3,r16
 200ce64:	9005883a 	mov	r2,r18
 200ce68:	1c80010e 	bge	r3,r18,200ce70 <_strtod_r+0x938>
 200ce6c:	1805883a 	mov	r2,r3
 200ce70:	0080e70e 	bge	zero,r2,200d210 <_strtod_r+0xcd8>
 200ce74:	38a7c83a 	sub	r19,r7,r2
 200ce78:	80a1c83a 	sub	r16,r16,r2
 200ce7c:	90a5c83a 	sub	r18,r18,r2
 200ce80:	02400e0e 	bge	zero,r9,200cebc <_strtod_r+0x984>
 200ce84:	480d883a 	mov	r6,r9
 200ce88:	b00b883a 	mov	r5,r22
 200ce8c:	a809883a 	mov	r4,r21
 200ce90:	200b6c80 	call	200b6c8 <__pow5mult>
 200ce94:	d9800517 	ldw	r6,20(sp)
 200ce98:	a809883a 	mov	r4,r21
 200ce9c:	100b883a 	mov	r5,r2
 200cea0:	102d883a 	mov	r22,r2
 200cea4:	200b3a40 	call	200b3a4 <__multiply>
 200cea8:	d9400517 	ldw	r5,20(sp)
 200ceac:	1023883a 	mov	r17,r2
 200ceb0:	a809883a 	mov	r4,r21
 200ceb4:	200a9140 	call	200a914 <_Bfree>
 200ceb8:	dc400515 	stw	r17,20(sp)
 200cebc:	0400050e 	bge	zero,r16,200ced4 <_strtod_r+0x99c>
 200cec0:	d9400517 	ldw	r5,20(sp)
 200cec4:	800d883a 	mov	r6,r16
 200cec8:	a809883a 	mov	r4,r21
 200cecc:	200b2580 	call	200b258 <__lshift>
 200ced0:	d8800515 	stw	r2,20(sp)
 200ced4:	a000741e 	bne	r20,zero,200d0a8 <_strtod_r+0xb70>
 200ced8:	0480050e 	bge	zero,r18,200cef0 <_strtod_r+0x9b8>
 200cedc:	b80b883a 	mov	r5,r23
 200cee0:	900d883a 	mov	r6,r18
 200cee4:	a809883a 	mov	r4,r21
 200cee8:	200b2580 	call	200b258 <__lshift>
 200ceec:	102f883a 	mov	r23,r2
 200cef0:	04c0050e 	bge	zero,r19,200cf08 <_strtod_r+0x9d0>
 200cef4:	b00b883a 	mov	r5,r22
 200cef8:	980d883a 	mov	r6,r19
 200cefc:	a809883a 	mov	r4,r21
 200cf00:	200b2580 	call	200b258 <__lshift>
 200cf04:	102d883a 	mov	r22,r2
 200cf08:	d9400517 	ldw	r5,20(sp)
 200cf0c:	a809883a 	mov	r4,r21
 200cf10:	b80d883a 	mov	r6,r23
 200cf14:	200b0cc0 	call	200b0cc <__mdiff>
 200cf18:	11000317 	ldw	r4,12(r2)
 200cf1c:	b00b883a 	mov	r5,r22
 200cf20:	10000315 	stw	zero,12(r2)
 200cf24:	d9001315 	stw	r4,76(sp)
 200cf28:	1009883a 	mov	r4,r2
 200cf2c:	1029883a 	mov	r20,r2
 200cf30:	200aa700 	call	200aa70 <__mcmp>
 200cf34:	10017c16 	blt	r2,zero,200d528 <_strtod_r+0xff0>
 200cf38:	1001af26 	beq	r2,zero,200d5f8 <_strtod_r+0x10c0>
 200cf3c:	a009883a 	mov	r4,r20
 200cf40:	b00b883a 	mov	r5,r22
 200cf44:	200ac700 	call	200ac70 <__ratio>
 200cf48:	0011883a 	mov	r8,zero
 200cf4c:	02500034 	movhi	r9,16384
 200cf50:	480f883a 	mov	r7,r9
 200cf54:	1009883a 	mov	r4,r2
 200cf58:	180b883a 	mov	r5,r3
 200cf5c:	400d883a 	mov	r6,r8
 200cf60:	1021883a 	mov	r16,r2
 200cf64:	1823883a 	mov	r17,r3
 200cf68:	2010e140 	call	2010e14 <__ledf2>
 200cf6c:	00805716 	blt	zero,r2,200d0cc <_strtod_r+0xb94>
 200cf70:	d9801317 	ldw	r6,76(sp)
 200cf74:	3025003a 	cmpeq	r18,r6,zero
 200cf78:	90008b1e 	bne	r18,zero,200d1a8 <_strtod_r+0xc70>
 200cf7c:	008ffc34 	movhi	r2,16368
 200cf80:	0021883a 	mov	r16,zero
 200cf84:	1023883a 	mov	r17,r2
 200cf88:	d8000715 	stw	zero,28(sp)
 200cf8c:	d8800815 	stw	r2,32(sp)
 200cf90:	e1c00117 	ldw	r7,4(fp)
 200cf94:	009ff834 	movhi	r2,32736
 200cf98:	3cdffc2c 	andhi	r19,r7,32752
 200cf9c:	98805e26 	beq	r19,r2,200d118 <_strtod_r+0xbe0>
 200cfa0:	d8801417 	ldw	r2,80(sp)
 200cfa4:	10001b26 	beq	r2,zero,200d014 <_strtod_r+0xadc>
 200cfa8:	0081a834 	movhi	r2,1696
 200cfac:	14c01936 	bltu	r2,r19,200d014 <_strtod_r+0xadc>
 200cfb0:	00bff034 	movhi	r2,65472
 200cfb4:	00d07834 	movhi	r3,16864
 200cfb8:	18ffffc4 	addi	r3,r3,-1
 200cfbc:	180f883a 	mov	r7,r3
 200cfc0:	8009883a 	mov	r4,r16
 200cfc4:	880b883a 	mov	r5,r17
 200cfc8:	100d883a 	mov	r6,r2
 200cfcc:	2010e140 	call	2010e14 <__ledf2>
 200cfd0:	00800b16 	blt	zero,r2,200d000 <_strtod_r+0xac8>
 200cfd4:	880b883a 	mov	r5,r17
 200cfd8:	8009883a 	mov	r4,r16
 200cfdc:	200f8d00 	call	200f8d0 <__fixunsdfsi>
 200cfe0:	1000df1e 	bne	r2,zero,200d360 <_strtod_r+0xe28>
 200cfe4:	0021883a 	mov	r16,zero
 200cfe8:	044ffc34 	movhi	r17,16368
 200cfec:	9000d91e 	bne	r18,zero,200d354 <_strtod_r+0xe1c>
 200cff0:	8005883a 	mov	r2,r16
 200cff4:	8807883a 	mov	r3,r17
 200cff8:	d8c00815 	stw	r3,32(sp)
 200cffc:	d8800715 	stw	r2,28(sp)
 200d000:	d8800817 	ldw	r2,32(sp)
 200d004:	00c1ac34 	movhi	r3,1712
 200d008:	14c5c83a 	sub	r2,r2,r19
 200d00c:	10c5883a 	add	r2,r2,r3
 200d010:	d8800815 	stw	r2,32(sp)
 200d014:	e0800017 	ldw	r2,0(fp)
 200d018:	e0c00117 	ldw	r3,4(fp)
 200d01c:	1009883a 	mov	r4,r2
 200d020:	180b883a 	mov	r5,r3
 200d024:	200aad00 	call	200aad0 <__ulp>
 200d028:	d9800717 	ldw	r6,28(sp)
 200d02c:	d9c00817 	ldw	r7,32(sp)
 200d030:	180b883a 	mov	r5,r3
 200d034:	1009883a 	mov	r4,r2
 200d038:	200283c0 	call	200283c <__muldf3>
 200d03c:	e2000017 	ldw	r8,0(fp)
 200d040:	e2400117 	ldw	r9,4(fp)
 200d044:	180b883a 	mov	r5,r3
 200d048:	1009883a 	mov	r4,r2
 200d04c:	480f883a 	mov	r7,r9
 200d050:	400d883a 	mov	r6,r8
 200d054:	2010af80 	call	2010af8 <__adddf3>
 200d058:	e0c00115 	stw	r3,4(fp)
 200d05c:	e0800015 	stw	r2,0(fp)
 200d060:	d8c01417 	ldw	r3,80(sp)
 200d064:	e4800117 	ldw	r18,4(fp)
 200d068:	1800021e 	bne	r3,zero,200d074 <_strtod_r+0xb3c>
 200d06c:	909ffc2c 	andhi	r2,r18,32752
 200d070:	98807b26 	beq	r19,r2,200d260 <_strtod_r+0xd28>
 200d074:	d9400517 	ldw	r5,20(sp)
 200d078:	a809883a 	mov	r4,r21
 200d07c:	200a9140 	call	200a914 <_Bfree>
 200d080:	a809883a 	mov	r4,r21
 200d084:	b80b883a 	mov	r5,r23
 200d088:	200a9140 	call	200a914 <_Bfree>
 200d08c:	a809883a 	mov	r4,r21
 200d090:	b00b883a 	mov	r5,r22
 200d094:	200a9140 	call	200a914 <_Bfree>
 200d098:	a809883a 	mov	r4,r21
 200d09c:	a00b883a 	mov	r5,r20
 200d0a0:	200a9140 	call	200a914 <_Bfree>
 200d0a4:	003f3c06 	br	200cd98 <_strtod_r+0x860>
 200d0a8:	b80b883a 	mov	r5,r23
 200d0ac:	a00d883a 	mov	r6,r20
 200d0b0:	a809883a 	mov	r4,r21
 200d0b4:	200b6c80 	call	200b6c8 <__pow5mult>
 200d0b8:	102f883a 	mov	r23,r2
 200d0bc:	003f8606 	br	200ced8 <_strtod_r+0x9a0>
 200d0c0:	00800d84 	movi	r2,54
 200d0c4:	114dc83a 	sub	r6,r2,r5
 200d0c8:	003f5f06 	br	200ce48 <_strtod_r+0x910>
 200d0cc:	0005883a 	mov	r2,zero
 200d0d0:	00cff834 	movhi	r3,16352
 200d0d4:	880b883a 	mov	r5,r17
 200d0d8:	8009883a 	mov	r4,r16
 200d0dc:	100d883a 	mov	r6,r2
 200d0e0:	180f883a 	mov	r7,r3
 200d0e4:	200283c0 	call	200283c <__muldf3>
 200d0e8:	d9801317 	ldw	r6,76(sp)
 200d0ec:	1021883a 	mov	r16,r2
 200d0f0:	1823883a 	mov	r17,r3
 200d0f4:	3025003a 	cmpeq	r18,r6,zero
 200d0f8:	90000126 	beq	r18,zero,200d100 <_strtod_r+0xbc8>
 200d0fc:	18e0003c 	xorhi	r3,r3,32768
 200d100:	d8800715 	stw	r2,28(sp)
 200d104:	d8c00815 	stw	r3,32(sp)
 200d108:	e1c00117 	ldw	r7,4(fp)
 200d10c:	009ff834 	movhi	r2,32736
 200d110:	3cdffc2c 	andhi	r19,r7,32752
 200d114:	98bfa21e 	bne	r19,r2,200cfa0 <_strtod_r+0xa68>
 200d118:	e1000017 	ldw	r4,0(fp)
 200d11c:	01bf2c34 	movhi	r6,64688
 200d120:	398d883a 	add	r6,r7,r6
 200d124:	d9000b15 	stw	r4,44(sp)
 200d128:	d9c00c15 	stw	r7,48(sp)
 200d12c:	300b883a 	mov	r5,r6
 200d130:	e1800115 	stw	r6,4(fp)
 200d134:	200aad00 	call	200aad0 <__ulp>
 200d138:	d9800717 	ldw	r6,28(sp)
 200d13c:	d9c00817 	ldw	r7,32(sp)
 200d140:	180b883a 	mov	r5,r3
 200d144:	1009883a 	mov	r4,r2
 200d148:	200283c0 	call	200283c <__muldf3>
 200d14c:	e2000017 	ldw	r8,0(fp)
 200d150:	e2400117 	ldw	r9,4(fp)
 200d154:	180b883a 	mov	r5,r3
 200d158:	1009883a 	mov	r4,r2
 200d15c:	480f883a 	mov	r7,r9
 200d160:	400d883a 	mov	r6,r8
 200d164:	2010af80 	call	2010af8 <__adddf3>
 200d168:	1009883a 	mov	r4,r2
 200d16c:	180b883a 	mov	r5,r3
 200d170:	009f2834 	movhi	r2,31904
 200d174:	10bfffc4 	addi	r2,r2,-1
 200d178:	18dffc2c 	andhi	r3,r3,32752
 200d17c:	e1000015 	stw	r4,0(fp)
 200d180:	e1400115 	stw	r5,4(fp)
 200d184:	10c06f2e 	bgeu	r2,r3,200d344 <_strtod_r+0xe0c>
 200d188:	d8800c17 	ldw	r2,48(sp)
 200d18c:	011ffc34 	movhi	r4,32752
 200d190:	213fffc4 	addi	r4,r4,-1
 200d194:	11007a26 	beq	r2,r4,200d380 <_strtod_r+0xe48>
 200d198:	01ffffc4 	movi	r7,-1
 200d19c:	e1000115 	stw	r4,4(fp)
 200d1a0:	e1c00015 	stw	r7,0(fp)
 200d1a4:	003fb306 	br	200d074 <_strtod_r+0xb3c>
 200d1a8:	e0c00017 	ldw	r3,0(fp)
 200d1ac:	1800221e 	bne	r3,zero,200d238 <_strtod_r+0xd00>
 200d1b0:	e0800117 	ldw	r2,4(fp)
 200d1b4:	00c00434 	movhi	r3,16
 200d1b8:	18ffffc4 	addi	r3,r3,-1
 200d1bc:	10c4703a 	and	r2,r2,r3
 200d1c0:	1000211e 	bne	r2,zero,200d248 <_strtod_r+0xd10>
 200d1c4:	0005883a 	mov	r2,zero
 200d1c8:	00cffc34 	movhi	r3,16368
 200d1cc:	180f883a 	mov	r7,r3
 200d1d0:	8009883a 	mov	r4,r16
 200d1d4:	880b883a 	mov	r5,r17
 200d1d8:	100d883a 	mov	r6,r2
 200d1dc:	2010d8c0 	call	2010d8c <__ltdf2>
 200d1e0:	10013c16 	blt	r2,zero,200d6d4 <_strtod_r+0x119c>
 200d1e4:	0005883a 	mov	r2,zero
 200d1e8:	00cff834 	movhi	r3,16352
 200d1ec:	880b883a 	mov	r5,r17
 200d1f0:	8009883a 	mov	r4,r16
 200d1f4:	180f883a 	mov	r7,r3
 200d1f8:	100d883a 	mov	r6,r2
 200d1fc:	200283c0 	call	200283c <__muldf3>
 200d200:	1823883a 	mov	r17,r3
 200d204:	1021883a 	mov	r16,r2
 200d208:	18e0003c 	xorhi	r3,r3,32768
 200d20c:	003fbc06 	br	200d100 <_strtod_r+0xbc8>
 200d210:	3827883a 	mov	r19,r7
 200d214:	003f1a06 	br	200ce80 <_strtod_r+0x948>
 200d218:	4091c83a 	sub	r8,r8,r2
 200d21c:	003f0206 	br	200ce28 <_strtod_r+0x8f0>
 200d220:	d8c00f17 	ldw	r3,60(sp)
 200d224:	0011883a 	mov	r8,zero
 200d228:	0029883a 	mov	r20,zero
 200d22c:	00d3c83a 	sub	r9,zero,r3
 200d230:	480f883a 	mov	r7,r9
 200d234:	003ef906 	br	200ce1c <_strtod_r+0x8e4>
 200d238:	00800044 	movi	r2,1
 200d23c:	1880021e 	bne	r3,r2,200d248 <_strtod_r+0xd10>
 200d240:	e0800117 	ldw	r2,4(fp)
 200d244:	1000a526 	beq	r2,zero,200d4dc <_strtod_r+0xfa4>
 200d248:	00affc34 	movhi	r2,49136
 200d24c:	0021883a 	mov	r16,zero
 200d250:	044ffc34 	movhi	r17,16368
 200d254:	d8800815 	stw	r2,32(sp)
 200d258:	d8000715 	stw	zero,28(sp)
 200d25c:	003f4c06 	br	200cf90 <_strtod_r+0xa58>
 200d260:	880b883a 	mov	r5,r17
 200d264:	8009883a 	mov	r4,r16
 200d268:	2010f940 	call	2010f94 <__fixdfsi>
 200d26c:	1009883a 	mov	r4,r2
 200d270:	2010e9c0 	call	2010e9c <__floatsidf>
 200d274:	880b883a 	mov	r5,r17
 200d278:	8009883a 	mov	r4,r16
 200d27c:	100d883a 	mov	r6,r2
 200d280:	180f883a 	mov	r7,r3
 200d284:	2010a780 	call	2010a78 <__subdf3>
 200d288:	d9001317 	ldw	r4,76(sp)
 200d28c:	100b883a 	mov	r5,r2
 200d290:	180d883a 	mov	r6,r3
 200d294:	1021883a 	mov	r16,r2
 200d298:	1823883a 	mov	r17,r3
 200d29c:	2000061e 	bne	r4,zero,200d2b8 <_strtod_r+0xd80>
 200d2a0:	e0800017 	ldw	r2,0(fp)
 200d2a4:	1000041e 	bne	r2,zero,200d2b8 <_strtod_r+0xd80>
 200d2a8:	00c00434 	movhi	r3,16
 200d2ac:	18ffffc4 	addi	r3,r3,-1
 200d2b0:	90c4703a 	and	r2,r18,r3
 200d2b4:	10004026 	beq	r2,zero,200d3b8 <_strtod_r+0xe80>
 200d2b8:	00a52834 	movhi	r2,38048
 200d2bc:	108d6544 	addi	r2,r2,13717
 200d2c0:	00cff834 	movhi	r3,16352
 200d2c4:	18ffffc4 	addi	r3,r3,-1
 200d2c8:	180f883a 	mov	r7,r3
 200d2cc:	8009883a 	mov	r4,r16
 200d2d0:	880b883a 	mov	r5,r17
 200d2d4:	100d883a 	mov	r6,r2
 200d2d8:	2010d8c0 	call	2010d8c <__ltdf2>
 200d2dc:	10000916 	blt	r2,zero,200d304 <_strtod_r+0xdcc>
 200d2e0:	008d6c34 	movhi	r2,13744
 200d2e4:	10b94d44 	addi	r2,r2,-6859
 200d2e8:	00cff834 	movhi	r3,16352
 200d2ec:	880b883a 	mov	r5,r17
 200d2f0:	180f883a 	mov	r7,r3
 200d2f4:	8009883a 	mov	r4,r16
 200d2f8:	100d883a 	mov	r6,r2
 200d2fc:	2010c7c0 	call	2010c7c <__gtdf2>
 200d300:	00bf5c0e 	bge	zero,r2,200d074 <_strtod_r+0xb3c>
 200d304:	d9400517 	ldw	r5,20(sp)
 200d308:	a809883a 	mov	r4,r21
 200d30c:	200a9140 	call	200a914 <_Bfree>
 200d310:	a809883a 	mov	r4,r21
 200d314:	b80b883a 	mov	r5,r23
 200d318:	200a9140 	call	200a914 <_Bfree>
 200d31c:	a809883a 	mov	r4,r21
 200d320:	b00b883a 	mov	r5,r22
 200d324:	200a9140 	call	200a914 <_Bfree>
 200d328:	d9401017 	ldw	r5,64(sp)
 200d32c:	a809883a 	mov	r4,r21
 200d330:	200a9140 	call	200a914 <_Bfree>
 200d334:	a809883a 	mov	r4,r21
 200d338:	a00b883a 	mov	r5,r20
 200d33c:	200a9140 	call	200a914 <_Bfree>
 200d340:	003cf406 	br	200c714 <_strtod_r+0x1dc>
 200d344:	0080d434 	movhi	r2,848
 200d348:	288d883a 	add	r6,r5,r2
 200d34c:	e1800115 	stw	r6,4(fp)
 200d350:	003f4306 	br	200d060 <_strtod_r+0xb28>
 200d354:	8005883a 	mov	r2,r16
 200d358:	88e0003c 	xorhi	r3,r17,32768
 200d35c:	003f2606 	br	200cff8 <_strtod_r+0xac0>
 200d360:	1009883a 	mov	r4,r2
 200d364:	20110e00 	call	20110e0 <__floatunsidf>
 200d368:	1021883a 	mov	r16,r2
 200d36c:	1823883a 	mov	r17,r3
 200d370:	003f1e06 	br	200cfec <_strtod_r+0xab4>
 200d374:	da000417 	ldw	r8,16(sp)
 200d378:	39c00044 	addi	r7,r7,1
 200d37c:	003e6706 	br	200cd1c <_strtod_r+0x7e4>
 200d380:	d8c00b17 	ldw	r3,44(sp)
 200d384:	00bfffc4 	movi	r2,-1
 200d388:	18bf831e 	bne	r3,r2,200d198 <_strtod_r+0xc60>
 200d38c:	00c00884 	movi	r3,34
 200d390:	a8c00015 	stw	r3,0(r21)
 200d394:	009ffc34 	movhi	r2,32752
 200d398:	e0800115 	stw	r2,4(fp)
 200d39c:	e0000015 	stw	zero,0(fp)
 200d3a0:	003fd806 	br	200d304 <_strtod_r+0xdcc>
 200d3a4:	4007883a 	mov	r3,r8
 200d3a8:	000d883a 	mov	r6,zero
 200d3ac:	0029883a 	mov	r20,zero
 200d3b0:	0021883a 	mov	r16,zero
 200d3b4:	003cc906 	br	200c6dc <_strtod_r+0x1a4>
 200d3b8:	00a52834 	movhi	r2,38048
 200d3bc:	108d6544 	addi	r2,r2,13717
 200d3c0:	00cff434 	movhi	r3,16336
 200d3c4:	18ffffc4 	addi	r3,r3,-1
 200d3c8:	2809883a 	mov	r4,r5
 200d3cc:	180f883a 	mov	r7,r3
 200d3d0:	300b883a 	mov	r5,r6
 200d3d4:	100d883a 	mov	r6,r2
 200d3d8:	2010d8c0 	call	2010d8c <__ltdf2>
 200d3dc:	103f250e 	bge	r2,zero,200d074 <_strtod_r+0xb3c>
 200d3e0:	003fc806 	br	200d304 <_strtod_r+0xdcc>
 200d3e4:	0027883a 	mov	r19,zero
 200d3e8:	04800044 	movi	r18,1
 200d3ec:	0015883a 	mov	r10,zero
 200d3f0:	003cc006 	br	200c6f4 <_strtod_r+0x1bc>
 200d3f4:	00800884 	movi	r2,34
 200d3f8:	a8800015 	stw	r2,0(r21)
 200d3fc:	019ffc34 	movhi	r6,32752
 200d400:	e1800115 	stw	r6,4(fp)
 200d404:	e0000015 	stw	zero,0(fp)
 200d408:	003cc206 	br	200c714 <_strtod_r+0x1dc>
 200d40c:	015387c4 	movi	r5,19999
 200d410:	003d1e06 	br	200c88c <_strtod_r+0x354>
 200d414:	300a90fa 	slli	r5,r6,3
 200d418:	e0800017 	ldw	r2,0(fp)
 200d41c:	e0c00117 	ldw	r3,4(fp)
 200d420:	01008074 	movhi	r4,513
 200d424:	21179004 	addi	r4,r4,24128
 200d428:	290b883a 	add	r5,r5,r4
 200d42c:	2a000017 	ldw	r8,0(r5)
 200d430:	2a400117 	ldw	r9,4(r5)
 200d434:	1009883a 	mov	r4,r2
 200d438:	180b883a 	mov	r5,r3
 200d43c:	480f883a 	mov	r7,r9
 200d440:	400d883a 	mov	r6,r8
 200d444:	200283c0 	call	200283c <__muldf3>
 200d448:	e0c00115 	stw	r3,4(fp)
 200d44c:	e0800015 	stw	r2,0(fp)
 200d450:	003cb006 	br	200c714 <_strtod_r+0x1dc>
 200d454:	d8800d17 	ldw	r2,52(sp)
 200d458:	e0800015 	stw	r2,0(fp)
 200d45c:	d8c00e17 	ldw	r3,56(sp)
 200d460:	e0c00115 	stw	r3,4(fp)
 200d464:	9880020c 	andi	r2,r19,8
 200d468:	103caa26 	beq	r2,zero,200c714 <_strtod_r+0x1dc>
 200d46c:	e0800117 	ldw	r2,4(fp)
 200d470:	10a00034 	orhi	r2,r2,32768
 200d474:	e0800115 	stw	r2,4(fp)
 200d478:	003ca606 	br	200c714 <_strtod_r+0x1dc>
 200d47c:	009ffc34 	movhi	r2,32752
 200d480:	e0800115 	stw	r2,4(fp)
 200d484:	e0000015 	stw	zero,0(fp)
 200d488:	003ff606 	br	200d464 <_strtod_r+0xf2c>
 200d48c:	00a00034 	movhi	r2,32768
 200d490:	10bfffc4 	addi	r2,r2,-1
 200d494:	00ffffc4 	movi	r3,-1
 200d498:	e0800115 	stw	r2,4(fp)
 200d49c:	e0c00015 	stw	r3,0(fp)
 200d4a0:	003ff006 	br	200d464 <_strtod_r+0xf2c>
 200d4a4:	e0000115 	stw	zero,4(fp)
 200d4a8:	e0000015 	stw	zero,0(fp)
 200d4ac:	003fed06 	br	200d464 <_strtod_r+0xf2c>
 200d4b0:	d8800e17 	ldw	r2,56(sp)
 200d4b4:	29010cc4 	addi	r4,r5,1075
 200d4b8:	00fffc34 	movhi	r3,65520
 200d4bc:	18ffffc4 	addi	r3,r3,-1
 200d4c0:	2008953a 	slli	r4,r4,20
 200d4c4:	10c4703a 	and	r2,r2,r3
 200d4c8:	d8c00d17 	ldw	r3,52(sp)
 200d4cc:	1104b03a 	or	r2,r2,r4
 200d4d0:	e0800115 	stw	r2,4(fp)
 200d4d4:	e0c00015 	stw	r3,0(fp)
 200d4d8:	003fe206 	br	200d464 <_strtod_r+0xf2c>
 200d4dc:	00800884 	movi	r2,34
 200d4e0:	a8800015 	stw	r2,0(r21)
 200d4e4:	e0000015 	stw	zero,0(fp)
 200d4e8:	e0000115 	stw	zero,4(fp)
 200d4ec:	003f8506 	br	200d304 <_strtod_r+0xdcc>
 200d4f0:	03800044 	movi	r14,1
 200d4f4:	003d7706 	br	200cad4 <_strtod_r+0x59c>
 200d4f8:	99c5883a 	add	r2,r19,r7
 200d4fc:	11ffffc4 	addi	r7,r2,-1
 200d500:	00800204 	movi	r2,8
 200d504:	3cc00044 	addi	r19,r7,1
 200d508:	11c0df16 	blt	r2,r7,200d888 <_strtod_r+0x1350>
 200d50c:	a08002a4 	muli	r2,r20,10
 200d510:	000f883a 	mov	r7,zero
 200d514:	1269883a 	add	r20,r2,r9
 200d518:	42000044 	addi	r8,r8,1
 200d51c:	da000415 	stw	r8,16(sp)
 200d520:	41000007 	ldb	r4,0(r8)
 200d524:	003d3706 	br	200ca04 <_strtod_r+0x4cc>
 200d528:	d9801317 	ldw	r6,76(sp)
 200d52c:	3000511e 	bne	r6,zero,200d674 <_strtod_r+0x113c>
 200d530:	e0800017 	ldw	r2,0(fp)
 200d534:	1000d81e 	bne	r2,zero,200d898 <_strtod_r+0x1360>
 200d538:	e0c00117 	ldw	r3,4(fp)
 200d53c:	01000434 	movhi	r4,16
 200d540:	213fffc4 	addi	r4,r4,-1
 200d544:	1904703a 	and	r2,r3,r4
 200d548:	1000b01e 	bne	r2,zero,200d80c <_strtod_r+0x12d4>
 200d54c:	18dffc2c 	andhi	r3,r3,32752
 200d550:	0081ac34 	movhi	r2,1712
 200d554:	10c1102e 	bgeu	r2,r3,200d998 <_strtod_r+0x1460>
 200d558:	a0800517 	ldw	r2,20(r20)
 200d55c:	1000031e 	bne	r2,zero,200d56c <_strtod_r+0x1034>
 200d560:	a0c00417 	ldw	r3,16(r20)
 200d564:	00800044 	movi	r2,1
 200d568:	10c0420e 	bge	r2,r3,200d674 <_strtod_r+0x113c>
 200d56c:	a00b883a 	mov	r5,r20
 200d570:	a809883a 	mov	r4,r21
 200d574:	01800044 	movi	r6,1
 200d578:	200b2580 	call	200b258 <__lshift>
 200d57c:	1009883a 	mov	r4,r2
 200d580:	b00b883a 	mov	r5,r22
 200d584:	1029883a 	mov	r20,r2
 200d588:	200aa700 	call	200aa70 <__mcmp>
 200d58c:	0080c20e 	bge	zero,r2,200d898 <_strtod_r+0x1360>
 200d590:	e1800117 	ldw	r6,4(fp)
 200d594:	d9001417 	ldw	r4,80(sp)
 200d598:	2013003a 	cmpeq	r9,r4,zero
 200d59c:	4800ef1e 	bne	r9,zero,200d95c <_strtod_r+0x1424>
 200d5a0:	30dffc2c 	andhi	r3,r6,32752
 200d5a4:	0081ac34 	movhi	r2,1712
 200d5a8:	10c0ec36 	bltu	r2,r3,200d95c <_strtod_r+0x1424>
 200d5ac:	0080dc34 	movhi	r2,880
 200d5b0:	10ffca2e 	bgeu	r2,r3,200d4dc <_strtod_r+0xfa4>
 200d5b4:	e0800017 	ldw	r2,0(fp)
 200d5b8:	e0c00117 	ldw	r3,4(fp)
 200d5bc:	020e5434 	movhi	r8,14672
 200d5c0:	000d883a 	mov	r6,zero
 200d5c4:	400f883a 	mov	r7,r8
 200d5c8:	180b883a 	mov	r5,r3
 200d5cc:	1009883a 	mov	r4,r2
 200d5d0:	da000c15 	stw	r8,48(sp)
 200d5d4:	d8000b15 	stw	zero,44(sp)
 200d5d8:	200283c0 	call	200283c <__muldf3>
 200d5dc:	e0800015 	stw	r2,0(fp)
 200d5e0:	e0c00115 	stw	r3,4(fp)
 200d5e4:	183f471e 	bne	r3,zero,200d304 <_strtod_r+0xdcc>
 200d5e8:	103f461e 	bne	r2,zero,200d304 <_strtod_r+0xdcc>
 200d5ec:	00800884 	movi	r2,34
 200d5f0:	a8800015 	stw	r2,0(r21)
 200d5f4:	003f4306 	br	200d304 <_strtod_r+0xdcc>
 200d5f8:	d8801317 	ldw	r2,76(sp)
 200d5fc:	1025003a 	cmpeq	r18,r2,zero
 200d600:	9000861e 	bne	r18,zero,200d81c <_strtod_r+0x12e4>
 200d604:	e1400117 	ldw	r5,4(fp)
 200d608:	00c00434 	movhi	r3,16
 200d60c:	18ffffc4 	addi	r3,r3,-1
 200d610:	28c4703a 	and	r2,r5,r3
 200d614:	10c01b26 	beq	r2,r3,200d684 <_strtod_r+0x114c>
 200d618:	e1c00017 	ldw	r7,0(fp)
 200d61c:	3880004c 	andi	r2,r7,1
 200d620:	1005003a 	cmpeq	r2,r2,zero
 200d624:	1000791e 	bne	r2,zero,200d80c <_strtod_r+0x12d4>
 200d628:	9000b126 	beq	r18,zero,200d8f0 <_strtod_r+0x13b8>
 200d62c:	e4400117 	ldw	r17,4(fp)
 200d630:	3809883a 	mov	r4,r7
 200d634:	3821883a 	mov	r16,r7
 200d638:	880b883a 	mov	r5,r17
 200d63c:	200aad00 	call	200aad0 <__ulp>
 200d640:	180f883a 	mov	r7,r3
 200d644:	880b883a 	mov	r5,r17
 200d648:	8009883a 	mov	r4,r16
 200d64c:	100d883a 	mov	r6,r2
 200d650:	2010a780 	call	2010a78 <__subdf3>
 200d654:	1009883a 	mov	r4,r2
 200d658:	000d883a 	mov	r6,zero
 200d65c:	000f883a 	mov	r7,zero
 200d660:	180b883a 	mov	r5,r3
 200d664:	e0800015 	stw	r2,0(fp)
 200d668:	e0c00115 	stw	r3,4(fp)
 200d66c:	2010bf40 	call	2010bf4 <__nedf2>
 200d670:	103f9a26 	beq	r2,zero,200d4dc <_strtod_r+0xfa4>
 200d674:	d9001417 	ldw	r4,80(sp)
 200d678:	2013003a 	cmpeq	r9,r4,zero
 200d67c:	483f211e 	bne	r9,zero,200d304 <_strtod_r+0xdcc>
 200d680:	003fcc06 	br	200d5b4 <_strtod_r+0x107c>
 200d684:	d9001417 	ldw	r4,80(sp)
 200d688:	e1c00017 	ldw	r7,0(fp)
 200d68c:	2013003a 	cmpeq	r9,r4,zero
 200d690:	4800bd1e 	bne	r9,zero,200d988 <_strtod_r+0x1450>
 200d694:	28dffc2c 	andhi	r3,r5,32752
 200d698:	0081a834 	movhi	r2,1696
 200d69c:	10c0ba36 	bltu	r2,r3,200d988 <_strtod_r+0x1450>
 200d6a0:	1804d53a 	srli	r2,r3,20
 200d6a4:	00c01ac4 	movi	r3,107
 200d6a8:	013fffc4 	movi	r4,-1
 200d6ac:	1887c83a 	sub	r3,r3,r2
 200d6b0:	20c4983a 	sll	r2,r4,r3
 200d6b4:	11ffd91e 	bne	r2,r7,200d61c <_strtod_r+0x10e4>
 200d6b8:	28dffc2c 	andhi	r3,r5,32752
 200d6bc:	00800434 	movhi	r2,16
 200d6c0:	188d883a 	add	r6,r3,r2
 200d6c4:	e1800115 	stw	r6,4(fp)
 200d6c8:	e0000015 	stw	zero,0(fp)
 200d6cc:	483f0d1e 	bne	r9,zero,200d304 <_strtod_r+0xdcc>
 200d6d0:	003fb806 	br	200d5b4 <_strtod_r+0x107c>
 200d6d4:	0021883a 	mov	r16,zero
 200d6d8:	0005883a 	mov	r2,zero
 200d6dc:	044ff834 	movhi	r17,16352
 200d6e0:	00eff834 	movhi	r3,49120
 200d6e4:	003e8606 	br	200d100 <_strtod_r+0xbc8>
 200d6e8:	803d9e26 	beq	r16,zero,200cd64 <_strtod_r+0x82c>
 200d6ec:	0421c83a 	sub	r16,zero,r16
 200d6f0:	814003cc 	andi	r5,r16,15
 200d6f4:	28000f26 	beq	r5,zero,200d734 <_strtod_r+0x11fc>
 200d6f8:	280a90fa 	slli	r5,r5,3
 200d6fc:	01008074 	movhi	r4,513
 200d700:	21179004 	addi	r4,r4,24128
 200d704:	e0800017 	ldw	r2,0(fp)
 200d708:	290b883a 	add	r5,r5,r4
 200d70c:	2a000017 	ldw	r8,0(r5)
 200d710:	e0c00117 	ldw	r3,4(fp)
 200d714:	2a400117 	ldw	r9,4(r5)
 200d718:	1009883a 	mov	r4,r2
 200d71c:	180b883a 	mov	r5,r3
 200d720:	480f883a 	mov	r7,r9
 200d724:	400d883a 	mov	r6,r8
 200d728:	2002c000 	call	2002c00 <__divdf3>
 200d72c:	e0c00115 	stw	r3,4(fp)
 200d730:	e0800015 	stw	r2,0(fp)
 200d734:	8021d13a 	srai	r16,r16,4
 200d738:	803d8a26 	beq	r16,zero,200cd64 <_strtod_r+0x82c>
 200d73c:	008007c4 	movi	r2,31
 200d740:	14002d16 	blt	r2,r16,200d7f8 <_strtod_r+0x12c0>
 200d744:	8080040c 	andi	r2,r16,16
 200d748:	10009926 	beq	r2,zero,200d9b0 <_strtod_r+0x1478>
 200d74c:	00801a84 	movi	r2,106
 200d750:	d8801415 	stw	r2,80(sp)
 200d754:	0400110e 	bge	zero,r16,200d79c <_strtod_r+0x1264>
 200d758:	04408074 	movhi	r17,513
 200d75c:	8c57dd04 	addi	r17,r17,24436
 200d760:	8080004c 	andi	r2,r16,1
 200d764:	1005003a 	cmpeq	r2,r2,zero
 200d768:	1000091e 	bne	r2,zero,200d790 <_strtod_r+0x1258>
 200d76c:	e0800017 	ldw	r2,0(fp)
 200d770:	e0c00117 	ldw	r3,4(fp)
 200d774:	89800017 	ldw	r6,0(r17)
 200d778:	89c00117 	ldw	r7,4(r17)
 200d77c:	180b883a 	mov	r5,r3
 200d780:	1009883a 	mov	r4,r2
 200d784:	200283c0 	call	200283c <__muldf3>
 200d788:	e0c00115 	stw	r3,4(fp)
 200d78c:	e0800015 	stw	r2,0(fp)
 200d790:	8021d07a 	srai	r16,r16,1
 200d794:	8c400204 	addi	r17,r17,8
 200d798:	043ff116 	blt	zero,r16,200d760 <_strtod_r+0x1228>
 200d79c:	d8c01417 	ldw	r3,80(sp)
 200d7a0:	18000d26 	beq	r3,zero,200d7d8 <_strtod_r+0x12a0>
 200d7a4:	e1000117 	ldw	r4,4(fp)
 200d7a8:	00c01ac4 	movi	r3,107
 200d7ac:	209ffc2c 	andhi	r2,r4,32752
 200d7b0:	1004d53a 	srli	r2,r2,20
 200d7b4:	1887c83a 	sub	r3,r3,r2
 200d7b8:	00c0070e 	bge	zero,r3,200d7d8 <_strtod_r+0x12a0>
 200d7bc:	008007c4 	movi	r2,31
 200d7c0:	10c0900e 	bge	r2,r3,200da04 <_strtod_r+0x14cc>
 200d7c4:	00800d04 	movi	r2,52
 200d7c8:	e0000015 	stw	zero,0(fp)
 200d7cc:	10c0870e 	bge	r2,r3,200d9ec <_strtod_r+0x14b4>
 200d7d0:	0180dc34 	movhi	r6,880
 200d7d4:	e1800115 	stw	r6,4(fp)
 200d7d8:	e0800017 	ldw	r2,0(fp)
 200d7dc:	e0c00117 	ldw	r3,4(fp)
 200d7e0:	000d883a 	mov	r6,zero
 200d7e4:	000f883a 	mov	r7,zero
 200d7e8:	180b883a 	mov	r5,r3
 200d7ec:	1009883a 	mov	r4,r2
 200d7f0:	2010bf40 	call	2010bf4 <__nedf2>
 200d7f4:	103d5c1e 	bne	r2,zero,200cd68 <_strtod_r+0x830>
 200d7f8:	00800884 	movi	r2,34
 200d7fc:	a8800015 	stw	r2,0(r21)
 200d800:	e0000015 	stw	zero,0(fp)
 200d804:	e0000115 	stw	zero,4(fp)
 200d808:	003bc206 	br	200c714 <_strtod_r+0x1dc>
 200d80c:	d8801417 	ldw	r2,80(sp)
 200d810:	1013003a 	cmpeq	r9,r2,zero
 200d814:	483ebb1e 	bne	r9,zero,200d304 <_strtod_r+0xdcc>
 200d818:	003f6606 	br	200d5b4 <_strtod_r+0x107c>
 200d81c:	e1800117 	ldw	r6,4(fp)
 200d820:	00c00434 	movhi	r3,16
 200d824:	18ffffc4 	addi	r3,r3,-1
 200d828:	30c4703a 	and	r2,r6,r3
 200d82c:	103f7a1e 	bne	r2,zero,200d618 <_strtod_r+0x10e0>
 200d830:	e1c00017 	ldw	r7,0(fp)
 200d834:	383f791e 	bne	r7,zero,200d61c <_strtod_r+0x10e4>
 200d838:	003f5606 	br	200d594 <_strtod_r+0x105c>
 200d83c:	d9800f17 	ldw	r6,60(sp)
 200d840:	00bffa84 	movi	r2,-22
 200d844:	30bcd416 	blt	r6,r2,200cb98 <_strtod_r+0x660>
 200d848:	317ffe24 	muli	r5,r6,-8
 200d84c:	01008074 	movhi	r4,513
 200d850:	21179004 	addi	r4,r4,24128
 200d854:	e0800017 	ldw	r2,0(fp)
 200d858:	290b883a 	add	r5,r5,r4
 200d85c:	2a000017 	ldw	r8,0(r5)
 200d860:	e0c00117 	ldw	r3,4(fp)
 200d864:	2a400117 	ldw	r9,4(r5)
 200d868:	1009883a 	mov	r4,r2
 200d86c:	180b883a 	mov	r5,r3
 200d870:	480f883a 	mov	r7,r9
 200d874:	400d883a 	mov	r6,r8
 200d878:	2002c000 	call	2002c00 <__divdf3>
 200d87c:	e0c00115 	stw	r3,4(fp)
 200d880:	e0800015 	stw	r2,0(fp)
 200d884:	003ba306 	br	200c714 <_strtod_r+0x1dc>
 200d888:	00800404 	movi	r2,16
 200d88c:	14c02f0e 	bge	r2,r19,200d94c <_strtod_r+0x1414>
 200d890:	000f883a 	mov	r7,zero
 200d894:	003f2006 	br	200d518 <_strtod_r+0xfe0>
 200d898:	d9801417 	ldw	r6,80(sp)
 200d89c:	3013003a 	cmpeq	r9,r6,zero
 200d8a0:	483e981e 	bne	r9,zero,200d304 <_strtod_r+0xdcc>
 200d8a4:	003f4306 	br	200d5b4 <_strtod_r+0x107c>
 200d8a8:	00801a44 	movi	r2,105
 200d8ac:	20bc6326 	beq	r4,r2,200ca3c <_strtod_r+0x504>
 200d8b0:	00801b84 	movi	r2,110
 200d8b4:	20bbba1e 	bne	r4,r2,200c7a0 <_strtod_r+0x268>
 200d8b8:	dc000404 	addi	r16,sp,16
 200d8bc:	8009883a 	mov	r4,r16
 200d8c0:	01408074 	movhi	r5,513
 200d8c4:	2957dc04 	addi	r5,r5,24432
 200d8c8:	200c4f00 	call	200c4f0 <match>
 200d8cc:	103bb426 	beq	r2,zero,200c7a0 <_strtod_r+0x268>
 200d8d0:	d8800417 	ldw	r2,16(sp)
 200d8d4:	00c00a04 	movi	r3,40
 200d8d8:	11000007 	ldb	r4,0(r2)
 200d8dc:	20c03626 	beq	r4,r3,200d9b8 <_strtod_r+0x1480>
 200d8e0:	01bffe34 	movhi	r6,65528
 200d8e4:	e1800115 	stw	r6,4(fp)
 200d8e8:	e0000015 	stw	zero,0(fp)
 200d8ec:	003b8906 	br	200c714 <_strtod_r+0x1dc>
 200d8f0:	e4400117 	ldw	r17,4(fp)
 200d8f4:	3809883a 	mov	r4,r7
 200d8f8:	3821883a 	mov	r16,r7
 200d8fc:	880b883a 	mov	r5,r17
 200d900:	200aad00 	call	200aad0 <__ulp>
 200d904:	100d883a 	mov	r6,r2
 200d908:	880b883a 	mov	r5,r17
 200d90c:	180f883a 	mov	r7,r3
 200d910:	8009883a 	mov	r4,r16
 200d914:	2010af80 	call	2010af8 <__adddf3>
 200d918:	d9801417 	ldw	r6,80(sp)
 200d91c:	e0c00115 	stw	r3,4(fp)
 200d920:	e0800015 	stw	r2,0(fp)
 200d924:	3013003a 	cmpeq	r9,r6,zero
 200d928:	483e761e 	bne	r9,zero,200d304 <_strtod_r+0xdcc>
 200d92c:	003f2106 	br	200d5b4 <_strtod_r+0x107c>
 200d930:	000f883a 	mov	r7,zero
 200d934:	003cf006 	br	200ccf8 <_strtod_r+0x7c0>
 200d938:	0080d434 	movhi	r2,848
 200d93c:	188d883a 	add	r6,r3,r2
 200d940:	d8001415 	stw	zero,80(sp)
 200d944:	e1800115 	stw	r6,4(fp)
 200d948:	003d0706 	br	200cd68 <_strtod_r+0x830>
 200d94c:	808002a4 	muli	r2,r16,10
 200d950:	000f883a 	mov	r7,zero
 200d954:	1261883a 	add	r16,r2,r9
 200d958:	003eef06 	br	200d518 <_strtod_r+0xfe0>
 200d95c:	309ffc2c 	andhi	r2,r6,32752
 200d960:	00fffc34 	movhi	r3,65520
 200d964:	10c5883a 	add	r2,r2,r3
 200d968:	00c00434 	movhi	r3,16
 200d96c:	18ffffc4 	addi	r3,r3,-1
 200d970:	10ccb03a 	or	r6,r2,r3
 200d974:	01ffffc4 	movi	r7,-1
 200d978:	e1800115 	stw	r6,4(fp)
 200d97c:	e1c00015 	stw	r7,0(fp)
 200d980:	483e601e 	bne	r9,zero,200d304 <_strtod_r+0xdcc>
 200d984:	003f0b06 	br	200d5b4 <_strtod_r+0x107c>
 200d988:	00bfffc4 	movi	r2,-1
 200d98c:	003f4906 	br	200d6b4 <_strtod_r+0x117c>
 200d990:	0025883a 	mov	r18,zero
 200d994:	003cb106 	br	200cc5c <_strtod_r+0x724>
 200d998:	d8c01417 	ldw	r3,80(sp)
 200d99c:	1813003a 	cmpeq	r9,r3,zero
 200d9a0:	483e581e 	bne	r9,zero,200d304 <_strtod_r+0xdcc>
 200d9a4:	003f0306 	br	200d5b4 <_strtod_r+0x107c>
 200d9a8:	980f883a 	mov	r7,r19
 200d9ac:	003ed406 	br	200d500 <_strtod_r+0xfc8>
 200d9b0:	d8001415 	stw	zero,80(sp)
 200d9b4:	003f6706 	br	200d754 <_strtod_r+0x121c>
 200d9b8:	8009883a 	mov	r4,r16
 200d9bc:	01408074 	movhi	r5,513
 200d9c0:	295a4904 	addi	r5,r5,26916
 200d9c4:	d9800d04 	addi	r6,sp,52
 200d9c8:	200f5280 	call	200f528 <__hexnan>
 200d9cc:	00c00144 	movi	r3,5
 200d9d0:	10ffc31e 	bne	r2,r3,200d8e0 <_strtod_r+0x13a8>
 200d9d4:	d8800e17 	ldw	r2,56(sp)
 200d9d8:	d9c00d17 	ldw	r7,52(sp)
 200d9dc:	119ffc34 	orhi	r6,r2,32752
 200d9e0:	e1800115 	stw	r6,4(fp)
 200d9e4:	e1c00015 	stw	r7,0(fp)
 200d9e8:	003b4a06 	br	200c714 <_strtod_r+0x1dc>
 200d9ec:	18fff804 	addi	r3,r3,-32
 200d9f0:	00bfffc4 	movi	r2,-1
 200d9f4:	10c4983a 	sll	r2,r2,r3
 200d9f8:	208c703a 	and	r6,r4,r2
 200d9fc:	e1800115 	stw	r6,4(fp)
 200da00:	003f7506 	br	200d7d8 <_strtod_r+0x12a0>
 200da04:	00bfffc4 	movi	r2,-1
 200da08:	10c4983a 	sll	r2,r2,r3
 200da0c:	e0c00017 	ldw	r3,0(fp)
 200da10:	188e703a 	and	r7,r3,r2
 200da14:	e1c00015 	stw	r7,0(fp)
 200da18:	003f6f06 	br	200d7d8 <_strtod_r+0x12a0>

0200da1c <strtof>:
 200da1c:	defffa04 	addi	sp,sp,-24
 200da20:	dd000415 	stw	r20,16(sp)
 200da24:	05008074 	movhi	r20,513
 200da28:	a51f0a04 	addi	r20,r20,31784
 200da2c:	2007883a 	mov	r3,r4
 200da30:	a1000017 	ldw	r4,0(r20)
 200da34:	280d883a 	mov	r6,r5
 200da38:	180b883a 	mov	r5,r3
 200da3c:	dfc00515 	stw	ra,20(sp)
 200da40:	dcc00315 	stw	r19,12(sp)
 200da44:	dc800215 	stw	r18,8(sp)
 200da48:	dc400115 	stw	r17,4(sp)
 200da4c:	dc000015 	stw	r16,0(sp)
 200da50:	200c5380 	call	200c538 <_strtod_r>
 200da54:	180b883a 	mov	r5,r3
 200da58:	1009883a 	mov	r4,r2
 200da5c:	1823883a 	mov	r17,r3
 200da60:	1021883a 	mov	r16,r2
 200da64:	201106c0 	call	201106c <__truncdfsf2>
 200da68:	1009883a 	mov	r4,r2
 200da6c:	000b883a 	mov	r5,zero
 200da70:	1025883a 	mov	r18,r2
 200da74:	1027883a 	mov	r19,r2
 200da78:	20105000 	call	2010500 <__nesf2>
 200da7c:	000d883a 	mov	r6,zero
 200da80:	000f883a 	mov	r7,zero
 200da84:	8009883a 	mov	r4,r16
 200da88:	880b883a 	mov	r5,r17
 200da8c:	10000e1e 	bne	r2,zero,200dac8 <strtof+0xac>
 200da90:	2010bf40 	call	2010bf4 <__nedf2>
 200da94:	10000c26 	beq	r2,zero,200dac8 <strtof+0xac>
 200da98:	a0c00017 	ldw	r3,0(r20)
 200da9c:	00800884 	movi	r2,34
 200daa0:	18800015 	stw	r2,0(r3)
 200daa4:	9805883a 	mov	r2,r19
 200daa8:	dfc00517 	ldw	ra,20(sp)
 200daac:	dd000417 	ldw	r20,16(sp)
 200dab0:	dcc00317 	ldw	r19,12(sp)
 200dab4:	dc800217 	ldw	r18,8(sp)
 200dab8:	dc400117 	ldw	r17,4(sp)
 200dabc:	dc000017 	ldw	r16,0(sp)
 200dac0:	dec00604 	addi	sp,sp,24
 200dac4:	f800283a 	ret
 200dac8:	9009883a 	mov	r4,r18
 200dacc:	015fe034 	movhi	r5,32640
 200dad0:	297fffc4 	addi	r5,r5,-1
 200dad4:	20105780 	call	2010578 <__gtsf2>
 200dad8:	00ffffc4 	movi	r3,-1
 200dadc:	011ffc34 	movhi	r4,32752
 200dae0:	213fffc4 	addi	r4,r4,-1
 200dae4:	200f883a 	mov	r7,r4
 200dae8:	180d883a 	mov	r6,r3
 200daec:	8009883a 	mov	r4,r16
 200daf0:	880b883a 	mov	r5,r17
 200daf4:	00800f16 	blt	zero,r2,200db34 <strtof+0x118>
 200daf8:	9009883a 	mov	r4,r18
 200dafc:	017fe034 	movhi	r5,65408
 200db00:	297fffc4 	addi	r5,r5,-1
 200db04:	20105f00 	call	20105f0 <__ltsf2>
 200db08:	023fffc4 	movi	r8,-1
 200db0c:	027ffc34 	movhi	r9,65520
 200db10:	4a7fffc4 	addi	r9,r9,-1
 200db14:	880b883a 	mov	r5,r17
 200db18:	480f883a 	mov	r7,r9
 200db1c:	8009883a 	mov	r4,r16
 200db20:	400d883a 	mov	r6,r8
 200db24:	103fdf0e 	bge	r2,zero,200daa4 <strtof+0x88>
 200db28:	2010d8c0 	call	2010d8c <__ltdf2>
 200db2c:	103fda0e 	bge	r2,zero,200da98 <strtof+0x7c>
 200db30:	003fdc06 	br	200daa4 <strtof+0x88>
 200db34:	2010c7c0 	call	2010c7c <__gtdf2>
 200db38:	00bfd70e 	bge	zero,r2,200da98 <strtof+0x7c>
 200db3c:	003fee06 	br	200daf8 <strtof+0xdc>

0200db40 <strtod>:
 200db40:	01808074 	movhi	r6,513
 200db44:	319f0a04 	addi	r6,r6,31784
 200db48:	2007883a 	mov	r3,r4
 200db4c:	31000017 	ldw	r4,0(r6)
 200db50:	280d883a 	mov	r6,r5
 200db54:	180b883a 	mov	r5,r3
 200db58:	200c5381 	jmpi	200c538 <_strtod_r>

0200db5c <_strtol_r>:
 200db5c:	defff304 	addi	sp,sp,-52
 200db60:	00808074 	movhi	r2,513
 200db64:	109f0904 	addi	r2,r2,31780
 200db68:	dcc00615 	stw	r19,24(sp)
 200db6c:	14c00017 	ldw	r19,0(r2)
 200db70:	ddc00a15 	stw	r23,40(sp)
 200db74:	dc000315 	stw	r16,12(sp)
 200db78:	dfc00c15 	stw	ra,48(sp)
 200db7c:	df000b15 	stw	fp,44(sp)
 200db80:	dd800915 	stw	r22,36(sp)
 200db84:	dd400815 	stw	r21,32(sp)
 200db88:	dd000715 	stw	r20,28(sp)
 200db8c:	dc800515 	stw	r18,20(sp)
 200db90:	dc400415 	stw	r17,16(sp)
 200db94:	282f883a 	mov	r23,r5
 200db98:	d9000015 	stw	r4,0(sp)
 200db9c:	d9800115 	stw	r6,4(sp)
 200dba0:	2821883a 	mov	r16,r5
 200dba4:	84400007 	ldb	r17,0(r16)
 200dba8:	84000044 	addi	r16,r16,1
 200dbac:	9c47883a 	add	r3,r19,r17
 200dbb0:	18800003 	ldbu	r2,0(r3)
 200dbb4:	1080020c 	andi	r2,r2,8
 200dbb8:	103ffa1e 	bne	r2,zero,200dba4 <_strtol_r+0x48>
 200dbbc:	00800b44 	movi	r2,45
 200dbc0:	88805c26 	beq	r17,r2,200dd34 <_strtol_r+0x1d8>
 200dbc4:	00800ac4 	movi	r2,43
 200dbc8:	88805726 	beq	r17,r2,200dd28 <_strtol_r+0x1cc>
 200dbcc:	0039883a 	mov	fp,zero
 200dbd0:	3807003a 	cmpeq	r3,r7,zero
 200dbd4:	1800431e 	bne	r3,zero,200dce4 <_strtol_r+0x188>
 200dbd8:	00800404 	movi	r2,16
 200dbdc:	38804126 	beq	r7,r2,200dce4 <_strtol_r+0x188>
 200dbe0:	3829883a 	mov	r20,r7
 200dbe4:	e02cc03a 	cmpne	r22,fp,zero
 200dbe8:	b0004b1e 	bne	r22,zero,200dd18 <_strtol_r+0x1bc>
 200dbec:	04a00034 	movhi	r18,32768
 200dbf0:	94bfffc4 	addi	r18,r18,-1
 200dbf4:	9009883a 	mov	r4,r18
 200dbf8:	a00b883a 	mov	r5,r20
 200dbfc:	d9c00215 	stw	r7,8(sp)
 200dc00:	2002fd40 	call	2002fd4 <__umodsi3>
 200dc04:	9009883a 	mov	r4,r18
 200dc08:	a00b883a 	mov	r5,r20
 200dc0c:	102b883a 	mov	r21,r2
 200dc10:	2002fcc0 	call	2002fcc <__udivsi3>
 200dc14:	1011883a 	mov	r8,r2
 200dc18:	9c45883a 	add	r2,r19,r17
 200dc1c:	11000003 	ldbu	r4,0(r2)
 200dc20:	000b883a 	mov	r5,zero
 200dc24:	000d883a 	mov	r6,zero
 200dc28:	20c0010c 	andi	r3,r4,4
 200dc2c:	d9c00217 	ldw	r7,8(sp)
 200dc30:	18000e26 	beq	r3,zero,200dc6c <_strtol_r+0x110>
 200dc34:	88fff404 	addi	r3,r17,-48
 200dc38:	19c0140e 	bge	r3,r7,200dc8c <_strtol_r+0x130>
 200dc3c:	30003116 	blt	r6,zero,200dd04 <_strtol_r+0x1a8>
 200dc40:	41403036 	bltu	r8,r5,200dd04 <_strtol_r+0x1a8>
 200dc44:	2a002e26 	beq	r5,r8,200dd00 <_strtol_r+0x1a4>
 200dc48:	2d05383a 	mul	r2,r5,r20
 200dc4c:	01800044 	movi	r6,1
 200dc50:	10cb883a 	add	r5,r2,r3
 200dc54:	84400007 	ldb	r17,0(r16)
 200dc58:	84000044 	addi	r16,r16,1
 200dc5c:	9c45883a 	add	r2,r19,r17
 200dc60:	11000003 	ldbu	r4,0(r2)
 200dc64:	20c0010c 	andi	r3,r4,4
 200dc68:	183ff21e 	bne	r3,zero,200dc34 <_strtol_r+0xd8>
 200dc6c:	208000cc 	andi	r2,r4,3
 200dc70:	10000626 	beq	r2,zero,200dc8c <_strtol_r+0x130>
 200dc74:	2080004c 	andi	r2,r4,1
 200dc78:	1005003a 	cmpeq	r2,r2,zero
 200dc7c:	1000231e 	bne	r2,zero,200dd0c <_strtol_r+0x1b0>
 200dc80:	00800dc4 	movi	r2,55
 200dc84:	8887c83a 	sub	r3,r17,r2
 200dc88:	19ffec16 	blt	r3,r7,200dc3c <_strtol_r+0xe0>
 200dc8c:	30002d16 	blt	r6,zero,200dd44 <_strtol_r+0x1e8>
 200dc90:	b000231e 	bne	r22,zero,200dd20 <_strtol_r+0x1c4>
 200dc94:	2807883a 	mov	r3,r5
 200dc98:	d8800117 	ldw	r2,4(sp)
 200dc9c:	10000426 	beq	r2,zero,200dcb0 <_strtol_r+0x154>
 200dca0:	30000126 	beq	r6,zero,200dca8 <_strtol_r+0x14c>
 200dca4:	85ffffc4 	addi	r23,r16,-1
 200dca8:	d9000117 	ldw	r4,4(sp)
 200dcac:	25c00015 	stw	r23,0(r4)
 200dcb0:	1805883a 	mov	r2,r3
 200dcb4:	dfc00c17 	ldw	ra,48(sp)
 200dcb8:	df000b17 	ldw	fp,44(sp)
 200dcbc:	ddc00a17 	ldw	r23,40(sp)
 200dcc0:	dd800917 	ldw	r22,36(sp)
 200dcc4:	dd400817 	ldw	r21,32(sp)
 200dcc8:	dd000717 	ldw	r20,28(sp)
 200dccc:	dcc00617 	ldw	r19,24(sp)
 200dcd0:	dc800517 	ldw	r18,20(sp)
 200dcd4:	dc400417 	ldw	r17,16(sp)
 200dcd8:	dc000317 	ldw	r16,12(sp)
 200dcdc:	dec00d04 	addi	sp,sp,52
 200dce0:	f800283a 	ret
 200dce4:	00800c04 	movi	r2,48
 200dce8:	88801d26 	beq	r17,r2,200dd60 <_strtol_r+0x204>
 200dcec:	183fbc26 	beq	r3,zero,200dbe0 <_strtol_r+0x84>
 200dcf0:	00800c04 	movi	r2,48
 200dcf4:	88802726 	beq	r17,r2,200dd94 <_strtol_r+0x238>
 200dcf8:	01c00284 	movi	r7,10
 200dcfc:	003fb806 	br	200dbe0 <_strtol_r+0x84>
 200dd00:	a8ffd10e 	bge	r21,r3,200dc48 <_strtol_r+0xec>
 200dd04:	01bfffc4 	movi	r6,-1
 200dd08:	003fd206 	br	200dc54 <_strtol_r+0xf8>
 200dd0c:	008015c4 	movi	r2,87
 200dd10:	8887c83a 	sub	r3,r17,r2
 200dd14:	003fdc06 	br	200dc88 <_strtol_r+0x12c>
 200dd18:	04a00034 	movhi	r18,32768
 200dd1c:	003fb506 	br	200dbf4 <_strtol_r+0x98>
 200dd20:	0147c83a 	sub	r3,zero,r5
 200dd24:	003fdc06 	br	200dc98 <_strtol_r+0x13c>
 200dd28:	84400007 	ldb	r17,0(r16)
 200dd2c:	84000044 	addi	r16,r16,1
 200dd30:	003fa606 	br	200dbcc <_strtol_r+0x70>
 200dd34:	84400007 	ldb	r17,0(r16)
 200dd38:	07000044 	movi	fp,1
 200dd3c:	84000044 	addi	r16,r16,1
 200dd40:	003fa306 	br	200dbd0 <_strtol_r+0x74>
 200dd44:	e005003a 	cmpeq	r2,fp,zero
 200dd48:	10000f1e 	bne	r2,zero,200dd88 <_strtol_r+0x22c>
 200dd4c:	00e00034 	movhi	r3,32768
 200dd50:	d9000017 	ldw	r4,0(sp)
 200dd54:	00800884 	movi	r2,34
 200dd58:	20800015 	stw	r2,0(r4)
 200dd5c:	003fce06 	br	200dc98 <_strtol_r+0x13c>
 200dd60:	81000007 	ldb	r4,0(r16)
 200dd64:	00801e04 	movi	r2,120
 200dd68:	20800226 	beq	r4,r2,200dd74 <_strtol_r+0x218>
 200dd6c:	00801604 	movi	r2,88
 200dd70:	20bfde1e 	bne	r4,r2,200dcec <_strtol_r+0x190>
 200dd74:	84400047 	ldb	r17,1(r16)
 200dd78:	01c00404 	movi	r7,16
 200dd7c:	84000084 	addi	r16,r16,2
 200dd80:	3829883a 	mov	r20,r7
 200dd84:	003f9706 	br	200dbe4 <_strtol_r+0x88>
 200dd88:	00e00034 	movhi	r3,32768
 200dd8c:	18ffffc4 	addi	r3,r3,-1
 200dd90:	003fef06 	br	200dd50 <_strtol_r+0x1f4>
 200dd94:	01c00204 	movi	r7,8
 200dd98:	3829883a 	mov	r20,r7
 200dd9c:	003f9106 	br	200dbe4 <_strtol_r+0x88>

0200dda0 <strtol>:
 200dda0:	00808074 	movhi	r2,513
 200dda4:	109f0a04 	addi	r2,r2,31784
 200dda8:	2013883a 	mov	r9,r4
 200ddac:	11000017 	ldw	r4,0(r2)
 200ddb0:	2805883a 	mov	r2,r5
 200ddb4:	300f883a 	mov	r7,r6
 200ddb8:	480b883a 	mov	r5,r9
 200ddbc:	100d883a 	mov	r6,r2
 200ddc0:	200db5c1 	jmpi	200db5c <_strtol_r>

0200ddc4 <_strtoll_r>:
 200ddc4:	defff004 	addi	sp,sp,-64
 200ddc8:	00808074 	movhi	r2,513
 200ddcc:	109f0904 	addi	r2,r2,31780
 200ddd0:	df000e15 	stw	fp,56(sp)
 200ddd4:	17000017 	ldw	fp,0(r2)
 200ddd8:	ddc00d15 	stw	r23,52(sp)
 200dddc:	dd000a15 	stw	r20,40(sp)
 200dde0:	dfc00f15 	stw	ra,60(sp)
 200dde4:	dd800c15 	stw	r22,48(sp)
 200dde8:	dd400b15 	stw	r21,44(sp)
 200ddec:	dcc00915 	stw	r19,36(sp)
 200ddf0:	dc800815 	stw	r18,32(sp)
 200ddf4:	dc400715 	stw	r17,28(sp)
 200ddf8:	dc000615 	stw	r16,24(sp)
 200ddfc:	d9400315 	stw	r5,12(sp)
 200de00:	d9000215 	stw	r4,8(sp)
 200de04:	d9800415 	stw	r6,16(sp)
 200de08:	382f883a 	mov	r23,r7
 200de0c:	2829883a 	mov	r20,r5
 200de10:	a4c00007 	ldb	r19,0(r20)
 200de14:	a5000044 	addi	r20,r20,1
 200de18:	e4c7883a 	add	r3,fp,r19
 200de1c:	18800003 	ldbu	r2,0(r3)
 200de20:	1080020c 	andi	r2,r2,8
 200de24:	103ffa1e 	bne	r2,zero,200de10 <_strtoll_r+0x4c>
 200de28:	00800b44 	movi	r2,45
 200de2c:	98808826 	beq	r19,r2,200e050 <_strtoll_r+0x28c>
 200de30:	00800ac4 	movi	r2,43
 200de34:	98808326 	beq	r19,r2,200e044 <_strtoll_r+0x280>
 200de38:	d8000115 	stw	zero,4(sp)
 200de3c:	b807003a 	cmpeq	r3,r23,zero
 200de40:	18005f1e 	bne	r3,zero,200dfc0 <_strtoll_r+0x1fc>
 200de44:	00800404 	movi	r2,16
 200de48:	b8805d26 	beq	r23,r2,200dfc0 <_strtoll_r+0x1fc>
 200de4c:	b82dd7fa 	srai	r22,r23,31
 200de50:	b82b883a 	mov	r21,r23
 200de54:	d8c00117 	ldw	r3,4(sp)
 200de58:	1806c03a 	cmpne	r3,r3,zero
 200de5c:	d8c00515 	stw	r3,20(sp)
 200de60:	1800631e 	bne	r3,zero,200dff0 <_strtoll_r+0x22c>
 200de64:	043fffc4 	movi	r16,-1
 200de68:	04600034 	movhi	r17,32768
 200de6c:	8c7fffc4 	addi	r17,r17,-1
 200de70:	880b883a 	mov	r5,r17
 200de74:	8009883a 	mov	r4,r16
 200de78:	a80d883a 	mov	r6,r21
 200de7c:	b00f883a 	mov	r7,r22
 200de80:	200ff500 	call	200ff50 <__umoddi3>
 200de84:	880b883a 	mov	r5,r17
 200de88:	8009883a 	mov	r4,r16
 200de8c:	b00f883a 	mov	r7,r22
 200de90:	a80d883a 	mov	r6,r21
 200de94:	d8800015 	stw	r2,0(sp)
 200de98:	200f9740 	call	200f974 <__udivdi3>
 200de9c:	1023883a 	mov	r17,r2
 200dea0:	e4c5883a 	add	r2,fp,r19
 200dea4:	11000003 	ldbu	r4,0(r2)
 200dea8:	1825883a 	mov	r18,r3
 200deac:	0015883a 	mov	r10,zero
 200deb0:	20c0010c 	andi	r3,r4,4
 200deb4:	0017883a 	mov	r11,zero
 200deb8:	000f883a 	mov	r7,zero
 200debc:	18001a26 	beq	r3,zero,200df28 <_strtoll_r+0x164>
 200dec0:	9c3ff404 	addi	r16,r19,-48
 200dec4:	85c0200e 	bge	r16,r23,200df48 <_strtoll_r+0x184>
 200dec8:	38003b16 	blt	r7,zero,200dfb8 <_strtoll_r+0x1f4>
 200decc:	92c03a36 	bltu	r18,r11,200dfb8 <_strtoll_r+0x1f4>
 200ded0:	5c803826 	beq	r11,r18,200dfb4 <_strtoll_r+0x1f0>
 200ded4:	54404c26 	beq	r10,r17,200e008 <_strtoll_r+0x244>
 200ded8:	580b883a 	mov	r5,r11
 200dedc:	5009883a 	mov	r4,r10
 200dee0:	a80d883a 	mov	r6,r21
 200dee4:	b00f883a 	mov	r7,r22
 200dee8:	2002fdc0 	call	2002fdc <__muldi3>
 200deec:	8013d7fa 	srai	r9,r16,31
 200def0:	100d883a 	mov	r6,r2
 200def4:	1405883a 	add	r2,r2,r16
 200def8:	118d803a 	cmpltu	r6,r2,r6
 200defc:	1a47883a 	add	r3,r3,r9
 200df00:	30cd883a 	add	r6,r6,r3
 200df04:	1015883a 	mov	r10,r2
 200df08:	3017883a 	mov	r11,r6
 200df0c:	01c00044 	movi	r7,1
 200df10:	a4c00007 	ldb	r19,0(r20)
 200df14:	a5000044 	addi	r20,r20,1
 200df18:	e4c5883a 	add	r2,fp,r19
 200df1c:	11000003 	ldbu	r4,0(r2)
 200df20:	20c0010c 	andi	r3,r4,4
 200df24:	183fe61e 	bne	r3,zero,200dec0 <_strtoll_r+0xfc>
 200df28:	208000cc 	andi	r2,r4,3
 200df2c:	10000626 	beq	r2,zero,200df48 <_strtoll_r+0x184>
 200df30:	2080004c 	andi	r2,r4,1
 200df34:	1005003a 	cmpeq	r2,r2,zero
 200df38:	1000301e 	bne	r2,zero,200dffc <_strtoll_r+0x238>
 200df3c:	02000dc4 	movi	r8,55
 200df40:	9a21c83a 	sub	r16,r19,r8
 200df44:	85ffe016 	blt	r16,r23,200dec8 <_strtoll_r+0x104>
 200df48:	38004616 	blt	r7,zero,200e064 <_strtoll_r+0x2a0>
 200df4c:	d8800517 	ldw	r2,20(sp)
 200df50:	1000341e 	bne	r2,zero,200e024 <_strtoll_r+0x260>
 200df54:	500b883a 	mov	r5,r10
 200df58:	580d883a 	mov	r6,r11
 200df5c:	d8c00417 	ldw	r3,16(sp)
 200df60:	18000626 	beq	r3,zero,200df7c <_strtoll_r+0x1b8>
 200df64:	38000226 	beq	r7,zero,200df70 <_strtoll_r+0x1ac>
 200df68:	a53fffc4 	addi	r20,r20,-1
 200df6c:	dd000315 	stw	r20,12(sp)
 200df70:	d8c00317 	ldw	r3,12(sp)
 200df74:	d8800417 	ldw	r2,16(sp)
 200df78:	10c00015 	stw	r3,0(r2)
 200df7c:	2805883a 	mov	r2,r5
 200df80:	3007883a 	mov	r3,r6
 200df84:	dfc00f17 	ldw	ra,60(sp)
 200df88:	df000e17 	ldw	fp,56(sp)
 200df8c:	ddc00d17 	ldw	r23,52(sp)
 200df90:	dd800c17 	ldw	r22,48(sp)
 200df94:	dd400b17 	ldw	r21,44(sp)
 200df98:	dd000a17 	ldw	r20,40(sp)
 200df9c:	dcc00917 	ldw	r19,36(sp)
 200dfa0:	dc800817 	ldw	r18,32(sp)
 200dfa4:	dc400717 	ldw	r17,28(sp)
 200dfa8:	dc000617 	ldw	r16,24(sp)
 200dfac:	dec01004 	addi	sp,sp,64
 200dfb0:	f800283a 	ret
 200dfb4:	8abfc72e 	bgeu	r17,r10,200ded4 <_strtoll_r+0x110>
 200dfb8:	01ffffc4 	movi	r7,-1
 200dfbc:	003fd406 	br	200df10 <_strtoll_r+0x14c>
 200dfc0:	00800c04 	movi	r2,48
 200dfc4:	98803226 	beq	r19,r2,200e090 <_strtoll_r+0x2cc>
 200dfc8:	183fa026 	beq	r3,zero,200de4c <_strtoll_r+0x88>
 200dfcc:	00800c04 	movi	r2,48
 200dfd0:	98803e26 	beq	r19,r2,200e0cc <_strtoll_r+0x308>
 200dfd4:	d8c00117 	ldw	r3,4(sp)
 200dfd8:	05c00284 	movi	r23,10
 200dfdc:	b82b883a 	mov	r21,r23
 200dfe0:	1806c03a 	cmpne	r3,r3,zero
 200dfe4:	002d883a 	mov	r22,zero
 200dfe8:	d8c00515 	stw	r3,20(sp)
 200dfec:	183f9d26 	beq	r3,zero,200de64 <_strtoll_r+0xa0>
 200dff0:	0021883a 	mov	r16,zero
 200dff4:	04600034 	movhi	r17,32768
 200dff8:	003f9d06 	br	200de70 <_strtoll_r+0xac>
 200dffc:	020015c4 	movi	r8,87
 200e000:	9a21c83a 	sub	r16,r19,r8
 200e004:	003fcf06 	br	200df44 <_strtoll_r+0x180>
 200e008:	5cbfb31e 	bne	r11,r18,200ded8 <_strtoll_r+0x114>
 200e00c:	d8800017 	ldw	r2,0(sp)
 200e010:	143fb10e 	bge	r2,r16,200ded8 <_strtoll_r+0x114>
 200e014:	8815883a 	mov	r10,r17
 200e018:	9017883a 	mov	r11,r18
 200e01c:	01ffffc4 	movi	r7,-1
 200e020:	003fbb06 	br	200df10 <_strtoll_r+0x14c>
 200e024:	0009883a 	mov	r4,zero
 200e028:	2285c83a 	sub	r2,r4,r10
 200e02c:	2089803a 	cmpltu	r4,r4,r2
 200e030:	02c7c83a 	sub	r3,zero,r11
 200e034:	1909c83a 	sub	r4,r3,r4
 200e038:	100b883a 	mov	r5,r2
 200e03c:	200d883a 	mov	r6,r4
 200e040:	003fc606 	br	200df5c <_strtoll_r+0x198>
 200e044:	a4c00007 	ldb	r19,0(r20)
 200e048:	a5000044 	addi	r20,r20,1
 200e04c:	003f7a06 	br	200de38 <_strtoll_r+0x74>
 200e050:	a4c00007 	ldb	r19,0(r20)
 200e054:	00800044 	movi	r2,1
 200e058:	a5000044 	addi	r20,r20,1
 200e05c:	d8800115 	stw	r2,4(sp)
 200e060:	003f7606 	br	200de3c <_strtoll_r+0x78>
 200e064:	d8c00117 	ldw	r3,4(sp)
 200e068:	1805003a 	cmpeq	r2,r3,zero
 200e06c:	1000131e 	bne	r2,zero,200e0bc <_strtoll_r+0x2f8>
 200e070:	0005883a 	mov	r2,zero
 200e074:	00e00034 	movhi	r3,32768
 200e078:	100b883a 	mov	r5,r2
 200e07c:	180d883a 	mov	r6,r3
 200e080:	d8c00217 	ldw	r3,8(sp)
 200e084:	00800884 	movi	r2,34
 200e088:	18800015 	stw	r2,0(r3)
 200e08c:	003fb306 	br	200df5c <_strtoll_r+0x198>
 200e090:	a1000007 	ldb	r4,0(r20)
 200e094:	00801e04 	movi	r2,120
 200e098:	20800226 	beq	r4,r2,200e0a4 <_strtoll_r+0x2e0>
 200e09c:	00801604 	movi	r2,88
 200e0a0:	20bfc91e 	bne	r4,r2,200dfc8 <_strtoll_r+0x204>
 200e0a4:	a4c00047 	ldb	r19,1(r20)
 200e0a8:	05c00404 	movi	r23,16
 200e0ac:	b82b883a 	mov	r21,r23
 200e0b0:	a5000084 	addi	r20,r20,2
 200e0b4:	002d883a 	mov	r22,zero
 200e0b8:	003f6606 	br	200de54 <_strtoll_r+0x90>
 200e0bc:	017fffc4 	movi	r5,-1
 200e0c0:	01a00034 	movhi	r6,32768
 200e0c4:	31bfffc4 	addi	r6,r6,-1
 200e0c8:	003fed06 	br	200e080 <_strtoll_r+0x2bc>
 200e0cc:	05c00204 	movi	r23,8
 200e0d0:	b82b883a 	mov	r21,r23
 200e0d4:	002d883a 	mov	r22,zero
 200e0d8:	003f5e06 	br	200de54 <_strtoll_r+0x90>

0200e0dc <_strtoul_r>:
 200e0dc:	defff604 	addi	sp,sp,-40
 200e0e0:	00808074 	movhi	r2,513
 200e0e4:	109f0904 	addi	r2,r2,31780
 200e0e8:	dd000415 	stw	r20,16(sp)
 200e0ec:	15000017 	ldw	r20,0(r2)
 200e0f0:	ddc00715 	stw	r23,28(sp)
 200e0f4:	dd800615 	stw	r22,24(sp)
 200e0f8:	dd400515 	stw	r21,20(sp)
 200e0fc:	dc800215 	stw	r18,8(sp)
 200e100:	dc000015 	stw	r16,0(sp)
 200e104:	dfc00915 	stw	ra,36(sp)
 200e108:	df000815 	stw	fp,32(sp)
 200e10c:	dcc00315 	stw	r19,12(sp)
 200e110:	dc400115 	stw	r17,4(sp)
 200e114:	282b883a 	mov	r21,r5
 200e118:	202f883a 	mov	r23,r4
 200e11c:	302d883a 	mov	r22,r6
 200e120:	3825883a 	mov	r18,r7
 200e124:	2821883a 	mov	r16,r5
 200e128:	84400007 	ldb	r17,0(r16)
 200e12c:	84000044 	addi	r16,r16,1
 200e130:	a447883a 	add	r3,r20,r17
 200e134:	18800003 	ldbu	r2,0(r3)
 200e138:	1080020c 	andi	r2,r2,8
 200e13c:	103ffa1e 	bne	r2,zero,200e128 <_strtoul_r+0x4c>
 200e140:	00800b44 	movi	r2,45
 200e144:	88805626 	beq	r17,r2,200e2a0 <_strtoul_r+0x1c4>
 200e148:	00800ac4 	movi	r2,43
 200e14c:	88805126 	beq	r17,r2,200e294 <_strtoul_r+0x1b8>
 200e150:	0039883a 	mov	fp,zero
 200e154:	9007003a 	cmpeq	r3,r18,zero
 200e158:	18003b1e 	bne	r3,zero,200e248 <_strtoul_r+0x16c>
 200e15c:	00800404 	movi	r2,16
 200e160:	90803926 	beq	r18,r2,200e248 <_strtoul_r+0x16c>
 200e164:	013fffc4 	movi	r4,-1
 200e168:	900b883a 	mov	r5,r18
 200e16c:	2002fcc0 	call	2002fcc <__udivsi3>
 200e170:	013fffc4 	movi	r4,-1
 200e174:	900b883a 	mov	r5,r18
 200e178:	1027883a 	mov	r19,r2
 200e17c:	2002fd40 	call	2002fd4 <__umodsi3>
 200e180:	1011883a 	mov	r8,r2
 200e184:	900f883a 	mov	r7,r18
 200e188:	a445883a 	add	r2,r20,r17
 200e18c:	11000003 	ldbu	r4,0(r2)
 200e190:	000b883a 	mov	r5,zero
 200e194:	000d883a 	mov	r6,zero
 200e198:	20c0010c 	andi	r3,r4,4
 200e19c:	18000e26 	beq	r3,zero,200e1d8 <_strtoul_r+0xfc>
 200e1a0:	88fff404 	addi	r3,r17,-48
 200e1a4:	1c80140e 	bge	r3,r18,200e1f8 <_strtoul_r+0x11c>
 200e1a8:	30003316 	blt	r6,zero,200e278 <_strtoul_r+0x19c>
 200e1ac:	99403236 	bltu	r19,r5,200e278 <_strtoul_r+0x19c>
 200e1b0:	2cc03026 	beq	r5,r19,200e274 <_strtoul_r+0x198>
 200e1b4:	29c5383a 	mul	r2,r5,r7
 200e1b8:	01800044 	movi	r6,1
 200e1bc:	10cb883a 	add	r5,r2,r3
 200e1c0:	84400007 	ldb	r17,0(r16)
 200e1c4:	84000044 	addi	r16,r16,1
 200e1c8:	a445883a 	add	r2,r20,r17
 200e1cc:	11000003 	ldbu	r4,0(r2)
 200e1d0:	20c0010c 	andi	r3,r4,4
 200e1d4:	183ff21e 	bne	r3,zero,200e1a0 <_strtoul_r+0xc4>
 200e1d8:	208000cc 	andi	r2,r4,3
 200e1dc:	10000626 	beq	r2,zero,200e1f8 <_strtoul_r+0x11c>
 200e1e0:	2080004c 	andi	r2,r4,1
 200e1e4:	1005003a 	cmpeq	r2,r2,zero
 200e1e8:	1000251e 	bne	r2,zero,200e280 <_strtoul_r+0x1a4>
 200e1ec:	00800dc4 	movi	r2,55
 200e1f0:	8887c83a 	sub	r3,r17,r2
 200e1f4:	1cbfec16 	blt	r3,r18,200e1a8 <_strtoul_r+0xcc>
 200e1f8:	3000400e 	bge	r6,zero,200e2fc <_strtoul_r+0x220>
 200e1fc:	00800884 	movi	r2,34
 200e200:	017fffc4 	movi	r5,-1
 200e204:	b8800015 	stw	r2,0(r23)
 200e208:	b0000226 	beq	r22,zero,200e214 <_strtoul_r+0x138>
 200e20c:	30001f1e 	bne	r6,zero,200e28c <_strtoul_r+0x1b0>
 200e210:	b5400015 	stw	r21,0(r22)
 200e214:	2805883a 	mov	r2,r5
 200e218:	dfc00917 	ldw	ra,36(sp)
 200e21c:	df000817 	ldw	fp,32(sp)
 200e220:	ddc00717 	ldw	r23,28(sp)
 200e224:	dd800617 	ldw	r22,24(sp)
 200e228:	dd400517 	ldw	r21,20(sp)
 200e22c:	dd000417 	ldw	r20,16(sp)
 200e230:	dcc00317 	ldw	r19,12(sp)
 200e234:	dc800217 	ldw	r18,8(sp)
 200e238:	dc400117 	ldw	r17,4(sp)
 200e23c:	dc000017 	ldw	r16,0(sp)
 200e240:	dec00a04 	addi	sp,sp,40
 200e244:	f800283a 	ret
 200e248:	00800c04 	movi	r2,48
 200e24c:	88801826 	beq	r17,r2,200e2b0 <_strtoul_r+0x1d4>
 200e250:	183fc426 	beq	r3,zero,200e164 <_strtoul_r+0x88>
 200e254:	00800c04 	movi	r2,48
 200e258:	88802226 	beq	r17,r2,200e2e4 <_strtoul_r+0x208>
 200e25c:	04800284 	movi	r18,10
 200e260:	900f883a 	mov	r7,r18
 200e264:	04c666b4 	movhi	r19,6554
 200e268:	9ce66644 	addi	r19,r19,-26215
 200e26c:	02000144 	movi	r8,5
 200e270:	003fc506 	br	200e188 <_strtoul_r+0xac>
 200e274:	40ffcf0e 	bge	r8,r3,200e1b4 <_strtoul_r+0xd8>
 200e278:	01bfffc4 	movi	r6,-1
 200e27c:	003fd006 	br	200e1c0 <_strtoul_r+0xe4>
 200e280:	008015c4 	movi	r2,87
 200e284:	8887c83a 	sub	r3,r17,r2
 200e288:	003fda06 	br	200e1f4 <_strtoul_r+0x118>
 200e28c:	857fffc4 	addi	r21,r16,-1
 200e290:	003fdf06 	br	200e210 <_strtoul_r+0x134>
 200e294:	84400007 	ldb	r17,0(r16)
 200e298:	84000044 	addi	r16,r16,1
 200e29c:	003fac06 	br	200e150 <_strtoul_r+0x74>
 200e2a0:	84400007 	ldb	r17,0(r16)
 200e2a4:	07000044 	movi	fp,1
 200e2a8:	84000044 	addi	r16,r16,1
 200e2ac:	003fa906 	br	200e154 <_strtoul_r+0x78>
 200e2b0:	81000007 	ldb	r4,0(r16)
 200e2b4:	00801e04 	movi	r2,120
 200e2b8:	20800226 	beq	r4,r2,200e2c4 <_strtoul_r+0x1e8>
 200e2bc:	00801604 	movi	r2,88
 200e2c0:	20bfe31e 	bne	r4,r2,200e250 <_strtoul_r+0x174>
 200e2c4:	84400047 	ldb	r17,1(r16)
 200e2c8:	04800404 	movi	r18,16
 200e2cc:	84000084 	addi	r16,r16,2
 200e2d0:	900f883a 	mov	r7,r18
 200e2d4:	04c40034 	movhi	r19,4096
 200e2d8:	9cffffc4 	addi	r19,r19,-1
 200e2dc:	020003c4 	movi	r8,15
 200e2e0:	003fa906 	br	200e188 <_strtoul_r+0xac>
 200e2e4:	04800204 	movi	r18,8
 200e2e8:	900f883a 	mov	r7,r18
 200e2ec:	04c80034 	movhi	r19,8192
 200e2f0:	9cffffc4 	addi	r19,r19,-1
 200e2f4:	020001c4 	movi	r8,7
 200e2f8:	003fa306 	br	200e188 <_strtoul_r+0xac>
 200e2fc:	e005003a 	cmpeq	r2,fp,zero
 200e300:	103fc11e 	bne	r2,zero,200e208 <_strtoul_r+0x12c>
 200e304:	014bc83a 	sub	r5,zero,r5
 200e308:	003fbf06 	br	200e208 <_strtoul_r+0x12c>

0200e30c <strtoul>:
 200e30c:	00808074 	movhi	r2,513
 200e310:	109f0a04 	addi	r2,r2,31784
 200e314:	2013883a 	mov	r9,r4
 200e318:	11000017 	ldw	r4,0(r2)
 200e31c:	2805883a 	mov	r2,r5
 200e320:	300f883a 	mov	r7,r6
 200e324:	480b883a 	mov	r5,r9
 200e328:	100d883a 	mov	r6,r2
 200e32c:	200e0dc1 	jmpi	200e0dc <_strtoul_r>

0200e330 <_strtoull_r>:
 200e330:	defff104 	addi	sp,sp,-60
 200e334:	00808074 	movhi	r2,513
 200e338:	109f0904 	addi	r2,r2,31780
 200e33c:	df000d15 	stw	fp,52(sp)
 200e340:	17000017 	ldw	fp,0(r2)
 200e344:	ddc00c15 	stw	r23,48(sp)
 200e348:	dcc00815 	stw	r19,32(sp)
 200e34c:	dfc00e15 	stw	ra,56(sp)
 200e350:	dd800b15 	stw	r22,44(sp)
 200e354:	dd400a15 	stw	r21,40(sp)
 200e358:	dd000915 	stw	r20,36(sp)
 200e35c:	dc800715 	stw	r18,28(sp)
 200e360:	dc400615 	stw	r17,24(sp)
 200e364:	dc000515 	stw	r16,20(sp)
 200e368:	d9400215 	stw	r5,8(sp)
 200e36c:	d9000115 	stw	r4,4(sp)
 200e370:	d9800315 	stw	r6,12(sp)
 200e374:	382f883a 	mov	r23,r7
 200e378:	2827883a 	mov	r19,r5
 200e37c:	9d000007 	ldb	r20,0(r19)
 200e380:	9cc00044 	addi	r19,r19,1
 200e384:	e507883a 	add	r3,fp,r20
 200e388:	18800003 	ldbu	r2,0(r3)
 200e38c:	1080020c 	andi	r2,r2,8
 200e390:	103ffa1e 	bne	r2,zero,200e37c <_strtoull_r+0x4c>
 200e394:	00800b44 	movi	r2,45
 200e398:	a0807a26 	beq	r20,r2,200e584 <_strtoull_r+0x254>
 200e39c:	00800ac4 	movi	r2,43
 200e3a0:	a0807526 	beq	r20,r2,200e578 <_strtoull_r+0x248>
 200e3a4:	d8000015 	stw	zero,0(sp)
 200e3a8:	b807003a 	cmpeq	r3,r23,zero
 200e3ac:	18005a1e 	bne	r3,zero,200e518 <_strtoull_r+0x1e8>
 200e3b0:	00800404 	movi	r2,16
 200e3b4:	b8805826 	beq	r23,r2,200e518 <_strtoull_r+0x1e8>
 200e3b8:	b82dd7fa 	srai	r22,r23,31
 200e3bc:	043fffc4 	movi	r16,-1
 200e3c0:	8009883a 	mov	r4,r16
 200e3c4:	800b883a 	mov	r5,r16
 200e3c8:	b80d883a 	mov	r6,r23
 200e3cc:	b00f883a 	mov	r7,r22
 200e3d0:	200f9740 	call	200f974 <__udivdi3>
 200e3d4:	8009883a 	mov	r4,r16
 200e3d8:	800b883a 	mov	r5,r16
 200e3dc:	b80d883a 	mov	r6,r23
 200e3e0:	b00f883a 	mov	r7,r22
 200e3e4:	1023883a 	mov	r17,r2
 200e3e8:	1825883a 	mov	r18,r3
 200e3ec:	200ff500 	call	200ff50 <__umoddi3>
 200e3f0:	b82b883a 	mov	r21,r23
 200e3f4:	1019883a 	mov	r12,r2
 200e3f8:	e505883a 	add	r2,fp,r20
 200e3fc:	11000003 	ldbu	r4,0(r2)
 200e400:	0015883a 	mov	r10,zero
 200e404:	0017883a 	mov	r11,zero
 200e408:	20c0010c 	andi	r3,r4,4
 200e40c:	000d883a 	mov	r6,zero
 200e410:	18001c26 	beq	r3,zero,200e484 <_strtoull_r+0x154>
 200e414:	a43ff404 	addi	r16,r20,-48
 200e418:	85c0220e 	bge	r16,r23,200e4a4 <_strtoull_r+0x174>
 200e41c:	30003c16 	blt	r6,zero,200e510 <_strtoull_r+0x1e0>
 200e420:	92c03b36 	bltu	r18,r11,200e510 <_strtoull_r+0x1e0>
 200e424:	5c803926 	beq	r11,r18,200e50c <_strtoull_r+0x1dc>
 200e428:	54404c26 	beq	r10,r17,200e55c <_strtoull_r+0x22c>
 200e42c:	580b883a 	mov	r5,r11
 200e430:	5009883a 	mov	r4,r10
 200e434:	a80d883a 	mov	r6,r21
 200e438:	b00f883a 	mov	r7,r22
 200e43c:	db000415 	stw	r12,16(sp)
 200e440:	2002fdc0 	call	2002fdc <__muldi3>
 200e444:	8013d7fa 	srai	r9,r16,31
 200e448:	100d883a 	mov	r6,r2
 200e44c:	1405883a 	add	r2,r2,r16
 200e450:	118d803a 	cmpltu	r6,r2,r6
 200e454:	1a47883a 	add	r3,r3,r9
 200e458:	db000417 	ldw	r12,16(sp)
 200e45c:	30cd883a 	add	r6,r6,r3
 200e460:	3017883a 	mov	r11,r6
 200e464:	1015883a 	mov	r10,r2
 200e468:	01800044 	movi	r6,1
 200e46c:	9d000007 	ldb	r20,0(r19)
 200e470:	9cc00044 	addi	r19,r19,1
 200e474:	e505883a 	add	r2,fp,r20
 200e478:	11000003 	ldbu	r4,0(r2)
 200e47c:	20c0010c 	andi	r3,r4,4
 200e480:	183fe41e 	bne	r3,zero,200e414 <_strtoull_r+0xe4>
 200e484:	208000cc 	andi	r2,r4,3
 200e488:	10000626 	beq	r2,zero,200e4a4 <_strtoull_r+0x174>
 200e48c:	2080004c 	andi	r2,r4,1
 200e490:	1005003a 	cmpeq	r2,r2,zero
 200e494:	10002e1e 	bne	r2,zero,200e550 <_strtoull_r+0x220>
 200e498:	02000dc4 	movi	r8,55
 200e49c:	a221c83a 	sub	r16,r20,r8
 200e4a0:	85ffde16 	blt	r16,r23,200e41c <_strtoull_r+0xec>
 200e4a4:	3000530e 	bge	r6,zero,200e5f4 <_strtoull_r+0x2c4>
 200e4a8:	d8c00117 	ldw	r3,4(sp)
 200e4ac:	02bfffc4 	movi	r10,-1
 200e4b0:	00800884 	movi	r2,34
 200e4b4:	5017883a 	mov	r11,r10
 200e4b8:	18800015 	stw	r2,0(r3)
 200e4bc:	d8800317 	ldw	r2,12(sp)
 200e4c0:	10000426 	beq	r2,zero,200e4d4 <_strtoull_r+0x1a4>
 200e4c4:	3000291e 	bne	r6,zero,200e56c <_strtoull_r+0x23c>
 200e4c8:	d8800217 	ldw	r2,8(sp)
 200e4cc:	d8c00317 	ldw	r3,12(sp)
 200e4d0:	18800015 	stw	r2,0(r3)
 200e4d4:	5005883a 	mov	r2,r10
 200e4d8:	5807883a 	mov	r3,r11
 200e4dc:	dfc00e17 	ldw	ra,56(sp)
 200e4e0:	df000d17 	ldw	fp,52(sp)
 200e4e4:	ddc00c17 	ldw	r23,48(sp)
 200e4e8:	dd800b17 	ldw	r22,44(sp)
 200e4ec:	dd400a17 	ldw	r21,40(sp)
 200e4f0:	dd000917 	ldw	r20,36(sp)
 200e4f4:	dcc00817 	ldw	r19,32(sp)
 200e4f8:	dc800717 	ldw	r18,28(sp)
 200e4fc:	dc400617 	ldw	r17,24(sp)
 200e500:	dc000517 	ldw	r16,20(sp)
 200e504:	dec00f04 	addi	sp,sp,60
 200e508:	f800283a 	ret
 200e50c:	8abfc62e 	bgeu	r17,r10,200e428 <_strtoull_r+0xf8>
 200e510:	01bfffc4 	movi	r6,-1
 200e514:	003fd506 	br	200e46c <_strtoull_r+0x13c>
 200e518:	00800c04 	movi	r2,48
 200e51c:	a0801e26 	beq	r20,r2,200e598 <_strtoull_r+0x268>
 200e520:	183fa526 	beq	r3,zero,200e3b8 <_strtoull_r+0x88>
 200e524:	00800c04 	movi	r2,48
 200e528:	a0802a26 	beq	r20,r2,200e5d4 <_strtoull_r+0x2a4>
 200e52c:	05c00284 	movi	r23,10
 200e530:	b82b883a 	mov	r21,r23
 200e534:	046666b4 	movhi	r17,39322
 200e538:	8c666644 	addi	r17,r17,-26215
 200e53c:	002d883a 	mov	r22,zero
 200e540:	048666b4 	movhi	r18,6554
 200e544:	94a66644 	addi	r18,r18,-26215
 200e548:	03000144 	movi	r12,5
 200e54c:	003faa06 	br	200e3f8 <_strtoull_r+0xc8>
 200e550:	020015c4 	movi	r8,87
 200e554:	a221c83a 	sub	r16,r20,r8
 200e558:	003fd106 	br	200e4a0 <_strtoull_r+0x170>
 200e55c:	5cbfb31e 	bne	r11,r18,200e42c <_strtoull_r+0xfc>
 200e560:	643fb20e 	bge	r12,r16,200e42c <_strtoull_r+0xfc>
 200e564:	01bfffc4 	movi	r6,-1
 200e568:	003fc006 	br	200e46c <_strtoull_r+0x13c>
 200e56c:	9cffffc4 	addi	r19,r19,-1
 200e570:	dcc00215 	stw	r19,8(sp)
 200e574:	003fd406 	br	200e4c8 <_strtoull_r+0x198>
 200e578:	9d000007 	ldb	r20,0(r19)
 200e57c:	9cc00044 	addi	r19,r19,1
 200e580:	003f8806 	br	200e3a4 <_strtoull_r+0x74>
 200e584:	9d000007 	ldb	r20,0(r19)
 200e588:	00800044 	movi	r2,1
 200e58c:	9cc00044 	addi	r19,r19,1
 200e590:	d8800015 	stw	r2,0(sp)
 200e594:	003f8406 	br	200e3a8 <_strtoull_r+0x78>
 200e598:	99000007 	ldb	r4,0(r19)
 200e59c:	00801e04 	movi	r2,120
 200e5a0:	20800226 	beq	r4,r2,200e5ac <_strtoull_r+0x27c>
 200e5a4:	00801604 	movi	r2,88
 200e5a8:	20bfdd1e 	bne	r4,r2,200e520 <_strtoull_r+0x1f0>
 200e5ac:	9d000047 	ldb	r20,1(r19)
 200e5b0:	05c00404 	movi	r23,16
 200e5b4:	b82b883a 	mov	r21,r23
 200e5b8:	047fffc4 	movi	r17,-1
 200e5bc:	9cc00084 	addi	r19,r19,2
 200e5c0:	002d883a 	mov	r22,zero
 200e5c4:	04840034 	movhi	r18,4096
 200e5c8:	94bfffc4 	addi	r18,r18,-1
 200e5cc:	030003c4 	movi	r12,15
 200e5d0:	003f8906 	br	200e3f8 <_strtoull_r+0xc8>
 200e5d4:	05c00204 	movi	r23,8
 200e5d8:	b82b883a 	mov	r21,r23
 200e5dc:	047fffc4 	movi	r17,-1
 200e5e0:	002d883a 	mov	r22,zero
 200e5e4:	04880034 	movhi	r18,8192
 200e5e8:	94bfffc4 	addi	r18,r18,-1
 200e5ec:	030001c4 	movi	r12,7
 200e5f0:	003f8106 	br	200e3f8 <_strtoull_r+0xc8>
 200e5f4:	d8c00017 	ldw	r3,0(sp)
 200e5f8:	1805003a 	cmpeq	r2,r3,zero
 200e5fc:	103faf1e 	bne	r2,zero,200e4bc <_strtoull_r+0x18c>
 200e600:	0009883a 	mov	r4,zero
 200e604:	2285c83a 	sub	r2,r4,r10
 200e608:	02c7c83a 	sub	r3,zero,r11
 200e60c:	2089803a 	cmpltu	r4,r4,r2
 200e610:	1909c83a 	sub	r4,r3,r4
 200e614:	1015883a 	mov	r10,r2
 200e618:	2017883a 	mov	r11,r4
 200e61c:	003fa706 	br	200e4bc <_strtoull_r+0x18c>

0200e620 <__submore>:
 200e620:	defffa04 	addi	sp,sp,-24
 200e624:	28c00c17 	ldw	r3,48(r5)
 200e628:	dc800215 	stw	r18,8(sp)
 200e62c:	2825883a 	mov	r18,r5
 200e630:	dc000015 	stw	r16,0(sp)
 200e634:	90801004 	addi	r2,r18,64
 200e638:	04010004 	movi	r16,1024
 200e63c:	dfc00515 	stw	ra,20(sp)
 200e640:	dd000415 	stw	r20,16(sp)
 200e644:	dcc00315 	stw	r19,12(sp)
 200e648:	dc400115 	stw	r17,4(sp)
 200e64c:	800b883a 	mov	r5,r16
 200e650:	18801b26 	beq	r3,r2,200e6c0 <__submore+0xa0>
 200e654:	94400d17 	ldw	r17,52(r18)
 200e658:	180b883a 	mov	r5,r3
 200e65c:	8c69883a 	add	r20,r17,r17
 200e660:	a00d883a 	mov	r6,r20
 200e664:	200b9080 	call	200b908 <_realloc_r>
 200e668:	1467883a 	add	r19,r2,r17
 200e66c:	1021883a 	mov	r16,r2
 200e670:	880d883a 	mov	r6,r17
 200e674:	9809883a 	mov	r4,r19
 200e678:	100b883a 	mov	r5,r2
 200e67c:	10000e26 	beq	r2,zero,200e6b8 <__submore+0x98>
 200e680:	200a6fc0 	call	200a6fc <memcpy>
 200e684:	000d883a 	mov	r6,zero
 200e688:	95000d15 	stw	r20,52(r18)
 200e68c:	94c00015 	stw	r19,0(r18)
 200e690:	94000c15 	stw	r16,48(r18)
 200e694:	3005883a 	mov	r2,r6
 200e698:	dfc00517 	ldw	ra,20(sp)
 200e69c:	dd000417 	ldw	r20,16(sp)
 200e6a0:	dcc00317 	ldw	r19,12(sp)
 200e6a4:	dc800217 	ldw	r18,8(sp)
 200e6a8:	dc400117 	ldw	r17,4(sp)
 200e6ac:	dc000017 	ldw	r16,0(sp)
 200e6b0:	dec00604 	addi	sp,sp,24
 200e6b4:	f800283a 	ret
 200e6b8:	01bfffc4 	movi	r6,-1
 200e6bc:	003ff506 	br	200e694 <__submore+0x74>
 200e6c0:	20037900 	call	2003790 <_malloc_r>
 200e6c4:	1009883a 	mov	r4,r2
 200e6c8:	1140ff44 	addi	r5,r2,1021
 200e6cc:	000d883a 	mov	r6,zero
 200e6d0:	103ff926 	beq	r2,zero,200e6b8 <__submore+0x98>
 200e6d4:	90801083 	ldbu	r2,66(r18)
 200e6d8:	94000d15 	stw	r16,52(r18)
 200e6dc:	91000c15 	stw	r4,48(r18)
 200e6e0:	28800085 	stb	r2,2(r5)
 200e6e4:	90c01043 	ldbu	r3,65(r18)
 200e6e8:	28c00045 	stb	r3,1(r5)
 200e6ec:	90801003 	ldbu	r2,64(r18)
 200e6f0:	2080ff45 	stb	r2,1021(r4)
 200e6f4:	91400015 	stw	r5,0(r18)
 200e6f8:	003fe606 	br	200e694 <__submore+0x74>

0200e6fc <_ungetc_r>:
 200e6fc:	defffc04 	addi	sp,sp,-16
 200e700:	00bfffc4 	movi	r2,-1
 200e704:	dc400215 	stw	r17,8(sp)
 200e708:	dc000115 	stw	r16,4(sp)
 200e70c:	dfc00315 	stw	ra,12(sp)
 200e710:	2821883a 	mov	r16,r5
 200e714:	2023883a 	mov	r17,r4
 200e718:	28801826 	beq	r5,r2,200e77c <_ungetc_r+0x80>
 200e71c:	20000226 	beq	r4,zero,200e728 <_ungetc_r+0x2c>
 200e720:	20800e17 	ldw	r2,56(r4)
 200e724:	10001b26 	beq	r2,zero,200e794 <_ungetc_r+0x98>
 200e728:	3100030b 	ldhu	r4,12(r6)
 200e72c:	00bff7c4 	movi	r2,-33
 200e730:	2084703a 	and	r2,r4,r2
 200e734:	117fffcc 	andi	r5,r2,65535
 200e738:	28c0010c 	andi	r3,r5,4
 200e73c:	1009883a 	mov	r4,r2
 200e740:	3080030d 	sth	r2,12(r6)
 200e744:	18003526 	beq	r3,zero,200e81c <_ungetc_r+0x120>
 200e748:	30800c17 	ldw	r2,48(r6)
 200e74c:	84003fcc 	andi	r16,r16,255
 200e750:	10001426 	beq	r2,zero,200e7a4 <_ungetc_r+0xa8>
 200e754:	30c00117 	ldw	r3,4(r6)
 200e758:	30800d17 	ldw	r2,52(r6)
 200e75c:	1880380e 	bge	r3,r2,200e840 <_ungetc_r+0x144>
 200e760:	30c00017 	ldw	r3,0(r6)
 200e764:	19ffffc4 	addi	r7,r3,-1
 200e768:	31c00015 	stw	r7,0(r6)
 200e76c:	1c3fffc5 	stb	r16,-1(r3)
 200e770:	30800117 	ldw	r2,4(r6)
 200e774:	10800044 	addi	r2,r2,1
 200e778:	30800115 	stw	r2,4(r6)
 200e77c:	8005883a 	mov	r2,r16
 200e780:	dfc00317 	ldw	ra,12(sp)
 200e784:	dc400217 	ldw	r17,8(sp)
 200e788:	dc000117 	ldw	r16,4(sp)
 200e78c:	dec00404 	addi	sp,sp,16
 200e790:	f800283a 	ret
 200e794:	d9800015 	stw	r6,0(sp)
 200e798:	20093a40 	call	20093a4 <__sinit>
 200e79c:	d9800017 	ldw	r6,0(sp)
 200e7a0:	003fe106 	br	200e728 <_ungetc_r+0x2c>
 200e7a4:	30800417 	ldw	r2,16(r6)
 200e7a8:	10002326 	beq	r2,zero,200e838 <_ungetc_r+0x13c>
 200e7ac:	31c00017 	ldw	r7,0(r6)
 200e7b0:	11c0022e 	bgeu	r2,r7,200e7bc <_ungetc_r+0xc0>
 200e7b4:	38bfffc3 	ldbu	r2,-1(r7)
 200e7b8:	80801226 	beq	r16,r2,200e804 <_ungetc_r+0x108>
 200e7bc:	30c00117 	ldw	r3,4(r6)
 200e7c0:	00800044 	movi	r2,1
 200e7c4:	30800115 	stw	r2,4(r6)
 200e7c8:	008000c4 	movi	r2,3
 200e7cc:	31001004 	addi	r4,r6,64
 200e7d0:	31401084 	addi	r5,r6,66
 200e7d4:	30800d15 	stw	r2,52(r6)
 200e7d8:	8005883a 	mov	r2,r16
 200e7dc:	30c00f15 	stw	r3,60(r6)
 200e7e0:	31c00e15 	stw	r7,56(r6)
 200e7e4:	31000c15 	stw	r4,48(r6)
 200e7e8:	31400015 	stw	r5,0(r6)
 200e7ec:	34001085 	stb	r16,66(r6)
 200e7f0:	dfc00317 	ldw	ra,12(sp)
 200e7f4:	dc400217 	ldw	r17,8(sp)
 200e7f8:	dc000117 	ldw	r16,4(sp)
 200e7fc:	dec00404 	addi	sp,sp,16
 200e800:	f800283a 	ret
 200e804:	30800117 	ldw	r2,4(r6)
 200e808:	39ffffc4 	addi	r7,r7,-1
 200e80c:	31c00015 	stw	r7,0(r6)
 200e810:	10800044 	addi	r2,r2,1
 200e814:	30800115 	stw	r2,4(r6)
 200e818:	003fd806 	br	200e77c <_ungetc_r+0x80>
 200e81c:	2880040c 	andi	r2,r5,16
 200e820:	10000d26 	beq	r2,zero,200e858 <_ungetc_r+0x15c>
 200e824:	2880020c 	andi	r2,r5,8
 200e828:	10000d1e 	bne	r2,zero,200e860 <_ungetc_r+0x164>
 200e82c:	20800114 	ori	r2,r4,4
 200e830:	3080030d 	sth	r2,12(r6)
 200e834:	003fc406 	br	200e748 <_ungetc_r+0x4c>
 200e838:	31c00017 	ldw	r7,0(r6)
 200e83c:	003fdf06 	br	200e7bc <_ungetc_r+0xc0>
 200e840:	300b883a 	mov	r5,r6
 200e844:	8809883a 	mov	r4,r17
 200e848:	d9800015 	stw	r6,0(sp)
 200e84c:	200e6200 	call	200e620 <__submore>
 200e850:	d9800017 	ldw	r6,0(sp)
 200e854:	103fc226 	beq	r2,zero,200e760 <_ungetc_r+0x64>
 200e858:	043fffc4 	movi	r16,-1
 200e85c:	003fc706 	br	200e77c <_ungetc_r+0x80>
 200e860:	300b883a 	mov	r5,r6
 200e864:	8809883a 	mov	r4,r17
 200e868:	d9800015 	stw	r6,0(sp)
 200e86c:	200910c0 	call	200910c <_fflush_r>
 200e870:	d9800017 	ldw	r6,0(sp)
 200e874:	103ff81e 	bne	r2,zero,200e858 <_ungetc_r+0x15c>
 200e878:	3100030b 	ldhu	r4,12(r6)
 200e87c:	00bffdc4 	movi	r2,-9
 200e880:	30000215 	stw	zero,8(r6)
 200e884:	2084703a 	and	r2,r4,r2
 200e888:	1009883a 	mov	r4,r2
 200e88c:	3080030d 	sth	r2,12(r6)
 200e890:	30000615 	stw	zero,24(r6)
 200e894:	003fe506 	br	200e82c <_ungetc_r+0x130>

0200e898 <ungetc>:
 200e898:	01808074 	movhi	r6,513
 200e89c:	319f0a04 	addi	r6,r6,31784
 200e8a0:	2007883a 	mov	r3,r4
 200e8a4:	31000017 	ldw	r4,0(r6)
 200e8a8:	280d883a 	mov	r6,r5
 200e8ac:	180b883a 	mov	r5,r3
 200e8b0:	200e6fc1 	jmpi	200e6fc <_ungetc_r>

0200e8b4 <_write_r>:
 200e8b4:	defffd04 	addi	sp,sp,-12
 200e8b8:	dc000015 	stw	r16,0(sp)
 200e8bc:	040080b4 	movhi	r16,514
 200e8c0:	84263c04 	addi	r16,r16,-26384
 200e8c4:	dc400115 	stw	r17,4(sp)
 200e8c8:	80000015 	stw	zero,0(r16)
 200e8cc:	2023883a 	mov	r17,r4
 200e8d0:	2809883a 	mov	r4,r5
 200e8d4:	300b883a 	mov	r5,r6
 200e8d8:	380d883a 	mov	r6,r7
 200e8dc:	dfc00215 	stw	ra,8(sp)
 200e8e0:	20122900 	call	2012290 <write>
 200e8e4:	1007883a 	mov	r3,r2
 200e8e8:	00bfffc4 	movi	r2,-1
 200e8ec:	18800626 	beq	r3,r2,200e908 <_write_r+0x54>
 200e8f0:	1805883a 	mov	r2,r3
 200e8f4:	dfc00217 	ldw	ra,8(sp)
 200e8f8:	dc400117 	ldw	r17,4(sp)
 200e8fc:	dc000017 	ldw	r16,0(sp)
 200e900:	dec00304 	addi	sp,sp,12
 200e904:	f800283a 	ret
 200e908:	80800017 	ldw	r2,0(r16)
 200e90c:	103ff826 	beq	r2,zero,200e8f0 <_write_r+0x3c>
 200e910:	88800015 	stw	r2,0(r17)
 200e914:	1805883a 	mov	r2,r3
 200e918:	dfc00217 	ldw	ra,8(sp)
 200e91c:	dc400117 	ldw	r17,4(sp)
 200e920:	dc000017 	ldw	r16,0(sp)
 200e924:	dec00304 	addi	sp,sp,12
 200e928:	f800283a 	ret

0200e92c <_calloc_r>:
 200e92c:	298b383a 	mul	r5,r5,r6
 200e930:	defffe04 	addi	sp,sp,-8
 200e934:	dc000015 	stw	r16,0(sp)
 200e938:	dfc00115 	stw	ra,4(sp)
 200e93c:	20037900 	call	2003790 <_malloc_r>
 200e940:	1021883a 	mov	r16,r2
 200e944:	01c00904 	movi	r7,36
 200e948:	10000d26 	beq	r2,zero,200e980 <_calloc_r+0x54>
 200e94c:	10ffff17 	ldw	r3,-4(r2)
 200e950:	1009883a 	mov	r4,r2
 200e954:	00bfff04 	movi	r2,-4
 200e958:	1886703a 	and	r3,r3,r2
 200e95c:	1887883a 	add	r3,r3,r2
 200e960:	180d883a 	mov	r6,r3
 200e964:	000b883a 	mov	r5,zero
 200e968:	38c01736 	bltu	r7,r3,200e9c8 <_calloc_r+0x9c>
 200e96c:	008004c4 	movi	r2,19
 200e970:	10c00836 	bltu	r2,r3,200e994 <_calloc_r+0x68>
 200e974:	20000215 	stw	zero,8(r4)
 200e978:	20000015 	stw	zero,0(r4)
 200e97c:	20000115 	stw	zero,4(r4)
 200e980:	8005883a 	mov	r2,r16
 200e984:	dfc00117 	ldw	ra,4(sp)
 200e988:	dc000017 	ldw	r16,0(sp)
 200e98c:	dec00204 	addi	sp,sp,8
 200e990:	f800283a 	ret
 200e994:	008006c4 	movi	r2,27
 200e998:	80000015 	stw	zero,0(r16)
 200e99c:	80000115 	stw	zero,4(r16)
 200e9a0:	81000204 	addi	r4,r16,8
 200e9a4:	10fff32e 	bgeu	r2,r3,200e974 <_calloc_r+0x48>
 200e9a8:	80000215 	stw	zero,8(r16)
 200e9ac:	80000315 	stw	zero,12(r16)
 200e9b0:	81000404 	addi	r4,r16,16
 200e9b4:	19ffef1e 	bne	r3,r7,200e974 <_calloc_r+0x48>
 200e9b8:	81000604 	addi	r4,r16,24
 200e9bc:	80000415 	stw	zero,16(r16)
 200e9c0:	80000515 	stw	zero,20(r16)
 200e9c4:	003feb06 	br	200e974 <_calloc_r+0x48>
 200e9c8:	200a87c0 	call	200a87c <memset>
 200e9cc:	8005883a 	mov	r2,r16
 200e9d0:	dfc00117 	ldw	ra,4(sp)
 200e9d4:	dc000017 	ldw	r16,0(sp)
 200e9d8:	dec00204 	addi	sp,sp,8
 200e9dc:	f800283a 	ret

0200e9e0 <_close_r>:
 200e9e0:	defffd04 	addi	sp,sp,-12
 200e9e4:	dc000015 	stw	r16,0(sp)
 200e9e8:	040080b4 	movhi	r16,514
 200e9ec:	84263c04 	addi	r16,r16,-26384
 200e9f0:	dc400115 	stw	r17,4(sp)
 200e9f4:	80000015 	stw	zero,0(r16)
 200e9f8:	2023883a 	mov	r17,r4
 200e9fc:	2809883a 	mov	r4,r5
 200ea00:	dfc00215 	stw	ra,8(sp)
 200ea04:	20114100 	call	2011410 <close>
 200ea08:	1007883a 	mov	r3,r2
 200ea0c:	00bfffc4 	movi	r2,-1
 200ea10:	18800626 	beq	r3,r2,200ea2c <_close_r+0x4c>
 200ea14:	1805883a 	mov	r2,r3
 200ea18:	dfc00217 	ldw	ra,8(sp)
 200ea1c:	dc400117 	ldw	r17,4(sp)
 200ea20:	dc000017 	ldw	r16,0(sp)
 200ea24:	dec00304 	addi	sp,sp,12
 200ea28:	f800283a 	ret
 200ea2c:	80800017 	ldw	r2,0(r16)
 200ea30:	103ff826 	beq	r2,zero,200ea14 <_close_r+0x34>
 200ea34:	88800015 	stw	r2,0(r17)
 200ea38:	1805883a 	mov	r2,r3
 200ea3c:	dfc00217 	ldw	ra,8(sp)
 200ea40:	dc400117 	ldw	r17,4(sp)
 200ea44:	dc000017 	ldw	r16,0(sp)
 200ea48:	dec00304 	addi	sp,sp,12
 200ea4c:	f800283a 	ret

0200ea50 <_fclose_r>:
 200ea50:	defffc04 	addi	sp,sp,-16
 200ea54:	dc400115 	stw	r17,4(sp)
 200ea58:	dc000015 	stw	r16,0(sp)
 200ea5c:	dfc00315 	stw	ra,12(sp)
 200ea60:	dc800215 	stw	r18,8(sp)
 200ea64:	2821883a 	mov	r16,r5
 200ea68:	2023883a 	mov	r17,r4
 200ea6c:	28002926 	beq	r5,zero,200eb14 <_fclose_r+0xc4>
 200ea70:	20093940 	call	2009394 <__sfp_lock_acquire>
 200ea74:	88000226 	beq	r17,zero,200ea80 <_fclose_r+0x30>
 200ea78:	88800e17 	ldw	r2,56(r17)
 200ea7c:	10002d26 	beq	r2,zero,200eb34 <_fclose_r+0xe4>
 200ea80:	8080030f 	ldh	r2,12(r16)
 200ea84:	10002226 	beq	r2,zero,200eb10 <_fclose_r+0xc0>
 200ea88:	8809883a 	mov	r4,r17
 200ea8c:	800b883a 	mov	r5,r16
 200ea90:	200910c0 	call	200910c <_fflush_r>
 200ea94:	1025883a 	mov	r18,r2
 200ea98:	80800b17 	ldw	r2,44(r16)
 200ea9c:	10000426 	beq	r2,zero,200eab0 <_fclose_r+0x60>
 200eaa0:	81400717 	ldw	r5,28(r16)
 200eaa4:	8809883a 	mov	r4,r17
 200eaa8:	103ee83a 	callr	r2
 200eaac:	10002a16 	blt	r2,zero,200eb58 <_fclose_r+0x108>
 200eab0:	8080030b 	ldhu	r2,12(r16)
 200eab4:	1080200c 	andi	r2,r2,128
 200eab8:	1000231e 	bne	r2,zero,200eb48 <_fclose_r+0xf8>
 200eabc:	81400c17 	ldw	r5,48(r16)
 200eac0:	28000526 	beq	r5,zero,200ead8 <_fclose_r+0x88>
 200eac4:	80801004 	addi	r2,r16,64
 200eac8:	28800226 	beq	r5,r2,200ead4 <_fclose_r+0x84>
 200eacc:	8809883a 	mov	r4,r17
 200ead0:	20099640 	call	2009964 <_free_r>
 200ead4:	80000c15 	stw	zero,48(r16)
 200ead8:	81401117 	ldw	r5,68(r16)
 200eadc:	28000326 	beq	r5,zero,200eaec <_fclose_r+0x9c>
 200eae0:	8809883a 	mov	r4,r17
 200eae4:	20099640 	call	2009964 <_free_r>
 200eae8:	80001115 	stw	zero,68(r16)
 200eaec:	8000030d 	sth	zero,12(r16)
 200eaf0:	20093980 	call	2009398 <__sfp_lock_release>
 200eaf4:	9005883a 	mov	r2,r18
 200eaf8:	dfc00317 	ldw	ra,12(sp)
 200eafc:	dc800217 	ldw	r18,8(sp)
 200eb00:	dc400117 	ldw	r17,4(sp)
 200eb04:	dc000017 	ldw	r16,0(sp)
 200eb08:	dec00404 	addi	sp,sp,16
 200eb0c:	f800283a 	ret
 200eb10:	20093980 	call	2009398 <__sfp_lock_release>
 200eb14:	0025883a 	mov	r18,zero
 200eb18:	9005883a 	mov	r2,r18
 200eb1c:	dfc00317 	ldw	ra,12(sp)
 200eb20:	dc800217 	ldw	r18,8(sp)
 200eb24:	dc400117 	ldw	r17,4(sp)
 200eb28:	dc000017 	ldw	r16,0(sp)
 200eb2c:	dec00404 	addi	sp,sp,16
 200eb30:	f800283a 	ret
 200eb34:	8809883a 	mov	r4,r17
 200eb38:	20093a40 	call	20093a4 <__sinit>
 200eb3c:	8080030f 	ldh	r2,12(r16)
 200eb40:	103fd11e 	bne	r2,zero,200ea88 <_fclose_r+0x38>
 200eb44:	003ff206 	br	200eb10 <_fclose_r+0xc0>
 200eb48:	81400417 	ldw	r5,16(r16)
 200eb4c:	8809883a 	mov	r4,r17
 200eb50:	20099640 	call	2009964 <_free_r>
 200eb54:	003fd906 	br	200eabc <_fclose_r+0x6c>
 200eb58:	04bfffc4 	movi	r18,-1
 200eb5c:	003fd406 	br	200eab0 <_fclose_r+0x60>

0200eb60 <fclose>:
 200eb60:	00808074 	movhi	r2,513
 200eb64:	109f0a04 	addi	r2,r2,31784
 200eb68:	200b883a 	mov	r5,r4
 200eb6c:	11000017 	ldw	r4,0(r2)
 200eb70:	200ea501 	jmpi	200ea50 <_fclose_r>

0200eb74 <_fstat_r>:
 200eb74:	defffd04 	addi	sp,sp,-12
 200eb78:	dc000015 	stw	r16,0(sp)
 200eb7c:	040080b4 	movhi	r16,514
 200eb80:	84263c04 	addi	r16,r16,-26384
 200eb84:	dc400115 	stw	r17,4(sp)
 200eb88:	80000015 	stw	zero,0(r16)
 200eb8c:	2023883a 	mov	r17,r4
 200eb90:	2809883a 	mov	r4,r5
 200eb94:	300b883a 	mov	r5,r6
 200eb98:	dfc00215 	stw	ra,8(sp)
 200eb9c:	20117240 	call	2011724 <fstat>
 200eba0:	1007883a 	mov	r3,r2
 200eba4:	00bfffc4 	movi	r2,-1
 200eba8:	18800626 	beq	r3,r2,200ebc4 <_fstat_r+0x50>
 200ebac:	1805883a 	mov	r2,r3
 200ebb0:	dfc00217 	ldw	ra,8(sp)
 200ebb4:	dc400117 	ldw	r17,4(sp)
 200ebb8:	dc000017 	ldw	r16,0(sp)
 200ebbc:	dec00304 	addi	sp,sp,12
 200ebc0:	f800283a 	ret
 200ebc4:	80800017 	ldw	r2,0(r16)
 200ebc8:	103ff826 	beq	r2,zero,200ebac <_fstat_r+0x38>
 200ebcc:	88800015 	stw	r2,0(r17)
 200ebd0:	1805883a 	mov	r2,r3
 200ebd4:	dfc00217 	ldw	ra,8(sp)
 200ebd8:	dc400117 	ldw	r17,4(sp)
 200ebdc:	dc000017 	ldw	r16,0(sp)
 200ebe0:	dec00304 	addi	sp,sp,12
 200ebe4:	f800283a 	ret

0200ebe8 <htinit>:
 200ebe8:	28800003 	ldbu	r2,0(r5)
 200ebec:	10000626 	beq	r2,zero,200ec08 <htinit+0x20>
 200ebf0:	1105883a 	add	r2,r2,r4
 200ebf4:	11800005 	stb	r6,0(r2)
 200ebf8:	28800043 	ldbu	r2,1(r5)
 200ebfc:	31800044 	addi	r6,r6,1
 200ec00:	29400044 	addi	r5,r5,1
 200ec04:	103ffa1e 	bne	r2,zero,200ebf0 <htinit+0x8>
 200ec08:	f800283a 	ret

0200ec0c <__hexdig_init>:
 200ec0c:	defffd04 	addi	sp,sp,-12
 200ec10:	dc400015 	stw	r17,0(sp)
 200ec14:	044080b4 	movhi	r17,514
 200ec18:	8c665004 	addi	r17,r17,-26304
 200ec1c:	dcc00115 	stw	r19,4(sp)
 200ec20:	8809883a 	mov	r4,r17
 200ec24:	04c00684 	movi	r19,26
 200ec28:	01408074 	movhi	r5,513
 200ec2c:	2957e704 	addi	r5,r5,24476
 200ec30:	01800404 	movi	r6,16
 200ec34:	dfc00215 	stw	ra,8(sp)
 200ec38:	200ebe80 	call	200ebe8 <htinit>
 200ec3c:	980d883a 	mov	r6,r19
 200ec40:	8809883a 	mov	r4,r17
 200ec44:	01408074 	movhi	r5,513
 200ec48:	2957ea04 	addi	r5,r5,24488
 200ec4c:	200ebe80 	call	200ebe8 <htinit>
 200ec50:	8809883a 	mov	r4,r17
 200ec54:	980d883a 	mov	r6,r19
 200ec58:	01408074 	movhi	r5,513
 200ec5c:	2957ec04 	addi	r5,r5,24496
 200ec60:	dfc00217 	ldw	ra,8(sp)
 200ec64:	dcc00117 	ldw	r19,4(sp)
 200ec68:	dc400017 	ldw	r17,0(sp)
 200ec6c:	dec00304 	addi	sp,sp,12
 200ec70:	200ebe81 	jmpi	200ebe8 <htinit>

0200ec74 <rshift>:
 200ec74:	2807d17a 	srai	r3,r5,5
 200ec78:	20800417 	ldw	r2,16(r4)
 200ec7c:	22400504 	addi	r9,r4,20
 200ec80:	480f883a 	mov	r7,r9
 200ec84:	1880190e 	bge	r3,r2,200ecec <rshift+0x78>
 200ec88:	1085883a 	add	r2,r2,r2
 200ec8c:	18c7883a 	add	r3,r3,r3
 200ec90:	1085883a 	add	r2,r2,r2
 200ec94:	18c7883a 	add	r3,r3,r3
 200ec98:	294007cc 	andi	r5,r5,31
 200ec9c:	4891883a 	add	r8,r9,r2
 200eca0:	48cd883a 	add	r6,r9,r3
 200eca4:	28001726 	beq	r5,zero,200ed04 <rshift+0x90>
 200eca8:	30c00017 	ldw	r3,0(r6)
 200ecac:	00800804 	movi	r2,32
 200ecb0:	31800104 	addi	r6,r6,4
 200ecb4:	1155c83a 	sub	r10,r2,r5
 200ecb8:	1946d83a 	srl	r3,r3,r5
 200ecbc:	3200092e 	bgeu	r6,r8,200ece4 <rshift+0x70>
 200ecc0:	30800017 	ldw	r2,0(r6)
 200ecc4:	1284983a 	sll	r2,r2,r10
 200ecc8:	10c4b03a 	or	r2,r2,r3
 200eccc:	38800015 	stw	r2,0(r7)
 200ecd0:	30c00017 	ldw	r3,0(r6)
 200ecd4:	31800104 	addi	r6,r6,4
 200ecd8:	39c00104 	addi	r7,r7,4
 200ecdc:	1946d83a 	srl	r3,r3,r5
 200ece0:	323ff736 	bltu	r6,r8,200ecc0 <rshift+0x4c>
 200ece4:	38c00015 	stw	r3,0(r7)
 200ece8:	18000c1e 	bne	r3,zero,200ed1c <rshift+0xa8>
 200ecec:	3a45c83a 	sub	r2,r7,r9
 200ecf0:	1005d0ba 	srai	r2,r2,2
 200ecf4:	20800415 	stw	r2,16(r4)
 200ecf8:	1000011e 	bne	r2,zero,200ed00 <rshift+0x8c>
 200ecfc:	20000515 	stw	zero,20(r4)
 200ed00:	f800283a 	ret
 200ed04:	323ff92e 	bgeu	r6,r8,200ecec <rshift+0x78>
 200ed08:	30800017 	ldw	r2,0(r6)
 200ed0c:	31800104 	addi	r6,r6,4
 200ed10:	38800015 	stw	r2,0(r7)
 200ed14:	39c00104 	addi	r7,r7,4
 200ed18:	003ffa06 	br	200ed04 <rshift+0x90>
 200ed1c:	39c00104 	addi	r7,r7,4
 200ed20:	003ff206 	br	200ecec <rshift+0x78>

0200ed24 <__gethex>:
 200ed24:	defff304 	addi	sp,sp,-52
 200ed28:	dd400815 	stw	r21,32(sp)
 200ed2c:	dd000715 	stw	r20,28(sp)
 200ed30:	dcc00615 	stw	r19,24(sp)
 200ed34:	dc400415 	stw	r17,16(sp)
 200ed38:	dfc00c15 	stw	ra,48(sp)
 200ed3c:	df000b15 	stw	fp,44(sp)
 200ed40:	ddc00a15 	stw	r23,40(sp)
 200ed44:	dd800915 	stw	r22,36(sp)
 200ed48:	dc800515 	stw	r18,20(sp)
 200ed4c:	dc000315 	stw	r16,12(sp)
 200ed50:	044080b4 	movhi	r17,514
 200ed54:	8c665004 	addi	r17,r17,-26304
 200ed58:	88800c03 	ldbu	r2,48(r17)
 200ed5c:	202b883a 	mov	r21,r4
 200ed60:	2827883a 	mov	r19,r5
 200ed64:	3029883a 	mov	r20,r6
 200ed68:	d9c00115 	stw	r7,4(sp)
 200ed6c:	10006e26 	beq	r2,zero,200ef28 <__gethex+0x204>
 200ed70:	99800017 	ldw	r6,0(r19)
 200ed74:	00800c04 	movi	r2,48
 200ed78:	31000083 	ldbu	r4,2(r6)
 200ed7c:	30c00084 	addi	r3,r6,2
 200ed80:	20806f1e 	bne	r4,r2,200ef40 <__gethex+0x21c>
 200ed84:	200b883a 	mov	r5,r4
 200ed88:	3007883a 	mov	r3,r6
 200ed8c:	188000c3 	ldbu	r2,3(r3)
 200ed90:	18c00044 	addi	r3,r3,1
 200ed94:	1009883a 	mov	r4,r2
 200ed98:	117ffc26 	beq	r2,r5,200ed8c <__gethex+0x68>
 200ed9c:	1997c83a 	sub	r11,r3,r6
 200eda0:	19400084 	addi	r5,r3,2
 200eda4:	2445883a 	add	r2,r4,r17
 200eda8:	10c00003 	ldbu	r3,0(r2)
 200edac:	18002d26 	beq	r3,zero,200ee64 <__gethex+0x140>
 200edb0:	29000003 	ldbu	r4,0(r5)
 200edb4:	2825883a 	mov	r18,r5
 200edb8:	000d883a 	mov	r6,zero
 200edbc:	0013883a 	mov	r9,zero
 200edc0:	21003fcc 	andi	r4,r4,255
 200edc4:	2445883a 	add	r2,r4,r17
 200edc8:	10c00003 	ldbu	r3,0(r2)
 200edcc:	18000526 	beq	r3,zero,200ede4 <__gethex+0xc0>
 200edd0:	29400044 	addi	r5,r5,1
 200edd4:	29000003 	ldbu	r4,0(r5)
 200edd8:	2445883a 	add	r2,r4,r17
 200eddc:	10c00003 	ldbu	r3,0(r2)
 200ede0:	183ffb1e 	bne	r3,zero,200edd0 <__gethex+0xac>
 200ede4:	00800b84 	movi	r2,46
 200ede8:	20805826 	beq	r4,r2,200ef4c <__gethex+0x228>
 200edec:	30007a26 	beq	r6,zero,200efd8 <__gethex+0x2b4>
 200edf0:	2985c83a 	sub	r2,r5,r6
 200edf4:	1085883a 	add	r2,r2,r2
 200edf8:	1085883a 	add	r2,r2,r2
 200edfc:	00adc83a 	sub	r22,zero,r2
 200ee00:	2821883a 	mov	r16,r5
 200ee04:	80c00003 	ldbu	r3,0(r16)
 200ee08:	00801404 	movi	r2,80
 200ee0c:	18801e26 	beq	r3,r2,200ee88 <__gethex+0x164>
 200ee10:	00801c04 	movi	r2,112
 200ee14:	18801c26 	beq	r3,r2,200ee88 <__gethex+0x164>
 200ee18:	800d883a 	mov	r6,r16
 200ee1c:	4805003a 	cmpeq	r2,r9,zero
 200ee20:	99800015 	stw	r6,0(r19)
 200ee24:	1000861e 	bne	r2,zero,200f040 <__gethex+0x31c>
 200ee28:	58003d26 	beq	r11,zero,200ef20 <__gethex+0x1fc>
 200ee2c:	0025883a 	mov	r18,zero
 200ee30:	9005883a 	mov	r2,r18
 200ee34:	dfc00c17 	ldw	ra,48(sp)
 200ee38:	df000b17 	ldw	fp,44(sp)
 200ee3c:	ddc00a17 	ldw	r23,40(sp)
 200ee40:	dd800917 	ldw	r22,36(sp)
 200ee44:	dd400817 	ldw	r21,32(sp)
 200ee48:	dd000717 	ldw	r20,28(sp)
 200ee4c:	dcc00617 	ldw	r19,24(sp)
 200ee50:	dc800517 	ldw	r18,20(sp)
 200ee54:	dc400417 	ldw	r17,16(sp)
 200ee58:	dc000317 	ldw	r16,12(sp)
 200ee5c:	dec00d04 	addi	sp,sp,52
 200ee60:	f800283a 	ret
 200ee64:	00800b84 	movi	r2,46
 200ee68:	20804a26 	beq	r4,r2,200ef94 <__gethex+0x270>
 200ee6c:	2821883a 	mov	r16,r5
 200ee70:	80c00003 	ldbu	r3,0(r16)
 200ee74:	00801404 	movi	r2,80
 200ee78:	2825883a 	mov	r18,r5
 200ee7c:	02400044 	movi	r9,1
 200ee80:	002d883a 	mov	r22,zero
 200ee84:	18bfe21e 	bne	r3,r2,200ee10 <__gethex+0xec>
 200ee88:	80c00043 	ldbu	r3,1(r16)
 200ee8c:	00800ac4 	movi	r2,43
 200ee90:	81000044 	addi	r4,r16,1
 200ee94:	18804a26 	beq	r3,r2,200efc0 <__gethex+0x29c>
 200ee98:	00800b44 	movi	r2,45
 200ee9c:	18804c26 	beq	r3,r2,200efd0 <__gethex+0x2ac>
 200eea0:	0015883a 	mov	r10,zero
 200eea4:	1c45883a 	add	r2,r3,r17
 200eea8:	10800003 	ldbu	r2,0(r2)
 200eeac:	103fda26 	beq	r2,zero,200ee18 <__gethex+0xf4>
 200eeb0:	02000644 	movi	r8,25
 200eeb4:	40bfd816 	blt	r8,r2,200ee18 <__gethex+0xf4>
 200eeb8:	20c00043 	ldbu	r3,1(r4)
 200eebc:	11fffc04 	addi	r7,r2,-16
 200eec0:	008080b4 	movhi	r2,514
 200eec4:	10a65004 	addi	r2,r2,-26304
 200eec8:	1887883a 	add	r3,r3,r2
 200eecc:	18800003 	ldbu	r2,0(r3)
 200eed0:	21800044 	addi	r6,r4,1
 200eed4:	10000d26 	beq	r2,zero,200ef0c <__gethex+0x1e8>
 200eed8:	100b883a 	mov	r5,r2
 200eedc:	4080020e 	bge	r8,r2,200eee8 <__gethex+0x1c4>
 200eee0:	00000a06 	br	200ef0c <__gethex+0x1e8>
 200eee4:	41000916 	blt	r8,r4,200ef0c <__gethex+0x1e8>
 200eee8:	31800044 	addi	r6,r6,1
 200eeec:	30800003 	ldbu	r2,0(r6)
 200eef0:	38c002a4 	muli	r3,r7,10
 200eef4:	1445883a 	add	r2,r2,r17
 200eef8:	11000003 	ldbu	r4,0(r2)
 200eefc:	1947883a 	add	r3,r3,r5
 200ef00:	19fffc04 	addi	r7,r3,-16
 200ef04:	200b883a 	mov	r5,r4
 200ef08:	203ff61e 	bne	r4,zero,200eee4 <__gethex+0x1c0>
 200ef0c:	5005003a 	cmpeq	r2,r10,zero
 200ef10:	1000011e 	bne	r2,zero,200ef18 <__gethex+0x1f4>
 200ef14:	01cfc83a 	sub	r7,zero,r7
 200ef18:	b1ed883a 	add	r22,r22,r7
 200ef1c:	003fbf06 	br	200ee1c <__gethex+0xf8>
 200ef20:	04800184 	movi	r18,6
 200ef24:	003fc206 	br	200ee30 <__gethex+0x10c>
 200ef28:	200ec0c0 	call	200ec0c <__hexdig_init>
 200ef2c:	99800017 	ldw	r6,0(r19)
 200ef30:	00800c04 	movi	r2,48
 200ef34:	31000083 	ldbu	r4,2(r6)
 200ef38:	30c00084 	addi	r3,r6,2
 200ef3c:	20bf9126 	beq	r4,r2,200ed84 <__gethex+0x60>
 200ef40:	180b883a 	mov	r5,r3
 200ef44:	0017883a 	mov	r11,zero
 200ef48:	003f9606 	br	200eda4 <__gethex+0x80>
 200ef4c:	303fa81e 	bne	r6,zero,200edf0 <__gethex+0xcc>
 200ef50:	29400044 	addi	r5,r5,1
 200ef54:	28800003 	ldbu	r2,0(r5)
 200ef58:	1445883a 	add	r2,r2,r17
 200ef5c:	10c00003 	ldbu	r3,0(r2)
 200ef60:	1800ad26 	beq	r3,zero,200f218 <__gethex+0x4f4>
 200ef64:	2809883a 	mov	r4,r5
 200ef68:	21000044 	addi	r4,r4,1
 200ef6c:	20800003 	ldbu	r2,0(r4)
 200ef70:	1445883a 	add	r2,r2,r17
 200ef74:	10c00003 	ldbu	r3,0(r2)
 200ef78:	183ffb1e 	bne	r3,zero,200ef68 <__gethex+0x244>
 200ef7c:	2145c83a 	sub	r2,r4,r5
 200ef80:	1085883a 	add	r2,r2,r2
 200ef84:	1085883a 	add	r2,r2,r2
 200ef88:	00adc83a 	sub	r22,zero,r2
 200ef8c:	200b883a 	mov	r5,r4
 200ef90:	003f9b06 	br	200ee00 <__gethex+0xdc>
 200ef94:	29000043 	ldbu	r4,1(r5)
 200ef98:	008080b4 	movhi	r2,514
 200ef9c:	10a65004 	addi	r2,r2,-26304
 200efa0:	2c000044 	addi	r16,r5,1
 200efa4:	2085883a 	add	r2,r4,r2
 200efa8:	10c00003 	ldbu	r3,0(r2)
 200efac:	18000d1e 	bne	r3,zero,200efe4 <__gethex+0x2c0>
 200efb0:	2825883a 	mov	r18,r5
 200efb4:	02400044 	movi	r9,1
 200efb8:	002d883a 	mov	r22,zero
 200efbc:	003f9106 	br	200ee04 <__gethex+0xe0>
 200efc0:	0015883a 	mov	r10,zero
 200efc4:	21000044 	addi	r4,r4,1
 200efc8:	20c00003 	ldbu	r3,0(r4)
 200efcc:	003fb506 	br	200eea4 <__gethex+0x180>
 200efd0:	02800044 	movi	r10,1
 200efd4:	003ffb06 	br	200efc4 <__gethex+0x2a0>
 200efd8:	2821883a 	mov	r16,r5
 200efdc:	002d883a 	mov	r22,zero
 200efe0:	003f8806 	br	200ee04 <__gethex+0xe0>
 200efe4:	00800c04 	movi	r2,48
 200efe8:	20800e1e 	bne	r4,r2,200f024 <__gethex+0x300>
 200efec:	2007883a 	mov	r3,r4
 200eff0:	800b883a 	mov	r5,r16
 200eff4:	29400044 	addi	r5,r5,1
 200eff8:	29000003 	ldbu	r4,0(r5)
 200effc:	20803fcc 	andi	r2,r4,255
 200f000:	10fffc26 	beq	r2,r3,200eff4 <__gethex+0x2d0>
 200f004:	1445883a 	add	r2,r2,r17
 200f008:	10c00003 	ldbu	r3,0(r2)
 200f00c:	1800071e 	bne	r3,zero,200f02c <__gethex+0x308>
 200f010:	02c00044 	movi	r11,1
 200f014:	800d883a 	mov	r6,r16
 200f018:	2825883a 	mov	r18,r5
 200f01c:	5813883a 	mov	r9,r11
 200f020:	003f6706 	br	200edc0 <__gethex+0x9c>
 200f024:	81000003 	ldbu	r4,0(r16)
 200f028:	800b883a 	mov	r5,r16
 200f02c:	800d883a 	mov	r6,r16
 200f030:	2825883a 	mov	r18,r5
 200f034:	02c00044 	movi	r11,1
 200f038:	0013883a 	mov	r9,zero
 200f03c:	003f6006 	br	200edc0 <__gethex+0x9c>
 200f040:	8485c83a 	sub	r2,r16,r18
 200f044:	10bfffc4 	addi	r2,r2,-1
 200f048:	00c001c4 	movi	r3,7
 200f04c:	1880700e 	bge	r3,r2,200f210 <__gethex+0x4ec>
 200f050:	000b883a 	mov	r5,zero
 200f054:	1005d07a 	srai	r2,r2,1
 200f058:	29400044 	addi	r5,r5,1
 200f05c:	18bffd16 	blt	r3,r2,200f054 <__gethex+0x330>
 200f060:	a809883a 	mov	r4,r21
 200f064:	200ae940 	call	200ae94 <_Balloc>
 200f068:	1027883a 	mov	r19,r2
 200f06c:	10800504 	addi	r2,r2,20
 200f070:	d8800215 	stw	r2,8(sp)
 200f074:	9400522e 	bgeu	r18,r16,200f1c0 <__gethex+0x49c>
 200f078:	da000217 	ldw	r8,8(sp)
 200f07c:	800b883a 	mov	r5,r16
 200f080:	000f883a 	mov	r7,zero
 200f084:	0009883a 	mov	r4,zero
 200f088:	02400b84 	movi	r9,46
 200f08c:	02800804 	movi	r10,32
 200f090:	297fffc4 	addi	r5,r5,-1
 200f094:	28c00003 	ldbu	r3,0(r5)
 200f098:	1a400826 	beq	r3,r9,200f0bc <__gethex+0x398>
 200f09c:	380d883a 	mov	r6,r7
 200f0a0:	3a802726 	beq	r7,r10,200f140 <__gethex+0x41c>
 200f0a4:	39c00104 	addi	r7,r7,4
 200f0a8:	1c47883a 	add	r3,r3,r17
 200f0ac:	18800003 	ldbu	r2,0(r3)
 200f0b0:	108003cc 	andi	r2,r2,15
 200f0b4:	1184983a 	sll	r2,r2,r6
 200f0b8:	2088b03a 	or	r4,r4,r2
 200f0bc:	917ff436 	bltu	r18,r5,200f090 <__gethex+0x36c>
 200f0c0:	d8c00217 	ldw	r3,8(sp)
 200f0c4:	40800104 	addi	r2,r8,4
 200f0c8:	41000015 	stw	r4,0(r8)
 200f0cc:	10c5c83a 	sub	r2,r2,r3
 200f0d0:	1021d0ba 	srai	r16,r2,2
 200f0d4:	9c000415 	stw	r16,16(r19)
 200f0d8:	200a93c0 	call	200a93c <__hi0bits>
 200f0dc:	8006917a 	slli	r3,r16,5
 200f0e0:	a5c00017 	ldw	r23,0(r20)
 200f0e4:	1885c83a 	sub	r2,r3,r2
 200f0e8:	b8801c16 	blt	r23,r2,200f15c <__gethex+0x438>
 200f0ec:	15c00a16 	blt	r2,r23,200f118 <__gethex+0x3f4>
 200f0f0:	0039883a 	mov	fp,zero
 200f0f4:	a0800217 	ldw	r2,8(r20)
 200f0f8:	1580340e 	bge	r2,r22,200f1cc <__gethex+0x4a8>
 200f0fc:	a809883a 	mov	r4,r21
 200f100:	980b883a 	mov	r5,r19
 200f104:	200a9140 	call	200a914 <_Bfree>
 200f108:	d8c00d17 	ldw	r3,52(sp)
 200f10c:	048028c4 	movi	r18,163
 200f110:	18000015 	stw	zero,0(r3)
 200f114:	003f4606 	br	200ee30 <__gethex+0x10c>
 200f118:	b8a1c83a 	sub	r16,r23,r2
 200f11c:	980b883a 	mov	r5,r19
 200f120:	a809883a 	mov	r4,r21
 200f124:	800d883a 	mov	r6,r16
 200f128:	200b2580 	call	200b258 <__lshift>
 200f12c:	1027883a 	mov	r19,r2
 200f130:	b42dc83a 	sub	r22,r22,r16
 200f134:	10800504 	addi	r2,r2,20
 200f138:	d8800215 	stw	r2,8(sp)
 200f13c:	003fec06 	br	200f0f0 <__gethex+0x3cc>
 200f140:	41000015 	stw	r4,0(r8)
 200f144:	28c00003 	ldbu	r3,0(r5)
 200f148:	01c00104 	movi	r7,4
 200f14c:	000d883a 	mov	r6,zero
 200f150:	41d1883a 	add	r8,r8,r7
 200f154:	0009883a 	mov	r4,zero
 200f158:	003fd306 	br	200f0a8 <__gethex+0x384>
 200f15c:	15e1c83a 	sub	r16,r2,r23
 200f160:	9809883a 	mov	r4,r19
 200f164:	800b883a 	mov	r5,r16
 200f168:	200ae0c0 	call	200ae0c <__any_on>
 200f16c:	1000061e 	bne	r2,zero,200f188 <__gethex+0x464>
 200f170:	0039883a 	mov	fp,zero
 200f174:	9809883a 	mov	r4,r19
 200f178:	800b883a 	mov	r5,r16
 200f17c:	200ec740 	call	200ec74 <rshift>
 200f180:	b42d883a 	add	r22,r22,r16
 200f184:	003fdb06 	br	200f0f4 <__gethex+0x3d0>
 200f188:	817fffc4 	addi	r5,r16,-1
 200f18c:	2805d17a 	srai	r2,r5,5
 200f190:	d8c00217 	ldw	r3,8(sp)
 200f194:	290007cc 	andi	r4,r5,31
 200f198:	1085883a 	add	r2,r2,r2
 200f19c:	1085883a 	add	r2,r2,r2
 200f1a0:	01800044 	movi	r6,1
 200f1a4:	10c5883a 	add	r2,r2,r3
 200f1a8:	3108983a 	sll	r4,r6,r4
 200f1ac:	10c00017 	ldw	r3,0(r2)
 200f1b0:	20c8703a 	and	r4,r4,r3
 200f1b4:	20001a1e 	bne	r4,zero,200f220 <__gethex+0x4fc>
 200f1b8:	3039883a 	mov	fp,r6
 200f1bc:	003fed06 	br	200f174 <__gethex+0x450>
 200f1c0:	1011883a 	mov	r8,r2
 200f1c4:	0009883a 	mov	r4,zero
 200f1c8:	003fbd06 	br	200f0c0 <__gethex+0x39c>
 200f1cc:	a1000117 	ldw	r4,4(r20)
 200f1d0:	b1001a16 	blt	r22,r4,200f23c <__gethex+0x518>
 200f1d4:	04800044 	movi	r18,1
 200f1d8:	e0000826 	beq	fp,zero,200f1fc <__gethex+0x4d8>
 200f1dc:	a1000317 	ldw	r4,12(r20)
 200f1e0:	00800084 	movi	r2,2
 200f1e4:	20809426 	beq	r4,r2,200f438 <__gethex+0x714>
 200f1e8:	008000c4 	movi	r2,3
 200f1ec:	20805826 	beq	r4,r2,200f350 <__gethex+0x62c>
 200f1f0:	00800044 	movi	r2,1
 200f1f4:	20803f26 	beq	r4,r2,200f2f4 <__gethex+0x5d0>
 200f1f8:	94800414 	ori	r18,r18,16
 200f1fc:	d8800d17 	ldw	r2,52(sp)
 200f200:	d8c00117 	ldw	r3,4(sp)
 200f204:	14c00015 	stw	r19,0(r2)
 200f208:	1d800015 	stw	r22,0(r3)
 200f20c:	003f0806 	br	200ee30 <__gethex+0x10c>
 200f210:	000b883a 	mov	r5,zero
 200f214:	003f9206 	br	200f060 <__gethex+0x33c>
 200f218:	002d883a 	mov	r22,zero
 200f21c:	003ef806 	br	200ee00 <__gethex+0xdc>
 200f220:	3140160e 	bge	r6,r5,200f27c <__gethex+0x558>
 200f224:	9809883a 	mov	r4,r19
 200f228:	817fff84 	addi	r5,r16,-2
 200f22c:	200ae0c0 	call	200ae0c <__any_on>
 200f230:	10001226 	beq	r2,zero,200f27c <__gethex+0x558>
 200f234:	070000c4 	movi	fp,3
 200f238:	003fce06 	br	200f174 <__gethex+0x450>
 200f23c:	25a3c83a 	sub	r17,r4,r22
 200f240:	8dc01016 	blt	r17,r23,200f284 <__gethex+0x560>
 200f244:	a0c00317 	ldw	r3,12(r20)
 200f248:	00800084 	movi	r2,2
 200f24c:	18809326 	beq	r3,r2,200f49c <__gethex+0x778>
 200f250:	008000c4 	movi	r2,3
 200f254:	18808e26 	beq	r3,r2,200f490 <__gethex+0x76c>
 200f258:	00800044 	movi	r2,1
 200f25c:	18807b26 	beq	r3,r2,200f44c <__gethex+0x728>
 200f260:	a809883a 	mov	r4,r21
 200f264:	980b883a 	mov	r5,r19
 200f268:	200a9140 	call	200a914 <_Bfree>
 200f26c:	d8c00d17 	ldw	r3,52(sp)
 200f270:	04801404 	movi	r18,80
 200f274:	18000015 	stw	zero,0(r3)
 200f278:	003eed06 	br	200ee30 <__gethex+0x10c>
 200f27c:	07000084 	movi	fp,2
 200f280:	003fbc06 	br	200f174 <__gethex+0x450>
 200f284:	8c3fffc4 	addi	r16,r17,-1
 200f288:	e0001426 	beq	fp,zero,200f2dc <__gethex+0x5b8>
 200f28c:	07000044 	movi	fp,1
 200f290:	8005d17a 	srai	r2,r16,5
 200f294:	d8c00217 	ldw	r3,8(sp)
 200f298:	814007cc 	andi	r5,r16,31
 200f29c:	1085883a 	add	r2,r2,r2
 200f2a0:	1085883a 	add	r2,r2,r2
 200f2a4:	10c5883a 	add	r2,r2,r3
 200f2a8:	00c00044 	movi	r3,1
 200f2ac:	1946983a 	sll	r3,r3,r5
 200f2b0:	11000017 	ldw	r4,0(r2)
 200f2b4:	1906703a 	and	r3,r3,r4
 200f2b8:	18000126 	beq	r3,zero,200f2c0 <__gethex+0x59c>
 200f2bc:	e7000094 	ori	fp,fp,2
 200f2c0:	880b883a 	mov	r5,r17
 200f2c4:	9809883a 	mov	r4,r19
 200f2c8:	200ec740 	call	200ec74 <rshift>
 200f2cc:	a5800117 	ldw	r22,4(r20)
 200f2d0:	bc6fc83a 	sub	r23,r23,r17
 200f2d4:	04800084 	movi	r18,2
 200f2d8:	003fbf06 	br	200f1d8 <__gethex+0x4b4>
 200f2dc:	043fec0e 	bge	zero,r16,200f290 <__gethex+0x56c>
 200f2e0:	9809883a 	mov	r4,r19
 200f2e4:	800b883a 	mov	r5,r16
 200f2e8:	200ae0c0 	call	200ae0c <__any_on>
 200f2ec:	1039883a 	mov	fp,r2
 200f2f0:	003fe706 	br	200f290 <__gethex+0x56c>
 200f2f4:	e080008c 	andi	r2,fp,2
 200f2f8:	103fbf26 	beq	r2,zero,200f1f8 <__gethex+0x4d4>
 200f2fc:	d8c00217 	ldw	r3,8(sp)
 200f300:	18800017 	ldw	r2,0(r3)
 200f304:	e084b03a 	or	r2,fp,r2
 200f308:	1104703a 	and	r2,r2,r4
 200f30c:	103fba26 	beq	r2,zero,200f1f8 <__gethex+0x4d4>
 200f310:	9c000417 	ldw	r16,16(r19)
 200f314:	d8c00217 	ldw	r3,8(sp)
 200f318:	017fffc4 	movi	r5,-1
 200f31c:	8405883a 	add	r2,r16,r16
 200f320:	10b9883a 	add	fp,r2,r2
 200f324:	1f09883a 	add	r4,r3,fp
 200f328:	dc000015 	stw	r16,0(sp)
 200f32c:	00000306 	br	200f33c <__gethex+0x618>
 200f330:	18000015 	stw	zero,0(r3)
 200f334:	18c00104 	addi	r3,r3,4
 200f338:	1900082e 	bgeu	r3,r4,200f35c <__gethex+0x638>
 200f33c:	18800017 	ldw	r2,0(r3)
 200f340:	117ffb26 	beq	r2,r5,200f330 <__gethex+0x60c>
 200f344:	10800044 	addi	r2,r2,1
 200f348:	18800015 	stw	r2,0(r3)
 200f34c:	00001f06 	br	200f3cc <__gethex+0x6a8>
 200f350:	d8800e17 	ldw	r2,56(sp)
 200f354:	103fa826 	beq	r2,zero,200f1f8 <__gethex+0x4d4>
 200f358:	003fed06 	br	200f310 <__gethex+0x5ec>
 200f35c:	98800217 	ldw	r2,8(r19)
 200f360:	80801316 	blt	r16,r2,200f3b0 <__gethex+0x68c>
 200f364:	99400117 	ldw	r5,4(r19)
 200f368:	a809883a 	mov	r4,r21
 200f36c:	29400044 	addi	r5,r5,1
 200f370:	200ae940 	call	200ae94 <_Balloc>
 200f374:	99800417 	ldw	r6,16(r19)
 200f378:	99400304 	addi	r5,r19,12
 200f37c:	11000304 	addi	r4,r2,12
 200f380:	318d883a 	add	r6,r6,r6
 200f384:	318d883a 	add	r6,r6,r6
 200f388:	31800204 	addi	r6,r6,8
 200f38c:	1023883a 	mov	r17,r2
 200f390:	200a6fc0 	call	200a6fc <memcpy>
 200f394:	980b883a 	mov	r5,r19
 200f398:	a809883a 	mov	r4,r21
 200f39c:	200a9140 	call	200a914 <_Bfree>
 200f3a0:	8c000417 	ldw	r16,16(r17)
 200f3a4:	88800504 	addi	r2,r17,20
 200f3a8:	8827883a 	mov	r19,r17
 200f3ac:	d8800215 	stw	r2,8(sp)
 200f3b0:	8405883a 	add	r2,r16,r16
 200f3b4:	1085883a 	add	r2,r2,r2
 200f3b8:	14c5883a 	add	r2,r2,r19
 200f3bc:	84000044 	addi	r16,r16,1
 200f3c0:	00c00044 	movi	r3,1
 200f3c4:	10c00515 	stw	r3,20(r2)
 200f3c8:	9c000415 	stw	r16,16(r19)
 200f3cc:	00800084 	movi	r2,2
 200f3d0:	90801426 	beq	r18,r2,200f424 <__gethex+0x700>
 200f3d4:	d8800017 	ldw	r2,0(sp)
 200f3d8:	14000b16 	blt	r2,r16,200f408 <__gethex+0x6e4>
 200f3dc:	bc0007cc 	andi	r16,r23,31
 200f3e0:	8000021e 	bne	r16,zero,200f3ec <__gethex+0x6c8>
 200f3e4:	94800814 	ori	r18,r18,32
 200f3e8:	003f8406 	br	200f1fc <__gethex+0x4d8>
 200f3ec:	d8c00217 	ldw	r3,8(sp)
 200f3f0:	1f05883a 	add	r2,r3,fp
 200f3f4:	113fff17 	ldw	r4,-4(r2)
 200f3f8:	200a93c0 	call	200a93c <__hi0bits>
 200f3fc:	00c00804 	movi	r3,32
 200f400:	1c07c83a 	sub	r3,r3,r16
 200f404:	10fff70e 	bge	r2,r3,200f3e4 <__gethex+0x6c0>
 200f408:	9809883a 	mov	r4,r19
 200f40c:	01400044 	movi	r5,1
 200f410:	200ec740 	call	200ec74 <rshift>
 200f414:	a0800217 	ldw	r2,8(r20)
 200f418:	b5800044 	addi	r22,r22,1
 200f41c:	15bf3716 	blt	r2,r22,200f0fc <__gethex+0x3d8>
 200f420:	003ff006 	br	200f3e4 <__gethex+0x6c0>
 200f424:	a0800017 	ldw	r2,0(r20)
 200f428:	10bfffc4 	addi	r2,r2,-1
 200f42c:	b8801e26 	beq	r23,r2,200f4a8 <__gethex+0x784>
 200f430:	04800884 	movi	r18,34
 200f434:	003f7106 	br	200f1fc <__gethex+0x4d8>
 200f438:	d8c00e17 	ldw	r3,56(sp)
 200f43c:	00800044 	movi	r2,1
 200f440:	10c5c83a 	sub	r2,r2,r3
 200f444:	103f6c26 	beq	r2,zero,200f1f8 <__gethex+0x4d4>
 200f448:	003fb106 	br	200f310 <__gethex+0x5ec>
 200f44c:	bc7f841e 	bne	r23,r17,200f260 <__gethex+0x53c>
 200f450:	1dc0050e 	bge	r3,r23,200f468 <__gethex+0x744>
 200f454:	b8cbc83a 	sub	r5,r23,r3
 200f458:	9809883a 	mov	r4,r19
 200f45c:	200ae0c0 	call	200ae0c <__any_on>
 200f460:	103f7f26 	beq	r2,zero,200f260 <__gethex+0x53c>
 200f464:	a1000117 	ldw	r4,4(r20)
 200f468:	d8800117 	ldw	r2,4(sp)
 200f46c:	d8c00217 	ldw	r3,8(sp)
 200f470:	04000044 	movi	r16,1
 200f474:	11000015 	stw	r4,0(r2)
 200f478:	d8800d17 	ldw	r2,52(sp)
 200f47c:	04801884 	movi	r18,98
 200f480:	1c000015 	stw	r16,0(r3)
 200f484:	14c00015 	stw	r19,0(r2)
 200f488:	9c000415 	stw	r16,16(r19)
 200f48c:	003e6806 	br	200ee30 <__gethex+0x10c>
 200f490:	d8c00e17 	ldw	r3,56(sp)
 200f494:	183f7226 	beq	r3,zero,200f260 <__gethex+0x53c>
 200f498:	003ff306 	br	200f468 <__gethex+0x744>
 200f49c:	d8800e17 	ldw	r2,56(sp)
 200f4a0:	103ff126 	beq	r2,zero,200f468 <__gethex+0x744>
 200f4a4:	003f6e06 	br	200f260 <__gethex+0x53c>
 200f4a8:	b805d17a 	srai	r2,r23,5
 200f4ac:	d8c00217 	ldw	r3,8(sp)
 200f4b0:	b94007cc 	andi	r5,r23,31
 200f4b4:	1085883a 	add	r2,r2,r2
 200f4b8:	1085883a 	add	r2,r2,r2
 200f4bc:	10c5883a 	add	r2,r2,r3
 200f4c0:	00c00044 	movi	r3,1
 200f4c4:	1946983a 	sll	r3,r3,r5
 200f4c8:	11000017 	ldw	r4,0(r2)
 200f4cc:	1906703a 	and	r3,r3,r4
 200f4d0:	183fd726 	beq	r3,zero,200f430 <__gethex+0x70c>
 200f4d4:	04800844 	movi	r18,33
 200f4d8:	003f4806 	br	200f1fc <__gethex+0x4d8>

0200f4dc <L_shift>:
 200f4dc:	00800204 	movi	r2,8
 200f4e0:	1185c83a 	sub	r2,r2,r6
 200f4e4:	1085883a 	add	r2,r2,r2
 200f4e8:	21c00017 	ldw	r7,0(r4)
 200f4ec:	1093883a 	add	r9,r2,r2
 200f4f0:	00800804 	movi	r2,32
 200f4f4:	200d883a 	mov	r6,r4
 200f4f8:	1251c83a 	sub	r8,r2,r9
 200f4fc:	31800104 	addi	r6,r6,4
 200f500:	3805883a 	mov	r2,r7
 200f504:	31c00017 	ldw	r7,0(r6)
 200f508:	3a08983a 	sll	r4,r7,r8
 200f50c:	3a46d83a 	srl	r3,r7,r9
 200f510:	1104b03a 	or	r2,r2,r4
 200f514:	180f883a 	mov	r7,r3
 200f518:	30bfff15 	stw	r2,-4(r6)
 200f51c:	30c00015 	stw	r3,0(r6)
 200f520:	317ff636 	bltu	r6,r5,200f4fc <L_shift+0x20>
 200f524:	f800283a 	ret

0200f528 <__hexnan>:
 200f528:	defff404 	addi	sp,sp,-48
 200f52c:	dd800815 	stw	r22,32(sp)
 200f530:	058080b4 	movhi	r22,514
 200f534:	b5a65004 	addi	r22,r22,-26304
 200f538:	b0800c03 	ldbu	r2,48(r22)
 200f53c:	dcc00515 	stw	r19,20(sp)
 200f540:	dc000215 	stw	r16,8(sp)
 200f544:	dfc00b15 	stw	ra,44(sp)
 200f548:	df000a15 	stw	fp,40(sp)
 200f54c:	ddc00915 	stw	r23,36(sp)
 200f550:	dd400715 	stw	r21,28(sp)
 200f554:	dd000615 	stw	r20,24(sp)
 200f558:	dc800415 	stw	r18,16(sp)
 200f55c:	dc400315 	stw	r17,12(sp)
 200f560:	d9000115 	stw	r4,4(sp)
 200f564:	2821883a 	mov	r16,r5
 200f568:	3027883a 	mov	r19,r6
 200f56c:	10007426 	beq	r2,zero,200f740 <__hexnan+0x218>
 200f570:	80c00017 	ldw	r3,0(r16)
 200f574:	1805d17a 	srai	r2,r3,5
 200f578:	18c007cc 	andi	r3,r3,31
 200f57c:	1839003a 	cmpeq	fp,r3,zero
 200f580:	1085883a 	add	r2,r2,r2
 200f584:	1085883a 	add	r2,r2,r2
 200f588:	d8c00015 	stw	r3,0(sp)
 200f58c:	14c5883a 	add	r2,r2,r19
 200f590:	e000011e 	bne	fp,zero,200f598 <__hexnan+0x70>
 200f594:	10800104 	addi	r2,r2,4
 200f598:	d8c00117 	ldw	r3,4(sp)
 200f59c:	153fff04 	addi	r20,r2,-4
 200f5a0:	a021883a 	mov	r16,r20
 200f5a4:	1c400017 	ldw	r17,0(r3)
 200f5a8:	a02b883a 	mov	r21,r20
 200f5ac:	0025883a 	mov	r18,zero
 200f5b0:	002f883a 	mov	r23,zero
 200f5b4:	000d883a 	mov	r6,zero
 200f5b8:	103fff15 	stw	zero,-4(r2)
 200f5bc:	8c400044 	addi	r17,r17,1
 200f5c0:	89000003 	ldbu	r4,0(r17)
 200f5c4:	20000e26 	beq	r4,zero,200f600 <__hexnan+0xd8>
 200f5c8:	2585883a 	add	r2,r4,r22
 200f5cc:	10c00003 	ldbu	r3,0(r2)
 200f5d0:	18002e1e 	bne	r3,zero,200f68c <__hexnan+0x164>
 200f5d4:	00800804 	movi	r2,32
 200f5d8:	11005536 	bltu	r2,r4,200f730 <__hexnan+0x208>
 200f5dc:	bcbff70e 	bge	r23,r18,200f5bc <__hexnan+0x94>
 200f5e0:	8540022e 	bgeu	r16,r21,200f5ec <__hexnan+0xc4>
 200f5e4:	008001c4 	movi	r2,7
 200f5e8:	11803c0e 	bge	r2,r6,200f6dc <__hexnan+0x1b4>
 200f5ec:	9c003536 	bltu	r19,r16,200f6c4 <__hexnan+0x19c>
 200f5f0:	8c400044 	addi	r17,r17,1
 200f5f4:	89000003 	ldbu	r4,0(r17)
 200f5f8:	01800204 	movi	r6,8
 200f5fc:	203ff21e 	bne	r4,zero,200f5c8 <__hexnan+0xa0>
 200f600:	90004d26 	beq	r18,zero,200f738 <__hexnan+0x210>
 200f604:	85404336 	bltu	r16,r21,200f714 <__hexnan+0x1ec>
 200f608:	9c00382e 	bgeu	r19,r16,200f6ec <__hexnan+0x1c4>
 200f60c:	9807883a 	mov	r3,r19
 200f610:	80800017 	ldw	r2,0(r16)
 200f614:	84000104 	addi	r16,r16,4
 200f618:	18800015 	stw	r2,0(r3)
 200f61c:	18c00104 	addi	r3,r3,4
 200f620:	a43ffb2e 	bgeu	r20,r16,200f610 <__hexnan+0xe8>
 200f624:	18000015 	stw	zero,0(r3)
 200f628:	18c00104 	addi	r3,r3,4
 200f62c:	a0fffd2e 	bgeu	r20,r3,200f624 <__hexnan+0xfc>
 200f630:	a0800017 	ldw	r2,0(r20)
 200f634:	1000071e 	bne	r2,zero,200f654 <__hexnan+0x12c>
 200f638:	9d004326 	beq	r19,r20,200f748 <__hexnan+0x220>
 200f63c:	a007883a 	mov	r3,r20
 200f640:	00000106 	br	200f648 <__hexnan+0x120>
 200f644:	98c04026 	beq	r19,r3,200f748 <__hexnan+0x220>
 200f648:	18ffff04 	addi	r3,r3,-4
 200f64c:	18800017 	ldw	r2,0(r3)
 200f650:	103ffc26 	beq	r2,zero,200f644 <__hexnan+0x11c>
 200f654:	00c00144 	movi	r3,5
 200f658:	1805883a 	mov	r2,r3
 200f65c:	dfc00b17 	ldw	ra,44(sp)
 200f660:	df000a17 	ldw	fp,40(sp)
 200f664:	ddc00917 	ldw	r23,36(sp)
 200f668:	dd800817 	ldw	r22,32(sp)
 200f66c:	dd400717 	ldw	r21,28(sp)
 200f670:	dd000617 	ldw	r20,24(sp)
 200f674:	dcc00517 	ldw	r19,20(sp)
 200f678:	dc800417 	ldw	r18,16(sp)
 200f67c:	dc400317 	ldw	r17,12(sp)
 200f680:	dc000217 	ldw	r16,8(sp)
 200f684:	dec00c04 	addi	sp,sp,48
 200f688:	f800283a 	ret
 200f68c:	31800044 	addi	r6,r6,1
 200f690:	00800204 	movi	r2,8
 200f694:	94800044 	addi	r18,r18,1
 200f698:	1180040e 	bge	r2,r6,200f6ac <__hexnan+0x184>
 200f69c:	9c3fc72e 	bgeu	r19,r16,200f5bc <__hexnan+0x94>
 200f6a0:	843fff04 	addi	r16,r16,-4
 200f6a4:	80000015 	stw	zero,0(r16)
 200f6a8:	01800044 	movi	r6,1
 200f6ac:	80800017 	ldw	r2,0(r16)
 200f6b0:	18c003cc 	andi	r3,r3,15
 200f6b4:	1004913a 	slli	r2,r2,4
 200f6b8:	10c4b03a 	or	r2,r2,r3
 200f6bc:	80800015 	stw	r2,0(r16)
 200f6c0:	003fbe06 	br	200f5bc <__hexnan+0x94>
 200f6c4:	843fff04 	addi	r16,r16,-4
 200f6c8:	802b883a 	mov	r21,r16
 200f6cc:	902f883a 	mov	r23,r18
 200f6d0:	000d883a 	mov	r6,zero
 200f6d4:	80000015 	stw	zero,0(r16)
 200f6d8:	003fb806 	br	200f5bc <__hexnan+0x94>
 200f6dc:	8009883a 	mov	r4,r16
 200f6e0:	a80b883a 	mov	r5,r21
 200f6e4:	200f4dc0 	call	200f4dc <L_shift>
 200f6e8:	003fc006 	br	200f5ec <__hexnan+0xc4>
 200f6ec:	e03fd01e 	bne	fp,zero,200f630 <__hexnan+0x108>
 200f6f0:	d8c00017 	ldw	r3,0(sp)
 200f6f4:	00800804 	movi	r2,32
 200f6f8:	10c5c83a 	sub	r2,r2,r3
 200f6fc:	00ffffc4 	movi	r3,-1
 200f700:	1886d83a 	srl	r3,r3,r2
 200f704:	a0800017 	ldw	r2,0(r20)
 200f708:	10c4703a 	and	r2,r2,r3
 200f70c:	a0800015 	stw	r2,0(r20)
 200f710:	003fc806 	br	200f634 <__hexnan+0x10c>
 200f714:	008001c4 	movi	r2,7
 200f718:	11bfbb16 	blt	r2,r6,200f608 <__hexnan+0xe0>
 200f71c:	a80b883a 	mov	r5,r21
 200f720:	8009883a 	mov	r4,r16
 200f724:	200f4dc0 	call	200f4dc <L_shift>
 200f728:	9c3ff02e 	bgeu	r19,r16,200f6ec <__hexnan+0x1c4>
 200f72c:	003fb706 	br	200f60c <__hexnan+0xe4>
 200f730:	00800a44 	movi	r2,41
 200f734:	20800826 	beq	r4,r2,200f758 <__hexnan+0x230>
 200f738:	00c00104 	movi	r3,4
 200f73c:	003fc606 	br	200f658 <__hexnan+0x130>
 200f740:	200ec0c0 	call	200ec0c <__hexdig_init>
 200f744:	003f8a06 	br	200f570 <__hexnan+0x48>
 200f748:	00800044 	movi	r2,1
 200f74c:	00c00144 	movi	r3,5
 200f750:	98800015 	stw	r2,0(r19)
 200f754:	003fc006 	br	200f658 <__hexnan+0x130>
 200f758:	903ff726 	beq	r18,zero,200f738 <__hexnan+0x210>
 200f75c:	d8c00117 	ldw	r3,4(sp)
 200f760:	88800044 	addi	r2,r17,1
 200f764:	18800015 	stw	r2,0(r3)
 200f768:	857fa72e 	bgeu	r16,r21,200f608 <__hexnan+0xe0>
 200f76c:	003fe906 	br	200f714 <__hexnan+0x1ec>

0200f770 <_isatty_r>:
 200f770:	defffd04 	addi	sp,sp,-12
 200f774:	dc000015 	stw	r16,0(sp)
 200f778:	040080b4 	movhi	r16,514
 200f77c:	84263c04 	addi	r16,r16,-26384
 200f780:	dc400115 	stw	r17,4(sp)
 200f784:	80000015 	stw	zero,0(r16)
 200f788:	2023883a 	mov	r17,r4
 200f78c:	2809883a 	mov	r4,r5
 200f790:	dfc00215 	stw	ra,8(sp)
 200f794:	2011a180 	call	2011a18 <isatty>
 200f798:	1007883a 	mov	r3,r2
 200f79c:	00bfffc4 	movi	r2,-1
 200f7a0:	18800626 	beq	r3,r2,200f7bc <_isatty_r+0x4c>
 200f7a4:	1805883a 	mov	r2,r3
 200f7a8:	dfc00217 	ldw	ra,8(sp)
 200f7ac:	dc400117 	ldw	r17,4(sp)
 200f7b0:	dc000017 	ldw	r16,0(sp)
 200f7b4:	dec00304 	addi	sp,sp,12
 200f7b8:	f800283a 	ret
 200f7bc:	80800017 	ldw	r2,0(r16)
 200f7c0:	103ff826 	beq	r2,zero,200f7a4 <_isatty_r+0x34>
 200f7c4:	88800015 	stw	r2,0(r17)
 200f7c8:	1805883a 	mov	r2,r3
 200f7cc:	dfc00217 	ldw	ra,8(sp)
 200f7d0:	dc400117 	ldw	r17,4(sp)
 200f7d4:	dc000017 	ldw	r16,0(sp)
 200f7d8:	dec00304 	addi	sp,sp,12
 200f7dc:	f800283a 	ret

0200f7e0 <_lseek_r>:
 200f7e0:	defffd04 	addi	sp,sp,-12
 200f7e4:	dc000015 	stw	r16,0(sp)
 200f7e8:	040080b4 	movhi	r16,514
 200f7ec:	84263c04 	addi	r16,r16,-26384
 200f7f0:	dc400115 	stw	r17,4(sp)
 200f7f4:	80000015 	stw	zero,0(r16)
 200f7f8:	2023883a 	mov	r17,r4
 200f7fc:	2809883a 	mov	r4,r5
 200f800:	300b883a 	mov	r5,r6
 200f804:	380d883a 	mov	r6,r7
 200f808:	dfc00215 	stw	ra,8(sp)
 200f80c:	2011c240 	call	2011c24 <lseek>
 200f810:	1007883a 	mov	r3,r2
 200f814:	00bfffc4 	movi	r2,-1
 200f818:	18800626 	beq	r3,r2,200f834 <_lseek_r+0x54>
 200f81c:	1805883a 	mov	r2,r3
 200f820:	dfc00217 	ldw	ra,8(sp)
 200f824:	dc400117 	ldw	r17,4(sp)
 200f828:	dc000017 	ldw	r16,0(sp)
 200f82c:	dec00304 	addi	sp,sp,12
 200f830:	f800283a 	ret
 200f834:	80800017 	ldw	r2,0(r16)
 200f838:	103ff826 	beq	r2,zero,200f81c <_lseek_r+0x3c>
 200f83c:	88800015 	stw	r2,0(r17)
 200f840:	1805883a 	mov	r2,r3
 200f844:	dfc00217 	ldw	ra,8(sp)
 200f848:	dc400117 	ldw	r17,4(sp)
 200f84c:	dc000017 	ldw	r16,0(sp)
 200f850:	dec00304 	addi	sp,sp,12
 200f854:	f800283a 	ret

0200f858 <_read_r>:
 200f858:	defffd04 	addi	sp,sp,-12
 200f85c:	dc000015 	stw	r16,0(sp)
 200f860:	040080b4 	movhi	r16,514
 200f864:	84263c04 	addi	r16,r16,-26384
 200f868:	dc400115 	stw	r17,4(sp)
 200f86c:	80000015 	stw	zero,0(r16)
 200f870:	2023883a 	mov	r17,r4
 200f874:	2809883a 	mov	r4,r5
 200f878:	300b883a 	mov	r5,r6
 200f87c:	380d883a 	mov	r6,r7
 200f880:	dfc00215 	stw	ra,8(sp)
 200f884:	2011e200 	call	2011e20 <read>
 200f888:	1007883a 	mov	r3,r2
 200f88c:	00bfffc4 	movi	r2,-1
 200f890:	18800626 	beq	r3,r2,200f8ac <_read_r+0x54>
 200f894:	1805883a 	mov	r2,r3
 200f898:	dfc00217 	ldw	ra,8(sp)
 200f89c:	dc400117 	ldw	r17,4(sp)
 200f8a0:	dc000017 	ldw	r16,0(sp)
 200f8a4:	dec00304 	addi	sp,sp,12
 200f8a8:	f800283a 	ret
 200f8ac:	80800017 	ldw	r2,0(r16)
 200f8b0:	103ff826 	beq	r2,zero,200f894 <_read_r+0x3c>
 200f8b4:	88800015 	stw	r2,0(r17)
 200f8b8:	1805883a 	mov	r2,r3
 200f8bc:	dfc00217 	ldw	ra,8(sp)
 200f8c0:	dc400117 	ldw	r17,4(sp)
 200f8c4:	dc000017 	ldw	r16,0(sp)
 200f8c8:	dec00304 	addi	sp,sp,12
 200f8cc:	f800283a 	ret

0200f8d0 <__fixunsdfsi>:
 200f8d0:	defffb04 	addi	sp,sp,-20
 200f8d4:	dc400115 	stw	r17,4(sp)
 200f8d8:	dc000015 	stw	r16,0(sp)
 200f8dc:	04507834 	movhi	r17,16864
 200f8e0:	0021883a 	mov	r16,zero
 200f8e4:	800d883a 	mov	r6,r16
 200f8e8:	880f883a 	mov	r7,r17
 200f8ec:	dcc00315 	stw	r19,12(sp)
 200f8f0:	dc800215 	stw	r18,8(sp)
 200f8f4:	2827883a 	mov	r19,r5
 200f8f8:	2025883a 	mov	r18,r4
 200f8fc:	dfc00415 	stw	ra,16(sp)
 200f900:	2010d040 	call	2010d04 <__gedf2>
 200f904:	000d883a 	mov	r6,zero
 200f908:	880f883a 	mov	r7,r17
 200f90c:	980b883a 	mov	r5,r19
 200f910:	9009883a 	mov	r4,r18
 200f914:	10000d16 	blt	r2,zero,200f94c <__fixunsdfsi+0x7c>
 200f918:	2010a780 	call	2010a78 <__subdf3>
 200f91c:	180b883a 	mov	r5,r3
 200f920:	1009883a 	mov	r4,r2
 200f924:	2010f940 	call	2010f94 <__fixdfsi>
 200f928:	00e00034 	movhi	r3,32768
 200f92c:	10c5883a 	add	r2,r2,r3
 200f930:	dfc00417 	ldw	ra,16(sp)
 200f934:	dcc00317 	ldw	r19,12(sp)
 200f938:	dc800217 	ldw	r18,8(sp)
 200f93c:	dc400117 	ldw	r17,4(sp)
 200f940:	dc000017 	ldw	r16,0(sp)
 200f944:	dec00504 	addi	sp,sp,20
 200f948:	f800283a 	ret
 200f94c:	980b883a 	mov	r5,r19
 200f950:	9009883a 	mov	r4,r18
 200f954:	2010f940 	call	2010f94 <__fixdfsi>
 200f958:	dfc00417 	ldw	ra,16(sp)
 200f95c:	dcc00317 	ldw	r19,12(sp)
 200f960:	dc800217 	ldw	r18,8(sp)
 200f964:	dc400117 	ldw	r17,4(sp)
 200f968:	dc000017 	ldw	r16,0(sp)
 200f96c:	dec00504 	addi	sp,sp,20
 200f970:	f800283a 	ret

0200f974 <__udivdi3>:
 200f974:	defff004 	addi	sp,sp,-64
 200f978:	2005883a 	mov	r2,r4
 200f97c:	3011883a 	mov	r8,r6
 200f980:	df000e15 	stw	fp,56(sp)
 200f984:	dd000a15 	stw	r20,40(sp)
 200f988:	dc000615 	stw	r16,24(sp)
 200f98c:	dfc00f15 	stw	ra,60(sp)
 200f990:	ddc00d15 	stw	r23,52(sp)
 200f994:	dd800c15 	stw	r22,48(sp)
 200f998:	dd400b15 	stw	r21,44(sp)
 200f99c:	dcc00915 	stw	r19,36(sp)
 200f9a0:	dc800815 	stw	r18,32(sp)
 200f9a4:	dc400715 	stw	r17,28(sp)
 200f9a8:	4021883a 	mov	r16,r8
 200f9ac:	1039883a 	mov	fp,r2
 200f9b0:	2829883a 	mov	r20,r5
 200f9b4:	38003b1e 	bne	r7,zero,200faa4 <__udivdi3+0x130>
 200f9b8:	2a005c36 	bltu	r5,r8,200fb2c <__udivdi3+0x1b8>
 200f9bc:	4000a626 	beq	r8,zero,200fc58 <__udivdi3+0x2e4>
 200f9c0:	00bfffd4 	movui	r2,65535
 200f9c4:	14009e36 	bltu	r2,r16,200fc40 <__udivdi3+0x2cc>
 200f9c8:	00803fc4 	movi	r2,255
 200f9cc:	14013d36 	bltu	r2,r16,200fec4 <__udivdi3+0x550>
 200f9d0:	000b883a 	mov	r5,zero
 200f9d4:	0005883a 	mov	r2,zero
 200f9d8:	8084d83a 	srl	r2,r16,r2
 200f9dc:	01008074 	movhi	r4,513
 200f9e0:	21166f04 	addi	r4,r4,22972
 200f9e4:	01800804 	movi	r6,32
 200f9e8:	1105883a 	add	r2,r2,r4
 200f9ec:	10c00003 	ldbu	r3,0(r2)
 200f9f0:	28c7883a 	add	r3,r5,r3
 200f9f4:	30edc83a 	sub	r22,r6,r3
 200f9f8:	b000ee1e 	bne	r22,zero,200fdb4 <__udivdi3+0x440>
 200f9fc:	802ad43a 	srli	r21,r16,16
 200fa00:	00800044 	movi	r2,1
 200fa04:	a423c83a 	sub	r17,r20,r16
 200fa08:	85ffffcc 	andi	r23,r16,65535
 200fa0c:	d8800315 	stw	r2,12(sp)
 200fa10:	8809883a 	mov	r4,r17
 200fa14:	a80b883a 	mov	r5,r21
 200fa18:	2002fcc0 	call	2002fcc <__udivsi3>
 200fa1c:	8809883a 	mov	r4,r17
 200fa20:	a80b883a 	mov	r5,r21
 200fa24:	102d883a 	mov	r22,r2
 200fa28:	2002fd40 	call	2002fd4 <__umodsi3>
 200fa2c:	1004943a 	slli	r2,r2,16
 200fa30:	e006d43a 	srli	r3,fp,16
 200fa34:	bda3383a 	mul	r17,r23,r22
 200fa38:	10c4b03a 	or	r2,r2,r3
 200fa3c:	1440042e 	bgeu	r2,r17,200fa50 <__udivdi3+0xdc>
 200fa40:	1405883a 	add	r2,r2,r16
 200fa44:	b5bfffc4 	addi	r22,r22,-1
 200fa48:	14000136 	bltu	r2,r16,200fa50 <__udivdi3+0xdc>
 200fa4c:	14413d36 	bltu	r2,r17,200ff44 <__udivdi3+0x5d0>
 200fa50:	1463c83a 	sub	r17,r2,r17
 200fa54:	8809883a 	mov	r4,r17
 200fa58:	a80b883a 	mov	r5,r21
 200fa5c:	2002fcc0 	call	2002fcc <__udivsi3>
 200fa60:	8809883a 	mov	r4,r17
 200fa64:	a80b883a 	mov	r5,r21
 200fa68:	1029883a 	mov	r20,r2
 200fa6c:	2002fd40 	call	2002fd4 <__umodsi3>
 200fa70:	1004943a 	slli	r2,r2,16
 200fa74:	bd09383a 	mul	r4,r23,r20
 200fa78:	e0ffffcc 	andi	r3,fp,65535
 200fa7c:	10c4b03a 	or	r2,r2,r3
 200fa80:	1100042e 	bgeu	r2,r4,200fa94 <__udivdi3+0x120>
 200fa84:	8085883a 	add	r2,r16,r2
 200fa88:	a53fffc4 	addi	r20,r20,-1
 200fa8c:	14000136 	bltu	r2,r16,200fa94 <__udivdi3+0x120>
 200fa90:	11012036 	bltu	r2,r4,200ff14 <__udivdi3+0x5a0>
 200fa94:	b004943a 	slli	r2,r22,16
 200fa98:	d9000317 	ldw	r4,12(sp)
 200fa9c:	a084b03a 	or	r2,r20,r2
 200faa0:	00001506 	br	200faf8 <__udivdi3+0x184>
 200faa4:	380d883a 	mov	r6,r7
 200faa8:	29c06236 	bltu	r5,r7,200fc34 <__udivdi3+0x2c0>
 200faac:	00bfffd4 	movui	r2,65535
 200fab0:	11c05a36 	bltu	r2,r7,200fc1c <__udivdi3+0x2a8>
 200fab4:	00803fc4 	movi	r2,255
 200fab8:	11c0fc36 	bltu	r2,r7,200feac <__udivdi3+0x538>
 200fabc:	000b883a 	mov	r5,zero
 200fac0:	0005883a 	mov	r2,zero
 200fac4:	3084d83a 	srl	r2,r6,r2
 200fac8:	01008074 	movhi	r4,513
 200facc:	21166f04 	addi	r4,r4,22972
 200fad0:	01c00804 	movi	r7,32
 200fad4:	1105883a 	add	r2,r2,r4
 200fad8:	10c00003 	ldbu	r3,0(r2)
 200fadc:	28c7883a 	add	r3,r5,r3
 200fae0:	38efc83a 	sub	r23,r7,r3
 200fae4:	b800691e 	bne	r23,zero,200fc8c <__udivdi3+0x318>
 200fae8:	35000136 	bltu	r6,r20,200faf0 <__udivdi3+0x17c>
 200faec:	e4005136 	bltu	fp,r16,200fc34 <__udivdi3+0x2c0>
 200faf0:	00800044 	movi	r2,1
 200faf4:	0009883a 	mov	r4,zero
 200faf8:	2007883a 	mov	r3,r4
 200fafc:	dfc00f17 	ldw	ra,60(sp)
 200fb00:	df000e17 	ldw	fp,56(sp)
 200fb04:	ddc00d17 	ldw	r23,52(sp)
 200fb08:	dd800c17 	ldw	r22,48(sp)
 200fb0c:	dd400b17 	ldw	r21,44(sp)
 200fb10:	dd000a17 	ldw	r20,40(sp)
 200fb14:	dcc00917 	ldw	r19,36(sp)
 200fb18:	dc800817 	ldw	r18,32(sp)
 200fb1c:	dc400717 	ldw	r17,28(sp)
 200fb20:	dc000617 	ldw	r16,24(sp)
 200fb24:	dec01004 	addi	sp,sp,64
 200fb28:	f800283a 	ret
 200fb2c:	00bfffd4 	movui	r2,65535
 200fb30:	12005036 	bltu	r2,r8,200fc74 <__udivdi3+0x300>
 200fb34:	00803fc4 	movi	r2,255
 200fb38:	1200e836 	bltu	r2,r8,200fedc <__udivdi3+0x568>
 200fb3c:	000b883a 	mov	r5,zero
 200fb40:	0005883a 	mov	r2,zero
 200fb44:	8084d83a 	srl	r2,r16,r2
 200fb48:	01008074 	movhi	r4,513
 200fb4c:	21166f04 	addi	r4,r4,22972
 200fb50:	01800804 	movi	r6,32
 200fb54:	1105883a 	add	r2,r2,r4
 200fb58:	10c00003 	ldbu	r3,0(r2)
 200fb5c:	28c7883a 	add	r3,r5,r3
 200fb60:	30cbc83a 	sub	r5,r6,r3
 200fb64:	28000626 	beq	r5,zero,200fb80 <__udivdi3+0x20c>
 200fb68:	3145c83a 	sub	r2,r6,r5
 200fb6c:	e084d83a 	srl	r2,fp,r2
 200fb70:	a146983a 	sll	r3,r20,r5
 200fb74:	e178983a 	sll	fp,fp,r5
 200fb78:	8160983a 	sll	r16,r16,r5
 200fb7c:	18a8b03a 	or	r20,r3,r2
 200fb80:	802ad43a 	srli	r21,r16,16
 200fb84:	a009883a 	mov	r4,r20
 200fb88:	85ffffcc 	andi	r23,r16,65535
 200fb8c:	a80b883a 	mov	r5,r21
 200fb90:	2002fcc0 	call	2002fcc <__udivsi3>
 200fb94:	a009883a 	mov	r4,r20
 200fb98:	a80b883a 	mov	r5,r21
 200fb9c:	102d883a 	mov	r22,r2
 200fba0:	2002fd40 	call	2002fd4 <__umodsi3>
 200fba4:	1004943a 	slli	r2,r2,16
 200fba8:	e006d43a 	srli	r3,fp,16
 200fbac:	bda3383a 	mul	r17,r23,r22
 200fbb0:	10c4b03a 	or	r2,r2,r3
 200fbb4:	1440042e 	bgeu	r2,r17,200fbc8 <__udivdi3+0x254>
 200fbb8:	1405883a 	add	r2,r2,r16
 200fbbc:	b5bfffc4 	addi	r22,r22,-1
 200fbc0:	14000136 	bltu	r2,r16,200fbc8 <__udivdi3+0x254>
 200fbc4:	1440d536 	bltu	r2,r17,200ff1c <__udivdi3+0x5a8>
 200fbc8:	1463c83a 	sub	r17,r2,r17
 200fbcc:	8809883a 	mov	r4,r17
 200fbd0:	a80b883a 	mov	r5,r21
 200fbd4:	2002fcc0 	call	2002fcc <__udivsi3>
 200fbd8:	8809883a 	mov	r4,r17
 200fbdc:	a80b883a 	mov	r5,r21
 200fbe0:	1029883a 	mov	r20,r2
 200fbe4:	2002fd40 	call	2002fd4 <__umodsi3>
 200fbe8:	1004943a 	slli	r2,r2,16
 200fbec:	bd09383a 	mul	r4,r23,r20
 200fbf0:	e0ffffcc 	andi	r3,fp,65535
 200fbf4:	10c4b03a 	or	r2,r2,r3
 200fbf8:	1100042e 	bgeu	r2,r4,200fc0c <__udivdi3+0x298>
 200fbfc:	8085883a 	add	r2,r16,r2
 200fc00:	a53fffc4 	addi	r20,r20,-1
 200fc04:	14000136 	bltu	r2,r16,200fc0c <__udivdi3+0x298>
 200fc08:	1100c736 	bltu	r2,r4,200ff28 <__udivdi3+0x5b4>
 200fc0c:	b004943a 	slli	r2,r22,16
 200fc10:	0009883a 	mov	r4,zero
 200fc14:	a084b03a 	or	r2,r20,r2
 200fc18:	003fb706 	br	200faf8 <__udivdi3+0x184>
 200fc1c:	00804034 	movhi	r2,256
 200fc20:	10bfffc4 	addi	r2,r2,-1
 200fc24:	11c0a436 	bltu	r2,r7,200feb8 <__udivdi3+0x544>
 200fc28:	01400404 	movi	r5,16
 200fc2c:	2805883a 	mov	r2,r5
 200fc30:	003fa406 	br	200fac4 <__udivdi3+0x150>
 200fc34:	0005883a 	mov	r2,zero
 200fc38:	0009883a 	mov	r4,zero
 200fc3c:	003fae06 	br	200faf8 <__udivdi3+0x184>
 200fc40:	00804034 	movhi	r2,256
 200fc44:	10bfffc4 	addi	r2,r2,-1
 200fc48:	1400a136 	bltu	r2,r16,200fed0 <__udivdi3+0x55c>
 200fc4c:	01400404 	movi	r5,16
 200fc50:	2805883a 	mov	r2,r5
 200fc54:	003f6006 	br	200f9d8 <__udivdi3+0x64>
 200fc58:	01000044 	movi	r4,1
 200fc5c:	000b883a 	mov	r5,zero
 200fc60:	2002fcc0 	call	2002fcc <__udivsi3>
 200fc64:	1021883a 	mov	r16,r2
 200fc68:	00bfffd4 	movui	r2,65535
 200fc6c:	143ff436 	bltu	r2,r16,200fc40 <__udivdi3+0x2cc>
 200fc70:	003f5506 	br	200f9c8 <__udivdi3+0x54>
 200fc74:	00804034 	movhi	r2,256
 200fc78:	10bfffc4 	addi	r2,r2,-1
 200fc7c:	12009a36 	bltu	r2,r8,200fee8 <__udivdi3+0x574>
 200fc80:	01400404 	movi	r5,16
 200fc84:	2805883a 	mov	r2,r5
 200fc88:	003fae06 	br	200fb44 <__udivdi3+0x1d0>
 200fc8c:	3dc5c83a 	sub	r2,r7,r23
 200fc90:	35c8983a 	sll	r4,r6,r23
 200fc94:	8086d83a 	srl	r3,r16,r2
 200fc98:	a0a2d83a 	srl	r17,r20,r2
 200fc9c:	e084d83a 	srl	r2,fp,r2
 200fca0:	20eab03a 	or	r21,r4,r3
 200fca4:	a82cd43a 	srli	r22,r21,16
 200fca8:	a5c6983a 	sll	r3,r20,r23
 200fcac:	8809883a 	mov	r4,r17
 200fcb0:	b00b883a 	mov	r5,r22
 200fcb4:	1886b03a 	or	r3,r3,r2
 200fcb8:	d8c00215 	stw	r3,8(sp)
 200fcbc:	2002fcc0 	call	2002fcc <__udivsi3>
 200fcc0:	8809883a 	mov	r4,r17
 200fcc4:	b00b883a 	mov	r5,r22
 200fcc8:	1029883a 	mov	r20,r2
 200fccc:	2002fd40 	call	2002fd4 <__umodsi3>
 200fcd0:	a8ffffcc 	andi	r3,r21,65535
 200fcd4:	d8c00515 	stw	r3,20(sp)
 200fcd8:	d9000217 	ldw	r4,8(sp)
 200fcdc:	d9400517 	ldw	r5,20(sp)
 200fce0:	1004943a 	slli	r2,r2,16
 200fce4:	2006d43a 	srli	r3,r4,16
 200fce8:	85e0983a 	sll	r16,r16,r23
 200fcec:	2d23383a 	mul	r17,r5,r20
 200fcf0:	10c4b03a 	or	r2,r2,r3
 200fcf4:	dc000015 	stw	r16,0(sp)
 200fcf8:	1440032e 	bgeu	r2,r17,200fd08 <__udivdi3+0x394>
 200fcfc:	1545883a 	add	r2,r2,r21
 200fd00:	a53fffc4 	addi	r20,r20,-1
 200fd04:	15407f2e 	bgeu	r2,r21,200ff04 <__udivdi3+0x590>
 200fd08:	1463c83a 	sub	r17,r2,r17
 200fd0c:	8809883a 	mov	r4,r17
 200fd10:	b00b883a 	mov	r5,r22
 200fd14:	2002fcc0 	call	2002fcc <__udivsi3>
 200fd18:	8809883a 	mov	r4,r17
 200fd1c:	b00b883a 	mov	r5,r22
 200fd20:	1021883a 	mov	r16,r2
 200fd24:	2002fd40 	call	2002fd4 <__umodsi3>
 200fd28:	d8c00517 	ldw	r3,20(sp)
 200fd2c:	d9000217 	ldw	r4,8(sp)
 200fd30:	1004943a 	slli	r2,r2,16
 200fd34:	1c0f383a 	mul	r7,r3,r16
 200fd38:	20ffffcc 	andi	r3,r4,65535
 200fd3c:	10e2b03a 	or	r17,r2,r3
 200fd40:	89c0032e 	bgeu	r17,r7,200fd50 <__udivdi3+0x3dc>
 200fd44:	8d63883a 	add	r17,r17,r21
 200fd48:	843fffc4 	addi	r16,r16,-1
 200fd4c:	8d40692e 	bgeu	r17,r21,200fef4 <__udivdi3+0x580>
 200fd50:	a008943a 	slli	r4,r20,16
 200fd54:	d9400017 	ldw	r5,0(sp)
 200fd58:	89e3c83a 	sub	r17,r17,r7
 200fd5c:	8110b03a 	or	r8,r16,r4
 200fd60:	280cd43a 	srli	r6,r5,16
 200fd64:	28ffffcc 	andi	r3,r5,65535
 200fd68:	40bfffcc 	andi	r2,r8,65535
 200fd6c:	400ad43a 	srli	r5,r8,16
 200fd70:	10d3383a 	mul	r9,r2,r3
 200fd74:	1185383a 	mul	r2,r2,r6
 200fd78:	28c7383a 	mul	r3,r5,r3
 200fd7c:	4808d43a 	srli	r4,r9,16
 200fd80:	298b383a 	mul	r5,r5,r6
 200fd84:	10c5883a 	add	r2,r2,r3
 200fd88:	2089883a 	add	r4,r4,r2
 200fd8c:	20c0022e 	bgeu	r4,r3,200fd98 <__udivdi3+0x424>
 200fd90:	00800074 	movhi	r2,1
 200fd94:	288b883a 	add	r5,r5,r2
 200fd98:	2004d43a 	srli	r2,r4,16
 200fd9c:	288b883a 	add	r5,r5,r2
 200fda0:	89403f36 	bltu	r17,r5,200fea0 <__udivdi3+0x52c>
 200fda4:	89403926 	beq	r17,r5,200fe8c <__udivdi3+0x518>
 200fda8:	4005883a 	mov	r2,r8
 200fdac:	0009883a 	mov	r4,zero
 200fdb0:	003f5106 	br	200faf8 <__udivdi3+0x184>
 200fdb4:	85a0983a 	sll	r16,r16,r22
 200fdb8:	3585c83a 	sub	r2,r6,r22
 200fdbc:	a0a2d83a 	srl	r17,r20,r2
 200fdc0:	802ad43a 	srli	r21,r16,16
 200fdc4:	e084d83a 	srl	r2,fp,r2
 200fdc8:	a586983a 	sll	r3,r20,r22
 200fdcc:	8809883a 	mov	r4,r17
 200fdd0:	a80b883a 	mov	r5,r21
 200fdd4:	1886b03a 	or	r3,r3,r2
 200fdd8:	d8c00115 	stw	r3,4(sp)
 200fddc:	2002fcc0 	call	2002fcc <__udivsi3>
 200fde0:	8809883a 	mov	r4,r17
 200fde4:	a80b883a 	mov	r5,r21
 200fde8:	d8800415 	stw	r2,16(sp)
 200fdec:	2002fd40 	call	2002fd4 <__umodsi3>
 200fdf0:	d9000117 	ldw	r4,4(sp)
 200fdf4:	d9400417 	ldw	r5,16(sp)
 200fdf8:	1004943a 	slli	r2,r2,16
 200fdfc:	85ffffcc 	andi	r23,r16,65535
 200fe00:	2006d43a 	srli	r3,r4,16
 200fe04:	b963383a 	mul	r17,r23,r5
 200fe08:	10c4b03a 	or	r2,r2,r3
 200fe0c:	1440042e 	bgeu	r2,r17,200fe20 <__udivdi3+0x4ac>
 200fe10:	297fffc4 	addi	r5,r5,-1
 200fe14:	1405883a 	add	r2,r2,r16
 200fe18:	d9400415 	stw	r5,16(sp)
 200fe1c:	1400442e 	bgeu	r2,r16,200ff30 <__udivdi3+0x5bc>
 200fe20:	1463c83a 	sub	r17,r2,r17
 200fe24:	8809883a 	mov	r4,r17
 200fe28:	a80b883a 	mov	r5,r21
 200fe2c:	2002fcc0 	call	2002fcc <__udivsi3>
 200fe30:	8809883a 	mov	r4,r17
 200fe34:	a80b883a 	mov	r5,r21
 200fe38:	1029883a 	mov	r20,r2
 200fe3c:	2002fd40 	call	2002fd4 <__umodsi3>
 200fe40:	d9400117 	ldw	r5,4(sp)
 200fe44:	1004943a 	slli	r2,r2,16
 200fe48:	bd09383a 	mul	r4,r23,r20
 200fe4c:	28ffffcc 	andi	r3,r5,65535
 200fe50:	10c6b03a 	or	r3,r2,r3
 200fe54:	1900062e 	bgeu	r3,r4,200fe70 <__udivdi3+0x4fc>
 200fe58:	1c07883a 	add	r3,r3,r16
 200fe5c:	a53fffc4 	addi	r20,r20,-1
 200fe60:	1c000336 	bltu	r3,r16,200fe70 <__udivdi3+0x4fc>
 200fe64:	1900022e 	bgeu	r3,r4,200fe70 <__udivdi3+0x4fc>
 200fe68:	a53fffc4 	addi	r20,r20,-1
 200fe6c:	1c07883a 	add	r3,r3,r16
 200fe70:	d9400417 	ldw	r5,16(sp)
 200fe74:	e5b8983a 	sll	fp,fp,r22
 200fe78:	1923c83a 	sub	r17,r3,r4
 200fe7c:	2804943a 	slli	r2,r5,16
 200fe80:	a0a8b03a 	or	r20,r20,r2
 200fe84:	dd000315 	stw	r20,12(sp)
 200fe88:	003ee106 	br	200fa10 <__udivdi3+0x9c>
 200fe8c:	2004943a 	slli	r2,r4,16
 200fe90:	e5c8983a 	sll	r4,fp,r23
 200fe94:	48ffffcc 	andi	r3,r9,65535
 200fe98:	10c5883a 	add	r2,r2,r3
 200fe9c:	20bfc22e 	bgeu	r4,r2,200fda8 <__udivdi3+0x434>
 200fea0:	40bfffc4 	addi	r2,r8,-1
 200fea4:	0009883a 	mov	r4,zero
 200fea8:	003f1306 	br	200faf8 <__udivdi3+0x184>
 200feac:	01400204 	movi	r5,8
 200feb0:	2805883a 	mov	r2,r5
 200feb4:	003f0306 	br	200fac4 <__udivdi3+0x150>
 200feb8:	01400604 	movi	r5,24
 200febc:	2805883a 	mov	r2,r5
 200fec0:	003f0006 	br	200fac4 <__udivdi3+0x150>
 200fec4:	01400204 	movi	r5,8
 200fec8:	2805883a 	mov	r2,r5
 200fecc:	003ec206 	br	200f9d8 <__udivdi3+0x64>
 200fed0:	01400604 	movi	r5,24
 200fed4:	2805883a 	mov	r2,r5
 200fed8:	003ebf06 	br	200f9d8 <__udivdi3+0x64>
 200fedc:	01400204 	movi	r5,8
 200fee0:	2805883a 	mov	r2,r5
 200fee4:	003f1706 	br	200fb44 <__udivdi3+0x1d0>
 200fee8:	01400604 	movi	r5,24
 200feec:	2805883a 	mov	r2,r5
 200fef0:	003f1406 	br	200fb44 <__udivdi3+0x1d0>
 200fef4:	89ff962e 	bgeu	r17,r7,200fd50 <__udivdi3+0x3dc>
 200fef8:	8d63883a 	add	r17,r17,r21
 200fefc:	843fffc4 	addi	r16,r16,-1
 200ff00:	003f9306 	br	200fd50 <__udivdi3+0x3dc>
 200ff04:	147f802e 	bgeu	r2,r17,200fd08 <__udivdi3+0x394>
 200ff08:	a53fffc4 	addi	r20,r20,-1
 200ff0c:	1545883a 	add	r2,r2,r21
 200ff10:	003f7d06 	br	200fd08 <__udivdi3+0x394>
 200ff14:	a53fffc4 	addi	r20,r20,-1
 200ff18:	003ede06 	br	200fa94 <__udivdi3+0x120>
 200ff1c:	b5bfffc4 	addi	r22,r22,-1
 200ff20:	1405883a 	add	r2,r2,r16
 200ff24:	003f2806 	br	200fbc8 <__udivdi3+0x254>
 200ff28:	a53fffc4 	addi	r20,r20,-1
 200ff2c:	003f3706 	br	200fc0c <__udivdi3+0x298>
 200ff30:	147fbb2e 	bgeu	r2,r17,200fe20 <__udivdi3+0x4ac>
 200ff34:	297fffc4 	addi	r5,r5,-1
 200ff38:	1405883a 	add	r2,r2,r16
 200ff3c:	d9400415 	stw	r5,16(sp)
 200ff40:	003fb706 	br	200fe20 <__udivdi3+0x4ac>
 200ff44:	b5bfffc4 	addi	r22,r22,-1
 200ff48:	1405883a 	add	r2,r2,r16
 200ff4c:	003ec006 	br	200fa50 <__udivdi3+0xdc>

0200ff50 <__umoddi3>:
 200ff50:	defff104 	addi	sp,sp,-60
 200ff54:	dd800b15 	stw	r22,44(sp)
 200ff58:	dd000915 	stw	r20,36(sp)
 200ff5c:	dc000515 	stw	r16,20(sp)
 200ff60:	dfc00e15 	stw	ra,56(sp)
 200ff64:	df000d15 	stw	fp,52(sp)
 200ff68:	ddc00c15 	stw	r23,48(sp)
 200ff6c:	dd400a15 	stw	r21,40(sp)
 200ff70:	dcc00815 	stw	r19,32(sp)
 200ff74:	dc800715 	stw	r18,28(sp)
 200ff78:	dc400615 	stw	r17,24(sp)
 200ff7c:	3021883a 	mov	r16,r6
 200ff80:	202d883a 	mov	r22,r4
 200ff84:	2829883a 	mov	r20,r5
 200ff88:	38002b1e 	bne	r7,zero,2010038 <__umoddi3+0xe8>
 200ff8c:	29805036 	bltu	r5,r6,20100d0 <__umoddi3+0x180>
 200ff90:	30008a26 	beq	r6,zero,20101bc <__umoddi3+0x26c>
 200ff94:	00bfffd4 	movui	r2,65535
 200ff98:	14008236 	bltu	r2,r16,20101a4 <__umoddi3+0x254>
 200ff9c:	00803fc4 	movi	r2,255
 200ffa0:	14013636 	bltu	r2,r16,201047c <__umoddi3+0x52c>
 200ffa4:	000b883a 	mov	r5,zero
 200ffa8:	0005883a 	mov	r2,zero
 200ffac:	8084d83a 	srl	r2,r16,r2
 200ffb0:	01008074 	movhi	r4,513
 200ffb4:	21166f04 	addi	r4,r4,22972
 200ffb8:	01800804 	movi	r6,32
 200ffbc:	1105883a 	add	r2,r2,r4
 200ffc0:	10c00003 	ldbu	r3,0(r2)
 200ffc4:	28c7883a 	add	r3,r5,r3
 200ffc8:	30efc83a 	sub	r23,r6,r3
 200ffcc:	b800941e 	bne	r23,zero,2010220 <__umoddi3+0x2d0>
 200ffd0:	802ad43a 	srli	r21,r16,16
 200ffd4:	a423c83a 	sub	r17,r20,r16
 200ffd8:	0039883a 	mov	fp,zero
 200ffdc:	853fffcc 	andi	r20,r16,65535
 200ffe0:	8809883a 	mov	r4,r17
 200ffe4:	a80b883a 	mov	r5,r21
 200ffe8:	2002fcc0 	call	2002fcc <__udivsi3>
 200ffec:	8809883a 	mov	r4,r17
 200fff0:	a80b883a 	mov	r5,r21
 200fff4:	a0a3383a 	mul	r17,r20,r2
 200fff8:	2002fd40 	call	2002fd4 <__umodsi3>
 200fffc:	1004943a 	slli	r2,r2,16
 2010000:	b006d43a 	srli	r3,r22,16
 2010004:	10c4b03a 	or	r2,r2,r3
 2010008:	1440032e 	bgeu	r2,r17,2010018 <__umoddi3+0xc8>
 201000c:	1405883a 	add	r2,r2,r16
 2010010:	14000136 	bltu	r2,r16,2010018 <__umoddi3+0xc8>
 2010014:	14413536 	bltu	r2,r17,20104ec <__umoddi3+0x59c>
 2010018:	1463c83a 	sub	r17,r2,r17
 201001c:	8809883a 	mov	r4,r17
 2010020:	a80b883a 	mov	r5,r21
 2010024:	2002fcc0 	call	2002fcc <__udivsi3>
 2010028:	8809883a 	mov	r4,r17
 201002c:	a0a3383a 	mul	r17,r20,r2
 2010030:	a80b883a 	mov	r5,r21
 2010034:	00004d06 	br	201016c <__umoddi3+0x21c>
 2010038:	380d883a 	mov	r6,r7
 201003c:	29c0102e 	bgeu	r5,r7,2010080 <__umoddi3+0x130>
 2010040:	2011883a 	mov	r8,r4
 2010044:	2813883a 	mov	r9,r5
 2010048:	4005883a 	mov	r2,r8
 201004c:	4807883a 	mov	r3,r9
 2010050:	dfc00e17 	ldw	ra,56(sp)
 2010054:	df000d17 	ldw	fp,52(sp)
 2010058:	ddc00c17 	ldw	r23,48(sp)
 201005c:	dd800b17 	ldw	r22,44(sp)
 2010060:	dd400a17 	ldw	r21,40(sp)
 2010064:	dd000917 	ldw	r20,36(sp)
 2010068:	dcc00817 	ldw	r19,32(sp)
 201006c:	dc800717 	ldw	r18,28(sp)
 2010070:	dc400617 	ldw	r17,24(sp)
 2010074:	dc000517 	ldw	r16,20(sp)
 2010078:	dec00f04 	addi	sp,sp,60
 201007c:	f800283a 	ret
 2010080:	00bfffd4 	movui	r2,65535
 2010084:	11c05a36 	bltu	r2,r7,20101f0 <__umoddi3+0x2a0>
 2010088:	00803fc4 	movi	r2,255
 201008c:	11c0fe36 	bltu	r2,r7,2010488 <__umoddi3+0x538>
 2010090:	000b883a 	mov	r5,zero
 2010094:	0005883a 	mov	r2,zero
 2010098:	3084d83a 	srl	r2,r6,r2
 201009c:	01008074 	movhi	r4,513
 20100a0:	21166f04 	addi	r4,r4,22972
 20100a4:	01c00804 	movi	r7,32
 20100a8:	1105883a 	add	r2,r2,r4
 20100ac:	10c00003 	ldbu	r3,0(r2)
 20100b0:	28c7883a 	add	r3,r5,r3
 20100b4:	38ebc83a 	sub	r21,r7,r3
 20100b8:	a800851e 	bne	r21,zero,20102d0 <__umoddi3+0x380>
 20100bc:	35005236 	bltu	r6,r20,2010208 <__umoddi3+0x2b8>
 20100c0:	b400512e 	bgeu	r22,r16,2010208 <__umoddi3+0x2b8>
 20100c4:	b011883a 	mov	r8,r22
 20100c8:	a013883a 	mov	r9,r20
 20100cc:	003fde06 	br	2010048 <__umoddi3+0xf8>
 20100d0:	00bfffd4 	movui	r2,65535
 20100d4:	11804036 	bltu	r2,r6,20101d8 <__umoddi3+0x288>
 20100d8:	00803fc4 	movi	r2,255
 20100dc:	1180ed36 	bltu	r2,r6,2010494 <__umoddi3+0x544>
 20100e0:	000b883a 	mov	r5,zero
 20100e4:	0005883a 	mov	r2,zero
 20100e8:	8084d83a 	srl	r2,r16,r2
 20100ec:	01008074 	movhi	r4,513
 20100f0:	21166f04 	addi	r4,r4,22972
 20100f4:	01800804 	movi	r6,32
 20100f8:	1105883a 	add	r2,r2,r4
 20100fc:	10c00003 	ldbu	r3,0(r2)
 2010100:	28c7883a 	add	r3,r5,r3
 2010104:	30c7c83a 	sub	r3,r6,r3
 2010108:	1800bf1e 	bne	r3,zero,2010408 <__umoddi3+0x4b8>
 201010c:	0039883a 	mov	fp,zero
 2010110:	802ad43a 	srli	r21,r16,16
 2010114:	a009883a 	mov	r4,r20
 2010118:	85ffffcc 	andi	r23,r16,65535
 201011c:	a80b883a 	mov	r5,r21
 2010120:	2002fcc0 	call	2002fcc <__udivsi3>
 2010124:	a009883a 	mov	r4,r20
 2010128:	a80b883a 	mov	r5,r21
 201012c:	b8a3383a 	mul	r17,r23,r2
 2010130:	2002fd40 	call	2002fd4 <__umodsi3>
 2010134:	1004943a 	slli	r2,r2,16
 2010138:	b006d43a 	srli	r3,r22,16
 201013c:	10c4b03a 	or	r2,r2,r3
 2010140:	1440032e 	bgeu	r2,r17,2010150 <__umoddi3+0x200>
 2010144:	1405883a 	add	r2,r2,r16
 2010148:	14000136 	bltu	r2,r16,2010150 <__umoddi3+0x200>
 201014c:	1440e536 	bltu	r2,r17,20104e4 <__umoddi3+0x594>
 2010150:	1463c83a 	sub	r17,r2,r17
 2010154:	8809883a 	mov	r4,r17
 2010158:	a80b883a 	mov	r5,r21
 201015c:	2002fcc0 	call	2002fcc <__udivsi3>
 2010160:	8809883a 	mov	r4,r17
 2010164:	b8a3383a 	mul	r17,r23,r2
 2010168:	a80b883a 	mov	r5,r21
 201016c:	2002fd40 	call	2002fd4 <__umodsi3>
 2010170:	1004943a 	slli	r2,r2,16
 2010174:	b0ffffcc 	andi	r3,r22,65535
 2010178:	10c4b03a 	or	r2,r2,r3
 201017c:	1440042e 	bgeu	r2,r17,2010190 <__umoddi3+0x240>
 2010180:	1405883a 	add	r2,r2,r16
 2010184:	14000236 	bltu	r2,r16,2010190 <__umoddi3+0x240>
 2010188:	1440012e 	bgeu	r2,r17,2010190 <__umoddi3+0x240>
 201018c:	1405883a 	add	r2,r2,r16
 2010190:	1445c83a 	sub	r2,r2,r17
 2010194:	1724d83a 	srl	r18,r2,fp
 2010198:	0013883a 	mov	r9,zero
 201019c:	9011883a 	mov	r8,r18
 20101a0:	003fa906 	br	2010048 <__umoddi3+0xf8>
 20101a4:	00804034 	movhi	r2,256
 20101a8:	10bfffc4 	addi	r2,r2,-1
 20101ac:	1400b036 	bltu	r2,r16,2010470 <__umoddi3+0x520>
 20101b0:	01400404 	movi	r5,16
 20101b4:	2805883a 	mov	r2,r5
 20101b8:	003f7c06 	br	200ffac <__umoddi3+0x5c>
 20101bc:	01000044 	movi	r4,1
 20101c0:	000b883a 	mov	r5,zero
 20101c4:	2002fcc0 	call	2002fcc <__udivsi3>
 20101c8:	1021883a 	mov	r16,r2
 20101cc:	00bfffd4 	movui	r2,65535
 20101d0:	143ff436 	bltu	r2,r16,20101a4 <__umoddi3+0x254>
 20101d4:	003f7106 	br	200ff9c <__umoddi3+0x4c>
 20101d8:	00804034 	movhi	r2,256
 20101dc:	10bfffc4 	addi	r2,r2,-1
 20101e0:	1180af36 	bltu	r2,r6,20104a0 <__umoddi3+0x550>
 20101e4:	01400404 	movi	r5,16
 20101e8:	2805883a 	mov	r2,r5
 20101ec:	003fbe06 	br	20100e8 <__umoddi3+0x198>
 20101f0:	00804034 	movhi	r2,256
 20101f4:	10bfffc4 	addi	r2,r2,-1
 20101f8:	11c0ac36 	bltu	r2,r7,20104ac <__umoddi3+0x55c>
 20101fc:	01400404 	movi	r5,16
 2010200:	2805883a 	mov	r2,r5
 2010204:	003fa406 	br	2010098 <__umoddi3+0x148>
 2010208:	b409c83a 	sub	r4,r22,r16
 201020c:	b105803a 	cmpltu	r2,r22,r4
 2010210:	a187c83a 	sub	r3,r20,r6
 2010214:	18a9c83a 	sub	r20,r3,r2
 2010218:	202d883a 	mov	r22,r4
 201021c:	003fa906 	br	20100c4 <__umoddi3+0x174>
 2010220:	85e0983a 	sll	r16,r16,r23
 2010224:	35c5c83a 	sub	r2,r6,r23
 2010228:	a0a2d83a 	srl	r17,r20,r2
 201022c:	802ad43a 	srli	r21,r16,16
 2010230:	b084d83a 	srl	r2,r22,r2
 2010234:	a5c6983a 	sll	r3,r20,r23
 2010238:	8809883a 	mov	r4,r17
 201023c:	a80b883a 	mov	r5,r21
 2010240:	1886b03a 	or	r3,r3,r2
 2010244:	d8c00115 	stw	r3,4(sp)
 2010248:	853fffcc 	andi	r20,r16,65535
 201024c:	2002fcc0 	call	2002fcc <__udivsi3>
 2010250:	8809883a 	mov	r4,r17
 2010254:	a80b883a 	mov	r5,r21
 2010258:	a0a3383a 	mul	r17,r20,r2
 201025c:	2002fd40 	call	2002fd4 <__umodsi3>
 2010260:	d9000117 	ldw	r4,4(sp)
 2010264:	1004943a 	slli	r2,r2,16
 2010268:	b839883a 	mov	fp,r23
 201026c:	2006d43a 	srli	r3,r4,16
 2010270:	10c4b03a 	or	r2,r2,r3
 2010274:	1440022e 	bgeu	r2,r17,2010280 <__umoddi3+0x330>
 2010278:	1405883a 	add	r2,r2,r16
 201027c:	1400962e 	bgeu	r2,r16,20104d8 <__umoddi3+0x588>
 2010280:	1463c83a 	sub	r17,r2,r17
 2010284:	8809883a 	mov	r4,r17
 2010288:	a80b883a 	mov	r5,r21
 201028c:	2002fcc0 	call	2002fcc <__udivsi3>
 2010290:	8809883a 	mov	r4,r17
 2010294:	a80b883a 	mov	r5,r21
 2010298:	a0a3383a 	mul	r17,r20,r2
 201029c:	2002fd40 	call	2002fd4 <__umodsi3>
 20102a0:	d9400117 	ldw	r5,4(sp)
 20102a4:	1004943a 	slli	r2,r2,16
 20102a8:	28ffffcc 	andi	r3,r5,65535
 20102ac:	10c4b03a 	or	r2,r2,r3
 20102b0:	1440042e 	bgeu	r2,r17,20102c4 <__umoddi3+0x374>
 20102b4:	1405883a 	add	r2,r2,r16
 20102b8:	14000236 	bltu	r2,r16,20102c4 <__umoddi3+0x374>
 20102bc:	1440012e 	bgeu	r2,r17,20102c4 <__umoddi3+0x374>
 20102c0:	1405883a 	add	r2,r2,r16
 20102c4:	b5ec983a 	sll	r22,r22,r23
 20102c8:	1463c83a 	sub	r17,r2,r17
 20102cc:	003f4406 	br	200ffe0 <__umoddi3+0x90>
 20102d0:	3d4fc83a 	sub	r7,r7,r21
 20102d4:	3546983a 	sll	r3,r6,r21
 20102d8:	81c4d83a 	srl	r2,r16,r7
 20102dc:	a1e2d83a 	srl	r17,r20,r7
 20102e0:	a54c983a 	sll	r6,r20,r21
 20102e4:	18aeb03a 	or	r23,r3,r2
 20102e8:	b828d43a 	srli	r20,r23,16
 20102ec:	b1c4d83a 	srl	r2,r22,r7
 20102f0:	8809883a 	mov	r4,r17
 20102f4:	a00b883a 	mov	r5,r20
 20102f8:	308cb03a 	or	r6,r6,r2
 20102fc:	d9c00315 	stw	r7,12(sp)
 2010300:	d9800215 	stw	r6,8(sp)
 2010304:	2002fcc0 	call	2002fcc <__udivsi3>
 2010308:	8809883a 	mov	r4,r17
 201030c:	a00b883a 	mov	r5,r20
 2010310:	1039883a 	mov	fp,r2
 2010314:	2002fd40 	call	2002fd4 <__umodsi3>
 2010318:	b8ffffcc 	andi	r3,r23,65535
 201031c:	d8c00415 	stw	r3,16(sp)
 2010320:	d9000217 	ldw	r4,8(sp)
 2010324:	d9400417 	ldw	r5,16(sp)
 2010328:	1004943a 	slli	r2,r2,16
 201032c:	2006d43a 	srli	r3,r4,16
 2010330:	8560983a 	sll	r16,r16,r21
 2010334:	2f23383a 	mul	r17,r5,fp
 2010338:	10c4b03a 	or	r2,r2,r3
 201033c:	dc000015 	stw	r16,0(sp)
 2010340:	b56c983a 	sll	r22,r22,r21
 2010344:	1440032e 	bgeu	r2,r17,2010354 <__umoddi3+0x404>
 2010348:	15c5883a 	add	r2,r2,r23
 201034c:	e73fffc4 	addi	fp,fp,-1
 2010350:	15c05d2e 	bgeu	r2,r23,20104c8 <__umoddi3+0x578>
 2010354:	1463c83a 	sub	r17,r2,r17
 2010358:	8809883a 	mov	r4,r17
 201035c:	a00b883a 	mov	r5,r20
 2010360:	2002fcc0 	call	2002fcc <__udivsi3>
 2010364:	8809883a 	mov	r4,r17
 2010368:	a00b883a 	mov	r5,r20
 201036c:	1021883a 	mov	r16,r2
 2010370:	2002fd40 	call	2002fd4 <__umodsi3>
 2010374:	d8c00417 	ldw	r3,16(sp)
 2010378:	d9000217 	ldw	r4,8(sp)
 201037c:	1004943a 	slli	r2,r2,16
 2010380:	1c23383a 	mul	r17,r3,r16
 2010384:	20ffffcc 	andi	r3,r4,65535
 2010388:	10ceb03a 	or	r7,r2,r3
 201038c:	3c40032e 	bgeu	r7,r17,201039c <__umoddi3+0x44c>
 2010390:	3dcf883a 	add	r7,r7,r23
 2010394:	843fffc4 	addi	r16,r16,-1
 2010398:	3dc0472e 	bgeu	r7,r23,20104b8 <__umoddi3+0x568>
 201039c:	e004943a 	slli	r2,fp,16
 20103a0:	d9400017 	ldw	r5,0(sp)
 20103a4:	3c4fc83a 	sub	r7,r7,r17
 20103a8:	8084b03a 	or	r2,r16,r2
 20103ac:	28ffffcc 	andi	r3,r5,65535
 20103b0:	280cd43a 	srli	r6,r5,16
 20103b4:	100ad43a 	srli	r5,r2,16
 20103b8:	10bfffcc 	andi	r2,r2,65535
 20103bc:	10d1383a 	mul	r8,r2,r3
 20103c0:	28c7383a 	mul	r3,r5,r3
 20103c4:	1185383a 	mul	r2,r2,r6
 20103c8:	4008d43a 	srli	r4,r8,16
 20103cc:	298b383a 	mul	r5,r5,r6
 20103d0:	10c5883a 	add	r2,r2,r3
 20103d4:	2089883a 	add	r4,r4,r2
 20103d8:	20c0022e 	bgeu	r4,r3,20103e4 <__umoddi3+0x494>
 20103dc:	00800074 	movhi	r2,1
 20103e0:	288b883a 	add	r5,r5,r2
 20103e4:	2004d43a 	srli	r2,r4,16
 20103e8:	2008943a 	slli	r4,r4,16
 20103ec:	40ffffcc 	andi	r3,r8,65535
 20103f0:	288b883a 	add	r5,r5,r2
 20103f4:	20c9883a 	add	r4,r4,r3
 20103f8:	39400b36 	bltu	r7,r5,2010428 <__umoddi3+0x4d8>
 20103fc:	39403d26 	beq	r7,r5,20104f4 <__umoddi3+0x5a4>
 2010400:	394bc83a 	sub	r5,r7,r5
 2010404:	00000f06 	br	2010444 <__umoddi3+0x4f4>
 2010408:	30c5c83a 	sub	r2,r6,r3
 201040c:	1839883a 	mov	fp,r3
 2010410:	b084d83a 	srl	r2,r22,r2
 2010414:	a0c6983a 	sll	r3,r20,r3
 2010418:	8720983a 	sll	r16,r16,fp
 201041c:	b72c983a 	sll	r22,r22,fp
 2010420:	18a8b03a 	or	r20,r3,r2
 2010424:	003f3a06 	br	2010110 <__umoddi3+0x1c0>
 2010428:	d8c00017 	ldw	r3,0(sp)
 201042c:	20c5c83a 	sub	r2,r4,r3
 2010430:	2089803a 	cmpltu	r4,r4,r2
 2010434:	2dc7c83a 	sub	r3,r5,r23
 2010438:	1907c83a 	sub	r3,r3,r4
 201043c:	38cbc83a 	sub	r5,r7,r3
 2010440:	1009883a 	mov	r4,r2
 2010444:	b105c83a 	sub	r2,r22,r4
 2010448:	b087803a 	cmpltu	r3,r22,r2
 201044c:	28c7c83a 	sub	r3,r5,r3
 2010450:	d9400317 	ldw	r5,12(sp)
 2010454:	1544d83a 	srl	r2,r2,r21
 2010458:	1948983a 	sll	r4,r3,r5
 201045c:	1d46d83a 	srl	r3,r3,r21
 2010460:	20a4b03a 	or	r18,r4,r2
 2010464:	9011883a 	mov	r8,r18
 2010468:	1813883a 	mov	r9,r3
 201046c:	003ef606 	br	2010048 <__umoddi3+0xf8>
 2010470:	01400604 	movi	r5,24
 2010474:	2805883a 	mov	r2,r5
 2010478:	003ecc06 	br	200ffac <__umoddi3+0x5c>
 201047c:	01400204 	movi	r5,8
 2010480:	2805883a 	mov	r2,r5
 2010484:	003ec906 	br	200ffac <__umoddi3+0x5c>
 2010488:	01400204 	movi	r5,8
 201048c:	2805883a 	mov	r2,r5
 2010490:	003f0106 	br	2010098 <__umoddi3+0x148>
 2010494:	01400204 	movi	r5,8
 2010498:	2805883a 	mov	r2,r5
 201049c:	003f1206 	br	20100e8 <__umoddi3+0x198>
 20104a0:	01400604 	movi	r5,24
 20104a4:	2805883a 	mov	r2,r5
 20104a8:	003f0f06 	br	20100e8 <__umoddi3+0x198>
 20104ac:	01400604 	movi	r5,24
 20104b0:	2805883a 	mov	r2,r5
 20104b4:	003ef806 	br	2010098 <__umoddi3+0x148>
 20104b8:	3c7fb82e 	bgeu	r7,r17,201039c <__umoddi3+0x44c>
 20104bc:	843fffc4 	addi	r16,r16,-1
 20104c0:	3dcf883a 	add	r7,r7,r23
 20104c4:	003fb506 	br	201039c <__umoddi3+0x44c>
 20104c8:	147fa22e 	bgeu	r2,r17,2010354 <__umoddi3+0x404>
 20104cc:	e73fffc4 	addi	fp,fp,-1
 20104d0:	15c5883a 	add	r2,r2,r23
 20104d4:	003f9f06 	br	2010354 <__umoddi3+0x404>
 20104d8:	147f692e 	bgeu	r2,r17,2010280 <__umoddi3+0x330>
 20104dc:	1405883a 	add	r2,r2,r16
 20104e0:	003f6706 	br	2010280 <__umoddi3+0x330>
 20104e4:	1405883a 	add	r2,r2,r16
 20104e8:	003f1906 	br	2010150 <__umoddi3+0x200>
 20104ec:	1405883a 	add	r2,r2,r16
 20104f0:	003ec906 	br	2010018 <__umoddi3+0xc8>
 20104f4:	b13fcc36 	bltu	r22,r4,2010428 <__umoddi3+0x4d8>
 20104f8:	000b883a 	mov	r5,zero
 20104fc:	003fd106 	br	2010444 <__umoddi3+0x4f4>

02010500 <__nesf2>:
 2010500:	defff304 	addi	sp,sp,-52
 2010504:	dc400b15 	stw	r17,44(sp)
 2010508:	dc400204 	addi	r17,sp,8
 201050c:	dc000a15 	stw	r16,40(sp)
 2010510:	d9000015 	stw	r4,0(sp)
 2010514:	d9400115 	stw	r5,4(sp)
 2010518:	d809883a 	mov	r4,sp
 201051c:	880b883a 	mov	r5,r17
 2010520:	dc000604 	addi	r16,sp,24
 2010524:	dfc00c15 	stw	ra,48(sp)
 2010528:	20032540 	call	2003254 <__unpack_f>
 201052c:	d9000104 	addi	r4,sp,4
 2010530:	800b883a 	mov	r5,r16
 2010534:	20032540 	call	2003254 <__unpack_f>
 2010538:	d8800217 	ldw	r2,8(sp)
 201053c:	00c00044 	movi	r3,1
 2010540:	180d883a 	mov	r6,r3
 2010544:	1880062e 	bgeu	r3,r2,2010560 <__nesf2+0x60>
 2010548:	d8800617 	ldw	r2,24(sp)
 201054c:	8809883a 	mov	r4,r17
 2010550:	800b883a 	mov	r5,r16
 2010554:	1880022e 	bgeu	r3,r2,2010560 <__nesf2+0x60>
 2010558:	20112740 	call	2011274 <__fpcmp_parts_f>
 201055c:	100d883a 	mov	r6,r2
 2010560:	3005883a 	mov	r2,r6
 2010564:	dfc00c17 	ldw	ra,48(sp)
 2010568:	dc400b17 	ldw	r17,44(sp)
 201056c:	dc000a17 	ldw	r16,40(sp)
 2010570:	dec00d04 	addi	sp,sp,52
 2010574:	f800283a 	ret

02010578 <__gtsf2>:
 2010578:	defff304 	addi	sp,sp,-52
 201057c:	dc400b15 	stw	r17,44(sp)
 2010580:	dc400204 	addi	r17,sp,8
 2010584:	dc000a15 	stw	r16,40(sp)
 2010588:	d9000015 	stw	r4,0(sp)
 201058c:	d9400115 	stw	r5,4(sp)
 2010590:	d809883a 	mov	r4,sp
 2010594:	880b883a 	mov	r5,r17
 2010598:	dc000604 	addi	r16,sp,24
 201059c:	dfc00c15 	stw	ra,48(sp)
 20105a0:	20032540 	call	2003254 <__unpack_f>
 20105a4:	d9000104 	addi	r4,sp,4
 20105a8:	800b883a 	mov	r5,r16
 20105ac:	20032540 	call	2003254 <__unpack_f>
 20105b0:	d8800217 	ldw	r2,8(sp)
 20105b4:	00c00044 	movi	r3,1
 20105b8:	01bfffc4 	movi	r6,-1
 20105bc:	1880062e 	bgeu	r3,r2,20105d8 <__gtsf2+0x60>
 20105c0:	d8800617 	ldw	r2,24(sp)
 20105c4:	8809883a 	mov	r4,r17
 20105c8:	800b883a 	mov	r5,r16
 20105cc:	1880022e 	bgeu	r3,r2,20105d8 <__gtsf2+0x60>
 20105d0:	20112740 	call	2011274 <__fpcmp_parts_f>
 20105d4:	100d883a 	mov	r6,r2
 20105d8:	3005883a 	mov	r2,r6
 20105dc:	dfc00c17 	ldw	ra,48(sp)
 20105e0:	dc400b17 	ldw	r17,44(sp)
 20105e4:	dc000a17 	ldw	r16,40(sp)
 20105e8:	dec00d04 	addi	sp,sp,52
 20105ec:	f800283a 	ret

020105f0 <__ltsf2>:
 20105f0:	defff304 	addi	sp,sp,-52
 20105f4:	dc400b15 	stw	r17,44(sp)
 20105f8:	dc400204 	addi	r17,sp,8
 20105fc:	dc000a15 	stw	r16,40(sp)
 2010600:	d9000015 	stw	r4,0(sp)
 2010604:	d9400115 	stw	r5,4(sp)
 2010608:	d809883a 	mov	r4,sp
 201060c:	880b883a 	mov	r5,r17
 2010610:	dc000604 	addi	r16,sp,24
 2010614:	dfc00c15 	stw	ra,48(sp)
 2010618:	20032540 	call	2003254 <__unpack_f>
 201061c:	d9000104 	addi	r4,sp,4
 2010620:	800b883a 	mov	r5,r16
 2010624:	20032540 	call	2003254 <__unpack_f>
 2010628:	d8800217 	ldw	r2,8(sp)
 201062c:	00c00044 	movi	r3,1
 2010630:	180d883a 	mov	r6,r3
 2010634:	1880062e 	bgeu	r3,r2,2010650 <__ltsf2+0x60>
 2010638:	d8800617 	ldw	r2,24(sp)
 201063c:	8809883a 	mov	r4,r17
 2010640:	800b883a 	mov	r5,r16
 2010644:	1880022e 	bgeu	r3,r2,2010650 <__ltsf2+0x60>
 2010648:	20112740 	call	2011274 <__fpcmp_parts_f>
 201064c:	100d883a 	mov	r6,r2
 2010650:	3005883a 	mov	r2,r6
 2010654:	dfc00c17 	ldw	ra,48(sp)
 2010658:	dc400b17 	ldw	r17,44(sp)
 201065c:	dc000a17 	ldw	r16,40(sp)
 2010660:	dec00d04 	addi	sp,sp,52
 2010664:	f800283a 	ret

02010668 <_fpadd_parts>:
 2010668:	defff804 	addi	sp,sp,-32
 201066c:	dcc00315 	stw	r19,12(sp)
 2010670:	2027883a 	mov	r19,r4
 2010674:	21000017 	ldw	r4,0(r4)
 2010678:	00c00044 	movi	r3,1
 201067c:	dd400515 	stw	r21,20(sp)
 2010680:	dd000415 	stw	r20,16(sp)
 2010684:	ddc00715 	stw	r23,28(sp)
 2010688:	dd800615 	stw	r22,24(sp)
 201068c:	dc800215 	stw	r18,8(sp)
 2010690:	dc400115 	stw	r17,4(sp)
 2010694:	dc000015 	stw	r16,0(sp)
 2010698:	282b883a 	mov	r21,r5
 201069c:	3029883a 	mov	r20,r6
 20106a0:	1900632e 	bgeu	r3,r4,2010830 <_fpadd_parts+0x1c8>
 20106a4:	28800017 	ldw	r2,0(r5)
 20106a8:	1880812e 	bgeu	r3,r2,20108b0 <_fpadd_parts+0x248>
 20106ac:	00c00104 	movi	r3,4
 20106b0:	20c0dc26 	beq	r4,r3,2010a24 <_fpadd_parts+0x3bc>
 20106b4:	10c07e26 	beq	r2,r3,20108b0 <_fpadd_parts+0x248>
 20106b8:	00c00084 	movi	r3,2
 20106bc:	10c06726 	beq	r2,r3,201085c <_fpadd_parts+0x1f4>
 20106c0:	20c07b26 	beq	r4,r3,20108b0 <_fpadd_parts+0x248>
 20106c4:	9dc00217 	ldw	r23,8(r19)
 20106c8:	28c00217 	ldw	r3,8(r5)
 20106cc:	9c400317 	ldw	r17,12(r19)
 20106d0:	2bc00317 	ldw	r15,12(r5)
 20106d4:	b8cdc83a 	sub	r6,r23,r3
 20106d8:	9c800417 	ldw	r18,16(r19)
 20106dc:	2c000417 	ldw	r16,16(r5)
 20106e0:	3009883a 	mov	r4,r6
 20106e4:	30009716 	blt	r6,zero,2010944 <_fpadd_parts+0x2dc>
 20106e8:	00800fc4 	movi	r2,63
 20106ec:	11806b16 	blt	r2,r6,201089c <_fpadd_parts+0x234>
 20106f0:	0100a40e 	bge	zero,r4,2010984 <_fpadd_parts+0x31c>
 20106f4:	35bff804 	addi	r22,r6,-32
 20106f8:	b000bc16 	blt	r22,zero,20109ec <_fpadd_parts+0x384>
 20106fc:	8596d83a 	srl	r11,r16,r22
 2010700:	0019883a 	mov	r12,zero
 2010704:	0013883a 	mov	r9,zero
 2010708:	01000044 	movi	r4,1
 201070c:	0015883a 	mov	r10,zero
 2010710:	b000be16 	blt	r22,zero,2010a0c <_fpadd_parts+0x3a4>
 2010714:	2590983a 	sll	r8,r4,r22
 2010718:	000f883a 	mov	r7,zero
 201071c:	00bfffc4 	movi	r2,-1
 2010720:	3889883a 	add	r4,r7,r2
 2010724:	408b883a 	add	r5,r8,r2
 2010728:	21cd803a 	cmpltu	r6,r4,r7
 201072c:	314b883a 	add	r5,r6,r5
 2010730:	7904703a 	and	r2,r15,r4
 2010734:	8146703a 	and	r3,r16,r5
 2010738:	10c4b03a 	or	r2,r2,r3
 201073c:	10000226 	beq	r2,zero,2010748 <_fpadd_parts+0xe0>
 2010740:	02400044 	movi	r9,1
 2010744:	0015883a 	mov	r10,zero
 2010748:	5a5eb03a 	or	r15,r11,r9
 201074c:	62a0b03a 	or	r16,r12,r10
 2010750:	99400117 	ldw	r5,4(r19)
 2010754:	a8800117 	ldw	r2,4(r21)
 2010758:	28806e26 	beq	r5,r2,2010914 <_fpadd_parts+0x2ac>
 201075c:	28006626 	beq	r5,zero,20108f8 <_fpadd_parts+0x290>
 2010760:	7c45c83a 	sub	r2,r15,r17
 2010764:	7889803a 	cmpltu	r4,r15,r2
 2010768:	8487c83a 	sub	r3,r16,r18
 201076c:	1909c83a 	sub	r4,r3,r4
 2010770:	100d883a 	mov	r6,r2
 2010774:	200f883a 	mov	r7,r4
 2010778:	38007716 	blt	r7,zero,2010958 <_fpadd_parts+0x2f0>
 201077c:	a5c00215 	stw	r23,8(r20)
 2010780:	a1c00415 	stw	r7,16(r20)
 2010784:	a0000115 	stw	zero,4(r20)
 2010788:	a1800315 	stw	r6,12(r20)
 201078c:	a2000317 	ldw	r8,12(r20)
 2010790:	a2400417 	ldw	r9,16(r20)
 2010794:	00bfffc4 	movi	r2,-1
 2010798:	408b883a 	add	r5,r8,r2
 201079c:	2a09803a 	cmpltu	r4,r5,r8
 20107a0:	488d883a 	add	r6,r9,r2
 20107a4:	01c40034 	movhi	r7,4096
 20107a8:	39ffffc4 	addi	r7,r7,-1
 20107ac:	218d883a 	add	r6,r4,r6
 20107b0:	39801736 	bltu	r7,r6,2010810 <_fpadd_parts+0x1a8>
 20107b4:	31c06526 	beq	r6,r7,201094c <_fpadd_parts+0x2e4>
 20107b8:	a3000217 	ldw	r12,8(r20)
 20107bc:	4209883a 	add	r4,r8,r8
 20107c0:	00bfffc4 	movi	r2,-1
 20107c4:	220f803a 	cmpltu	r7,r4,r8
 20107c8:	4a4b883a 	add	r5,r9,r9
 20107cc:	394f883a 	add	r7,r7,r5
 20107d0:	2095883a 	add	r10,r4,r2
 20107d4:	3897883a 	add	r11,r7,r2
 20107d8:	510d803a 	cmpltu	r6,r10,r4
 20107dc:	6099883a 	add	r12,r12,r2
 20107e0:	32d7883a 	add	r11,r6,r11
 20107e4:	00840034 	movhi	r2,4096
 20107e8:	10bfffc4 	addi	r2,r2,-1
 20107ec:	2011883a 	mov	r8,r4
 20107f0:	3813883a 	mov	r9,r7
 20107f4:	a1000315 	stw	r4,12(r20)
 20107f8:	a1c00415 	stw	r7,16(r20)
 20107fc:	a3000215 	stw	r12,8(r20)
 2010800:	12c00336 	bltu	r2,r11,2010810 <_fpadd_parts+0x1a8>
 2010804:	58bfed1e 	bne	r11,r2,20107bc <_fpadd_parts+0x154>
 2010808:	00bfff84 	movi	r2,-2
 201080c:	12bfeb2e 	bgeu	r2,r10,20107bc <_fpadd_parts+0x154>
 2010810:	a2800417 	ldw	r10,16(r20)
 2010814:	008000c4 	movi	r2,3
 2010818:	00c80034 	movhi	r3,8192
 201081c:	18ffffc4 	addi	r3,r3,-1
 2010820:	a2400317 	ldw	r9,12(r20)
 2010824:	a0800015 	stw	r2,0(r20)
 2010828:	1a802336 	bltu	r3,r10,20108b8 <_fpadd_parts+0x250>
 201082c:	a027883a 	mov	r19,r20
 2010830:	9805883a 	mov	r2,r19
 2010834:	ddc00717 	ldw	r23,28(sp)
 2010838:	dd800617 	ldw	r22,24(sp)
 201083c:	dd400517 	ldw	r21,20(sp)
 2010840:	dd000417 	ldw	r20,16(sp)
 2010844:	dcc00317 	ldw	r19,12(sp)
 2010848:	dc800217 	ldw	r18,8(sp)
 201084c:	dc400117 	ldw	r17,4(sp)
 2010850:	dc000017 	ldw	r16,0(sp)
 2010854:	dec00804 	addi	sp,sp,32
 2010858:	f800283a 	ret
 201085c:	20fff41e 	bne	r4,r3,2010830 <_fpadd_parts+0x1c8>
 2010860:	31000015 	stw	r4,0(r6)
 2010864:	98800117 	ldw	r2,4(r19)
 2010868:	30800115 	stw	r2,4(r6)
 201086c:	98c00217 	ldw	r3,8(r19)
 2010870:	30c00215 	stw	r3,8(r6)
 2010874:	98800317 	ldw	r2,12(r19)
 2010878:	30800315 	stw	r2,12(r6)
 201087c:	98c00417 	ldw	r3,16(r19)
 2010880:	30c00415 	stw	r3,16(r6)
 2010884:	98800117 	ldw	r2,4(r19)
 2010888:	28c00117 	ldw	r3,4(r5)
 201088c:	3027883a 	mov	r19,r6
 2010890:	10c4703a 	and	r2,r2,r3
 2010894:	30800115 	stw	r2,4(r6)
 2010898:	003fe506 	br	2010830 <_fpadd_parts+0x1c8>
 201089c:	1dc02616 	blt	r3,r23,2010938 <_fpadd_parts+0x2d0>
 20108a0:	0023883a 	mov	r17,zero
 20108a4:	182f883a 	mov	r23,r3
 20108a8:	0025883a 	mov	r18,zero
 20108ac:	003fa806 	br	2010750 <_fpadd_parts+0xe8>
 20108b0:	a827883a 	mov	r19,r21
 20108b4:	003fde06 	br	2010830 <_fpadd_parts+0x1c8>
 20108b8:	01800044 	movi	r6,1
 20108bc:	500497fa 	slli	r2,r10,31
 20108c0:	4808d07a 	srli	r4,r9,1
 20108c4:	518ad83a 	srl	r5,r10,r6
 20108c8:	a2000217 	ldw	r8,8(r20)
 20108cc:	1108b03a 	or	r4,r2,r4
 20108d0:	0007883a 	mov	r3,zero
 20108d4:	4984703a 	and	r2,r9,r6
 20108d8:	208cb03a 	or	r6,r4,r2
 20108dc:	28ceb03a 	or	r7,r5,r3
 20108e0:	42000044 	addi	r8,r8,1
 20108e4:	a027883a 	mov	r19,r20
 20108e8:	a1c00415 	stw	r7,16(r20)
 20108ec:	a2000215 	stw	r8,8(r20)
 20108f0:	a1800315 	stw	r6,12(r20)
 20108f4:	003fce06 	br	2010830 <_fpadd_parts+0x1c8>
 20108f8:	8bc5c83a 	sub	r2,r17,r15
 20108fc:	8889803a 	cmpltu	r4,r17,r2
 2010900:	9407c83a 	sub	r3,r18,r16
 2010904:	1909c83a 	sub	r4,r3,r4
 2010908:	100d883a 	mov	r6,r2
 201090c:	200f883a 	mov	r7,r4
 2010910:	003f9906 	br	2010778 <_fpadd_parts+0x110>
 2010914:	7c45883a 	add	r2,r15,r17
 2010918:	13c9803a 	cmpltu	r4,r2,r15
 201091c:	8487883a 	add	r3,r16,r18
 2010920:	20c9883a 	add	r4,r4,r3
 2010924:	a1400115 	stw	r5,4(r20)
 2010928:	a5c00215 	stw	r23,8(r20)
 201092c:	a0800315 	stw	r2,12(r20)
 2010930:	a1000415 	stw	r4,16(r20)
 2010934:	003fb606 	br	2010810 <_fpadd_parts+0x1a8>
 2010938:	001f883a 	mov	r15,zero
 201093c:	0021883a 	mov	r16,zero
 2010940:	003f8306 	br	2010750 <_fpadd_parts+0xe8>
 2010944:	018dc83a 	sub	r6,zero,r6
 2010948:	003f6706 	br	20106e8 <_fpadd_parts+0x80>
 201094c:	00bfff84 	movi	r2,-2
 2010950:	117faf36 	bltu	r2,r5,2010810 <_fpadd_parts+0x1a8>
 2010954:	003f9806 	br	20107b8 <_fpadd_parts+0x150>
 2010958:	0005883a 	mov	r2,zero
 201095c:	1189c83a 	sub	r4,r2,r6
 2010960:	1105803a 	cmpltu	r2,r2,r4
 2010964:	01cbc83a 	sub	r5,zero,r7
 2010968:	2885c83a 	sub	r2,r5,r2
 201096c:	01800044 	movi	r6,1
 2010970:	a1800115 	stw	r6,4(r20)
 2010974:	a5c00215 	stw	r23,8(r20)
 2010978:	a1000315 	stw	r4,12(r20)
 201097c:	a0800415 	stw	r2,16(r20)
 2010980:	003f8206 	br	201078c <_fpadd_parts+0x124>
 2010984:	203f7226 	beq	r4,zero,2010750 <_fpadd_parts+0xe8>
 2010988:	35bff804 	addi	r22,r6,-32
 201098c:	b9af883a 	add	r23,r23,r6
 2010990:	b0003116 	blt	r22,zero,2010a58 <_fpadd_parts+0x3f0>
 2010994:	959ad83a 	srl	r13,r18,r22
 2010998:	001d883a 	mov	r14,zero
 201099c:	000f883a 	mov	r7,zero
 20109a0:	01000044 	movi	r4,1
 20109a4:	0011883a 	mov	r8,zero
 20109a8:	b0002516 	blt	r22,zero,2010a40 <_fpadd_parts+0x3d8>
 20109ac:	2594983a 	sll	r10,r4,r22
 20109b0:	0013883a 	mov	r9,zero
 20109b4:	00bfffc4 	movi	r2,-1
 20109b8:	4889883a 	add	r4,r9,r2
 20109bc:	508b883a 	add	r5,r10,r2
 20109c0:	224d803a 	cmpltu	r6,r4,r9
 20109c4:	314b883a 	add	r5,r6,r5
 20109c8:	8904703a 	and	r2,r17,r4
 20109cc:	9146703a 	and	r3,r18,r5
 20109d0:	10c4b03a 	or	r2,r2,r3
 20109d4:	10000226 	beq	r2,zero,20109e0 <_fpadd_parts+0x378>
 20109d8:	01c00044 	movi	r7,1
 20109dc:	0011883a 	mov	r8,zero
 20109e0:	69e2b03a 	or	r17,r13,r7
 20109e4:	7224b03a 	or	r18,r14,r8
 20109e8:	003f5906 	br	2010750 <_fpadd_parts+0xe8>
 20109ec:	8407883a 	add	r3,r16,r16
 20109f0:	008007c4 	movi	r2,31
 20109f4:	1185c83a 	sub	r2,r2,r6
 20109f8:	1886983a 	sll	r3,r3,r2
 20109fc:	7996d83a 	srl	r11,r15,r6
 2010a00:	8198d83a 	srl	r12,r16,r6
 2010a04:	1ad6b03a 	or	r11,r3,r11
 2010a08:	003f3e06 	br	2010704 <_fpadd_parts+0x9c>
 2010a0c:	2006d07a 	srli	r3,r4,1
 2010a10:	008007c4 	movi	r2,31
 2010a14:	1185c83a 	sub	r2,r2,r6
 2010a18:	1890d83a 	srl	r8,r3,r2
 2010a1c:	218e983a 	sll	r7,r4,r6
 2010a20:	003f3e06 	br	201071c <_fpadd_parts+0xb4>
 2010a24:	113f821e 	bne	r2,r4,2010830 <_fpadd_parts+0x1c8>
 2010a28:	28c00117 	ldw	r3,4(r5)
 2010a2c:	98800117 	ldw	r2,4(r19)
 2010a30:	10ff7f26 	beq	r2,r3,2010830 <_fpadd_parts+0x1c8>
 2010a34:	04c08074 	movhi	r19,513
 2010a38:	9cd66a04 	addi	r19,r19,22952
 2010a3c:	003f7c06 	br	2010830 <_fpadd_parts+0x1c8>
 2010a40:	2006d07a 	srli	r3,r4,1
 2010a44:	008007c4 	movi	r2,31
 2010a48:	1185c83a 	sub	r2,r2,r6
 2010a4c:	1894d83a 	srl	r10,r3,r2
 2010a50:	2192983a 	sll	r9,r4,r6
 2010a54:	003fd706 	br	20109b4 <_fpadd_parts+0x34c>
 2010a58:	9487883a 	add	r3,r18,r18
 2010a5c:	008007c4 	movi	r2,31
 2010a60:	1185c83a 	sub	r2,r2,r6
 2010a64:	1886983a 	sll	r3,r3,r2
 2010a68:	899ad83a 	srl	r13,r17,r6
 2010a6c:	919cd83a 	srl	r14,r18,r6
 2010a70:	1b5ab03a 	or	r13,r3,r13
 2010a74:	003fc906 	br	201099c <_fpadd_parts+0x334>

02010a78 <__subdf3>:
 2010a78:	deffea04 	addi	sp,sp,-88
 2010a7c:	dcc01415 	stw	r19,80(sp)
 2010a80:	dcc00404 	addi	r19,sp,16
 2010a84:	2011883a 	mov	r8,r4
 2010a88:	2813883a 	mov	r9,r5
 2010a8c:	dc401315 	stw	r17,76(sp)
 2010a90:	d809883a 	mov	r4,sp
 2010a94:	980b883a 	mov	r5,r19
 2010a98:	dc400904 	addi	r17,sp,36
 2010a9c:	dfc01515 	stw	ra,84(sp)
 2010aa0:	da400115 	stw	r9,4(sp)
 2010aa4:	d9c00315 	stw	r7,12(sp)
 2010aa8:	da000015 	stw	r8,0(sp)
 2010aac:	d9800215 	stw	r6,8(sp)
 2010ab0:	20036300 	call	2003630 <__unpack_d>
 2010ab4:	d9000204 	addi	r4,sp,8
 2010ab8:	880b883a 	mov	r5,r17
 2010abc:	20036300 	call	2003630 <__unpack_d>
 2010ac0:	d8800a17 	ldw	r2,40(sp)
 2010ac4:	880b883a 	mov	r5,r17
 2010ac8:	9809883a 	mov	r4,r19
 2010acc:	d9800e04 	addi	r6,sp,56
 2010ad0:	1080005c 	xori	r2,r2,1
 2010ad4:	d8800a15 	stw	r2,40(sp)
 2010ad8:	20106680 	call	2010668 <_fpadd_parts>
 2010adc:	1009883a 	mov	r4,r2
 2010ae0:	200331c0 	call	200331c <__pack_d>
 2010ae4:	dfc01517 	ldw	ra,84(sp)
 2010ae8:	dcc01417 	ldw	r19,80(sp)
 2010aec:	dc401317 	ldw	r17,76(sp)
 2010af0:	dec01604 	addi	sp,sp,88
 2010af4:	f800283a 	ret

02010af8 <__adddf3>:
 2010af8:	deffea04 	addi	sp,sp,-88
 2010afc:	dcc01415 	stw	r19,80(sp)
 2010b00:	dcc00404 	addi	r19,sp,16
 2010b04:	2011883a 	mov	r8,r4
 2010b08:	2813883a 	mov	r9,r5
 2010b0c:	dc401315 	stw	r17,76(sp)
 2010b10:	d809883a 	mov	r4,sp
 2010b14:	980b883a 	mov	r5,r19
 2010b18:	dc400904 	addi	r17,sp,36
 2010b1c:	dfc01515 	stw	ra,84(sp)
 2010b20:	da400115 	stw	r9,4(sp)
 2010b24:	d9c00315 	stw	r7,12(sp)
 2010b28:	da000015 	stw	r8,0(sp)
 2010b2c:	d9800215 	stw	r6,8(sp)
 2010b30:	20036300 	call	2003630 <__unpack_d>
 2010b34:	d9000204 	addi	r4,sp,8
 2010b38:	880b883a 	mov	r5,r17
 2010b3c:	20036300 	call	2003630 <__unpack_d>
 2010b40:	d9800e04 	addi	r6,sp,56
 2010b44:	9809883a 	mov	r4,r19
 2010b48:	880b883a 	mov	r5,r17
 2010b4c:	20106680 	call	2010668 <_fpadd_parts>
 2010b50:	1009883a 	mov	r4,r2
 2010b54:	200331c0 	call	200331c <__pack_d>
 2010b58:	dfc01517 	ldw	ra,84(sp)
 2010b5c:	dcc01417 	ldw	r19,80(sp)
 2010b60:	dc401317 	ldw	r17,76(sp)
 2010b64:	dec01604 	addi	sp,sp,88
 2010b68:	f800283a 	ret

02010b6c <__eqdf2>:
 2010b6c:	deffef04 	addi	sp,sp,-68
 2010b70:	dc400f15 	stw	r17,60(sp)
 2010b74:	dc400404 	addi	r17,sp,16
 2010b78:	2005883a 	mov	r2,r4
 2010b7c:	2807883a 	mov	r3,r5
 2010b80:	dc000e15 	stw	r16,56(sp)
 2010b84:	d809883a 	mov	r4,sp
 2010b88:	880b883a 	mov	r5,r17
 2010b8c:	dc000904 	addi	r16,sp,36
 2010b90:	d8c00115 	stw	r3,4(sp)
 2010b94:	d8800015 	stw	r2,0(sp)
 2010b98:	d9800215 	stw	r6,8(sp)
 2010b9c:	dfc01015 	stw	ra,64(sp)
 2010ba0:	d9c00315 	stw	r7,12(sp)
 2010ba4:	20036300 	call	2003630 <__unpack_d>
 2010ba8:	d9000204 	addi	r4,sp,8
 2010bac:	800b883a 	mov	r5,r16
 2010bb0:	20036300 	call	2003630 <__unpack_d>
 2010bb4:	d8800417 	ldw	r2,16(sp)
 2010bb8:	00c00044 	movi	r3,1
 2010bbc:	180d883a 	mov	r6,r3
 2010bc0:	1880062e 	bgeu	r3,r2,2010bdc <__eqdf2+0x70>
 2010bc4:	d8800917 	ldw	r2,36(sp)
 2010bc8:	8809883a 	mov	r4,r17
 2010bcc:	800b883a 	mov	r5,r16
 2010bd0:	1880022e 	bgeu	r3,r2,2010bdc <__eqdf2+0x70>
 2010bd4:	20113480 	call	2011348 <__fpcmp_parts_d>
 2010bd8:	100d883a 	mov	r6,r2
 2010bdc:	3005883a 	mov	r2,r6
 2010be0:	dfc01017 	ldw	ra,64(sp)
 2010be4:	dc400f17 	ldw	r17,60(sp)
 2010be8:	dc000e17 	ldw	r16,56(sp)
 2010bec:	dec01104 	addi	sp,sp,68
 2010bf0:	f800283a 	ret

02010bf4 <__nedf2>:
 2010bf4:	deffef04 	addi	sp,sp,-68
 2010bf8:	dc400f15 	stw	r17,60(sp)
 2010bfc:	dc400404 	addi	r17,sp,16
 2010c00:	2005883a 	mov	r2,r4
 2010c04:	2807883a 	mov	r3,r5
 2010c08:	dc000e15 	stw	r16,56(sp)
 2010c0c:	d809883a 	mov	r4,sp
 2010c10:	880b883a 	mov	r5,r17
 2010c14:	dc000904 	addi	r16,sp,36
 2010c18:	d8c00115 	stw	r3,4(sp)
 2010c1c:	d8800015 	stw	r2,0(sp)
 2010c20:	d9800215 	stw	r6,8(sp)
 2010c24:	dfc01015 	stw	ra,64(sp)
 2010c28:	d9c00315 	stw	r7,12(sp)
 2010c2c:	20036300 	call	2003630 <__unpack_d>
 2010c30:	d9000204 	addi	r4,sp,8
 2010c34:	800b883a 	mov	r5,r16
 2010c38:	20036300 	call	2003630 <__unpack_d>
 2010c3c:	d8800417 	ldw	r2,16(sp)
 2010c40:	00c00044 	movi	r3,1
 2010c44:	180d883a 	mov	r6,r3
 2010c48:	1880062e 	bgeu	r3,r2,2010c64 <__nedf2+0x70>
 2010c4c:	d8800917 	ldw	r2,36(sp)
 2010c50:	8809883a 	mov	r4,r17
 2010c54:	800b883a 	mov	r5,r16
 2010c58:	1880022e 	bgeu	r3,r2,2010c64 <__nedf2+0x70>
 2010c5c:	20113480 	call	2011348 <__fpcmp_parts_d>
 2010c60:	100d883a 	mov	r6,r2
 2010c64:	3005883a 	mov	r2,r6
 2010c68:	dfc01017 	ldw	ra,64(sp)
 2010c6c:	dc400f17 	ldw	r17,60(sp)
 2010c70:	dc000e17 	ldw	r16,56(sp)
 2010c74:	dec01104 	addi	sp,sp,68
 2010c78:	f800283a 	ret

02010c7c <__gtdf2>:
 2010c7c:	deffef04 	addi	sp,sp,-68
 2010c80:	dc400f15 	stw	r17,60(sp)
 2010c84:	dc400404 	addi	r17,sp,16
 2010c88:	2005883a 	mov	r2,r4
 2010c8c:	2807883a 	mov	r3,r5
 2010c90:	dc000e15 	stw	r16,56(sp)
 2010c94:	d809883a 	mov	r4,sp
 2010c98:	880b883a 	mov	r5,r17
 2010c9c:	dc000904 	addi	r16,sp,36
 2010ca0:	d8c00115 	stw	r3,4(sp)
 2010ca4:	d8800015 	stw	r2,0(sp)
 2010ca8:	d9800215 	stw	r6,8(sp)
 2010cac:	dfc01015 	stw	ra,64(sp)
 2010cb0:	d9c00315 	stw	r7,12(sp)
 2010cb4:	20036300 	call	2003630 <__unpack_d>
 2010cb8:	d9000204 	addi	r4,sp,8
 2010cbc:	800b883a 	mov	r5,r16
 2010cc0:	20036300 	call	2003630 <__unpack_d>
 2010cc4:	d8800417 	ldw	r2,16(sp)
 2010cc8:	00c00044 	movi	r3,1
 2010ccc:	01bfffc4 	movi	r6,-1
 2010cd0:	1880062e 	bgeu	r3,r2,2010cec <__gtdf2+0x70>
 2010cd4:	d8800917 	ldw	r2,36(sp)
 2010cd8:	8809883a 	mov	r4,r17
 2010cdc:	800b883a 	mov	r5,r16
 2010ce0:	1880022e 	bgeu	r3,r2,2010cec <__gtdf2+0x70>
 2010ce4:	20113480 	call	2011348 <__fpcmp_parts_d>
 2010ce8:	100d883a 	mov	r6,r2
 2010cec:	3005883a 	mov	r2,r6
 2010cf0:	dfc01017 	ldw	ra,64(sp)
 2010cf4:	dc400f17 	ldw	r17,60(sp)
 2010cf8:	dc000e17 	ldw	r16,56(sp)
 2010cfc:	dec01104 	addi	sp,sp,68
 2010d00:	f800283a 	ret

02010d04 <__gedf2>:
 2010d04:	deffef04 	addi	sp,sp,-68
 2010d08:	dc400f15 	stw	r17,60(sp)
 2010d0c:	dc400404 	addi	r17,sp,16
 2010d10:	2005883a 	mov	r2,r4
 2010d14:	2807883a 	mov	r3,r5
 2010d18:	dc000e15 	stw	r16,56(sp)
 2010d1c:	d809883a 	mov	r4,sp
 2010d20:	880b883a 	mov	r5,r17
 2010d24:	dc000904 	addi	r16,sp,36
 2010d28:	d8c00115 	stw	r3,4(sp)
 2010d2c:	d8800015 	stw	r2,0(sp)
 2010d30:	d9800215 	stw	r6,8(sp)
 2010d34:	dfc01015 	stw	ra,64(sp)
 2010d38:	d9c00315 	stw	r7,12(sp)
 2010d3c:	20036300 	call	2003630 <__unpack_d>
 2010d40:	d9000204 	addi	r4,sp,8
 2010d44:	800b883a 	mov	r5,r16
 2010d48:	20036300 	call	2003630 <__unpack_d>
 2010d4c:	d8800417 	ldw	r2,16(sp)
 2010d50:	00c00044 	movi	r3,1
 2010d54:	01bfffc4 	movi	r6,-1
 2010d58:	1880062e 	bgeu	r3,r2,2010d74 <__gedf2+0x70>
 2010d5c:	d8800917 	ldw	r2,36(sp)
 2010d60:	8809883a 	mov	r4,r17
 2010d64:	800b883a 	mov	r5,r16
 2010d68:	1880022e 	bgeu	r3,r2,2010d74 <__gedf2+0x70>
 2010d6c:	20113480 	call	2011348 <__fpcmp_parts_d>
 2010d70:	100d883a 	mov	r6,r2
 2010d74:	3005883a 	mov	r2,r6
 2010d78:	dfc01017 	ldw	ra,64(sp)
 2010d7c:	dc400f17 	ldw	r17,60(sp)
 2010d80:	dc000e17 	ldw	r16,56(sp)
 2010d84:	dec01104 	addi	sp,sp,68
 2010d88:	f800283a 	ret

02010d8c <__ltdf2>:
 2010d8c:	deffef04 	addi	sp,sp,-68
 2010d90:	dc400f15 	stw	r17,60(sp)
 2010d94:	dc400404 	addi	r17,sp,16
 2010d98:	2005883a 	mov	r2,r4
 2010d9c:	2807883a 	mov	r3,r5
 2010da0:	dc000e15 	stw	r16,56(sp)
 2010da4:	d809883a 	mov	r4,sp
 2010da8:	880b883a 	mov	r5,r17
 2010dac:	dc000904 	addi	r16,sp,36
 2010db0:	d8c00115 	stw	r3,4(sp)
 2010db4:	d8800015 	stw	r2,0(sp)
 2010db8:	d9800215 	stw	r6,8(sp)
 2010dbc:	dfc01015 	stw	ra,64(sp)
 2010dc0:	d9c00315 	stw	r7,12(sp)
 2010dc4:	20036300 	call	2003630 <__unpack_d>
 2010dc8:	d9000204 	addi	r4,sp,8
 2010dcc:	800b883a 	mov	r5,r16
 2010dd0:	20036300 	call	2003630 <__unpack_d>
 2010dd4:	d8800417 	ldw	r2,16(sp)
 2010dd8:	00c00044 	movi	r3,1
 2010ddc:	180d883a 	mov	r6,r3
 2010de0:	1880062e 	bgeu	r3,r2,2010dfc <__ltdf2+0x70>
 2010de4:	d8800917 	ldw	r2,36(sp)
 2010de8:	8809883a 	mov	r4,r17
 2010dec:	800b883a 	mov	r5,r16
 2010df0:	1880022e 	bgeu	r3,r2,2010dfc <__ltdf2+0x70>
 2010df4:	20113480 	call	2011348 <__fpcmp_parts_d>
 2010df8:	100d883a 	mov	r6,r2
 2010dfc:	3005883a 	mov	r2,r6
 2010e00:	dfc01017 	ldw	ra,64(sp)
 2010e04:	dc400f17 	ldw	r17,60(sp)
 2010e08:	dc000e17 	ldw	r16,56(sp)
 2010e0c:	dec01104 	addi	sp,sp,68
 2010e10:	f800283a 	ret

02010e14 <__ledf2>:
 2010e14:	deffef04 	addi	sp,sp,-68
 2010e18:	dc400f15 	stw	r17,60(sp)
 2010e1c:	dc400404 	addi	r17,sp,16
 2010e20:	2005883a 	mov	r2,r4
 2010e24:	2807883a 	mov	r3,r5
 2010e28:	dc000e15 	stw	r16,56(sp)
 2010e2c:	d809883a 	mov	r4,sp
 2010e30:	880b883a 	mov	r5,r17
 2010e34:	dc000904 	addi	r16,sp,36
 2010e38:	d8c00115 	stw	r3,4(sp)
 2010e3c:	d8800015 	stw	r2,0(sp)
 2010e40:	d9800215 	stw	r6,8(sp)
 2010e44:	dfc01015 	stw	ra,64(sp)
 2010e48:	d9c00315 	stw	r7,12(sp)
 2010e4c:	20036300 	call	2003630 <__unpack_d>
 2010e50:	d9000204 	addi	r4,sp,8
 2010e54:	800b883a 	mov	r5,r16
 2010e58:	20036300 	call	2003630 <__unpack_d>
 2010e5c:	d8800417 	ldw	r2,16(sp)
 2010e60:	00c00044 	movi	r3,1
 2010e64:	180d883a 	mov	r6,r3
 2010e68:	1880062e 	bgeu	r3,r2,2010e84 <__ledf2+0x70>
 2010e6c:	d8800917 	ldw	r2,36(sp)
 2010e70:	8809883a 	mov	r4,r17
 2010e74:	800b883a 	mov	r5,r16
 2010e78:	1880022e 	bgeu	r3,r2,2010e84 <__ledf2+0x70>
 2010e7c:	20113480 	call	2011348 <__fpcmp_parts_d>
 2010e80:	100d883a 	mov	r6,r2
 2010e84:	3005883a 	mov	r2,r6
 2010e88:	dfc01017 	ldw	ra,64(sp)
 2010e8c:	dc400f17 	ldw	r17,60(sp)
 2010e90:	dc000e17 	ldw	r16,56(sp)
 2010e94:	dec01104 	addi	sp,sp,68
 2010e98:	f800283a 	ret

02010e9c <__floatsidf>:
 2010e9c:	2006d7fa 	srli	r3,r4,31
 2010ea0:	defff604 	addi	sp,sp,-40
 2010ea4:	008000c4 	movi	r2,3
 2010ea8:	dfc00915 	stw	ra,36(sp)
 2010eac:	dcc00815 	stw	r19,32(sp)
 2010eb0:	dc800715 	stw	r18,28(sp)
 2010eb4:	dc400615 	stw	r17,24(sp)
 2010eb8:	dc000515 	stw	r16,20(sp)
 2010ebc:	d8800015 	stw	r2,0(sp)
 2010ec0:	d8c00115 	stw	r3,4(sp)
 2010ec4:	20000f1e 	bne	r4,zero,2010f04 <__floatsidf+0x68>
 2010ec8:	00800084 	movi	r2,2
 2010ecc:	d8800015 	stw	r2,0(sp)
 2010ed0:	d809883a 	mov	r4,sp
 2010ed4:	200331c0 	call	200331c <__pack_d>
 2010ed8:	1009883a 	mov	r4,r2
 2010edc:	180b883a 	mov	r5,r3
 2010ee0:	2005883a 	mov	r2,r4
 2010ee4:	2807883a 	mov	r3,r5
 2010ee8:	dfc00917 	ldw	ra,36(sp)
 2010eec:	dcc00817 	ldw	r19,32(sp)
 2010ef0:	dc800717 	ldw	r18,28(sp)
 2010ef4:	dc400617 	ldw	r17,24(sp)
 2010ef8:	dc000517 	ldw	r16,20(sp)
 2010efc:	dec00a04 	addi	sp,sp,40
 2010f00:	f800283a 	ret
 2010f04:	00800f04 	movi	r2,60
 2010f08:	1807003a 	cmpeq	r3,r3,zero
 2010f0c:	d8800215 	stw	r2,8(sp)
 2010f10:	18001126 	beq	r3,zero,2010f58 <__floatsidf+0xbc>
 2010f14:	0027883a 	mov	r19,zero
 2010f18:	2025883a 	mov	r18,r4
 2010f1c:	d9000315 	stw	r4,12(sp)
 2010f20:	dcc00415 	stw	r19,16(sp)
 2010f24:	20030740 	call	2003074 <__clzsi2>
 2010f28:	11000744 	addi	r4,r2,29
 2010f2c:	013fe80e 	bge	zero,r4,2010ed0 <__floatsidf+0x34>
 2010f30:	10bfff44 	addi	r2,r2,-3
 2010f34:	10000c16 	blt	r2,zero,2010f68 <__floatsidf+0xcc>
 2010f38:	90a2983a 	sll	r17,r18,r2
 2010f3c:	0021883a 	mov	r16,zero
 2010f40:	d8800217 	ldw	r2,8(sp)
 2010f44:	dc400415 	stw	r17,16(sp)
 2010f48:	dc000315 	stw	r16,12(sp)
 2010f4c:	1105c83a 	sub	r2,r2,r4
 2010f50:	d8800215 	stw	r2,8(sp)
 2010f54:	003fde06 	br	2010ed0 <__floatsidf+0x34>
 2010f58:	00a00034 	movhi	r2,32768
 2010f5c:	20800a26 	beq	r4,r2,2010f88 <__floatsidf+0xec>
 2010f60:	0109c83a 	sub	r4,zero,r4
 2010f64:	003feb06 	br	2010f14 <__floatsidf+0x78>
 2010f68:	9006d07a 	srli	r3,r18,1
 2010f6c:	008007c4 	movi	r2,31
 2010f70:	1105c83a 	sub	r2,r2,r4
 2010f74:	1886d83a 	srl	r3,r3,r2
 2010f78:	9922983a 	sll	r17,r19,r4
 2010f7c:	9120983a 	sll	r16,r18,r4
 2010f80:	1c62b03a 	or	r17,r3,r17
 2010f84:	003fee06 	br	2010f40 <__floatsidf+0xa4>
 2010f88:	0009883a 	mov	r4,zero
 2010f8c:	01707834 	movhi	r5,49632
 2010f90:	003fd306 	br	2010ee0 <__floatsidf+0x44>

02010f94 <__fixdfsi>:
 2010f94:	defff804 	addi	sp,sp,-32
 2010f98:	2005883a 	mov	r2,r4
 2010f9c:	2807883a 	mov	r3,r5
 2010fa0:	d809883a 	mov	r4,sp
 2010fa4:	d9400204 	addi	r5,sp,8
 2010fa8:	d8c00115 	stw	r3,4(sp)
 2010fac:	d8800015 	stw	r2,0(sp)
 2010fb0:	dfc00715 	stw	ra,28(sp)
 2010fb4:	20036300 	call	2003630 <__unpack_d>
 2010fb8:	d8c00217 	ldw	r3,8(sp)
 2010fbc:	00800084 	movi	r2,2
 2010fc0:	1880051e 	bne	r3,r2,2010fd8 <__fixdfsi+0x44>
 2010fc4:	0007883a 	mov	r3,zero
 2010fc8:	1805883a 	mov	r2,r3
 2010fcc:	dfc00717 	ldw	ra,28(sp)
 2010fd0:	dec00804 	addi	sp,sp,32
 2010fd4:	f800283a 	ret
 2010fd8:	00800044 	movi	r2,1
 2010fdc:	10fff92e 	bgeu	r2,r3,2010fc4 <__fixdfsi+0x30>
 2010fe0:	00800104 	movi	r2,4
 2010fe4:	18800426 	beq	r3,r2,2010ff8 <__fixdfsi+0x64>
 2010fe8:	d8c00417 	ldw	r3,16(sp)
 2010fec:	183ff516 	blt	r3,zero,2010fc4 <__fixdfsi+0x30>
 2010ff0:	00800784 	movi	r2,30
 2010ff4:	10c0080e 	bge	r2,r3,2011018 <__fixdfsi+0x84>
 2010ff8:	d8800317 	ldw	r2,12(sp)
 2010ffc:	1000121e 	bne	r2,zero,2011048 <__fixdfsi+0xb4>
 2011000:	00e00034 	movhi	r3,32768
 2011004:	18ffffc4 	addi	r3,r3,-1
 2011008:	1805883a 	mov	r2,r3
 201100c:	dfc00717 	ldw	ra,28(sp)
 2011010:	dec00804 	addi	sp,sp,32
 2011014:	f800283a 	ret
 2011018:	00800f04 	movi	r2,60
 201101c:	10d1c83a 	sub	r8,r2,r3
 2011020:	40bff804 	addi	r2,r8,-32
 2011024:	d9800517 	ldw	r6,20(sp)
 2011028:	d9c00617 	ldw	r7,24(sp)
 201102c:	10000816 	blt	r2,zero,2011050 <__fixdfsi+0xbc>
 2011030:	3888d83a 	srl	r4,r7,r2
 2011034:	d8800317 	ldw	r2,12(sp)
 2011038:	2007883a 	mov	r3,r4
 201103c:	103fe226 	beq	r2,zero,2010fc8 <__fixdfsi+0x34>
 2011040:	0107c83a 	sub	r3,zero,r4
 2011044:	003fe006 	br	2010fc8 <__fixdfsi+0x34>
 2011048:	00e00034 	movhi	r3,32768
 201104c:	003fde06 	br	2010fc8 <__fixdfsi+0x34>
 2011050:	39c7883a 	add	r3,r7,r7
 2011054:	008007c4 	movi	r2,31
 2011058:	1205c83a 	sub	r2,r2,r8
 201105c:	1886983a 	sll	r3,r3,r2
 2011060:	3208d83a 	srl	r4,r6,r8
 2011064:	1908b03a 	or	r4,r3,r4
 2011068:	003ff206 	br	2011034 <__fixdfsi+0xa0>

0201106c <__truncdfsf2>:
 201106c:	defff804 	addi	sp,sp,-32
 2011070:	2005883a 	mov	r2,r4
 2011074:	2807883a 	mov	r3,r5
 2011078:	d809883a 	mov	r4,sp
 201107c:	d9400204 	addi	r5,sp,8
 2011080:	d8c00115 	stw	r3,4(sp)
 2011084:	d8800015 	stw	r2,0(sp)
 2011088:	dfc00715 	stw	ra,28(sp)
 201108c:	20036300 	call	2003630 <__unpack_d>
 2011090:	d9c00517 	ldw	r7,20(sp)
 2011094:	da000617 	ldw	r8,24(sp)
 2011098:	02d00034 	movhi	r11,16384
 201109c:	5affffc4 	addi	r11,r11,-1
 20110a0:	3812d7ba 	srli	r9,r7,30
 20110a4:	401a90ba 	slli	r13,r8,2
 20110a8:	3ac4703a 	and	r2,r7,r11
 20110ac:	0007883a 	mov	r3,zero
 20110b0:	6a52b03a 	or	r9,r13,r9
 20110b4:	10c4b03a 	or	r2,r2,r3
 20110b8:	d9000217 	ldw	r4,8(sp)
 20110bc:	d9400317 	ldw	r5,12(sp)
 20110c0:	d9800417 	ldw	r6,16(sp)
 20110c4:	480f883a 	mov	r7,r9
 20110c8:	10000126 	beq	r2,zero,20110d0 <__truncdfsf2+0x64>
 20110cc:	49c00054 	ori	r7,r9,1
 20110d0:	201131c0 	call	201131c <__make_fp>
 20110d4:	dfc00717 	ldw	ra,28(sp)
 20110d8:	dec00804 	addi	sp,sp,32
 20110dc:	f800283a 	ret

020110e0 <__floatunsidf>:
 20110e0:	defff204 	addi	sp,sp,-56
 20110e4:	dfc00d15 	stw	ra,52(sp)
 20110e8:	ddc00c15 	stw	r23,48(sp)
 20110ec:	dd800b15 	stw	r22,44(sp)
 20110f0:	dd400a15 	stw	r21,40(sp)
 20110f4:	dd000915 	stw	r20,36(sp)
 20110f8:	dcc00815 	stw	r19,32(sp)
 20110fc:	dc800715 	stw	r18,28(sp)
 2011100:	dc400615 	stw	r17,24(sp)
 2011104:	dc000515 	stw	r16,20(sp)
 2011108:	d8000115 	stw	zero,4(sp)
 201110c:	20000f1e 	bne	r4,zero,201114c <__floatunsidf+0x6c>
 2011110:	00800084 	movi	r2,2
 2011114:	d8800015 	stw	r2,0(sp)
 2011118:	d809883a 	mov	r4,sp
 201111c:	200331c0 	call	200331c <__pack_d>
 2011120:	dfc00d17 	ldw	ra,52(sp)
 2011124:	ddc00c17 	ldw	r23,48(sp)
 2011128:	dd800b17 	ldw	r22,44(sp)
 201112c:	dd400a17 	ldw	r21,40(sp)
 2011130:	dd000917 	ldw	r20,36(sp)
 2011134:	dcc00817 	ldw	r19,32(sp)
 2011138:	dc800717 	ldw	r18,28(sp)
 201113c:	dc400617 	ldw	r17,24(sp)
 2011140:	dc000517 	ldw	r16,20(sp)
 2011144:	dec00e04 	addi	sp,sp,56
 2011148:	f800283a 	ret
 201114c:	008000c4 	movi	r2,3
 2011150:	00c00f04 	movi	r3,60
 2011154:	002f883a 	mov	r23,zero
 2011158:	202d883a 	mov	r22,r4
 201115c:	d8800015 	stw	r2,0(sp)
 2011160:	d8c00215 	stw	r3,8(sp)
 2011164:	d9000315 	stw	r4,12(sp)
 2011168:	ddc00415 	stw	r23,16(sp)
 201116c:	20030740 	call	2003074 <__clzsi2>
 2011170:	12400744 	addi	r9,r2,29
 2011174:	48000b16 	blt	r9,zero,20111a4 <__floatunsidf+0xc4>
 2011178:	483fe726 	beq	r9,zero,2011118 <__floatunsidf+0x38>
 201117c:	10bfff44 	addi	r2,r2,-3
 2011180:	10002e16 	blt	r2,zero,201123c <__floatunsidf+0x15c>
 2011184:	b0a2983a 	sll	r17,r22,r2
 2011188:	0021883a 	mov	r16,zero
 201118c:	d8800217 	ldw	r2,8(sp)
 2011190:	dc400415 	stw	r17,16(sp)
 2011194:	dc000315 	stw	r16,12(sp)
 2011198:	1245c83a 	sub	r2,r2,r9
 201119c:	d8800215 	stw	r2,8(sp)
 20111a0:	003fdd06 	br	2011118 <__floatunsidf+0x38>
 20111a4:	0255c83a 	sub	r10,zero,r9
 20111a8:	51bff804 	addi	r6,r10,-32
 20111ac:	30001b16 	blt	r6,zero,201121c <__floatunsidf+0x13c>
 20111b0:	b9a8d83a 	srl	r20,r23,r6
 20111b4:	002b883a 	mov	r21,zero
 20111b8:	000f883a 	mov	r7,zero
 20111bc:	01000044 	movi	r4,1
 20111c0:	0011883a 	mov	r8,zero
 20111c4:	30002516 	blt	r6,zero,201125c <__floatunsidf+0x17c>
 20111c8:	21a6983a 	sll	r19,r4,r6
 20111cc:	0025883a 	mov	r18,zero
 20111d0:	00bfffc4 	movi	r2,-1
 20111d4:	9089883a 	add	r4,r18,r2
 20111d8:	988b883a 	add	r5,r19,r2
 20111dc:	248d803a 	cmpltu	r6,r4,r18
 20111e0:	314b883a 	add	r5,r6,r5
 20111e4:	b104703a 	and	r2,r22,r4
 20111e8:	b946703a 	and	r3,r23,r5
 20111ec:	10c4b03a 	or	r2,r2,r3
 20111f0:	10000226 	beq	r2,zero,20111fc <__floatunsidf+0x11c>
 20111f4:	01c00044 	movi	r7,1
 20111f8:	0011883a 	mov	r8,zero
 20111fc:	d9000217 	ldw	r4,8(sp)
 2011200:	a1c4b03a 	or	r2,r20,r7
 2011204:	aa06b03a 	or	r3,r21,r8
 2011208:	2249c83a 	sub	r4,r4,r9
 201120c:	d8c00415 	stw	r3,16(sp)
 2011210:	d9000215 	stw	r4,8(sp)
 2011214:	d8800315 	stw	r2,12(sp)
 2011218:	003fbf06 	br	2011118 <__floatunsidf+0x38>
 201121c:	bdc7883a 	add	r3,r23,r23
 2011220:	008007c4 	movi	r2,31
 2011224:	1285c83a 	sub	r2,r2,r10
 2011228:	1886983a 	sll	r3,r3,r2
 201122c:	b2a8d83a 	srl	r20,r22,r10
 2011230:	baaad83a 	srl	r21,r23,r10
 2011234:	1d28b03a 	or	r20,r3,r20
 2011238:	003fdf06 	br	20111b8 <__floatunsidf+0xd8>
 201123c:	b006d07a 	srli	r3,r22,1
 2011240:	008007c4 	movi	r2,31
 2011244:	1245c83a 	sub	r2,r2,r9
 2011248:	1886d83a 	srl	r3,r3,r2
 201124c:	ba62983a 	sll	r17,r23,r9
 2011250:	b260983a 	sll	r16,r22,r9
 2011254:	1c62b03a 	or	r17,r3,r17
 2011258:	003fcc06 	br	201118c <__floatunsidf+0xac>
 201125c:	2006d07a 	srli	r3,r4,1
 2011260:	008007c4 	movi	r2,31
 2011264:	1285c83a 	sub	r2,r2,r10
 2011268:	18a6d83a 	srl	r19,r3,r2
 201126c:	22a4983a 	sll	r18,r4,r10
 2011270:	003fd706 	br	20111d0 <__floatunsidf+0xf0>

02011274 <__fpcmp_parts_f>:
 2011274:	21800017 	ldw	r6,0(r4)
 2011278:	00c00044 	movi	r3,1
 201127c:	19800a2e 	bgeu	r3,r6,20112a8 <__fpcmp_parts_f+0x34>
 2011280:	28800017 	ldw	r2,0(r5)
 2011284:	1880082e 	bgeu	r3,r2,20112a8 <__fpcmp_parts_f+0x34>
 2011288:	00c00104 	movi	r3,4
 201128c:	30c01e26 	beq	r6,r3,2011308 <__fpcmp_parts_f+0x94>
 2011290:	10c01a26 	beq	r2,r3,20112fc <__fpcmp_parts_f+0x88>
 2011294:	00c00084 	movi	r3,2
 2011298:	30c00526 	beq	r6,r3,20112b0 <__fpcmp_parts_f+0x3c>
 201129c:	10c0071e 	bne	r2,r3,20112bc <__fpcmp_parts_f+0x48>
 20112a0:	20800117 	ldw	r2,4(r4)
 20112a4:	1000091e 	bne	r2,zero,20112cc <__fpcmp_parts_f+0x58>
 20112a8:	00800044 	movi	r2,1
 20112ac:	f800283a 	ret
 20112b0:	10c0121e 	bne	r2,r3,20112fc <__fpcmp_parts_f+0x88>
 20112b4:	0005883a 	mov	r2,zero
 20112b8:	f800283a 	ret
 20112bc:	20c00117 	ldw	r3,4(r4)
 20112c0:	28800117 	ldw	r2,4(r5)
 20112c4:	18800326 	beq	r3,r2,20112d4 <__fpcmp_parts_f+0x60>
 20112c8:	183ff726 	beq	r3,zero,20112a8 <__fpcmp_parts_f+0x34>
 20112cc:	00bfffc4 	movi	r2,-1
 20112d0:	f800283a 	ret
 20112d4:	21800217 	ldw	r6,8(r4)
 20112d8:	28800217 	ldw	r2,8(r5)
 20112dc:	11bffa16 	blt	r2,r6,20112c8 <__fpcmp_parts_f+0x54>
 20112e0:	30800416 	blt	r6,r2,20112f4 <__fpcmp_parts_f+0x80>
 20112e4:	21000317 	ldw	r4,12(r4)
 20112e8:	29400317 	ldw	r5,12(r5)
 20112ec:	293ff636 	bltu	r5,r4,20112c8 <__fpcmp_parts_f+0x54>
 20112f0:	217ff02e 	bgeu	r4,r5,20112b4 <__fpcmp_parts_f+0x40>
 20112f4:	183fec1e 	bne	r3,zero,20112a8 <__fpcmp_parts_f+0x34>
 20112f8:	003ff406 	br	20112cc <__fpcmp_parts_f+0x58>
 20112fc:	28800117 	ldw	r2,4(r5)
 2011300:	103fe91e 	bne	r2,zero,20112a8 <__fpcmp_parts_f+0x34>
 2011304:	003ff106 	br	20112cc <__fpcmp_parts_f+0x58>
 2011308:	11bfe51e 	bne	r2,r6,20112a0 <__fpcmp_parts_f+0x2c>
 201130c:	28c00117 	ldw	r3,4(r5)
 2011310:	20800117 	ldw	r2,4(r4)
 2011314:	1885c83a 	sub	r2,r3,r2
 2011318:	f800283a 	ret

0201131c <__make_fp>:
 201131c:	defffb04 	addi	sp,sp,-20
 2011320:	d9000015 	stw	r4,0(sp)
 2011324:	d809883a 	mov	r4,sp
 2011328:	dfc00415 	stw	ra,16(sp)
 201132c:	d9400115 	stw	r5,4(sp)
 2011330:	d9800215 	stw	r6,8(sp)
 2011334:	d9c00315 	stw	r7,12(sp)
 2011338:	20030f40 	call	20030f4 <__pack_f>
 201133c:	dfc00417 	ldw	ra,16(sp)
 2011340:	dec00504 	addi	sp,sp,20
 2011344:	f800283a 	ret

02011348 <__fpcmp_parts_d>:
 2011348:	21800017 	ldw	r6,0(r4)
 201134c:	00c00044 	movi	r3,1
 2011350:	19800a2e 	bgeu	r3,r6,201137c <__fpcmp_parts_d+0x34>
 2011354:	28800017 	ldw	r2,0(r5)
 2011358:	1880082e 	bgeu	r3,r2,201137c <__fpcmp_parts_d+0x34>
 201135c:	00c00104 	movi	r3,4
 2011360:	30c02626 	beq	r6,r3,20113fc <__fpcmp_parts_d+0xb4>
 2011364:	10c02226 	beq	r2,r3,20113f0 <__fpcmp_parts_d+0xa8>
 2011368:	00c00084 	movi	r3,2
 201136c:	30c00526 	beq	r6,r3,2011384 <__fpcmp_parts_d+0x3c>
 2011370:	10c0071e 	bne	r2,r3,2011390 <__fpcmp_parts_d+0x48>
 2011374:	20800117 	ldw	r2,4(r4)
 2011378:	1000091e 	bne	r2,zero,20113a0 <__fpcmp_parts_d+0x58>
 201137c:	00800044 	movi	r2,1
 2011380:	f800283a 	ret
 2011384:	10c01a1e 	bne	r2,r3,20113f0 <__fpcmp_parts_d+0xa8>
 2011388:	0005883a 	mov	r2,zero
 201138c:	f800283a 	ret
 2011390:	22000117 	ldw	r8,4(r4)
 2011394:	28800117 	ldw	r2,4(r5)
 2011398:	40800326 	beq	r8,r2,20113a8 <__fpcmp_parts_d+0x60>
 201139c:	403ff726 	beq	r8,zero,201137c <__fpcmp_parts_d+0x34>
 20113a0:	00bfffc4 	movi	r2,-1
 20113a4:	f800283a 	ret
 20113a8:	20c00217 	ldw	r3,8(r4)
 20113ac:	28800217 	ldw	r2,8(r5)
 20113b0:	10fffa16 	blt	r2,r3,201139c <__fpcmp_parts_d+0x54>
 20113b4:	18800916 	blt	r3,r2,20113dc <__fpcmp_parts_d+0x94>
 20113b8:	21c00417 	ldw	r7,16(r4)
 20113bc:	28c00417 	ldw	r3,16(r5)
 20113c0:	21800317 	ldw	r6,12(r4)
 20113c4:	28800317 	ldw	r2,12(r5)
 20113c8:	19fff436 	bltu	r3,r7,201139c <__fpcmp_parts_d+0x54>
 20113cc:	38c00526 	beq	r7,r3,20113e4 <__fpcmp_parts_d+0x9c>
 20113d0:	38c00236 	bltu	r7,r3,20113dc <__fpcmp_parts_d+0x94>
 20113d4:	19ffec1e 	bne	r3,r7,2011388 <__fpcmp_parts_d+0x40>
 20113d8:	30bfeb2e 	bgeu	r6,r2,2011388 <__fpcmp_parts_d+0x40>
 20113dc:	403fe71e 	bne	r8,zero,201137c <__fpcmp_parts_d+0x34>
 20113e0:	003fef06 	br	20113a0 <__fpcmp_parts_d+0x58>
 20113e4:	11bffa2e 	bgeu	r2,r6,20113d0 <__fpcmp_parts_d+0x88>
 20113e8:	403fe426 	beq	r8,zero,201137c <__fpcmp_parts_d+0x34>
 20113ec:	003fec06 	br	20113a0 <__fpcmp_parts_d+0x58>
 20113f0:	28800117 	ldw	r2,4(r5)
 20113f4:	103fe11e 	bne	r2,zero,201137c <__fpcmp_parts_d+0x34>
 20113f8:	003fe906 	br	20113a0 <__fpcmp_parts_d+0x58>
 20113fc:	11bfdd1e 	bne	r2,r6,2011374 <__fpcmp_parts_d+0x2c>
 2011400:	28c00117 	ldw	r3,4(r5)
 2011404:	20800117 	ldw	r2,4(r4)
 2011408:	1885c83a 	sub	r2,r3,r2
 201140c:	f800283a 	ret

02011410 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2011410:	defff804 	addi	sp,sp,-32
 2011414:	dfc00715 	stw	ra,28(sp)
 2011418:	df000615 	stw	fp,24(sp)
 201141c:	df000604 	addi	fp,sp,24
 2011420:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2011424:	e0bffc17 	ldw	r2,-16(fp)
 2011428:	1004803a 	cmplt	r2,r2,zero
 201142c:	1000081e 	bne	r2,zero,2011450 <close+0x40>
 2011430:	e0bffc17 	ldw	r2,-16(fp)
 2011434:	10800324 	muli	r2,r2,12
 2011438:	1007883a 	mov	r3,r2
 201143c:	00808074 	movhi	r2,513
 2011440:	109a5d04 	addi	r2,r2,26996
 2011444:	1887883a 	add	r3,r3,r2
 2011448:	e0ffff15 	stw	r3,-4(fp)
 201144c:	00000106 	br	2011454 <close+0x44>
 2011450:	e03fff15 	stw	zero,-4(fp)
 2011454:	e0bfff17 	ldw	r2,-4(fp)
 2011458:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 201145c:	e0bffb17 	ldw	r2,-20(fp)
 2011460:	1005003a 	cmpeq	r2,r2,zero
 2011464:	10001d1e 	bne	r2,zero,20114dc <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2011468:	e0bffb17 	ldw	r2,-20(fp)
 201146c:	10800017 	ldw	r2,0(r2)
 2011470:	10800417 	ldw	r2,16(r2)
 2011474:	1005003a 	cmpeq	r2,r2,zero
 2011478:	1000071e 	bne	r2,zero,2011498 <close+0x88>
 201147c:	e0bffb17 	ldw	r2,-20(fp)
 2011480:	10800017 	ldw	r2,0(r2)
 2011484:	10800417 	ldw	r2,16(r2)
 2011488:	e13ffb17 	ldw	r4,-20(fp)
 201148c:	103ee83a 	callr	r2
 2011490:	e0bffe15 	stw	r2,-8(fp)
 2011494:	00000106 	br	201149c <close+0x8c>
 2011498:	e03ffe15 	stw	zero,-8(fp)
 201149c:	e0bffe17 	ldw	r2,-8(fp)
 20114a0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 20114a4:	e13ffc17 	ldw	r4,-16(fp)
 20114a8:	2011fa00 	call	2011fa0 <alt_release_fd>
    if (rval < 0)
 20114ac:	e0bffa17 	ldw	r2,-24(fp)
 20114b0:	1004403a 	cmpge	r2,r2,zero
 20114b4:	1000071e 	bne	r2,zero,20114d4 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 20114b8:	201150c0 	call	201150c <alt_get_errno>
 20114bc:	e0fffa17 	ldw	r3,-24(fp)
 20114c0:	00c7c83a 	sub	r3,zero,r3
 20114c4:	10c00015 	stw	r3,0(r2)
      return -1;
 20114c8:	00bfffc4 	movi	r2,-1
 20114cc:	e0bffd15 	stw	r2,-12(fp)
 20114d0:	00000806 	br	20114f4 <close+0xe4>
    }
    return 0;
 20114d4:	e03ffd15 	stw	zero,-12(fp)
 20114d8:	00000606 	br	20114f4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20114dc:	201150c0 	call	201150c <alt_get_errno>
 20114e0:	1007883a 	mov	r3,r2
 20114e4:	00801444 	movi	r2,81
 20114e8:	18800015 	stw	r2,0(r3)
    return -1;
 20114ec:	00bfffc4 	movi	r2,-1
 20114f0:	e0bffd15 	stw	r2,-12(fp)
 20114f4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 20114f8:	e037883a 	mov	sp,fp
 20114fc:	dfc00117 	ldw	ra,4(sp)
 2011500:	df000017 	ldw	fp,0(sp)
 2011504:	dec00204 	addi	sp,sp,8
 2011508:	f800283a 	ret

0201150c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201150c:	defffd04 	addi	sp,sp,-12
 2011510:	dfc00215 	stw	ra,8(sp)
 2011514:	df000115 	stw	fp,4(sp)
 2011518:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 201151c:	00808074 	movhi	r2,513
 2011520:	109f1304 	addi	r2,r2,31820
 2011524:	10800017 	ldw	r2,0(r2)
 2011528:	1005003a 	cmpeq	r2,r2,zero
 201152c:	1000061e 	bne	r2,zero,2011548 <alt_get_errno+0x3c>
 2011530:	00808074 	movhi	r2,513
 2011534:	109f1304 	addi	r2,r2,31820
 2011538:	10800017 	ldw	r2,0(r2)
 201153c:	103ee83a 	callr	r2
 2011540:	e0bfff15 	stw	r2,-4(fp)
 2011544:	00000306 	br	2011554 <alt_get_errno+0x48>
 2011548:	008080b4 	movhi	r2,514
 201154c:	10a63c04 	addi	r2,r2,-26384
 2011550:	e0bfff15 	stw	r2,-4(fp)
 2011554:	e0bfff17 	ldw	r2,-4(fp)
}
 2011558:	e037883a 	mov	sp,fp
 201155c:	dfc00117 	ldw	ra,4(sp)
 2011560:	df000017 	ldw	fp,0(sp)
 2011564:	dec00204 	addi	sp,sp,8
 2011568:	f800283a 	ret

0201156c <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 201156c:	defffb04 	addi	sp,sp,-20
 2011570:	df000415 	stw	fp,16(sp)
 2011574:	df000404 	addi	fp,sp,16
 2011578:	e13ffe15 	stw	r4,-8(fp)
 201157c:	e17fff15 	stw	r5,-4(fp)
  {
    len = NIOS2_DCACHE_SIZE;
  }
  #endif

  end = ((char*) start) + len; 
 2011580:	e0fffe17 	ldw	r3,-8(fp)
 2011584:	e0bfff17 	ldw	r2,-4(fp)
 2011588:	1885883a 	add	r2,r3,r2
 201158c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 2011590:	e0bffe17 	ldw	r2,-8(fp)
 2011594:	e0bffd15 	stw	r2,-12(fp)
 2011598:	00000506 	br	20115b0 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
 201159c:	e0bffd17 	ldw	r2,-12(fp)
 20115a0:	1000001b 	flushda	0(r2)
  }
  #endif

  end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 20115a4:	e0bffd17 	ldw	r2,-12(fp)
 20115a8:	10800804 	addi	r2,r2,32
 20115ac:	e0bffd15 	stw	r2,-12(fp)
 20115b0:	e0fffd17 	ldw	r3,-12(fp)
 20115b4:	e0bffc17 	ldw	r2,-16(fp)
 20115b8:	18bff836 	bltu	r3,r2,201159c <alt_dcache_flush+0x30>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
 20115bc:	e0bffe17 	ldw	r2,-8(fp)
 20115c0:	108007cc 	andi	r2,r2,31
 20115c4:	1005003a 	cmpeq	r2,r2,zero
 20115c8:	1000021e 	bne	r2,zero,20115d4 <alt_dcache_flush+0x68>
  {
    ALT_FLUSH_DATA(i);
 20115cc:	e0bffd17 	ldw	r2,-12(fp)
 20115d0:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 20115d4:	e037883a 	mov	sp,fp
 20115d8:	df000017 	ldw	fp,0(sp)
 20115dc:	dec00104 	addi	sp,sp,4
 20115e0:	f800283a 	ret

020115e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 20115e4:	defffe04 	addi	sp,sp,-8
 20115e8:	df000115 	stw	fp,4(sp)
 20115ec:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 20115f0:	e03fff15 	stw	zero,-4(fp)
 20115f4:	00000506 	br	201160c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 20115f8:	e0bfff17 	ldw	r2,-4(fp)
 20115fc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 2011600:	e0bfff17 	ldw	r2,-4(fp)
 2011604:	10800804 	addi	r2,r2,32
 2011608:	e0bfff15 	stw	r2,-4(fp)
 201160c:	e0bfff17 	ldw	r2,-4(fp)
 2011610:	10808030 	cmpltui	r2,r2,512
 2011614:	103ff81e 	bne	r2,zero,20115f8 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2011618:	e037883a 	mov	sp,fp
 201161c:	df000017 	ldw	fp,0(sp)
 2011620:	dec00104 	addi	sp,sp,4
 2011624:	f800283a 	ret

02011628 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2011628:	defffc04 	addi	sp,sp,-16
 201162c:	df000315 	stw	fp,12(sp)
 2011630:	df000304 	addi	fp,sp,12
 2011634:	e13ffd15 	stw	r4,-12(fp)
 2011638:	e17ffe15 	stw	r5,-8(fp)
 201163c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2011640:	e0bfff17 	ldw	r2,-4(fp)
}
 2011644:	e037883a 	mov	sp,fp
 2011648:	df000017 	ldw	fp,0(sp)
 201164c:	dec00104 	addi	sp,sp,4
 2011650:	f800283a 	ret

02011654 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 2011654:	defffb04 	addi	sp,sp,-20
 2011658:	dfc00415 	stw	ra,16(sp)
 201165c:	df000315 	stw	fp,12(sp)
 2011660:	df000304 	addi	fp,sp,12
 2011664:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 2011668:	e13ffe17 	ldw	r4,-8(fp)
 201166c:	d1600d04 	addi	r5,gp,-32716
 2011670:	20145c00 	call	20145c0 <alt_find_dev>
 2011674:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
 2011678:	e0bffd17 	ldw	r2,-12(fp)
 201167c:	1005003a 	cmpeq	r2,r2,zero
 2011680:	10000b1e 	bne	r2,zero,20116b0 <alt_flash_open_dev+0x5c>
 2011684:	e0bffd17 	ldw	r2,-12(fp)
 2011688:	10800317 	ldw	r2,12(r2)
 201168c:	1005003a 	cmpeq	r2,r2,zero
 2011690:	1000071e 	bne	r2,zero,20116b0 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
 2011694:	e0bffd17 	ldw	r2,-12(fp)
 2011698:	10800317 	ldw	r2,12(r2)
 201169c:	e13ffd17 	ldw	r4,-12(fp)
 20116a0:	e17ffe17 	ldw	r5,-8(fp)
 20116a4:	103ee83a 	callr	r2
 20116a8:	e0bfff15 	stw	r2,-4(fp)
 20116ac:	00000206 	br	20116b8 <alt_flash_open_dev+0x64>
  }

  return dev;
 20116b0:	e0bffd17 	ldw	r2,-12(fp)
 20116b4:	e0bfff15 	stw	r2,-4(fp)
 20116b8:	e0bfff17 	ldw	r2,-4(fp)
}
 20116bc:	e037883a 	mov	sp,fp
 20116c0:	dfc00117 	ldw	ra,4(sp)
 20116c4:	df000017 	ldw	fp,0(sp)
 20116c8:	dec00204 	addi	sp,sp,8
 20116cc:	f800283a 	ret

020116d0 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 20116d0:	defffd04 	addi	sp,sp,-12
 20116d4:	dfc00215 	stw	ra,8(sp)
 20116d8:	df000115 	stw	fp,4(sp)
 20116dc:	df000104 	addi	fp,sp,4
 20116e0:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 20116e4:	e0bfff17 	ldw	r2,-4(fp)
 20116e8:	1005003a 	cmpeq	r2,r2,zero
 20116ec:	1000081e 	bne	r2,zero,2011710 <alt_flash_close_dev+0x40>
 20116f0:	e0bfff17 	ldw	r2,-4(fp)
 20116f4:	10800417 	ldw	r2,16(r2)
 20116f8:	1005003a 	cmpeq	r2,r2,zero
 20116fc:	1000041e 	bne	r2,zero,2011710 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
 2011700:	e0bfff17 	ldw	r2,-4(fp)
 2011704:	10800417 	ldw	r2,16(r2)
 2011708:	e13fff17 	ldw	r4,-4(fp)
 201170c:	103ee83a 	callr	r2
  }
  return;
}
 2011710:	e037883a 	mov	sp,fp
 2011714:	dfc00117 	ldw	ra,4(sp)
 2011718:	df000017 	ldw	fp,0(sp)
 201171c:	dec00204 	addi	sp,sp,8
 2011720:	f800283a 	ret

02011724 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2011724:	defff904 	addi	sp,sp,-28
 2011728:	dfc00615 	stw	ra,24(sp)
 201172c:	df000515 	stw	fp,20(sp)
 2011730:	df000504 	addi	fp,sp,20
 2011734:	e13ffc15 	stw	r4,-16(fp)
 2011738:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 201173c:	e0bffc17 	ldw	r2,-16(fp)
 2011740:	1004803a 	cmplt	r2,r2,zero
 2011744:	1000081e 	bne	r2,zero,2011768 <fstat+0x44>
 2011748:	e0bffc17 	ldw	r2,-16(fp)
 201174c:	10800324 	muli	r2,r2,12
 2011750:	1007883a 	mov	r3,r2
 2011754:	00808074 	movhi	r2,513
 2011758:	109a5d04 	addi	r2,r2,26996
 201175c:	1887883a 	add	r3,r3,r2
 2011760:	e0ffff15 	stw	r3,-4(fp)
 2011764:	00000106 	br	201176c <fstat+0x48>
 2011768:	e03fff15 	stw	zero,-4(fp)
 201176c:	e0bfff17 	ldw	r2,-4(fp)
 2011770:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2011774:	e0bffb17 	ldw	r2,-20(fp)
 2011778:	1005003a 	cmpeq	r2,r2,zero
 201177c:	1000121e 	bne	r2,zero,20117c8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 2011780:	e0bffb17 	ldw	r2,-20(fp)
 2011784:	10800017 	ldw	r2,0(r2)
 2011788:	10800817 	ldw	r2,32(r2)
 201178c:	1005003a 	cmpeq	r2,r2,zero
 2011790:	1000081e 	bne	r2,zero,20117b4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 2011794:	e0bffb17 	ldw	r2,-20(fp)
 2011798:	10800017 	ldw	r2,0(r2)
 201179c:	10800817 	ldw	r2,32(r2)
 20117a0:	e13ffb17 	ldw	r4,-20(fp)
 20117a4:	e17ffd17 	ldw	r5,-12(fp)
 20117a8:	103ee83a 	callr	r2
 20117ac:	e0bffe15 	stw	r2,-8(fp)
 20117b0:	00000b06 	br	20117e0 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 20117b4:	e0fffd17 	ldw	r3,-12(fp)
 20117b8:	00880004 	movi	r2,8192
 20117bc:	18800115 	stw	r2,4(r3)
      return 0;
 20117c0:	e03ffe15 	stw	zero,-8(fp)
 20117c4:	00000606 	br	20117e0 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20117c8:	20117f80 	call	20117f8 <alt_get_errno>
 20117cc:	1007883a 	mov	r3,r2
 20117d0:	00801444 	movi	r2,81
 20117d4:	18800015 	stw	r2,0(r3)
    return -1;
 20117d8:	00bfffc4 	movi	r2,-1
 20117dc:	e0bffe15 	stw	r2,-8(fp)
 20117e0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 20117e4:	e037883a 	mov	sp,fp
 20117e8:	dfc00117 	ldw	ra,4(sp)
 20117ec:	df000017 	ldw	fp,0(sp)
 20117f0:	dec00204 	addi	sp,sp,8
 20117f4:	f800283a 	ret

020117f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20117f8:	defffd04 	addi	sp,sp,-12
 20117fc:	dfc00215 	stw	ra,8(sp)
 2011800:	df000115 	stw	fp,4(sp)
 2011804:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2011808:	00808074 	movhi	r2,513
 201180c:	109f1304 	addi	r2,r2,31820
 2011810:	10800017 	ldw	r2,0(r2)
 2011814:	1005003a 	cmpeq	r2,r2,zero
 2011818:	1000061e 	bne	r2,zero,2011834 <alt_get_errno+0x3c>
 201181c:	00808074 	movhi	r2,513
 2011820:	109f1304 	addi	r2,r2,31820
 2011824:	10800017 	ldw	r2,0(r2)
 2011828:	103ee83a 	callr	r2
 201182c:	e0bfff15 	stw	r2,-4(fp)
 2011830:	00000306 	br	2011840 <alt_get_errno+0x48>
 2011834:	008080b4 	movhi	r2,514
 2011838:	10a63c04 	addi	r2,r2,-26384
 201183c:	e0bfff15 	stw	r2,-4(fp)
 2011840:	e0bfff17 	ldw	r2,-4(fp)
}
 2011844:	e037883a 	mov	sp,fp
 2011848:	dfc00117 	ldw	ra,4(sp)
 201184c:	df000017 	ldw	fp,0(sp)
 2011850:	dec00204 	addi	sp,sp,8
 2011854:	f800283a 	ret

02011858 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 2011858:	deffef04 	addi	sp,sp,-68
 201185c:	df001015 	stw	fp,64(sp)
 2011860:	df001004 	addi	fp,sp,64
 2011864:	e13ffc15 	stw	r4,-16(fp)
 2011868:	e17ffd15 	stw	r5,-12(fp)
 201186c:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 2011870:	00bffa84 	movi	r2,-22
 2011874:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2011878:	e0bffc17 	ldw	r2,-16(fp)
 201187c:	10800828 	cmpgeui	r2,r2,32
 2011880:	1000601e 	bne	r2,zero,2011a04 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011884:	0005303a 	rdctl	r2,status
 2011888:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201188c:	e0fff917 	ldw	r3,-28(fp)
 2011890:	00bfff84 	movi	r2,-2
 2011894:	1884703a 	and	r2,r3,r2
 2011898:	1001703a 	wrctl	status,r2
  
  return context;
 201189c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 20118a0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 20118a4:	e0bffc17 	ldw	r2,-16(fp)
 20118a8:	00c080b4 	movhi	r3,514
 20118ac:	18e69004 	addi	r3,r3,-26048
 20118b0:	100490fa 	slli	r2,r2,3
 20118b4:	10c7883a 	add	r3,r2,r3
 20118b8:	e0bffe17 	ldw	r2,-8(fp)
 20118bc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 20118c0:	e0bffc17 	ldw	r2,-16(fp)
 20118c4:	00c080b4 	movhi	r3,514
 20118c8:	18e69004 	addi	r3,r3,-26048
 20118cc:	100490fa 	slli	r2,r2,3
 20118d0:	10c5883a 	add	r2,r2,r3
 20118d4:	10c00104 	addi	r3,r2,4
 20118d8:	e0bffd17 	ldw	r2,-12(fp)
 20118dc:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 20118e0:	e0bffe17 	ldw	r2,-8(fp)
 20118e4:	1005003a 	cmpeq	r2,r2,zero
 20118e8:	1000201e 	bne	r2,zero,201196c <alt_irq_register+0x114>
 20118ec:	e0bffc17 	ldw	r2,-16(fp)
 20118f0:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20118f4:	0005303a 	rdctl	r2,status
 20118f8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20118fc:	e0fff617 	ldw	r3,-40(fp)
 2011900:	00bfff84 	movi	r2,-2
 2011904:	1884703a 	and	r2,r3,r2
 2011908:	1001703a 	wrctl	status,r2
  
  return context;
 201190c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2011910:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 2011914:	e0fff717 	ldw	r3,-36(fp)
 2011918:	00800044 	movi	r2,1
 201191c:	10c4983a 	sll	r2,r2,r3
 2011920:	1007883a 	mov	r3,r2
 2011924:	008080b4 	movhi	r2,514
 2011928:	10a64004 	addi	r2,r2,-26368
 201192c:	10800017 	ldw	r2,0(r2)
 2011930:	1886b03a 	or	r3,r3,r2
 2011934:	008080b4 	movhi	r2,514
 2011938:	10a64004 	addi	r2,r2,-26368
 201193c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2011940:	008080b4 	movhi	r2,514
 2011944:	10a64004 	addi	r2,r2,-26368
 2011948:	10800017 	ldw	r2,0(r2)
 201194c:	100170fa 	wrctl	ienable,r2
 2011950:	e0bff817 	ldw	r2,-32(fp)
 2011954:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011958:	e0bff517 	ldw	r2,-44(fp)
 201195c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2011960:	0005883a 	mov	r2,zero
 2011964:	e0bfff15 	stw	r2,-4(fp)
 2011968:	00002006 	br	20119ec <alt_irq_register+0x194>
 201196c:	e0bffc17 	ldw	r2,-16(fp)
 2011970:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011974:	0005303a 	rdctl	r2,status
 2011978:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201197c:	e0fff217 	ldw	r3,-56(fp)
 2011980:	00bfff84 	movi	r2,-2
 2011984:	1884703a 	and	r2,r3,r2
 2011988:	1001703a 	wrctl	status,r2
  
  return context;
 201198c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2011990:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 2011994:	e0fff317 	ldw	r3,-52(fp)
 2011998:	00800044 	movi	r2,1
 201199c:	10c4983a 	sll	r2,r2,r3
 20119a0:	0084303a 	nor	r2,zero,r2
 20119a4:	1007883a 	mov	r3,r2
 20119a8:	008080b4 	movhi	r2,514
 20119ac:	10a64004 	addi	r2,r2,-26368
 20119b0:	10800017 	ldw	r2,0(r2)
 20119b4:	1886703a 	and	r3,r3,r2
 20119b8:	008080b4 	movhi	r2,514
 20119bc:	10a64004 	addi	r2,r2,-26368
 20119c0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20119c4:	008080b4 	movhi	r2,514
 20119c8:	10a64004 	addi	r2,r2,-26368
 20119cc:	10800017 	ldw	r2,0(r2)
 20119d0:	100170fa 	wrctl	ienable,r2
 20119d4:	e0bff417 	ldw	r2,-48(fp)
 20119d8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20119dc:	e0bff117 	ldw	r2,-60(fp)
 20119e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20119e4:	0005883a 	mov	r2,zero
 20119e8:	e0bfff15 	stw	r2,-4(fp)
 20119ec:	e0bfff17 	ldw	r2,-4(fp)
 20119f0:	e0bffb15 	stw	r2,-20(fp)
 20119f4:	e0bffa17 	ldw	r2,-24(fp)
 20119f8:	e0bff015 	stw	r2,-64(fp)
 20119fc:	e0bff017 	ldw	r2,-64(fp)
 2011a00:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 2011a04:	e0bffb17 	ldw	r2,-20(fp)
}
 2011a08:	e037883a 	mov	sp,fp
 2011a0c:	df000017 	ldw	fp,0(sp)
 2011a10:	dec00104 	addi	sp,sp,4
 2011a14:	f800283a 	ret

02011a18 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2011a18:	deffeb04 	addi	sp,sp,-84
 2011a1c:	dfc01415 	stw	ra,80(sp)
 2011a20:	df001315 	stw	fp,76(sp)
 2011a24:	df001304 	addi	fp,sp,76
 2011a28:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2011a2c:	e0bffd17 	ldw	r2,-12(fp)
 2011a30:	1004803a 	cmplt	r2,r2,zero
 2011a34:	1000081e 	bne	r2,zero,2011a58 <isatty+0x40>
 2011a38:	e0bffd17 	ldw	r2,-12(fp)
 2011a3c:	10800324 	muli	r2,r2,12
 2011a40:	1007883a 	mov	r3,r2
 2011a44:	00808074 	movhi	r2,513
 2011a48:	109a5d04 	addi	r2,r2,26996
 2011a4c:	1887883a 	add	r3,r3,r2
 2011a50:	e0ffff15 	stw	r3,-4(fp)
 2011a54:	00000106 	br	2011a5c <isatty+0x44>
 2011a58:	e03fff15 	stw	zero,-4(fp)
 2011a5c:	e0bfff17 	ldw	r2,-4(fp)
 2011a60:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 2011a64:	e0bfed17 	ldw	r2,-76(fp)
 2011a68:	1005003a 	cmpeq	r2,r2,zero
 2011a6c:	10000f1e 	bne	r2,zero,2011aac <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2011a70:	e0bfed17 	ldw	r2,-76(fp)
 2011a74:	10800017 	ldw	r2,0(r2)
 2011a78:	10800817 	ldw	r2,32(r2)
 2011a7c:	1004c03a 	cmpne	r2,r2,zero
 2011a80:	1000031e 	bne	r2,zero,2011a90 <isatty+0x78>
    {
      return 1;
 2011a84:	00800044 	movi	r2,1
 2011a88:	e0bffe15 	stw	r2,-8(fp)
 2011a8c:	00000c06 	br	2011ac0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 2011a90:	e17fee04 	addi	r5,fp,-72
 2011a94:	e13ffd17 	ldw	r4,-12(fp)
 2011a98:	20117240 	call	2011724 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 2011a9c:	e0bfef17 	ldw	r2,-68(fp)
 2011aa0:	10880020 	cmpeqi	r2,r2,8192
 2011aa4:	e0bffe15 	stw	r2,-8(fp)
 2011aa8:	00000506 	br	2011ac0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2011aac:	2011ad80 	call	2011ad8 <alt_get_errno>
 2011ab0:	1007883a 	mov	r3,r2
 2011ab4:	00801444 	movi	r2,81
 2011ab8:	18800015 	stw	r2,0(r3)
    return 0;
 2011abc:	e03ffe15 	stw	zero,-8(fp)
 2011ac0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 2011ac4:	e037883a 	mov	sp,fp
 2011ac8:	dfc00117 	ldw	ra,4(sp)
 2011acc:	df000017 	ldw	fp,0(sp)
 2011ad0:	dec00204 	addi	sp,sp,8
 2011ad4:	f800283a 	ret

02011ad8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2011ad8:	defffd04 	addi	sp,sp,-12
 2011adc:	dfc00215 	stw	ra,8(sp)
 2011ae0:	df000115 	stw	fp,4(sp)
 2011ae4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2011ae8:	00808074 	movhi	r2,513
 2011aec:	109f1304 	addi	r2,r2,31820
 2011af0:	10800017 	ldw	r2,0(r2)
 2011af4:	1005003a 	cmpeq	r2,r2,zero
 2011af8:	1000061e 	bne	r2,zero,2011b14 <alt_get_errno+0x3c>
 2011afc:	00808074 	movhi	r2,513
 2011b00:	109f1304 	addi	r2,r2,31820
 2011b04:	10800017 	ldw	r2,0(r2)
 2011b08:	103ee83a 	callr	r2
 2011b0c:	e0bfff15 	stw	r2,-4(fp)
 2011b10:	00000306 	br	2011b20 <alt_get_errno+0x48>
 2011b14:	008080b4 	movhi	r2,514
 2011b18:	10a63c04 	addi	r2,r2,-26384
 2011b1c:	e0bfff15 	stw	r2,-4(fp)
 2011b20:	e0bfff17 	ldw	r2,-4(fp)
}
 2011b24:	e037883a 	mov	sp,fp
 2011b28:	dfc00117 	ldw	ra,4(sp)
 2011b2c:	df000017 	ldw	fp,0(sp)
 2011b30:	dec00204 	addi	sp,sp,8
 2011b34:	f800283a 	ret

02011b38 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2011b38:	defffe04 	addi	sp,sp,-8
 2011b3c:	dfc00115 	stw	ra,4(sp)
 2011b40:	df000015 	stw	fp,0(sp)
 2011b44:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2011b48:	01008074 	movhi	r4,513
 2011b4c:	211f1a04 	addi	r4,r4,31848
 2011b50:	01408074 	movhi	r5,513
 2011b54:	2957fc04 	addi	r5,r5,24560
 2011b58:	01808074 	movhi	r6,513
 2011b5c:	319f1a04 	addi	r6,r6,31848
 2011b60:	2011bb80 	call	2011bb8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2011b64:	01008034 	movhi	r4,512
 2011b68:	21000804 	addi	r4,r4,32
 2011b6c:	01408034 	movhi	r5,512
 2011b70:	29400804 	addi	r5,r5,32
 2011b74:	01808034 	movhi	r6,512
 2011b78:	31806d04 	addi	r6,r6,436
 2011b7c:	2011bb80 	call	2011bb8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2011b80:	01008074 	movhi	r4,513
 2011b84:	21158704 	addi	r4,r4,22044
 2011b88:	01408074 	movhi	r5,513
 2011b8c:	29558704 	addi	r5,r5,22044
 2011b90:	01808074 	movhi	r6,513
 2011b94:	3197fc04 	addi	r6,r6,24560
 2011b98:	2011bb80 	call	2011bb8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2011b9c:	20115e40 	call	20115e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 2011ba0:	20146540 	call	2014654 <alt_icache_flush_all>
}
 2011ba4:	e037883a 	mov	sp,fp
 2011ba8:	dfc00117 	ldw	ra,4(sp)
 2011bac:	df000017 	ldw	fp,0(sp)
 2011bb0:	dec00204 	addi	sp,sp,8
 2011bb4:	f800283a 	ret

02011bb8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2011bb8:	defffc04 	addi	sp,sp,-16
 2011bbc:	df000315 	stw	fp,12(sp)
 2011bc0:	df000304 	addi	fp,sp,12
 2011bc4:	e13ffd15 	stw	r4,-12(fp)
 2011bc8:	e17ffe15 	stw	r5,-8(fp)
 2011bcc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2011bd0:	e0fffe17 	ldw	r3,-8(fp)
 2011bd4:	e0bffd17 	ldw	r2,-12(fp)
 2011bd8:	18800e26 	beq	r3,r2,2011c14 <alt_load_section+0x5c>
  {
    while( to != end )
 2011bdc:	00000a06 	br	2011c08 <alt_load_section+0x50>
    {
      *to++ = *from++;
 2011be0:	e0bffd17 	ldw	r2,-12(fp)
 2011be4:	10c00017 	ldw	r3,0(r2)
 2011be8:	e0bffe17 	ldw	r2,-8(fp)
 2011bec:	10c00015 	stw	r3,0(r2)
 2011bf0:	e0bffe17 	ldw	r2,-8(fp)
 2011bf4:	10800104 	addi	r2,r2,4
 2011bf8:	e0bffe15 	stw	r2,-8(fp)
 2011bfc:	e0bffd17 	ldw	r2,-12(fp)
 2011c00:	10800104 	addi	r2,r2,4
 2011c04:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2011c08:	e0fffe17 	ldw	r3,-8(fp)
 2011c0c:	e0bfff17 	ldw	r2,-4(fp)
 2011c10:	18bff31e 	bne	r3,r2,2011be0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2011c14:	e037883a 	mov	sp,fp
 2011c18:	df000017 	ldw	fp,0(sp)
 2011c1c:	dec00104 	addi	sp,sp,4
 2011c20:	f800283a 	ret

02011c24 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2011c24:	defff804 	addi	sp,sp,-32
 2011c28:	dfc00715 	stw	ra,28(sp)
 2011c2c:	df000615 	stw	fp,24(sp)
 2011c30:	df000604 	addi	fp,sp,24
 2011c34:	e13ffc15 	stw	r4,-16(fp)
 2011c38:	e17ffd15 	stw	r5,-12(fp)
 2011c3c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2011c40:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2011c44:	e0bffc17 	ldw	r2,-16(fp)
 2011c48:	1004803a 	cmplt	r2,r2,zero
 2011c4c:	1000081e 	bne	r2,zero,2011c70 <lseek+0x4c>
 2011c50:	e0bffc17 	ldw	r2,-16(fp)
 2011c54:	10800324 	muli	r2,r2,12
 2011c58:	1007883a 	mov	r3,r2
 2011c5c:	00808074 	movhi	r2,513
 2011c60:	109a5d04 	addi	r2,r2,26996
 2011c64:	1887883a 	add	r3,r3,r2
 2011c68:	e0ffff15 	stw	r3,-4(fp)
 2011c6c:	00000106 	br	2011c74 <lseek+0x50>
 2011c70:	e03fff15 	stw	zero,-4(fp)
 2011c74:	e0bfff17 	ldw	r2,-4(fp)
 2011c78:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 2011c7c:	e0bffb17 	ldw	r2,-20(fp)
 2011c80:	1005003a 	cmpeq	r2,r2,zero
 2011c84:	1000111e 	bne	r2,zero,2011ccc <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2011c88:	e0bffb17 	ldw	r2,-20(fp)
 2011c8c:	10800017 	ldw	r2,0(r2)
 2011c90:	10800717 	ldw	r2,28(r2)
 2011c94:	1005003a 	cmpeq	r2,r2,zero
 2011c98:	1000091e 	bne	r2,zero,2011cc0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2011c9c:	e0bffb17 	ldw	r2,-20(fp)
 2011ca0:	10800017 	ldw	r2,0(r2)
 2011ca4:	10800717 	ldw	r2,28(r2)
 2011ca8:	e13ffb17 	ldw	r4,-20(fp)
 2011cac:	e17ffd17 	ldw	r5,-12(fp)
 2011cb0:	e1bffe17 	ldw	r6,-8(fp)
 2011cb4:	103ee83a 	callr	r2
 2011cb8:	e0bffa15 	stw	r2,-24(fp)
 2011cbc:	00000506 	br	2011cd4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2011cc0:	00bfde84 	movi	r2,-134
 2011cc4:	e0bffa15 	stw	r2,-24(fp)
 2011cc8:	00000206 	br	2011cd4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 2011ccc:	00bfebc4 	movi	r2,-81
 2011cd0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 2011cd4:	e0bffa17 	ldw	r2,-24(fp)
 2011cd8:	1004403a 	cmpge	r2,r2,zero
 2011cdc:	1000071e 	bne	r2,zero,2011cfc <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 2011ce0:	2011d140 	call	2011d14 <alt_get_errno>
 2011ce4:	1007883a 	mov	r3,r2
 2011ce8:	e0bffa17 	ldw	r2,-24(fp)
 2011cec:	0085c83a 	sub	r2,zero,r2
 2011cf0:	18800015 	stw	r2,0(r3)
    rc = -1;
 2011cf4:	00bfffc4 	movi	r2,-1
 2011cf8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 2011cfc:	e0bffa17 	ldw	r2,-24(fp)
}
 2011d00:	e037883a 	mov	sp,fp
 2011d04:	dfc00117 	ldw	ra,4(sp)
 2011d08:	df000017 	ldw	fp,0(sp)
 2011d0c:	dec00204 	addi	sp,sp,8
 2011d10:	f800283a 	ret

02011d14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2011d14:	defffd04 	addi	sp,sp,-12
 2011d18:	dfc00215 	stw	ra,8(sp)
 2011d1c:	df000115 	stw	fp,4(sp)
 2011d20:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2011d24:	00808074 	movhi	r2,513
 2011d28:	109f1304 	addi	r2,r2,31820
 2011d2c:	10800017 	ldw	r2,0(r2)
 2011d30:	1005003a 	cmpeq	r2,r2,zero
 2011d34:	1000061e 	bne	r2,zero,2011d50 <alt_get_errno+0x3c>
 2011d38:	00808074 	movhi	r2,513
 2011d3c:	109f1304 	addi	r2,r2,31820
 2011d40:	10800017 	ldw	r2,0(r2)
 2011d44:	103ee83a 	callr	r2
 2011d48:	e0bfff15 	stw	r2,-4(fp)
 2011d4c:	00000306 	br	2011d5c <alt_get_errno+0x48>
 2011d50:	008080b4 	movhi	r2,514
 2011d54:	10a63c04 	addi	r2,r2,-26384
 2011d58:	e0bfff15 	stw	r2,-4(fp)
 2011d5c:	e0bfff17 	ldw	r2,-4(fp)
}
 2011d60:	e037883a 	mov	sp,fp
 2011d64:	dfc00117 	ldw	ra,4(sp)
 2011d68:	df000017 	ldw	fp,0(sp)
 2011d6c:	dec00204 	addi	sp,sp,8
 2011d70:	f800283a 	ret

02011d74 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2011d74:	defffd04 	addi	sp,sp,-12
 2011d78:	dfc00215 	stw	ra,8(sp)
 2011d7c:	df000115 	stw	fp,4(sp)
 2011d80:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2011d84:	0009883a 	mov	r4,zero
 2011d88:	20124100 	call	2012410 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2011d8c:	20124440 	call	2012444 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2011d90:	01008074 	movhi	r4,513
 2011d94:	2117f104 	addi	r4,r4,24516
 2011d98:	01408074 	movhi	r5,513
 2011d9c:	2957f104 	addi	r5,r5,24516
 2011da0:	01808074 	movhi	r6,513
 2011da4:	3197f104 	addi	r6,r6,24516
 2011da8:	2014a140 	call	2014a14 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2011dac:	20144f80 	call	20144f8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2011db0:	01008074 	movhi	r4,513
 2011db4:	21115704 	addi	r4,r4,17756
 2011db8:	20152100 	call	2015210 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2011dbc:	d1273a17 	ldw	r4,-25368(gp)
 2011dc0:	d1673b17 	ldw	r5,-25364(gp)
 2011dc4:	d1a73c17 	ldw	r6,-25360(gp)
 2011dc8:	20003400 	call	2000340 <main>
 2011dcc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2011dd0:	01000044 	movi	r4,1
 2011dd4:	20114100 	call	2011410 <close>
  exit (result);
 2011dd8:	e13fff17 	ldw	r4,-4(fp)
 2011ddc:	20152240 	call	2015224 <exit>

02011de0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 2011de0:	defffe04 	addi	sp,sp,-8
 2011de4:	df000115 	stw	fp,4(sp)
 2011de8:	df000104 	addi	fp,sp,4
 2011dec:	e13fff15 	stw	r4,-4(fp)
}
 2011df0:	e037883a 	mov	sp,fp
 2011df4:	df000017 	ldw	fp,0(sp)
 2011df8:	dec00104 	addi	sp,sp,4
 2011dfc:	f800283a 	ret

02011e00 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2011e00:	defffe04 	addi	sp,sp,-8
 2011e04:	df000115 	stw	fp,4(sp)
 2011e08:	df000104 	addi	fp,sp,4
 2011e0c:	e13fff15 	stw	r4,-4(fp)
}
 2011e10:	e037883a 	mov	sp,fp
 2011e14:	df000017 	ldw	fp,0(sp)
 2011e18:	dec00104 	addi	sp,sp,4
 2011e1c:	f800283a 	ret

02011e20 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2011e20:	defff704 	addi	sp,sp,-36
 2011e24:	dfc00815 	stw	ra,32(sp)
 2011e28:	df000715 	stw	fp,28(sp)
 2011e2c:	df000704 	addi	fp,sp,28
 2011e30:	e13ffb15 	stw	r4,-20(fp)
 2011e34:	e17ffc15 	stw	r5,-16(fp)
 2011e38:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2011e3c:	e0bffb17 	ldw	r2,-20(fp)
 2011e40:	1004803a 	cmplt	r2,r2,zero
 2011e44:	1000081e 	bne	r2,zero,2011e68 <read+0x48>
 2011e48:	e0bffb17 	ldw	r2,-20(fp)
 2011e4c:	10800324 	muli	r2,r2,12
 2011e50:	1007883a 	mov	r3,r2
 2011e54:	00808074 	movhi	r2,513
 2011e58:	109a5d04 	addi	r2,r2,26996
 2011e5c:	1887883a 	add	r3,r3,r2
 2011e60:	e0ffff15 	stw	r3,-4(fp)
 2011e64:	00000106 	br	2011e6c <read+0x4c>
 2011e68:	e03fff15 	stw	zero,-4(fp)
 2011e6c:	e0bfff17 	ldw	r2,-4(fp)
 2011e70:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 2011e74:	e0bffa17 	ldw	r2,-24(fp)
 2011e78:	1005003a 	cmpeq	r2,r2,zero
 2011e7c:	1000241e 	bne	r2,zero,2011f10 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2011e80:	e0bffa17 	ldw	r2,-24(fp)
 2011e84:	10800217 	ldw	r2,8(r2)
 2011e88:	108000cc 	andi	r2,r2,3
 2011e8c:	10800060 	cmpeqi	r2,r2,1
 2011e90:	10001a1e 	bne	r2,zero,2011efc <read+0xdc>
 2011e94:	e0bffa17 	ldw	r2,-24(fp)
 2011e98:	10800017 	ldw	r2,0(r2)
 2011e9c:	10800517 	ldw	r2,20(r2)
 2011ea0:	1005003a 	cmpeq	r2,r2,zero
 2011ea4:	1000151e 	bne	r2,zero,2011efc <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2011ea8:	e0bffa17 	ldw	r2,-24(fp)
 2011eac:	10800017 	ldw	r2,0(r2)
 2011eb0:	10800517 	ldw	r2,20(r2)
 2011eb4:	e17ffc17 	ldw	r5,-16(fp)
 2011eb8:	e1bffd17 	ldw	r6,-12(fp)
 2011ebc:	e13ffa17 	ldw	r4,-24(fp)
 2011ec0:	103ee83a 	callr	r2
 2011ec4:	e0bff915 	stw	r2,-28(fp)
 2011ec8:	e0bff917 	ldw	r2,-28(fp)
 2011ecc:	1004403a 	cmpge	r2,r2,zero
 2011ed0:	1000071e 	bne	r2,zero,2011ef0 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 2011ed4:	2011f400 	call	2011f40 <alt_get_errno>
 2011ed8:	e0fff917 	ldw	r3,-28(fp)
 2011edc:	00c7c83a 	sub	r3,zero,r3
 2011ee0:	10c00015 	stw	r3,0(r2)
          return -1;
 2011ee4:	00bfffc4 	movi	r2,-1
 2011ee8:	e0bffe15 	stw	r2,-8(fp)
 2011eec:	00000e06 	br	2011f28 <read+0x108>
        }
        return rval;
 2011ef0:	e0bff917 	ldw	r2,-28(fp)
 2011ef4:	e0bffe15 	stw	r2,-8(fp)
 2011ef8:	00000b06 	br	2011f28 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2011efc:	2011f400 	call	2011f40 <alt_get_errno>
 2011f00:	1007883a 	mov	r3,r2
 2011f04:	00800344 	movi	r2,13
 2011f08:	18800015 	stw	r2,0(r3)
 2011f0c:	00000406 	br	2011f20 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 2011f10:	2011f400 	call	2011f40 <alt_get_errno>
 2011f14:	1007883a 	mov	r3,r2
 2011f18:	00801444 	movi	r2,81
 2011f1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2011f20:	00bfffc4 	movi	r2,-1
 2011f24:	e0bffe15 	stw	r2,-8(fp)
 2011f28:	e0bffe17 	ldw	r2,-8(fp)
}
 2011f2c:	e037883a 	mov	sp,fp
 2011f30:	dfc00117 	ldw	ra,4(sp)
 2011f34:	df000017 	ldw	fp,0(sp)
 2011f38:	dec00204 	addi	sp,sp,8
 2011f3c:	f800283a 	ret

02011f40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2011f40:	defffd04 	addi	sp,sp,-12
 2011f44:	dfc00215 	stw	ra,8(sp)
 2011f48:	df000115 	stw	fp,4(sp)
 2011f4c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2011f50:	00808074 	movhi	r2,513
 2011f54:	109f1304 	addi	r2,r2,31820
 2011f58:	10800017 	ldw	r2,0(r2)
 2011f5c:	1005003a 	cmpeq	r2,r2,zero
 2011f60:	1000061e 	bne	r2,zero,2011f7c <alt_get_errno+0x3c>
 2011f64:	00808074 	movhi	r2,513
 2011f68:	109f1304 	addi	r2,r2,31820
 2011f6c:	10800017 	ldw	r2,0(r2)
 2011f70:	103ee83a 	callr	r2
 2011f74:	e0bfff15 	stw	r2,-4(fp)
 2011f78:	00000306 	br	2011f88 <alt_get_errno+0x48>
 2011f7c:	008080b4 	movhi	r2,514
 2011f80:	10a63c04 	addi	r2,r2,-26384
 2011f84:	e0bfff15 	stw	r2,-4(fp)
 2011f88:	e0bfff17 	ldw	r2,-4(fp)
}
 2011f8c:	e037883a 	mov	sp,fp
 2011f90:	dfc00117 	ldw	ra,4(sp)
 2011f94:	df000017 	ldw	fp,0(sp)
 2011f98:	dec00204 	addi	sp,sp,8
 2011f9c:	f800283a 	ret

02011fa0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2011fa0:	defffe04 	addi	sp,sp,-8
 2011fa4:	df000115 	stw	fp,4(sp)
 2011fa8:	df000104 	addi	fp,sp,4
 2011fac:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2011fb0:	e0bfff17 	ldw	r2,-4(fp)
 2011fb4:	108000d0 	cmplti	r2,r2,3
 2011fb8:	10000d1e 	bne	r2,zero,2011ff0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2011fbc:	e0bfff17 	ldw	r2,-4(fp)
 2011fc0:	00c08074 	movhi	r3,513
 2011fc4:	18da5d04 	addi	r3,r3,26996
 2011fc8:	10800324 	muli	r2,r2,12
 2011fcc:	10c5883a 	add	r2,r2,r3
 2011fd0:	10800204 	addi	r2,r2,8
 2011fd4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2011fd8:	e0bfff17 	ldw	r2,-4(fp)
 2011fdc:	00c08074 	movhi	r3,513
 2011fe0:	18da5d04 	addi	r3,r3,26996
 2011fe4:	10800324 	muli	r2,r2,12
 2011fe8:	10c5883a 	add	r2,r2,r3
 2011fec:	10000015 	stw	zero,0(r2)
  }
}
 2011ff0:	e037883a 	mov	sp,fp
 2011ff4:	df000017 	ldw	fp,0(sp)
 2011ff8:	dec00104 	addi	sp,sp,4
 2011ffc:	f800283a 	ret

02012000 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2012000:	defff804 	addi	sp,sp,-32
 2012004:	df000715 	stw	fp,28(sp)
 2012008:	df000704 	addi	fp,sp,28
 201200c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012010:	0005303a 	rdctl	r2,status
 2012014:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012018:	e0fffb17 	ldw	r3,-20(fp)
 201201c:	00bfff84 	movi	r2,-2
 2012020:	1884703a 	and	r2,r3,r2
 2012024:	1001703a 	wrctl	status,r2
  
  return context;
 2012028:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 201202c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2012030:	d0a01017 	ldw	r2,-32704(gp)
 2012034:	10c000c4 	addi	r3,r2,3
 2012038:	00bfff04 	movi	r2,-4
 201203c:	1884703a 	and	r2,r3,r2
 2012040:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2012044:	d0e01017 	ldw	r3,-32704(gp)
 2012048:	e0bffe17 	ldw	r2,-8(fp)
 201204c:	1887883a 	add	r3,r3,r2
 2012050:	00810034 	movhi	r2,1024
 2012054:	10800004 	addi	r2,r2,0
 2012058:	10c0072e 	bgeu	r2,r3,2012078 <sbrk+0x78>
 201205c:	e0bffd17 	ldw	r2,-12(fp)
 2012060:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012064:	e0bffa17 	ldw	r2,-24(fp)
 2012068:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 201206c:	00bfffc4 	movi	r2,-1
 2012070:	e0bfff15 	stw	r2,-4(fp)
 2012074:	00000c06 	br	20120a8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 2012078:	d0a01017 	ldw	r2,-32704(gp)
 201207c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 2012080:	d0e01017 	ldw	r3,-32704(gp)
 2012084:	e0bffe17 	ldw	r2,-8(fp)
 2012088:	1885883a 	add	r2,r3,r2
 201208c:	d0a01015 	stw	r2,-32704(gp)
 2012090:	e0bffd17 	ldw	r2,-12(fp)
 2012094:	e0bff915 	stw	r2,-28(fp)
 2012098:	e0bff917 	ldw	r2,-28(fp)
 201209c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 20120a0:	e0bffc17 	ldw	r2,-16(fp)
 20120a4:	e0bfff15 	stw	r2,-4(fp)
 20120a8:	e0bfff17 	ldw	r2,-4(fp)
} 
 20120ac:	e037883a 	mov	sp,fp
 20120b0:	df000017 	ldw	fp,0(sp)
 20120b4:	dec00104 	addi	sp,sp,4
 20120b8:	f800283a 	ret

020120bc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 20120bc:	defffa04 	addi	sp,sp,-24
 20120c0:	df000515 	stw	fp,20(sp)
 20120c4:	df000504 	addi	fp,sp,20
 20120c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20120cc:	0005303a 	rdctl	r2,status
 20120d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20120d4:	e0fffd17 	ldw	r3,-12(fp)
 20120d8:	00bfff84 	movi	r2,-2
 20120dc:	1884703a 	and	r2,r3,r2
 20120e0:	1001703a 	wrctl	status,r2
  
  return context;
 20120e4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 20120e8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 20120ec:	e0bfff17 	ldw	r2,-4(fp)
 20120f0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 20120f4:	e0bffc17 	ldw	r2,-16(fp)
 20120f8:	10c00017 	ldw	r3,0(r2)
 20120fc:	e0bffc17 	ldw	r2,-16(fp)
 2012100:	10800117 	ldw	r2,4(r2)
 2012104:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 2012108:	e0bffc17 	ldw	r2,-16(fp)
 201210c:	10c00117 	ldw	r3,4(r2)
 2012110:	e0bffc17 	ldw	r2,-16(fp)
 2012114:	10800017 	ldw	r2,0(r2)
 2012118:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 201211c:	e0fffc17 	ldw	r3,-16(fp)
 2012120:	e0bffc17 	ldw	r2,-16(fp)
 2012124:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 2012128:	e0fffc17 	ldw	r3,-16(fp)
 201212c:	e0bffc17 	ldw	r2,-16(fp)
 2012130:	18800015 	stw	r2,0(r3)
 2012134:	e0bffe17 	ldw	r2,-8(fp)
 2012138:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201213c:	e0bffb17 	ldw	r2,-20(fp)
 2012140:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2012144:	e037883a 	mov	sp,fp
 2012148:	df000017 	ldw	fp,0(sp)
 201214c:	dec00104 	addi	sp,sp,4
 2012150:	f800283a 	ret

02012154 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2012154:	defffb04 	addi	sp,sp,-20
 2012158:	dfc00415 	stw	ra,16(sp)
 201215c:	df000315 	stw	fp,12(sp)
 2012160:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2012164:	d0a01117 	ldw	r2,-32700(gp)
 2012168:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 201216c:	d0a73e17 	ldw	r2,-25352(gp)
 2012170:	10800044 	addi	r2,r2,1
 2012174:	d0a73e15 	stw	r2,-25352(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2012178:	00003106 	br	2012240 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 201217c:	e0bffe17 	ldw	r2,-8(fp)
 2012180:	10800017 	ldw	r2,0(r2)
 2012184:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2012188:	e0bffe17 	ldw	r2,-8(fp)
 201218c:	10800403 	ldbu	r2,16(r2)
 2012190:	10803fcc 	andi	r2,r2,255
 2012194:	1005003a 	cmpeq	r2,r2,zero
 2012198:	1000051e 	bne	r2,zero,20121b0 <alt_tick+0x5c>
 201219c:	d0a73e17 	ldw	r2,-25352(gp)
 20121a0:	1004c03a 	cmpne	r2,r2,zero
 20121a4:	1000021e 	bne	r2,zero,20121b0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 20121a8:	e0bffe17 	ldw	r2,-8(fp)
 20121ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 20121b0:	e0bffe17 	ldw	r2,-8(fp)
 20121b4:	10c00217 	ldw	r3,8(r2)
 20121b8:	d0a73e17 	ldw	r2,-25352(gp)
 20121bc:	10c01e36 	bltu	r2,r3,2012238 <alt_tick+0xe4>
 20121c0:	e0bffe17 	ldw	r2,-8(fp)
 20121c4:	10800403 	ldbu	r2,16(r2)
 20121c8:	10803fcc 	andi	r2,r2,255
 20121cc:	1004c03a 	cmpne	r2,r2,zero
 20121d0:	1000191e 	bne	r2,zero,2012238 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 20121d4:	e0bffe17 	ldw	r2,-8(fp)
 20121d8:	10c00317 	ldw	r3,12(r2)
 20121dc:	e0bffe17 	ldw	r2,-8(fp)
 20121e0:	11000517 	ldw	r4,20(r2)
 20121e4:	183ee83a 	callr	r3
 20121e8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 20121ec:	e0bffd17 	ldw	r2,-12(fp)
 20121f0:	1004c03a 	cmpne	r2,r2,zero
 20121f4:	1000031e 	bne	r2,zero,2012204 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 20121f8:	e13ffe17 	ldw	r4,-8(fp)
 20121fc:	20120bc0 	call	20120bc <alt_alarm_stop>
 2012200:	00000d06 	br	2012238 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 2012204:	e0bffe17 	ldw	r2,-8(fp)
 2012208:	10c00217 	ldw	r3,8(r2)
 201220c:	e0bffd17 	ldw	r2,-12(fp)
 2012210:	1887883a 	add	r3,r3,r2
 2012214:	e0bffe17 	ldw	r2,-8(fp)
 2012218:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 201221c:	e0bffe17 	ldw	r2,-8(fp)
 2012220:	10c00217 	ldw	r3,8(r2)
 2012224:	d0a73e17 	ldw	r2,-25352(gp)
 2012228:	1880032e 	bgeu	r3,r2,2012238 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 201222c:	e0fffe17 	ldw	r3,-8(fp)
 2012230:	00800044 	movi	r2,1
 2012234:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 2012238:	e0bfff17 	ldw	r2,-4(fp)
 201223c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2012240:	d0e01104 	addi	r3,gp,-32700
 2012244:	e0bffe17 	ldw	r2,-8(fp)
 2012248:	10ffcc1e 	bne	r2,r3,201217c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 201224c:	e037883a 	mov	sp,fp
 2012250:	dfc00117 	ldw	ra,4(sp)
 2012254:	df000017 	ldw	fp,0(sp)
 2012258:	dec00204 	addi	sp,sp,8
 201225c:	f800283a 	ret

02012260 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 2012260:	defffd04 	addi	sp,sp,-12
 2012264:	dfc00215 	stw	ra,8(sp)
 2012268:	df000115 	stw	fp,4(sp)
 201226c:	df000104 	addi	fp,sp,4
 2012270:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 2012274:	e13fff17 	ldw	r4,-4(fp)
 2012278:	20142980 	call	2014298 <alt_busy_sleep>
}
 201227c:	e037883a 	mov	sp,fp
 2012280:	dfc00117 	ldw	ra,4(sp)
 2012284:	df000017 	ldw	fp,0(sp)
 2012288:	dec00204 	addi	sp,sp,8
 201228c:	f800283a 	ret

02012290 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2012290:	defff704 	addi	sp,sp,-36
 2012294:	dfc00815 	stw	ra,32(sp)
 2012298:	df000715 	stw	fp,28(sp)
 201229c:	df000704 	addi	fp,sp,28
 20122a0:	e13ffb15 	stw	r4,-20(fp)
 20122a4:	e17ffc15 	stw	r5,-16(fp)
 20122a8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20122ac:	e0bffb17 	ldw	r2,-20(fp)
 20122b0:	1004803a 	cmplt	r2,r2,zero
 20122b4:	1000081e 	bne	r2,zero,20122d8 <write+0x48>
 20122b8:	e0bffb17 	ldw	r2,-20(fp)
 20122bc:	10800324 	muli	r2,r2,12
 20122c0:	1007883a 	mov	r3,r2
 20122c4:	00808074 	movhi	r2,513
 20122c8:	109a5d04 	addi	r2,r2,26996
 20122cc:	1887883a 	add	r3,r3,r2
 20122d0:	e0ffff15 	stw	r3,-4(fp)
 20122d4:	00000106 	br	20122dc <write+0x4c>
 20122d8:	e03fff15 	stw	zero,-4(fp)
 20122dc:	e0bfff17 	ldw	r2,-4(fp)
 20122e0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 20122e4:	e0bffa17 	ldw	r2,-24(fp)
 20122e8:	1005003a 	cmpeq	r2,r2,zero
 20122ec:	1000241e 	bne	r2,zero,2012380 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 20122f0:	e0bffa17 	ldw	r2,-24(fp)
 20122f4:	10800217 	ldw	r2,8(r2)
 20122f8:	108000cc 	andi	r2,r2,3
 20122fc:	1005003a 	cmpeq	r2,r2,zero
 2012300:	10001a1e 	bne	r2,zero,201236c <write+0xdc>
 2012304:	e0bffa17 	ldw	r2,-24(fp)
 2012308:	10800017 	ldw	r2,0(r2)
 201230c:	10800617 	ldw	r2,24(r2)
 2012310:	1005003a 	cmpeq	r2,r2,zero
 2012314:	1000151e 	bne	r2,zero,201236c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2012318:	e0bffa17 	ldw	r2,-24(fp)
 201231c:	10800017 	ldw	r2,0(r2)
 2012320:	10800617 	ldw	r2,24(r2)
 2012324:	e17ffc17 	ldw	r5,-16(fp)
 2012328:	e1bffd17 	ldw	r6,-12(fp)
 201232c:	e13ffa17 	ldw	r4,-24(fp)
 2012330:	103ee83a 	callr	r2
 2012334:	e0bff915 	stw	r2,-28(fp)
 2012338:	e0bff917 	ldw	r2,-28(fp)
 201233c:	1004403a 	cmpge	r2,r2,zero
 2012340:	1000071e 	bne	r2,zero,2012360 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 2012344:	20123b00 	call	20123b0 <alt_get_errno>
 2012348:	e0fff917 	ldw	r3,-28(fp)
 201234c:	00c7c83a 	sub	r3,zero,r3
 2012350:	10c00015 	stw	r3,0(r2)
        return -1;
 2012354:	00bfffc4 	movi	r2,-1
 2012358:	e0bffe15 	stw	r2,-8(fp)
 201235c:	00000e06 	br	2012398 <write+0x108>
      }
      return rval;
 2012360:	e0bff917 	ldw	r2,-28(fp)
 2012364:	e0bffe15 	stw	r2,-8(fp)
 2012368:	00000b06 	br	2012398 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 201236c:	20123b00 	call	20123b0 <alt_get_errno>
 2012370:	1007883a 	mov	r3,r2
 2012374:	00800344 	movi	r2,13
 2012378:	18800015 	stw	r2,0(r3)
 201237c:	00000406 	br	2012390 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2012380:	20123b00 	call	20123b0 <alt_get_errno>
 2012384:	1007883a 	mov	r3,r2
 2012388:	00801444 	movi	r2,81
 201238c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2012390:	00bfffc4 	movi	r2,-1
 2012394:	e0bffe15 	stw	r2,-8(fp)
 2012398:	e0bffe17 	ldw	r2,-8(fp)
}
 201239c:	e037883a 	mov	sp,fp
 20123a0:	dfc00117 	ldw	ra,4(sp)
 20123a4:	df000017 	ldw	fp,0(sp)
 20123a8:	dec00204 	addi	sp,sp,8
 20123ac:	f800283a 	ret

020123b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20123b0:	defffd04 	addi	sp,sp,-12
 20123b4:	dfc00215 	stw	ra,8(sp)
 20123b8:	df000115 	stw	fp,4(sp)
 20123bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 20123c0:	00808074 	movhi	r2,513
 20123c4:	109f1304 	addi	r2,r2,31820
 20123c8:	10800017 	ldw	r2,0(r2)
 20123cc:	1005003a 	cmpeq	r2,r2,zero
 20123d0:	1000061e 	bne	r2,zero,20123ec <alt_get_errno+0x3c>
 20123d4:	00808074 	movhi	r2,513
 20123d8:	109f1304 	addi	r2,r2,31820
 20123dc:	10800017 	ldw	r2,0(r2)
 20123e0:	103ee83a 	callr	r2
 20123e4:	e0bfff15 	stw	r2,-4(fp)
 20123e8:	00000306 	br	20123f8 <alt_get_errno+0x48>
 20123ec:	008080b4 	movhi	r2,514
 20123f0:	10a63c04 	addi	r2,r2,-26384
 20123f4:	e0bfff15 	stw	r2,-4(fp)
 20123f8:	e0bfff17 	ldw	r2,-4(fp)
}
 20123fc:	e037883a 	mov	sp,fp
 2012400:	dfc00117 	ldw	ra,4(sp)
 2012404:	df000017 	ldw	fp,0(sp)
 2012408:	dec00204 	addi	sp,sp,8
 201240c:	f800283a 	ret

02012410 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2012410:	defffd04 	addi	sp,sp,-12
 2012414:	dfc00215 	stw	ra,8(sp)
 2012418:	df000115 	stw	fp,4(sp)
 201241c:	df000104 	addi	fp,sp,4
 2012420:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 2012424:	2014d500 	call	2014d50 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2012428:	00800044 	movi	r2,1
 201242c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2012430:	e037883a 	mov	sp,fp
 2012434:	dfc00117 	ldw	ra,4(sp)
 2012438:	df000017 	ldw	fp,0(sp)
 201243c:	dec00204 	addi	sp,sp,8
 2012440:	f800283a 	ret

02012444 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2012444:	defffe04 	addi	sp,sp,-8
 2012448:	dfc00115 	stw	ra,4(sp)
 201244c:	df000015 	stw	fp,0(sp)
 2012450:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 2012454:	01010034 	movhi	r4,1024
 2012458:	000b883a 	mov	r5,zero
 201245c:	000d883a 	mov	r6,zero
 2012460:	01c0fa04 	movi	r7,1000
 2012464:	20139e00 	call	20139e0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 2012468:	01008074 	movhi	r4,513
 201246c:	211abd04 	addi	r4,r4,27380
 2012470:	20124e00 	call	20124e0 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2012474:	01008074 	movhi	r4,513
 2012478:	211af904 	addi	r4,r4,27620
 201247c:	000b883a 	mov	r5,zero
 2012480:	01800144 	movi	r6,5
 2012484:	201300c0 	call	201300c <altera_avalon_jtag_uart_init>
 2012488:	01008074 	movhi	r4,513
 201248c:	211aef04 	addi	r4,r4,27580
 2012490:	20124a80 	call	20124a8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
 2012494:	e037883a 	mov	sp,fp
 2012498:	dfc00117 	ldw	ra,4(sp)
 201249c:	df000017 	ldw	fp,0(sp)
 20124a0:	dec00204 	addi	sp,sp,8
 20124a4:	f800283a 	ret

020124a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 20124a8:	defffd04 	addi	sp,sp,-12
 20124ac:	dfc00215 	stw	ra,8(sp)
 20124b0:	df000115 	stw	fp,4(sp)
 20124b4:	df000104 	addi	fp,sp,4
 20124b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 20124bc:	e13fff17 	ldw	r4,-4(fp)
 20124c0:	01408074 	movhi	r5,513
 20124c4:	295f1004 	addi	r5,r5,31808
 20124c8:	20143e40 	call	20143e4 <alt_dev_llist_insert>
}
 20124cc:	e037883a 	mov	sp,fp
 20124d0:	dfc00117 	ldw	ra,4(sp)
 20124d4:	df000017 	ldw	fp,0(sp)
 20124d8:	dec00204 	addi	sp,sp,8
 20124dc:	f800283a 	ret

020124e0 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 20124e0:	defffc04 	addi	sp,sp,-16
 20124e4:	dfc00315 	stw	ra,12(sp)
 20124e8:	df000215 	stw	fp,8(sp)
 20124ec:	df000204 	addi	fp,sp,8
 20124f0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 20124f4:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 20124f8:	e13fff17 	ldw	r4,-4(fp)
 20124fc:	201256c0 	call	201256c <alt_epcs_flash_query>
 2012500:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 2012504:	e0bffe17 	ldw	r2,-8(fp)
 2012508:	1004c03a 	cmpne	r2,r2,zero
 201250c:	1000031e 	bne	r2,zero,201251c <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 2012510:	e13fff17 	ldw	r4,-4(fp)
 2012514:	20125340 	call	2012534 <alt_flash_device_register>
 2012518:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 201251c:	e0bffe17 	ldw	r2,-8(fp)
}
 2012520:	e037883a 	mov	sp,fp
 2012524:	dfc00117 	ldw	ra,4(sp)
 2012528:	df000017 	ldw	fp,0(sp)
 201252c:	dec00204 	addi	sp,sp,8
 2012530:	f800283a 	ret

02012534 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 2012534:	defffd04 	addi	sp,sp,-12
 2012538:	dfc00215 	stw	ra,8(sp)
 201253c:	df000115 	stw	fp,4(sp)
 2012540:	df000104 	addi	fp,sp,4
 2012544:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 2012548:	e13fff17 	ldw	r4,-4(fp)
 201254c:	01408074 	movhi	r5,513
 2012550:	295f1404 	addi	r5,r5,31824
 2012554:	20143e40 	call	20143e4 <alt_dev_llist_insert>
}
 2012558:	e037883a 	mov	sp,fp
 201255c:	dfc00117 	ldw	ra,4(sp)
 2012560:	df000017 	ldw	fp,0(sp)
 2012564:	dec00204 	addi	sp,sp,8
 2012568:	f800283a 	ret

0201256c <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 201256c:	defffc04 	addi	sp,sp,-16
 2012570:	dfc00315 	stw	ra,12(sp)
 2012574:	df000215 	stw	fp,8(sp)
 2012578:	df000204 	addi	fp,sp,8
 201257c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2012580:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 2012584:	e0bfff17 	ldw	r2,-4(fp)
 2012588:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
 201258c:	e0bfff17 	ldw	r2,-4(fp)
 2012590:	11002d17 	ldw	r4,180(r2)
 2012594:	2013fa80 	call	2013fa8 <epcs_read_electronic_signature>
 2012598:	10c03fcc 	andi	r3,r2,255
 201259c:	e0bfff17 	ldw	r2,-4(fp)
 20125a0:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 20125a4:	e0bfff17 	ldw	r2,-4(fp)
 20125a8:	10802f17 	ldw	r2,188(r2)
 20125ac:	10800598 	cmpnei	r2,r2,22
 20125b0:	10000a1e 	bne	r2,zero,20125dc <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 20125b4:	e0ffff17 	ldw	r3,-4(fp)
 20125b8:	00802034 	movhi	r2,128
 20125bc:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
 20125c0:	e0ffff17 	ldw	r3,-4(fp)
 20125c4:	00802004 	movi	r2,128
 20125c8:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 20125cc:	e0ffff17 	ldw	r3,-4(fp)
 20125d0:	00800074 	movhi	r2,1
 20125d4:	18801015 	stw	r2,64(r3)
 20125d8:	00007306 	br	20127a8 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 20125dc:	e0bfff17 	ldw	r2,-4(fp)
 20125e0:	10802f17 	ldw	r2,188(r2)
 20125e4:	10800518 	cmpnei	r2,r2,20
 20125e8:	10000a1e 	bne	r2,zero,2012614 <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 20125ec:	e0ffff17 	ldw	r3,-4(fp)
 20125f0:	00800834 	movhi	r2,32
 20125f4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
 20125f8:	e0ffff17 	ldw	r3,-4(fp)
 20125fc:	00800804 	movi	r2,32
 2012600:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 2012604:	e0ffff17 	ldw	r3,-4(fp)
 2012608:	00800074 	movhi	r2,1
 201260c:	18801015 	stw	r2,64(r3)
 2012610:	00006506 	br	20127a8 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 2012614:	e0bfff17 	ldw	r2,-4(fp)
 2012618:	10802f17 	ldw	r2,188(r2)
 201261c:	108004d8 	cmpnei	r2,r2,19
 2012620:	10000a1e 	bne	r2,zero,201264c <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 2012624:	e0ffff17 	ldw	r3,-4(fp)
 2012628:	00800434 	movhi	r2,16
 201262c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
 2012630:	e0ffff17 	ldw	r3,-4(fp)
 2012634:	00800404 	movi	r2,16
 2012638:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 201263c:	e0ffff17 	ldw	r3,-4(fp)
 2012640:	00800074 	movhi	r2,1
 2012644:	18801015 	stw	r2,64(r3)
 2012648:	00005706 	br	20127a8 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 201264c:	e0bfff17 	ldw	r2,-4(fp)
 2012650:	10802f17 	ldw	r2,188(r2)
 2012654:	10800498 	cmpnei	r2,r2,18
 2012658:	10000a1e 	bne	r2,zero,2012684 <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 201265c:	e0ffff17 	ldw	r3,-4(fp)
 2012660:	00800234 	movhi	r2,8
 2012664:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
 2012668:	e0ffff17 	ldw	r3,-4(fp)
 201266c:	00800204 	movi	r2,8
 2012670:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 2012674:	e0ffff17 	ldw	r3,-4(fp)
 2012678:	00800074 	movhi	r2,1
 201267c:	18801015 	stw	r2,64(r3)
 2012680:	00004906 	br	20127a8 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 2012684:	e0bfff17 	ldw	r2,-4(fp)
 2012688:	10802f17 	ldw	r2,188(r2)
 201268c:	10800418 	cmpnei	r2,r2,16
 2012690:	10000a1e 	bne	r2,zero,20126bc <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 2012694:	e0ffff17 	ldw	r3,-4(fp)
 2012698:	008000b4 	movhi	r2,2
 201269c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
 20126a0:	e0ffff17 	ldw	r3,-4(fp)
 20126a4:	00800104 	movi	r2,4
 20126a8:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
 20126ac:	e0ffff17 	ldw	r3,-4(fp)
 20126b0:	00a00014 	movui	r2,32768
 20126b4:	18801015 	stw	r2,64(r3)
 20126b8:	00003b06 	br	20127a8 <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 20126bc:	e0bfff17 	ldw	r2,-4(fp)
 20126c0:	11002d17 	ldw	r4,180(r2)
 20126c4:	20140140 	call	2014014 <epcs_read_device_id>
 20126c8:	1007883a 	mov	r3,r2
 20126cc:	e0bfff17 	ldw	r2,-4(fp)
 20126d0:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 20126d4:	e0bfff17 	ldw	r2,-4(fp)
 20126d8:	10c02f17 	ldw	r3,188(r2)
 20126dc:	00804034 	movhi	r2,256
 20126e0:	10bfffc4 	addi	r2,r2,-1
 20126e4:	1886703a 	and	r3,r3,r2
 20126e8:	00800874 	movhi	r2,33
 20126ec:	10ae8604 	addi	r2,r2,-17896
 20126f0:	18800a1e 	bne	r3,r2,201271c <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 20126f4:	e0ffff17 	ldw	r3,-4(fp)
 20126f8:	00804034 	movhi	r2,256
 20126fc:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 2012700:	e0ffff17 	ldw	r3,-4(fp)
 2012704:	00804004 	movi	r2,256
 2012708:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 201270c:	e0ffff17 	ldw	r3,-4(fp)
 2012710:	00800074 	movhi	r2,1
 2012714:	18801015 	stw	r2,64(r3)
 2012718:	00002306 	br	20127a8 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 201271c:	e0bfff17 	ldw	r2,-4(fp)
 2012720:	10802f17 	ldw	r2,188(r2)
 2012724:	10803fcc 	andi	r2,r2,255
 2012728:	10800618 	cmpnei	r2,r2,24
 201272c:	10000a1e 	bne	r2,zero,2012758 <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2012730:	e0ffff17 	ldw	r3,-4(fp)
 2012734:	00804034 	movhi	r2,256
 2012738:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
 201273c:	e0ffff17 	ldw	r3,-4(fp)
 2012740:	00801004 	movi	r2,64
 2012744:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
 2012748:	e0ffff17 	ldw	r3,-4(fp)
 201274c:	00800134 	movhi	r2,4
 2012750:	18801015 	stw	r2,64(r3)
 2012754:	00001406 	br	20127a8 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 2012758:	e0bfff17 	ldw	r2,-4(fp)
 201275c:	10802f17 	ldw	r2,188(r2)
 2012760:	10803fcc 	andi	r2,r2,255
 2012764:	10800658 	cmpnei	r2,r2,25
 2012768:	10000d1e 	bne	r2,zero,20127a0 <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 201276c:	e0ffff17 	ldw	r3,-4(fp)
 2012770:	00808034 	movhi	r2,512
 2012774:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 2012778:	e0ffff17 	ldw	r3,-4(fp)
 201277c:	00808004 	movi	r2,512
 2012780:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2012784:	e0ffff17 	ldw	r3,-4(fp)
 2012788:	00800074 	movhi	r2,1
 201278c:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 2012790:	e0ffff17 	ldw	r3,-4(fp)
 2012794:	00800044 	movi	r2,1
 2012798:	18803115 	stw	r2,196(r3)
 201279c:	00000206 	br	20127a8 <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 20127a0:	00bffb44 	movi	r2,-19
 20127a4:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 20127a8:	e0bfff17 	ldw	r2,-4(fp)
 20127ac:	10800e17 	ldw	r2,56(r2)
 20127b0:	1007883a 	mov	r3,r2
 20127b4:	e0bfff17 	ldw	r2,-4(fp)
 20127b8:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 20127bc:	e0ffff17 	ldw	r3,-4(fp)
 20127c0:	00800044 	movi	r2,1
 20127c4:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
 20127c8:	e0bfff17 	ldw	r2,-4(fp)
 20127cc:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 20127d0:	e0ffff17 	ldw	r3,-4(fp)
 20127d4:	00804004 	movi	r2,256
 20127d8:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
 20127dc:	e0bffe17 	ldw	r2,-8(fp)
}
 20127e0:	e037883a 	mov	sp,fp
 20127e4:	dfc00117 	ldw	ra,4(sp)
 20127e8:	df000017 	ldw	fp,0(sp)
 20127ec:	dec00204 	addi	sp,sp,8
 20127f0:	f800283a 	ret

020127f4 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 20127f4:	deffeb04 	addi	sp,sp,-84
 20127f8:	dfc01415 	stw	ra,80(sp)
 20127fc:	df001315 	stw	fp,76(sp)
 2012800:	df001304 	addi	fp,sp,76
 2012804:	e13ff915 	stw	r4,-28(fp)
 2012808:	e17ffa15 	stw	r5,-24(fp)
 201280c:	e1bffb15 	stw	r6,-20(fp)
 2012810:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 2012814:	00800804 	movi	r2,32
 2012818:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
 201281c:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
 2012820:	00002c06 	br	20128d4 <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 2012824:	e0bff017 	ldw	r2,-64(fp)
 2012828:	e0bfff15 	stw	r2,-4(fp)
 201282c:	e0fffc17 	ldw	r3,-16(fp)
 2012830:	e0fffe15 	stw	r3,-8(fp)
 2012834:	e0bfff17 	ldw	r2,-4(fp)
 2012838:	e0fffe17 	ldw	r3,-8(fp)
 201283c:	10c0022e 	bgeu	r2,r3,2012848 <alt_epcs_flash_memcmp+0x54>
 2012840:	e0bfff17 	ldw	r2,-4(fp)
 2012844:	e0bffe15 	stw	r2,-8(fp)
 2012848:	e0fffe17 	ldw	r3,-8(fp)
 201284c:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 2012850:	e0fffb17 	ldw	r3,-20(fp)
 2012854:	e0bfef17 	ldw	r2,-68(fp)
 2012858:	188b883a 	add	r5,r3,r2
 201285c:	e1bff104 	addi	r6,fp,-60
 2012860:	e13ff917 	ldw	r4,-28(fp)
 2012864:	e1ffee17 	ldw	r7,-72(fp)
 2012868:	2012e2c0 	call	2012e2c <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 201286c:	1004403a 	cmpge	r2,r2,zero
 2012870:	1000031e 	bne	r2,zero,2012880 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 2012874:	00bfffc4 	movi	r2,-1
 2012878:	e0bffd15 	stw	r2,-12(fp)
 201287c:	00001906 	br	20128e4 <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 2012880:	e0fffa17 	ldw	r3,-24(fp)
 2012884:	e0bfef17 	ldw	r2,-68(fp)
 2012888:	1889883a 	add	r4,r3,r2
 201288c:	e1bfee17 	ldw	r6,-72(fp)
 2012890:	e17ff104 	addi	r5,fp,-60
 2012894:	201525c0 	call	201525c <memcmp>
 2012898:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
 201289c:	e0bfed17 	ldw	r2,-76(fp)
 20128a0:	1005003a 	cmpeq	r2,r2,zero
 20128a4:	1000031e 	bne	r2,zero,20128b4 <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
 20128a8:	e0ffed17 	ldw	r3,-76(fp)
 20128ac:	e0fffd15 	stw	r3,-12(fp)
 20128b0:	00000c06 	br	20128e4 <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
 20128b4:	e0ffee17 	ldw	r3,-72(fp)
 20128b8:	e0bffc17 	ldw	r2,-16(fp)
 20128bc:	10c5c83a 	sub	r2,r2,r3
 20128c0:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
 20128c4:	e0ffef17 	ldw	r3,-68(fp)
 20128c8:	e0bfee17 	ldw	r2,-72(fp)
 20128cc:	1885883a 	add	r2,r3,r2
 20128d0:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 20128d4:	e0bffc17 	ldw	r2,-16(fp)
 20128d8:	1004c03a 	cmpne	r2,r2,zero
 20128dc:	103fd11e 	bne	r2,zero,2012824 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 20128e0:	e03ffd15 	stw	zero,-12(fp)
 20128e4:	e0bffd17 	ldw	r2,-12(fp)
}
 20128e8:	e037883a 	mov	sp,fp
 20128ec:	dfc00117 	ldw	ra,4(sp)
 20128f0:	df000017 	ldw	fp,0(sp)
 20128f4:	dec00204 	addi	sp,sp,8
 20128f8:	f800283a 	ret

020128fc <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 20128fc:	defff204 	addi	sp,sp,-56
 2012900:	dfc00d15 	stw	ra,52(sp)
 2012904:	df000c15 	stw	fp,48(sp)
 2012908:	df000c04 	addi	fp,sp,48
 201290c:	e13ffa15 	stw	r4,-24(fp)
 2012910:	e17ffb15 	stw	r5,-20(fp)
 2012914:	e1bffc15 	stw	r6,-16(fp)
 2012918:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
 201291c:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2012920:	e03ff815 	stw	zero,-32(fp)
 2012924:	00008b06 	br	2012b54 <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2012928:	e0bff817 	ldw	r2,-32(fp)
 201292c:	e0fffa17 	ldw	r3,-24(fp)
 2012930:	1004913a 	slli	r2,r2,4
 2012934:	10c5883a 	add	r2,r2,r3
 2012938:	10800d04 	addi	r2,r2,52
 201293c:	10c00017 	ldw	r3,0(r2)
 2012940:	e0bffb17 	ldw	r2,-20(fp)
 2012944:	10c08016 	blt	r2,r3,2012b48 <alt_epcs_flash_write+0x24c>
 2012948:	e0bff817 	ldw	r2,-32(fp)
 201294c:	e0fffa17 	ldw	r3,-24(fp)
 2012950:	1004913a 	slli	r2,r2,4
 2012954:	10c5883a 	add	r2,r2,r3
 2012958:	10800d04 	addi	r2,r2,52
 201295c:	11000017 	ldw	r4,0(r2)
 2012960:	e0bff817 	ldw	r2,-32(fp)
 2012964:	e0fffa17 	ldw	r3,-24(fp)
 2012968:	1004913a 	slli	r2,r2,4
 201296c:	10c5883a 	add	r2,r2,r3
 2012970:	10800e04 	addi	r2,r2,56
 2012974:	10800017 	ldw	r2,0(r2)
 2012978:	2087883a 	add	r3,r4,r2
 201297c:	e0bffb17 	ldw	r2,-20(fp)
 2012980:	10c0710e 	bge	r2,r3,2012b48 <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 2012984:	e0bff817 	ldw	r2,-32(fp)
 2012988:	e0fffa17 	ldw	r3,-24(fp)
 201298c:	1004913a 	slli	r2,r2,4
 2012990:	10c5883a 	add	r2,r2,r3
 2012994:	10800d04 	addi	r2,r2,52
 2012998:	10800017 	ldw	r2,0(r2)
 201299c:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 20129a0:	e03ff715 	stw	zero,-36(fp)
 20129a4:	00006006 	br	2012b28 <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
 20129a8:	e0fffb17 	ldw	r3,-20(fp)
 20129ac:	e0bff517 	ldw	r2,-44(fp)
 20129b0:	18805116 	blt	r3,r2,2012af8 <alt_epcs_flash_write+0x1fc>
 20129b4:	e0bff817 	ldw	r2,-32(fp)
 20129b8:	e0fffa17 	ldw	r3,-24(fp)
 20129bc:	1004913a 	slli	r2,r2,4
 20129c0:	10c5883a 	add	r2,r2,r3
 20129c4:	10801004 	addi	r2,r2,64
 20129c8:	10c00017 	ldw	r3,0(r2)
 20129cc:	e0bff517 	ldw	r2,-44(fp)
 20129d0:	1887883a 	add	r3,r3,r2
 20129d4:	e0bffb17 	ldw	r2,-20(fp)
 20129d8:	10c0470e 	bge	r2,r3,2012af8 <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 20129dc:	e0bff817 	ldw	r2,-32(fp)
 20129e0:	e0fffa17 	ldw	r3,-24(fp)
 20129e4:	1004913a 	slli	r2,r2,4
 20129e8:	10c5883a 	add	r2,r2,r3
 20129ec:	10801004 	addi	r2,r2,64
 20129f0:	10c00017 	ldw	r3,0(r2)
 20129f4:	e0bff517 	ldw	r2,-44(fp)
 20129f8:	1887883a 	add	r3,r3,r2
 20129fc:	e0bffb17 	ldw	r2,-20(fp)
 2012a00:	1885c83a 	sub	r2,r3,r2
 2012a04:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 2012a08:	e0bff617 	ldw	r2,-40(fp)
 2012a0c:	e0bfff15 	stw	r2,-4(fp)
 2012a10:	e0fffd17 	ldw	r3,-12(fp)
 2012a14:	e0fffe15 	stw	r3,-8(fp)
 2012a18:	e0bfff17 	ldw	r2,-4(fp)
 2012a1c:	e0fffe17 	ldw	r3,-8(fp)
 2012a20:	10c0020e 	bge	r2,r3,2012a2c <alt_epcs_flash_write+0x130>
 2012a24:	e0bfff17 	ldw	r2,-4(fp)
 2012a28:	e0bffe15 	stw	r2,-8(fp)
 2012a2c:	e0fffe17 	ldw	r3,-8(fp)
 2012a30:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 2012a34:	e1fff617 	ldw	r7,-40(fp)
 2012a38:	e13ffa17 	ldw	r4,-24(fp)
 2012a3c:	e17ffc17 	ldw	r5,-16(fp)
 2012a40:	e1bffb17 	ldw	r6,-20(fp)
 2012a44:	20127f40 	call	20127f4 <alt_epcs_flash_memcmp>
 2012a48:	1005003a 	cmpeq	r2,r2,zero
 2012a4c:	1000131e 	bne	r2,zero,2012a9c <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 2012a50:	e0bffa17 	ldw	r2,-24(fp)
 2012a54:	10800817 	ldw	r2,32(r2)
 2012a58:	e13ffa17 	ldw	r4,-24(fp)
 2012a5c:	e17ff517 	ldw	r5,-44(fp)
 2012a60:	103ee83a 	callr	r2
 2012a64:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
 2012a68:	e0bff917 	ldw	r2,-28(fp)
 2012a6c:	1004c03a 	cmpne	r2,r2,zero
 2012a70:	10000a1e 	bne	r2,zero,2012a9c <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
 2012a74:	e0bffa17 	ldw	r2,-24(fp)
 2012a78:	10c00917 	ldw	r3,36(r2)
 2012a7c:	e0bff617 	ldw	r2,-40(fp)
 2012a80:	d8800015 	stw	r2,0(sp)
 2012a84:	e13ffa17 	ldw	r4,-24(fp)
 2012a88:	e17ff517 	ldw	r5,-44(fp)
 2012a8c:	e1bffb17 	ldw	r6,-20(fp)
 2012a90:	e1fffc17 	ldw	r7,-16(fp)
 2012a94:	183ee83a 	callr	r3
 2012a98:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 2012a9c:	e0fffd17 	ldw	r3,-12(fp)
 2012aa0:	e0bff617 	ldw	r2,-40(fp)
 2012aa4:	18802f26 	beq	r3,r2,2012b64 <alt_epcs_flash_write+0x268>
 2012aa8:	e0bff917 	ldw	r2,-28(fp)
 2012aac:	1004c03a 	cmpne	r2,r2,zero
 2012ab0:	10002c1e 	bne	r2,zero,2012b64 <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
 2012ab4:	e0fffd17 	ldw	r3,-12(fp)
 2012ab8:	e0bff617 	ldw	r2,-40(fp)
 2012abc:	1885c83a 	sub	r2,r3,r2
 2012ac0:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 2012ac4:	e0bff817 	ldw	r2,-32(fp)
 2012ac8:	e0fffa17 	ldw	r3,-24(fp)
 2012acc:	1004913a 	slli	r2,r2,4
 2012ad0:	10c5883a 	add	r2,r2,r3
 2012ad4:	10801004 	addi	r2,r2,64
 2012ad8:	10c00017 	ldw	r3,0(r2)
 2012adc:	e0bff517 	ldw	r2,-44(fp)
 2012ae0:	1885883a 	add	r2,r3,r2
 2012ae4:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 2012ae8:	e0fffc17 	ldw	r3,-16(fp)
 2012aec:	e0bff617 	ldw	r2,-40(fp)
 2012af0:	1885883a 	add	r2,r3,r2
 2012af4:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 2012af8:	e0bff817 	ldw	r2,-32(fp)
 2012afc:	e0fffa17 	ldw	r3,-24(fp)
 2012b00:	1004913a 	slli	r2,r2,4
 2012b04:	10c5883a 	add	r2,r2,r3
 2012b08:	10801004 	addi	r2,r2,64
 2012b0c:	10c00017 	ldw	r3,0(r2)
 2012b10:	e0bff517 	ldw	r2,-44(fp)
 2012b14:	10c5883a 	add	r2,r2,r3
 2012b18:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2012b1c:	e0bff717 	ldw	r2,-36(fp)
 2012b20:	10800044 	addi	r2,r2,1
 2012b24:	e0bff715 	stw	r2,-36(fp)
 2012b28:	e0bff817 	ldw	r2,-32(fp)
 2012b2c:	e0fffa17 	ldw	r3,-24(fp)
 2012b30:	1004913a 	slli	r2,r2,4
 2012b34:	10c5883a 	add	r2,r2,r3
 2012b38:	10800f04 	addi	r2,r2,60
 2012b3c:	10c00017 	ldw	r3,0(r2)
 2012b40:	e0bff717 	ldw	r2,-36(fp)
 2012b44:	10ff9816 	blt	r2,r3,20129a8 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2012b48:	e0bff817 	ldw	r2,-32(fp)
 2012b4c:	10800044 	addi	r2,r2,1
 2012b50:	e0bff815 	stw	r2,-32(fp)
 2012b54:	e0bffa17 	ldw	r2,-24(fp)
 2012b58:	10c00c17 	ldw	r3,48(r2)
 2012b5c:	e0bff817 	ldw	r2,-32(fp)
 2012b60:	10ff7116 	blt	r2,r3,2012928 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 2012b64:	e0bff917 	ldw	r2,-28(fp)
}
 2012b68:	e037883a 	mov	sp,fp
 2012b6c:	dfc00117 	ldw	ra,4(sp)
 2012b70:	df000017 	ldw	fp,0(sp)
 2012b74:	dec00204 	addi	sp,sp,8
 2012b78:	f800283a 	ret

02012b7c <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 2012b7c:	defffa04 	addi	sp,sp,-24
 2012b80:	df000515 	stw	fp,20(sp)
 2012b84:	df000504 	addi	fp,sp,20
 2012b88:	e13ffd15 	stw	r4,-12(fp)
 2012b8c:	e17ffe15 	stw	r5,-8(fp)
 2012b90:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 2012b94:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 2012b98:	e0bffd17 	ldw	r2,-12(fp)
 2012b9c:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
 2012ba0:	e0bffb17 	ldw	r2,-20(fp)
 2012ba4:	10c00c17 	ldw	r3,48(r2)
 2012ba8:	e0bfff17 	ldw	r2,-4(fp)
 2012bac:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 2012bb0:	e0bffb17 	ldw	r2,-20(fp)
 2012bb4:	10800c17 	ldw	r2,48(r2)
 2012bb8:	1004c03a 	cmpne	r2,r2,zero
 2012bbc:	1000031e 	bne	r2,zero,2012bcc <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
 2012bc0:	00bffec4 	movi	r2,-5
 2012bc4:	e0bffc15 	stw	r2,-16(fp)
 2012bc8:	00000b06 	br	2012bf8 <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 2012bcc:	e0bffb17 	ldw	r2,-20(fp)
 2012bd0:	10800c17 	ldw	r2,48(r2)
 2012bd4:	10800250 	cmplti	r2,r2,9
 2012bd8:	1000031e 	bne	r2,zero,2012be8 <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
 2012bdc:	00bffd04 	movi	r2,-12
 2012be0:	e0bffc15 	stw	r2,-16(fp)
 2012be4:	00000406 	br	2012bf8 <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
 2012be8:	e0bffb17 	ldw	r2,-20(fp)
 2012bec:	10c00d04 	addi	r3,r2,52
 2012bf0:	e0bffe17 	ldw	r2,-8(fp)
 2012bf4:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 2012bf8:	e0bffc17 	ldw	r2,-16(fp)
}
 2012bfc:	e037883a 	mov	sp,fp
 2012c00:	df000017 	ldw	fp,0(sp)
 2012c04:	dec00104 	addi	sp,sp,4
 2012c08:	f800283a 	ret

02012c0c <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 2012c0c:	defffa04 	addi	sp,sp,-24
 2012c10:	dfc00515 	stw	ra,20(sp)
 2012c14:	df000415 	stw	fp,16(sp)
 2012c18:	df000404 	addi	fp,sp,16
 2012c1c:	e13ffe15 	stw	r4,-8(fp)
 2012c20:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2012c24:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2012c28:	e0bffe17 	ldw	r2,-8(fp)
 2012c2c:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 2012c30:	e13ffe17 	ldw	r4,-8(fp)
 2012c34:	e17fff17 	ldw	r5,-4(fp)
 2012c38:	2012c7c0 	call	2012c7c <alt_epcs_test_address>
 2012c3c:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
 2012c40:	e0bffd17 	ldw	r2,-12(fp)
 2012c44:	1004803a 	cmplt	r2,r2,zero
 2012c48:	1000061e 	bne	r2,zero,2012c64 <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 2012c4c:	e0bffc17 	ldw	r2,-16(fp)
 2012c50:	11002d17 	ldw	r4,180(r2)
 2012c54:	e17fff17 	ldw	r5,-4(fp)
 2012c58:	e0bffc17 	ldw	r2,-16(fp)
 2012c5c:	11803117 	ldw	r6,196(r2)
 2012c60:	2013ad00 	call	2013ad0 <epcs_sector_erase>
  }
  return ret_code;
 2012c64:	e0bffd17 	ldw	r2,-12(fp)
}
 2012c68:	e037883a 	mov	sp,fp
 2012c6c:	dfc00117 	ldw	ra,4(sp)
 2012c70:	df000017 	ldw	fp,0(sp)
 2012c74:	dec00204 	addi	sp,sp,8
 2012c78:	f800283a 	ret

02012c7c <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 2012c7c:	defff904 	addi	sp,sp,-28
 2012c80:	df000615 	stw	fp,24(sp)
 2012c84:	df000604 	addi	fp,sp,24
 2012c88:	e13ffe15 	stw	r4,-8(fp)
 2012c8c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2012c90:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2012c94:	e0bffe17 	ldw	r2,-8(fp)
 2012c98:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 2012c9c:	e0bffc17 	ldw	r2,-16(fp)
 2012ca0:	10800c17 	ldw	r2,48(r2)
 2012ca4:	10bfffc4 	addi	r2,r2,-1
 2012ca8:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 2012cac:	e0bffb17 	ldw	r2,-20(fp)
 2012cb0:	e0fffc17 	ldw	r3,-16(fp)
 2012cb4:	1004913a 	slli	r2,r2,4
 2012cb8:	10c5883a 	add	r2,r2,r3
 2012cbc:	10800d04 	addi	r2,r2,52
 2012cc0:	11000017 	ldw	r4,0(r2)
 2012cc4:	e0bffb17 	ldw	r2,-20(fp)
 2012cc8:	e0fffc17 	ldw	r3,-16(fp)
 2012ccc:	1004913a 	slli	r2,r2,4
 2012cd0:	10c5883a 	add	r2,r2,r3
 2012cd4:	10800e04 	addi	r2,r2,56
 2012cd8:	10800017 	ldw	r2,0(r2)
 2012cdc:	2085883a 	add	r2,r4,r2
 2012ce0:	10bfffc4 	addi	r2,r2,-1
 2012ce4:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
 2012ce8:	e0ffff17 	ldw	r3,-4(fp)
 2012cec:	e0bffa17 	ldw	r2,-24(fp)
 2012cf0:	10c0022e 	bgeu	r2,r3,2012cfc <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 2012cf4:	00bffec4 	movi	r2,-5
 2012cf8:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
 2012cfc:	e0bffd17 	ldw	r2,-12(fp)
}
 2012d00:	e037883a 	mov	sp,fp
 2012d04:	df000017 	ldw	fp,0(sp)
 2012d08:	dec00104 	addi	sp,sp,4
 2012d0c:	f800283a 	ret

02012d10 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 2012d10:	defff204 	addi	sp,sp,-56
 2012d14:	dfc00d15 	stw	ra,52(sp)
 2012d18:	df000c15 	stw	fp,48(sp)
 2012d1c:	df000c04 	addi	fp,sp,48
 2012d20:	e13ffa15 	stw	r4,-24(fp)
 2012d24:	e17ffb15 	stw	r5,-20(fp)
 2012d28:	e1bffc15 	stw	r6,-16(fp)
 2012d2c:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2012d30:	e0bffa17 	ldw	r2,-24(fp)
 2012d34:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 2012d38:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 2012d3c:	e13ffa17 	ldw	r4,-24(fp)
 2012d40:	e17ffc17 	ldw	r5,-16(fp)
 2012d44:	2012c7c0 	call	2012c7c <alt_epcs_test_address>
 2012d48:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 2012d4c:	e0bff917 	ldw	r2,-28(fp)
 2012d50:	1004803a 	cmplt	r2,r2,zero
 2012d54:	10002f1e 	bne	r2,zero,2012e14 <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2012d58:	00002b06 	br	2012e08 <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 2012d5c:	e0bff817 	ldw	r2,-32(fp)
 2012d60:	10c03017 	ldw	r3,192(r2)
 2012d64:	e0bffc17 	ldw	r2,-16(fp)
 2012d68:	1887883a 	add	r3,r3,r2
 2012d6c:	e0bff817 	ldw	r2,-32(fp)
 2012d70:	10803017 	ldw	r2,192(r2)
 2012d74:	0085c83a 	sub	r2,zero,r2
 2012d78:	1884703a 	and	r2,r3,r2
 2012d7c:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 2012d80:	e0fff517 	ldw	r3,-44(fp)
 2012d84:	e0bffc17 	ldw	r2,-16(fp)
 2012d88:	1885c83a 	sub	r2,r3,r2
 2012d8c:	e0c00217 	ldw	r3,8(fp)
 2012d90:	e0ffff15 	stw	r3,-4(fp)
 2012d94:	e0bffe15 	stw	r2,-8(fp)
 2012d98:	e0bfff17 	ldw	r2,-4(fp)
 2012d9c:	e0fffe17 	ldw	r3,-8(fp)
 2012da0:	10c0020e 	bge	r2,r3,2012dac <alt_epcs_flash_write_block+0x9c>
 2012da4:	e0bfff17 	ldw	r2,-4(fp)
 2012da8:	e0bffe15 	stw	r2,-8(fp)
 2012dac:	e0fffe17 	ldw	r3,-8(fp)
 2012db0:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 2012db4:	e0bff817 	ldw	r2,-32(fp)
 2012db8:	11002d17 	ldw	r4,180(r2)
 2012dbc:	e0fffd17 	ldw	r3,-12(fp)
 2012dc0:	e0bff717 	ldw	r2,-36(fp)
 2012dc4:	188d883a 	add	r6,r3,r2
 2012dc8:	e0bff817 	ldw	r2,-32(fp)
 2012dcc:	10803117 	ldw	r2,196(r2)
 2012dd0:	d8800015 	stw	r2,0(sp)
 2012dd4:	e17ffc17 	ldw	r5,-16(fp)
 2012dd8:	e1fff617 	ldw	r7,-40(fp)
 2012ddc:	2013e380 	call	2013e38 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 2012de0:	e0c00217 	ldw	r3,8(fp)
 2012de4:	e0bff617 	ldw	r2,-40(fp)
 2012de8:	1885c83a 	sub	r2,r3,r2
 2012dec:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 2012df0:	e0fff717 	ldw	r3,-36(fp)
 2012df4:	e0bff617 	ldw	r2,-40(fp)
 2012df8:	1885883a 	add	r2,r3,r2
 2012dfc:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 2012e00:	e0bff517 	ldw	r2,-44(fp)
 2012e04:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2012e08:	e0800217 	ldw	r2,8(fp)
 2012e0c:	1004c03a 	cmpne	r2,r2,zero
 2012e10:	103fd21e 	bne	r2,zero,2012d5c <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 2012e14:	e0bff917 	ldw	r2,-28(fp)
}
 2012e18:	e037883a 	mov	sp,fp
 2012e1c:	dfc00117 	ldw	ra,4(sp)
 2012e20:	df000017 	ldw	fp,0(sp)
 2012e24:	dec00204 	addi	sp,sp,8
 2012e28:	f800283a 	ret

02012e2c <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 2012e2c:	defff704 	addi	sp,sp,-36
 2012e30:	dfc00815 	stw	ra,32(sp)
 2012e34:	df000715 	stw	fp,28(sp)
 2012e38:	df000704 	addi	fp,sp,28
 2012e3c:	e13ffc15 	stw	r4,-16(fp)
 2012e40:	e17ffd15 	stw	r5,-12(fp)
 2012e44:	e1bffe15 	stw	r6,-8(fp)
 2012e48:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 2012e4c:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2012e50:	e0bffc17 	ldw	r2,-16(fp)
 2012e54:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 2012e58:	e13ffc17 	ldw	r4,-16(fp)
 2012e5c:	e17ffd17 	ldw	r5,-12(fp)
 2012e60:	2012c7c0 	call	2012c7c <alt_epcs_test_address>
 2012e64:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
 2012e68:	e0bffb17 	ldw	r2,-20(fp)
 2012e6c:	1004803a 	cmplt	r2,r2,zero
 2012e70:	10000e1e 	bne	r2,zero,2012eac <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 2012e74:	e0bffa17 	ldw	r2,-24(fp)
 2012e78:	11002d17 	ldw	r4,180(r2)
 2012e7c:	e1bffe17 	ldw	r6,-8(fp)
 2012e80:	e0bffa17 	ldw	r2,-24(fp)
 2012e84:	10803117 	ldw	r2,196(r2)
 2012e88:	d8800015 	stw	r2,0(sp)
 2012e8c:	e17ffd17 	ldw	r5,-12(fp)
 2012e90:	e1ffff17 	ldw	r7,-4(fp)
 2012e94:	2013c380 	call	2013c38 <epcs_read_buffer>
 2012e98:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 2012e9c:	e0fffb17 	ldw	r3,-20(fp)
 2012ea0:	e0bfff17 	ldw	r2,-4(fp)
 2012ea4:	1880011e 	bne	r3,r2,2012eac <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 2012ea8:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
 2012eac:	e0bffb17 	ldw	r2,-20(fp)
}
 2012eb0:	e037883a 	mov	sp,fp
 2012eb4:	dfc00117 	ldw	ra,4(sp)
 2012eb8:	df000017 	ldw	fp,0(sp)
 2012ebc:	dec00204 	addi	sp,sp,8
 2012ec0:	f800283a 	ret

02012ec4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2012ec4:	defffa04 	addi	sp,sp,-24
 2012ec8:	dfc00515 	stw	ra,20(sp)
 2012ecc:	df000415 	stw	fp,16(sp)
 2012ed0:	df000404 	addi	fp,sp,16
 2012ed4:	e13ffd15 	stw	r4,-12(fp)
 2012ed8:	e17ffe15 	stw	r5,-8(fp)
 2012edc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2012ee0:	e0bffd17 	ldw	r2,-12(fp)
 2012ee4:	10800017 	ldw	r2,0(r2)
 2012ee8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2012eec:	e0bffc17 	ldw	r2,-16(fp)
 2012ef0:	11000a04 	addi	r4,r2,40
 2012ef4:	e0bffd17 	ldw	r2,-12(fp)
 2012ef8:	11c00217 	ldw	r7,8(r2)
 2012efc:	e17ffe17 	ldw	r5,-8(fp)
 2012f00:	e1bfff17 	ldw	r6,-4(fp)
 2012f04:	201350c0 	call	201350c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2012f08:	e037883a 	mov	sp,fp
 2012f0c:	dfc00117 	ldw	ra,4(sp)
 2012f10:	df000017 	ldw	fp,0(sp)
 2012f14:	dec00204 	addi	sp,sp,8
 2012f18:	f800283a 	ret

02012f1c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2012f1c:	defffa04 	addi	sp,sp,-24
 2012f20:	dfc00515 	stw	ra,20(sp)
 2012f24:	df000415 	stw	fp,16(sp)
 2012f28:	df000404 	addi	fp,sp,16
 2012f2c:	e13ffd15 	stw	r4,-12(fp)
 2012f30:	e17ffe15 	stw	r5,-8(fp)
 2012f34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2012f38:	e0bffd17 	ldw	r2,-12(fp)
 2012f3c:	10800017 	ldw	r2,0(r2)
 2012f40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2012f44:	e0bffc17 	ldw	r2,-16(fp)
 2012f48:	11000a04 	addi	r4,r2,40
 2012f4c:	e0bffd17 	ldw	r2,-12(fp)
 2012f50:	11c00217 	ldw	r7,8(r2)
 2012f54:	e17ffe17 	ldw	r5,-8(fp)
 2012f58:	e1bfff17 	ldw	r6,-4(fp)
 2012f5c:	20137300 	call	2013730 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2012f60:	e037883a 	mov	sp,fp
 2012f64:	dfc00117 	ldw	ra,4(sp)
 2012f68:	df000017 	ldw	fp,0(sp)
 2012f6c:	dec00204 	addi	sp,sp,8
 2012f70:	f800283a 	ret

02012f74 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2012f74:	defffc04 	addi	sp,sp,-16
 2012f78:	dfc00315 	stw	ra,12(sp)
 2012f7c:	df000215 	stw	fp,8(sp)
 2012f80:	df000204 	addi	fp,sp,8
 2012f84:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2012f88:	e0bfff17 	ldw	r2,-4(fp)
 2012f8c:	10800017 	ldw	r2,0(r2)
 2012f90:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2012f94:	e0bffe17 	ldw	r2,-8(fp)
 2012f98:	11000a04 	addi	r4,r2,40
 2012f9c:	e0bfff17 	ldw	r2,-4(fp)
 2012fa0:	11400217 	ldw	r5,8(r2)
 2012fa4:	20133a40 	call	20133a4 <altera_avalon_jtag_uart_close>
}
 2012fa8:	e037883a 	mov	sp,fp
 2012fac:	dfc00117 	ldw	ra,4(sp)
 2012fb0:	df000017 	ldw	fp,0(sp)
 2012fb4:	dec00204 	addi	sp,sp,8
 2012fb8:	f800283a 	ret

02012fbc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2012fbc:	defffa04 	addi	sp,sp,-24
 2012fc0:	dfc00515 	stw	ra,20(sp)
 2012fc4:	df000415 	stw	fp,16(sp)
 2012fc8:	df000404 	addi	fp,sp,16
 2012fcc:	e13ffd15 	stw	r4,-12(fp)
 2012fd0:	e17ffe15 	stw	r5,-8(fp)
 2012fd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2012fd8:	e0bffd17 	ldw	r2,-12(fp)
 2012fdc:	10800017 	ldw	r2,0(r2)
 2012fe0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2012fe4:	e0bffc17 	ldw	r2,-16(fp)
 2012fe8:	11000a04 	addi	r4,r2,40
 2012fec:	e17ffe17 	ldw	r5,-8(fp)
 2012ff0:	e1bfff17 	ldw	r6,-4(fp)
 2012ff4:	20134180 	call	2013418 <altera_avalon_jtag_uart_ioctl>
}
 2012ff8:	e037883a 	mov	sp,fp
 2012ffc:	dfc00117 	ldw	ra,4(sp)
 2013000:	df000017 	ldw	fp,0(sp)
 2013004:	dec00204 	addi	sp,sp,8
 2013008:	f800283a 	ret

0201300c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 201300c:	defffa04 	addi	sp,sp,-24
 2013010:	dfc00515 	stw	ra,20(sp)
 2013014:	df000415 	stw	fp,16(sp)
 2013018:	df000404 	addi	fp,sp,16
 201301c:	e13ffd15 	stw	r4,-12(fp)
 2013020:	e17ffe15 	stw	r5,-8(fp)
 2013024:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2013028:	e0fffd17 	ldw	r3,-12(fp)
 201302c:	00800044 	movi	r2,1
 2013030:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2013034:	e0bffd17 	ldw	r2,-12(fp)
 2013038:	10800017 	ldw	r2,0(r2)
 201303c:	11000104 	addi	r4,r2,4
 2013040:	e0bffd17 	ldw	r2,-12(fp)
 2013044:	10800817 	ldw	r2,32(r2)
 2013048:	1007883a 	mov	r3,r2
 201304c:	2005883a 	mov	r2,r4
 2013050:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2013054:	e13ffe17 	ldw	r4,-8(fp)
 2013058:	e17fff17 	ldw	r5,-4(fp)
 201305c:	d8000015 	stw	zero,0(sp)
 2013060:	01808074 	movhi	r6,513
 2013064:	318c3304 	addi	r6,r6,12492
 2013068:	e1fffd17 	ldw	r7,-12(fp)
 201306c:	20146840 	call	2014684 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2013070:	e0bffd17 	ldw	r2,-12(fp)
 2013074:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2013078:	e0bffd17 	ldw	r2,-12(fp)
 201307c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2013080:	008080b4 	movhi	r2,514
 2013084:	10a64404 	addi	r2,r2,-26352
 2013088:	10800017 	ldw	r2,0(r2)
 201308c:	100b883a 	mov	r5,r2
 2013090:	01808074 	movhi	r6,513
 2013094:	318cbd04 	addi	r6,r6,13044
 2013098:	e1fffd17 	ldw	r7,-12(fp)
 201309c:	20141440 	call	2014144 <alt_alarm_start>
 20130a0:	1004403a 	cmpge	r2,r2,zero
 20130a4:	1000041e 	bne	r2,zero,20130b8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 20130a8:	e0fffd17 	ldw	r3,-12(fp)
 20130ac:	00a00034 	movhi	r2,32768
 20130b0:	10bfffc4 	addi	r2,r2,-1
 20130b4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 20130b8:	e037883a 	mov	sp,fp
 20130bc:	dfc00117 	ldw	ra,4(sp)
 20130c0:	df000017 	ldw	fp,0(sp)
 20130c4:	dec00204 	addi	sp,sp,8
 20130c8:	f800283a 	ret

020130cc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 20130cc:	defff804 	addi	sp,sp,-32
 20130d0:	df000715 	stw	fp,28(sp)
 20130d4:	df000704 	addi	fp,sp,28
 20130d8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 20130dc:	e0bfff17 	ldw	r2,-4(fp)
 20130e0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 20130e4:	e0bffe17 	ldw	r2,-8(fp)
 20130e8:	10800017 	ldw	r2,0(r2)
 20130ec:	e0bffd15 	stw	r2,-12(fp)
 20130f0:	00000006 	br	20130f4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20130f4:	e0bffd17 	ldw	r2,-12(fp)
 20130f8:	10800104 	addi	r2,r2,4
 20130fc:	10800037 	ldwio	r2,0(r2)
 2013100:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2013104:	e0bffc17 	ldw	r2,-16(fp)
 2013108:	1080c00c 	andi	r2,r2,768
 201310c:	1005003a 	cmpeq	r2,r2,zero
 2013110:	1000741e 	bne	r2,zero,20132e4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2013114:	e0bffc17 	ldw	r2,-16(fp)
 2013118:	1080400c 	andi	r2,r2,256
 201311c:	1005003a 	cmpeq	r2,r2,zero
 2013120:	1000351e 	bne	r2,zero,20131f8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2013124:	00800074 	movhi	r2,1
 2013128:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201312c:	e0bffe17 	ldw	r2,-8(fp)
 2013130:	10800a17 	ldw	r2,40(r2)
 2013134:	10800044 	addi	r2,r2,1
 2013138:	1081ffcc 	andi	r2,r2,2047
 201313c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 2013140:	e0bffe17 	ldw	r2,-8(fp)
 2013144:	10c00b17 	ldw	r3,44(r2)
 2013148:	e0bffa17 	ldw	r2,-24(fp)
 201314c:	18801626 	beq	r3,r2,20131a8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2013150:	e0bffd17 	ldw	r2,-12(fp)
 2013154:	10800037 	ldwio	r2,0(r2)
 2013158:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 201315c:	e0bffb17 	ldw	r2,-20(fp)
 2013160:	10a0000c 	andi	r2,r2,32768
 2013164:	1005003a 	cmpeq	r2,r2,zero
 2013168:	10000f1e 	bne	r2,zero,20131a8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 201316c:	e0bffe17 	ldw	r2,-8(fp)
 2013170:	10c00a17 	ldw	r3,40(r2)
 2013174:	e0bffb17 	ldw	r2,-20(fp)
 2013178:	1009883a 	mov	r4,r2
 201317c:	e0bffe17 	ldw	r2,-8(fp)
 2013180:	1885883a 	add	r2,r3,r2
 2013184:	10800e04 	addi	r2,r2,56
 2013188:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201318c:	e0bffe17 	ldw	r2,-8(fp)
 2013190:	10800a17 	ldw	r2,40(r2)
 2013194:	10800044 	addi	r2,r2,1
 2013198:	10c1ffcc 	andi	r3,r2,2047
 201319c:	e0bffe17 	ldw	r2,-8(fp)
 20131a0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 20131a4:	003fe106 	br	201312c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 20131a8:	e0bffb17 	ldw	r2,-20(fp)
 20131ac:	10bfffec 	andhi	r2,r2,65535
 20131b0:	1005003a 	cmpeq	r2,r2,zero
 20131b4:	1000101e 	bne	r2,zero,20131f8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20131b8:	e0bffe17 	ldw	r2,-8(fp)
 20131bc:	10c00817 	ldw	r3,32(r2)
 20131c0:	00bfff84 	movi	r2,-2
 20131c4:	1886703a 	and	r3,r3,r2
 20131c8:	e0bffe17 	ldw	r2,-8(fp)
 20131cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 20131d0:	e0bffd17 	ldw	r2,-12(fp)
 20131d4:	11000104 	addi	r4,r2,4
 20131d8:	e0bffe17 	ldw	r2,-8(fp)
 20131dc:	10800817 	ldw	r2,32(r2)
 20131e0:	1007883a 	mov	r3,r2
 20131e4:	2005883a 	mov	r2,r4
 20131e8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20131ec:	e0bffd17 	ldw	r2,-12(fp)
 20131f0:	10800104 	addi	r2,r2,4
 20131f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 20131f8:	e0bffc17 	ldw	r2,-16(fp)
 20131fc:	1080800c 	andi	r2,r2,512
 2013200:	1005003a 	cmpeq	r2,r2,zero
 2013204:	103fbb1e 	bne	r2,zero,20130f4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2013208:	e0bffc17 	ldw	r2,-16(fp)
 201320c:	10bfffec 	andhi	r2,r2,65535
 2013210:	1004d43a 	srli	r2,r2,16
 2013214:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2013218:	00001506 	br	2013270 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 201321c:	e13ffd17 	ldw	r4,-12(fp)
 2013220:	e0bffe17 	ldw	r2,-8(fp)
 2013224:	10c00d17 	ldw	r3,52(r2)
 2013228:	e0bffe17 	ldw	r2,-8(fp)
 201322c:	1885883a 	add	r2,r3,r2
 2013230:	10820e04 	addi	r2,r2,2104
 2013234:	10800003 	ldbu	r2,0(r2)
 2013238:	10c03fcc 	andi	r3,r2,255
 201323c:	18c0201c 	xori	r3,r3,128
 2013240:	18ffe004 	addi	r3,r3,-128
 2013244:	2005883a 	mov	r2,r4
 2013248:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201324c:	e0bffe17 	ldw	r2,-8(fp)
 2013250:	10800d17 	ldw	r2,52(r2)
 2013254:	10800044 	addi	r2,r2,1
 2013258:	10c1ffcc 	andi	r3,r2,2047
 201325c:	e0bffe17 	ldw	r2,-8(fp)
 2013260:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2013264:	e0bff917 	ldw	r2,-28(fp)
 2013268:	10bfffc4 	addi	r2,r2,-1
 201326c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2013270:	e0bff917 	ldw	r2,-28(fp)
 2013274:	1005003a 	cmpeq	r2,r2,zero
 2013278:	1000051e 	bne	r2,zero,2013290 <altera_avalon_jtag_uart_irq+0x1c4>
 201327c:	e0bffe17 	ldw	r2,-8(fp)
 2013280:	10c00d17 	ldw	r3,52(r2)
 2013284:	e0bffe17 	ldw	r2,-8(fp)
 2013288:	10800c17 	ldw	r2,48(r2)
 201328c:	18bfe31e 	bne	r3,r2,201321c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2013290:	e0bff917 	ldw	r2,-28(fp)
 2013294:	1005003a 	cmpeq	r2,r2,zero
 2013298:	103f961e 	bne	r2,zero,20130f4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201329c:	e0bffe17 	ldw	r2,-8(fp)
 20132a0:	10c00817 	ldw	r3,32(r2)
 20132a4:	00bfff44 	movi	r2,-3
 20132a8:	1886703a 	and	r3,r3,r2
 20132ac:	e0bffe17 	ldw	r2,-8(fp)
 20132b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 20132b4:	e0bffe17 	ldw	r2,-8(fp)
 20132b8:	10800017 	ldw	r2,0(r2)
 20132bc:	11000104 	addi	r4,r2,4
 20132c0:	e0bffe17 	ldw	r2,-8(fp)
 20132c4:	10800817 	ldw	r2,32(r2)
 20132c8:	1007883a 	mov	r3,r2
 20132cc:	2005883a 	mov	r2,r4
 20132d0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20132d4:	e0bffd17 	ldw	r2,-12(fp)
 20132d8:	10800104 	addi	r2,r2,4
 20132dc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 20132e0:	003f8406 	br	20130f4 <altera_avalon_jtag_uart_irq+0x28>
}
 20132e4:	e037883a 	mov	sp,fp
 20132e8:	df000017 	ldw	fp,0(sp)
 20132ec:	dec00104 	addi	sp,sp,4
 20132f0:	f800283a 	ret

020132f4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 20132f4:	defffc04 	addi	sp,sp,-16
 20132f8:	df000315 	stw	fp,12(sp)
 20132fc:	df000304 	addi	fp,sp,12
 2013300:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2013304:	e0bfff17 	ldw	r2,-4(fp)
 2013308:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 201330c:	e0bffe17 	ldw	r2,-8(fp)
 2013310:	10800017 	ldw	r2,0(r2)
 2013314:	10800104 	addi	r2,r2,4
 2013318:	10800037 	ldwio	r2,0(r2)
 201331c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2013320:	e0bffd17 	ldw	r2,-12(fp)
 2013324:	1081000c 	andi	r2,r2,1024
 2013328:	1005003a 	cmpeq	r2,r2,zero
 201332c:	10000c1e 	bne	r2,zero,2013360 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2013330:	e0bffe17 	ldw	r2,-8(fp)
 2013334:	10800017 	ldw	r2,0(r2)
 2013338:	11000104 	addi	r4,r2,4
 201333c:	e0bffe17 	ldw	r2,-8(fp)
 2013340:	10800817 	ldw	r2,32(r2)
 2013344:	10810014 	ori	r2,r2,1024
 2013348:	1007883a 	mov	r3,r2
 201334c:	2005883a 	mov	r2,r4
 2013350:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 2013354:	e0bffe17 	ldw	r2,-8(fp)
 2013358:	10000915 	stw	zero,36(r2)
 201335c:	00000a06 	br	2013388 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2013360:	e0bffe17 	ldw	r2,-8(fp)
 2013364:	10c00917 	ldw	r3,36(r2)
 2013368:	00a00034 	movhi	r2,32768
 201336c:	10bfff04 	addi	r2,r2,-4
 2013370:	10c00536 	bltu	r2,r3,2013388 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 2013374:	e0bffe17 	ldw	r2,-8(fp)
 2013378:	10800917 	ldw	r2,36(r2)
 201337c:	10c00044 	addi	r3,r2,1
 2013380:	e0bffe17 	ldw	r2,-8(fp)
 2013384:	10c00915 	stw	r3,36(r2)
 2013388:	008080b4 	movhi	r2,514
 201338c:	10a64404 	addi	r2,r2,-26352
 2013390:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2013394:	e037883a 	mov	sp,fp
 2013398:	df000017 	ldw	fp,0(sp)
 201339c:	dec00104 	addi	sp,sp,4
 20133a0:	f800283a 	ret

020133a4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 20133a4:	defffc04 	addi	sp,sp,-16
 20133a8:	df000315 	stw	fp,12(sp)
 20133ac:	df000304 	addi	fp,sp,12
 20133b0:	e13ffd15 	stw	r4,-12(fp)
 20133b4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 20133b8:	00000706 	br	20133d8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 20133bc:	e0bffe17 	ldw	r2,-8(fp)
 20133c0:	1090000c 	andi	r2,r2,16384
 20133c4:	1005003a 	cmpeq	r2,r2,zero
 20133c8:	1000031e 	bne	r2,zero,20133d8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 20133cc:	00bffd44 	movi	r2,-11
 20133d0:	e0bfff15 	stw	r2,-4(fp)
 20133d4:	00000b06 	br	2013404 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 20133d8:	e0bffd17 	ldw	r2,-12(fp)
 20133dc:	10c00d17 	ldw	r3,52(r2)
 20133e0:	e0bffd17 	ldw	r2,-12(fp)
 20133e4:	10800c17 	ldw	r2,48(r2)
 20133e8:	18800526 	beq	r3,r2,2013400 <altera_avalon_jtag_uart_close+0x5c>
 20133ec:	e0bffd17 	ldw	r2,-12(fp)
 20133f0:	10c00917 	ldw	r3,36(r2)
 20133f4:	e0bffd17 	ldw	r2,-12(fp)
 20133f8:	10800117 	ldw	r2,4(r2)
 20133fc:	18bfef36 	bltu	r3,r2,20133bc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2013400:	e03fff15 	stw	zero,-4(fp)
 2013404:	e0bfff17 	ldw	r2,-4(fp)
}
 2013408:	e037883a 	mov	sp,fp
 201340c:	df000017 	ldw	fp,0(sp)
 2013410:	dec00104 	addi	sp,sp,4
 2013414:	f800283a 	ret

02013418 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2013418:	defff804 	addi	sp,sp,-32
 201341c:	df000715 	stw	fp,28(sp)
 2013420:	df000704 	addi	fp,sp,28
 2013424:	e13ffb15 	stw	r4,-20(fp)
 2013428:	e17ffc15 	stw	r5,-16(fp)
 201342c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 2013430:	00bff9c4 	movi	r2,-25
 2013434:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 2013438:	e0bffc17 	ldw	r2,-16(fp)
 201343c:	e0bfff15 	stw	r2,-4(fp)
 2013440:	e0ffff17 	ldw	r3,-4(fp)
 2013444:	189a8060 	cmpeqi	r2,r3,27137
 2013448:	1000041e 	bne	r2,zero,201345c <altera_avalon_jtag_uart_ioctl+0x44>
 201344c:	e0ffff17 	ldw	r3,-4(fp)
 2013450:	189a80a0 	cmpeqi	r2,r3,27138
 2013454:	10001b1e 	bne	r2,zero,20134c4 <altera_avalon_jtag_uart_ioctl+0xac>
 2013458:	00002706 	br	20134f8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 201345c:	e0bffb17 	ldw	r2,-20(fp)
 2013460:	10c00117 	ldw	r3,4(r2)
 2013464:	00a00034 	movhi	r2,32768
 2013468:	10bfffc4 	addi	r2,r2,-1
 201346c:	18802226 	beq	r3,r2,20134f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 2013470:	e0bffd17 	ldw	r2,-12(fp)
 2013474:	10800017 	ldw	r2,0(r2)
 2013478:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 201347c:	e0bff917 	ldw	r2,-28(fp)
 2013480:	10800090 	cmplti	r2,r2,2
 2013484:	1000071e 	bne	r2,zero,20134a4 <altera_avalon_jtag_uart_ioctl+0x8c>
 2013488:	e0fff917 	ldw	r3,-28(fp)
 201348c:	00a00034 	movhi	r2,32768
 2013490:	10bfffc4 	addi	r2,r2,-1
 2013494:	18800326 	beq	r3,r2,20134a4 <altera_avalon_jtag_uart_ioctl+0x8c>
 2013498:	e0bff917 	ldw	r2,-28(fp)
 201349c:	e0bffe15 	stw	r2,-8(fp)
 20134a0:	00000306 	br	20134b0 <altera_avalon_jtag_uart_ioctl+0x98>
 20134a4:	00e00034 	movhi	r3,32768
 20134a8:	18ffff84 	addi	r3,r3,-2
 20134ac:	e0fffe15 	stw	r3,-8(fp)
 20134b0:	e0bffb17 	ldw	r2,-20(fp)
 20134b4:	e0fffe17 	ldw	r3,-8(fp)
 20134b8:	10c00115 	stw	r3,4(r2)
      rc = 0;
 20134bc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 20134c0:	00000d06 	br	20134f8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 20134c4:	e0bffb17 	ldw	r2,-20(fp)
 20134c8:	10c00117 	ldw	r3,4(r2)
 20134cc:	00a00034 	movhi	r2,32768
 20134d0:	10bfffc4 	addi	r2,r2,-1
 20134d4:	18800826 	beq	r3,r2,20134f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 20134d8:	e13ffd17 	ldw	r4,-12(fp)
 20134dc:	e0bffb17 	ldw	r2,-20(fp)
 20134e0:	10c00917 	ldw	r3,36(r2)
 20134e4:	e0bffb17 	ldw	r2,-20(fp)
 20134e8:	10800117 	ldw	r2,4(r2)
 20134ec:	1885803a 	cmpltu	r2,r3,r2
 20134f0:	20800015 	stw	r2,0(r4)
      rc = 0;
 20134f4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 20134f8:	e0bffa17 	ldw	r2,-24(fp)
}
 20134fc:	e037883a 	mov	sp,fp
 2013500:	df000017 	ldw	fp,0(sp)
 2013504:	dec00104 	addi	sp,sp,4
 2013508:	f800283a 	ret

0201350c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 201350c:	defff204 	addi	sp,sp,-56
 2013510:	dfc00d15 	stw	ra,52(sp)
 2013514:	df000c15 	stw	fp,48(sp)
 2013518:	df000c04 	addi	fp,sp,48
 201351c:	e13ffb15 	stw	r4,-20(fp)
 2013520:	e17ffc15 	stw	r5,-16(fp)
 2013524:	e1bffd15 	stw	r6,-12(fp)
 2013528:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 201352c:	e0bffc17 	ldw	r2,-16(fp)
 2013530:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2013534:	00004806 	br	2013658 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2013538:	e0bffb17 	ldw	r2,-20(fp)
 201353c:	10800a17 	ldw	r2,40(r2)
 2013540:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 2013544:	e0bffb17 	ldw	r2,-20(fp)
 2013548:	10800b17 	ldw	r2,44(r2)
 201354c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 2013550:	e0fff717 	ldw	r3,-36(fp)
 2013554:	e0bff617 	ldw	r2,-40(fp)
 2013558:	18800536 	bltu	r3,r2,2013570 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 201355c:	e0bff717 	ldw	r2,-36(fp)
 2013560:	e0fff617 	ldw	r3,-40(fp)
 2013564:	10c5c83a 	sub	r2,r2,r3
 2013568:	e0bff815 	stw	r2,-32(fp)
 201356c:	00000406 	br	2013580 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2013570:	00820004 	movi	r2,2048
 2013574:	e0fff617 	ldw	r3,-40(fp)
 2013578:	10c5c83a 	sub	r2,r2,r3
 201357c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2013580:	e0bff817 	ldw	r2,-32(fp)
 2013584:	1005003a 	cmpeq	r2,r2,zero
 2013588:	10001f1e 	bne	r2,zero,2013608 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 201358c:	e0fffd17 	ldw	r3,-12(fp)
 2013590:	e0bff817 	ldw	r2,-32(fp)
 2013594:	1880022e 	bgeu	r3,r2,20135a0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 2013598:	e0bffd17 	ldw	r2,-12(fp)
 201359c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 20135a0:	e0bffb17 	ldw	r2,-20(fp)
 20135a4:	10c00e04 	addi	r3,r2,56
 20135a8:	e0bff617 	ldw	r2,-40(fp)
 20135ac:	1887883a 	add	r3,r3,r2
 20135b0:	e0bffa17 	ldw	r2,-24(fp)
 20135b4:	1009883a 	mov	r4,r2
 20135b8:	180b883a 	mov	r5,r3
 20135bc:	e1bff817 	ldw	r6,-32(fp)
 20135c0:	200a6fc0 	call	200a6fc <memcpy>
      ptr   += n;
 20135c4:	e0fff817 	ldw	r3,-32(fp)
 20135c8:	e0bffa17 	ldw	r2,-24(fp)
 20135cc:	10c5883a 	add	r2,r2,r3
 20135d0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 20135d4:	e0fffd17 	ldw	r3,-12(fp)
 20135d8:	e0bff817 	ldw	r2,-32(fp)
 20135dc:	1885c83a 	sub	r2,r3,r2
 20135e0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20135e4:	e0fff617 	ldw	r3,-40(fp)
 20135e8:	e0bff817 	ldw	r2,-32(fp)
 20135ec:	1885883a 	add	r2,r3,r2
 20135f0:	10c1ffcc 	andi	r3,r2,2047
 20135f4:	e0bffb17 	ldw	r2,-20(fp)
 20135f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 20135fc:	e0bffd17 	ldw	r2,-12(fp)
 2013600:	10800048 	cmpgei	r2,r2,1
 2013604:	103fcc1e 	bne	r2,zero,2013538 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 2013608:	e0fffa17 	ldw	r3,-24(fp)
 201360c:	e0bffc17 	ldw	r2,-16(fp)
 2013610:	1880141e 	bne	r3,r2,2013664 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2013614:	e0bffe17 	ldw	r2,-8(fp)
 2013618:	1090000c 	andi	r2,r2,16384
 201361c:	1004c03a 	cmpne	r2,r2,zero
 2013620:	1000101e 	bne	r2,zero,2013664 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2013624:	e0bffb17 	ldw	r2,-20(fp)
 2013628:	10c00a17 	ldw	r3,40(r2)
 201362c:	e0bff717 	ldw	r2,-36(fp)
 2013630:	1880051e 	bne	r3,r2,2013648 <altera_avalon_jtag_uart_read+0x13c>
 2013634:	e0bffb17 	ldw	r2,-20(fp)
 2013638:	10c00917 	ldw	r3,36(r2)
 201363c:	e0bffb17 	ldw	r2,-20(fp)
 2013640:	10800117 	ldw	r2,4(r2)
 2013644:	18bff736 	bltu	r3,r2,2013624 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2013648:	e0bffb17 	ldw	r2,-20(fp)
 201364c:	10c00a17 	ldw	r3,40(r2)
 2013650:	e0bff717 	ldw	r2,-36(fp)
 2013654:	18800326 	beq	r3,r2,2013664 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2013658:	e0bffd17 	ldw	r2,-12(fp)
 201365c:	10800048 	cmpgei	r2,r2,1
 2013660:	103fb51e 	bne	r2,zero,2013538 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2013664:	e0fffa17 	ldw	r3,-24(fp)
 2013668:	e0bffc17 	ldw	r2,-16(fp)
 201366c:	18801926 	beq	r3,r2,20136d4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013670:	0005303a 	rdctl	r2,status
 2013674:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013678:	e0fff517 	ldw	r3,-44(fp)
 201367c:	00bfff84 	movi	r2,-2
 2013680:	1884703a 	and	r2,r3,r2
 2013684:	1001703a 	wrctl	status,r2
  
  return context;
 2013688:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 201368c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2013690:	e0bffb17 	ldw	r2,-20(fp)
 2013694:	10800817 	ldw	r2,32(r2)
 2013698:	10c00054 	ori	r3,r2,1
 201369c:	e0bffb17 	ldw	r2,-20(fp)
 20136a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 20136a4:	e0bffb17 	ldw	r2,-20(fp)
 20136a8:	10800017 	ldw	r2,0(r2)
 20136ac:	11000104 	addi	r4,r2,4
 20136b0:	e0bffb17 	ldw	r2,-20(fp)
 20136b4:	10800817 	ldw	r2,32(r2)
 20136b8:	1007883a 	mov	r3,r2
 20136bc:	2005883a 	mov	r2,r4
 20136c0:	10c00035 	stwio	r3,0(r2)
 20136c4:	e0bff917 	ldw	r2,-28(fp)
 20136c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20136cc:	e0bff417 	ldw	r2,-48(fp)
 20136d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 20136d4:	e0fffa17 	ldw	r3,-24(fp)
 20136d8:	e0bffc17 	ldw	r2,-16(fp)
 20136dc:	18800526 	beq	r3,r2,20136f4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 20136e0:	e0fffa17 	ldw	r3,-24(fp)
 20136e4:	e0bffc17 	ldw	r2,-16(fp)
 20136e8:	1887c83a 	sub	r3,r3,r2
 20136ec:	e0ffff15 	stw	r3,-4(fp)
 20136f0:	00000906 	br	2013718 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 20136f4:	e0bffe17 	ldw	r2,-8(fp)
 20136f8:	1090000c 	andi	r2,r2,16384
 20136fc:	1005003a 	cmpeq	r2,r2,zero
 2013700:	1000031e 	bne	r2,zero,2013710 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 2013704:	00bffd44 	movi	r2,-11
 2013708:	e0bfff15 	stw	r2,-4(fp)
 201370c:	00000206 	br	2013718 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 2013710:	00bffec4 	movi	r2,-5
 2013714:	e0bfff15 	stw	r2,-4(fp)
 2013718:	e0bfff17 	ldw	r2,-4(fp)
}
 201371c:	e037883a 	mov	sp,fp
 2013720:	dfc00117 	ldw	ra,4(sp)
 2013724:	df000017 	ldw	fp,0(sp)
 2013728:	dec00204 	addi	sp,sp,8
 201372c:	f800283a 	ret

02013730 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2013730:	defff204 	addi	sp,sp,-56
 2013734:	dfc00d15 	stw	ra,52(sp)
 2013738:	df000c15 	stw	fp,48(sp)
 201373c:	df000c04 	addi	fp,sp,48
 2013740:	e13ffb15 	stw	r4,-20(fp)
 2013744:	e17ffc15 	stw	r5,-16(fp)
 2013748:	e1bffd15 	stw	r6,-12(fp)
 201374c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2013750:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2013754:	e0bffc17 	ldw	r2,-16(fp)
 2013758:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201375c:	00003a06 	br	2013848 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2013760:	e0bffb17 	ldw	r2,-20(fp)
 2013764:	10800c17 	ldw	r2,48(r2)
 2013768:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 201376c:	e0bffb17 	ldw	r2,-20(fp)
 2013770:	10800d17 	ldw	r2,52(r2)
 2013774:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 2013778:	e0fffa17 	ldw	r3,-24(fp)
 201377c:	e0bff917 	ldw	r2,-28(fp)
 2013780:	1880062e 	bgeu	r3,r2,201379c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2013784:	e0fff917 	ldw	r3,-28(fp)
 2013788:	e0bffa17 	ldw	r2,-24(fp)
 201378c:	1885c83a 	sub	r2,r3,r2
 2013790:	10bfffc4 	addi	r2,r2,-1
 2013794:	e0bff815 	stw	r2,-32(fp)
 2013798:	00000c06 	br	20137cc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 201379c:	e0bff917 	ldw	r2,-28(fp)
 20137a0:	1005003a 	cmpeq	r2,r2,zero
 20137a4:	1000051e 	bne	r2,zero,20137bc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 20137a8:	00820004 	movi	r2,2048
 20137ac:	e0fffa17 	ldw	r3,-24(fp)
 20137b0:	10c5c83a 	sub	r2,r2,r3
 20137b4:	e0bff815 	stw	r2,-32(fp)
 20137b8:	00000406 	br	20137cc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 20137bc:	0081ffc4 	movi	r2,2047
 20137c0:	e0fffa17 	ldw	r3,-24(fp)
 20137c4:	10c5c83a 	sub	r2,r2,r3
 20137c8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 20137cc:	e0bff817 	ldw	r2,-32(fp)
 20137d0:	1005003a 	cmpeq	r2,r2,zero
 20137d4:	10001f1e 	bne	r2,zero,2013854 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 20137d8:	e0fffd17 	ldw	r3,-12(fp)
 20137dc:	e0bff817 	ldw	r2,-32(fp)
 20137e0:	1880022e 	bgeu	r3,r2,20137ec <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 20137e4:	e0bffd17 	ldw	r2,-12(fp)
 20137e8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 20137ec:	e0bffb17 	ldw	r2,-20(fp)
 20137f0:	10c20e04 	addi	r3,r2,2104
 20137f4:	e0bffa17 	ldw	r2,-24(fp)
 20137f8:	1885883a 	add	r2,r3,r2
 20137fc:	e0fffc17 	ldw	r3,-16(fp)
 2013800:	1009883a 	mov	r4,r2
 2013804:	180b883a 	mov	r5,r3
 2013808:	e1bff817 	ldw	r6,-32(fp)
 201380c:	200a6fc0 	call	200a6fc <memcpy>
      ptr   += n;
 2013810:	e0fff817 	ldw	r3,-32(fp)
 2013814:	e0bffc17 	ldw	r2,-16(fp)
 2013818:	10c5883a 	add	r2,r2,r3
 201381c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 2013820:	e0fffd17 	ldw	r3,-12(fp)
 2013824:	e0bff817 	ldw	r2,-32(fp)
 2013828:	1885c83a 	sub	r2,r3,r2
 201382c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2013830:	e0fffa17 	ldw	r3,-24(fp)
 2013834:	e0bff817 	ldw	r2,-32(fp)
 2013838:	1885883a 	add	r2,r3,r2
 201383c:	10c1ffcc 	andi	r3,r2,2047
 2013840:	e0bffb17 	ldw	r2,-20(fp)
 2013844:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2013848:	e0bffd17 	ldw	r2,-12(fp)
 201384c:	10800048 	cmpgei	r2,r2,1
 2013850:	103fc31e 	bne	r2,zero,2013760 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013854:	0005303a 	rdctl	r2,status
 2013858:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201385c:	e0fff517 	ldw	r3,-44(fp)
 2013860:	00bfff84 	movi	r2,-2
 2013864:	1884703a 	and	r2,r3,r2
 2013868:	1001703a 	wrctl	status,r2
  
  return context;
 201386c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2013870:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2013874:	e0bffb17 	ldw	r2,-20(fp)
 2013878:	10800817 	ldw	r2,32(r2)
 201387c:	10c00094 	ori	r3,r2,2
 2013880:	e0bffb17 	ldw	r2,-20(fp)
 2013884:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2013888:	e0bffb17 	ldw	r2,-20(fp)
 201388c:	10800017 	ldw	r2,0(r2)
 2013890:	11000104 	addi	r4,r2,4
 2013894:	e0bffb17 	ldw	r2,-20(fp)
 2013898:	10800817 	ldw	r2,32(r2)
 201389c:	1007883a 	mov	r3,r2
 20138a0:	2005883a 	mov	r2,r4
 20138a4:	10c00035 	stwio	r3,0(r2)
 20138a8:	e0bff717 	ldw	r2,-36(fp)
 20138ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20138b0:	e0bff417 	ldw	r2,-48(fp)
 20138b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 20138b8:	e0bffd17 	ldw	r2,-12(fp)
 20138bc:	10800050 	cmplti	r2,r2,1
 20138c0:	1000111e 	bne	r2,zero,2013908 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 20138c4:	e0bffe17 	ldw	r2,-8(fp)
 20138c8:	1090000c 	andi	r2,r2,16384
 20138cc:	1004c03a 	cmpne	r2,r2,zero
 20138d0:	1000101e 	bne	r2,zero,2013914 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 20138d4:	e0bffb17 	ldw	r2,-20(fp)
 20138d8:	10c00d17 	ldw	r3,52(r2)
 20138dc:	e0bff917 	ldw	r2,-28(fp)
 20138e0:	1880051e 	bne	r3,r2,20138f8 <altera_avalon_jtag_uart_write+0x1c8>
 20138e4:	e0bffb17 	ldw	r2,-20(fp)
 20138e8:	10c00917 	ldw	r3,36(r2)
 20138ec:	e0bffb17 	ldw	r2,-20(fp)
 20138f0:	10800117 	ldw	r2,4(r2)
 20138f4:	18bff736 	bltu	r3,r2,20138d4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 20138f8:	e0bffb17 	ldw	r2,-20(fp)
 20138fc:	10c00d17 	ldw	r3,52(r2)
 2013900:	e0bff917 	ldw	r2,-28(fp)
 2013904:	18800326 	beq	r3,r2,2013914 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 2013908:	e0bffd17 	ldw	r2,-12(fp)
 201390c:	10800048 	cmpgei	r2,r2,1
 2013910:	103fcd1e 	bne	r2,zero,2013848 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2013914:	e0fffc17 	ldw	r3,-16(fp)
 2013918:	e0bff617 	ldw	r2,-40(fp)
 201391c:	18800526 	beq	r3,r2,2013934 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 2013920:	e0fffc17 	ldw	r3,-16(fp)
 2013924:	e0bff617 	ldw	r2,-40(fp)
 2013928:	1887c83a 	sub	r3,r3,r2
 201392c:	e0ffff15 	stw	r3,-4(fp)
 2013930:	00000906 	br	2013958 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 2013934:	e0bffe17 	ldw	r2,-8(fp)
 2013938:	1090000c 	andi	r2,r2,16384
 201393c:	1005003a 	cmpeq	r2,r2,zero
 2013940:	1000031e 	bne	r2,zero,2013950 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 2013944:	00bffd44 	movi	r2,-11
 2013948:	e0bfff15 	stw	r2,-4(fp)
 201394c:	00000206 	br	2013958 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2013950:	00bffec4 	movi	r2,-5
 2013954:	e0bfff15 	stw	r2,-4(fp)
 2013958:	e0bfff17 	ldw	r2,-4(fp)
}
 201395c:	e037883a 	mov	sp,fp
 2013960:	dfc00117 	ldw	ra,4(sp)
 2013964:	df000017 	ldw	fp,0(sp)
 2013968:	dec00204 	addi	sp,sp,8
 201396c:	f800283a 	ret

02013970 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 2013970:	defffa04 	addi	sp,sp,-24
 2013974:	dfc00515 	stw	ra,20(sp)
 2013978:	df000415 	stw	fp,16(sp)
 201397c:	df000404 	addi	fp,sp,16
 2013980:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 2013984:	e0bfff17 	ldw	r2,-4(fp)
 2013988:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 201398c:	e0bfff17 	ldw	r2,-4(fp)
 2013990:	10800104 	addi	r2,r2,4
 2013994:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013998:	0005303a 	rdctl	r2,status
 201399c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20139a0:	e0fffd17 	ldw	r3,-12(fp)
 20139a4:	00bfff84 	movi	r2,-2
 20139a8:	1884703a 	and	r2,r3,r2
 20139ac:	1001703a 	wrctl	status,r2
  
  return context;
 20139b0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 20139b4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 20139b8:	20121540 	call	2012154 <alt_tick>
 20139bc:	e0bffe17 	ldw	r2,-8(fp)
 20139c0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20139c4:	e0bffc17 	ldw	r2,-16(fp)
 20139c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 20139cc:	e037883a 	mov	sp,fp
 20139d0:	dfc00117 	ldw	ra,4(sp)
 20139d4:	df000017 	ldw	fp,0(sp)
 20139d8:	dec00204 	addi	sp,sp,8
 20139dc:	f800283a 	ret

020139e0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 20139e0:	defff804 	addi	sp,sp,-32
 20139e4:	dfc00715 	stw	ra,28(sp)
 20139e8:	df000615 	stw	fp,24(sp)
 20139ec:	df000604 	addi	fp,sp,24
 20139f0:	e13ffc15 	stw	r4,-16(fp)
 20139f4:	e17ffd15 	stw	r5,-12(fp)
 20139f8:	e1bffe15 	stw	r6,-8(fp)
 20139fc:	e1ffff15 	stw	r7,-4(fp)
 2013a00:	e0bfff17 	ldw	r2,-4(fp)
 2013a04:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2013a08:	008080b4 	movhi	r2,514
 2013a0c:	10a64404 	addi	r2,r2,-26352
 2013a10:	10800017 	ldw	r2,0(r2)
 2013a14:	1004c03a 	cmpne	r2,r2,zero
 2013a18:	1000041e 	bne	r2,zero,2013a2c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 2013a1c:	00c080b4 	movhi	r3,514
 2013a20:	18e64404 	addi	r3,r3,-26352
 2013a24:	e0bffb17 	ldw	r2,-20(fp)
 2013a28:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2013a2c:	e0bffc17 	ldw	r2,-16(fp)
 2013a30:	10800104 	addi	r2,r2,4
 2013a34:	1007883a 	mov	r3,r2
 2013a38:	008001c4 	movi	r2,7
 2013a3c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 2013a40:	d8000015 	stw	zero,0(sp)
 2013a44:	e13ffd17 	ldw	r4,-12(fp)
 2013a48:	e17ffe17 	ldw	r5,-8(fp)
 2013a4c:	01808074 	movhi	r6,513
 2013a50:	318e5c04 	addi	r6,r6,14704
 2013a54:	e1fffc17 	ldw	r7,-16(fp)
 2013a58:	20146840 	call	2014684 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 2013a5c:	e037883a 	mov	sp,fp
 2013a60:	dfc00117 	ldw	ra,4(sp)
 2013a64:	df000017 	ldw	fp,0(sp)
 2013a68:	dec00204 	addi	sp,sp,8
 2013a6c:	f800283a 	ret

02013a70 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 2013a70:	defff904 	addi	sp,sp,-28
 2013a74:	dfc00615 	stw	ra,24(sp)
 2013a78:	df000515 	stw	fp,20(sp)
 2013a7c:	df000504 	addi	fp,sp,20
 2013a80:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 2013a84:	00800144 	movi	r2,5
 2013a88:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 2013a8c:	00800044 	movi	r2,1
 2013a90:	d8800015 	stw	r2,0(sp)
 2013a94:	e0bffe44 	addi	r2,fp,-7
 2013a98:	d8800115 	stw	r2,4(sp)
 2013a9c:	d8000215 	stw	zero,8(sp)
 2013aa0:	e13fff17 	ldw	r4,-4(fp)
 2013aa4:	000b883a 	mov	r5,zero
 2013aa8:	01800044 	movi	r6,1
 2013aac:	e1fffe04 	addi	r7,fp,-8
 2013ab0:	2014d700 	call	2014d70 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 2013ab4:	e0bffe43 	ldbu	r2,-7(fp)
 2013ab8:	10803fcc 	andi	r2,r2,255
}
 2013abc:	e037883a 	mov	sp,fp
 2013ac0:	dfc00117 	ldw	ra,4(sp)
 2013ac4:	df000017 	ldw	fp,0(sp)
 2013ac8:	dec00204 	addi	sp,sp,8
 2013acc:	f800283a 	ret

02013ad0 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 2013ad0:	defff604 	addi	sp,sp,-40
 2013ad4:	dfc00915 	stw	ra,36(sp)
 2013ad8:	df000815 	stw	fp,32(sp)
 2013adc:	df000804 	addi	fp,sp,32
 2013ae0:	e13ffd15 	stw	r4,-12(fp)
 2013ae4:	e17ffe15 	stw	r5,-8(fp)
 2013ae8:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 2013aec:	e0bfff17 	ldw	r2,-4(fp)
 2013af0:	1005003a 	cmpeq	r2,r2,zero
 2013af4:	1000121e 	bne	r2,zero,2013b40 <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 2013af8:	00bff604 	movi	r2,-40
 2013afc:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 2013b00:	e0bffe17 	ldw	r2,-8(fp)
 2013b04:	1004d63a 	srli	r2,r2,24
 2013b08:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 2013b0c:	e0bffe17 	ldw	r2,-8(fp)
 2013b10:	1004d43a 	srli	r2,r2,16
 2013b14:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 2013b18:	e0bffe17 	ldw	r2,-8(fp)
 2013b1c:	1004d23a 	srli	r2,r2,8
 2013b20:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 2013b24:	e0bffe17 	ldw	r2,-8(fp)
 2013b28:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 2013b2c:	00800144 	movi	r2,5
 2013b30:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 2013b34:	e13ffd17 	ldw	r4,-12(fp)
 2013b38:	20140940 	call	2014094 <epcs_enter_4_bytes_mode>
 2013b3c:	00000c06 	br	2013b70 <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
 2013b40:	00bff604 	movi	r2,-40
 2013b44:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 2013b48:	e0bffe17 	ldw	r2,-8(fp)
 2013b4c:	1004d43a 	srli	r2,r2,16
 2013b50:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 2013b54:	e0bffe17 	ldw	r2,-8(fp)
 2013b58:	1004d23a 	srli	r2,r2,8
 2013b5c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 2013b60:	e0bffe17 	ldw	r2,-8(fp)
 2013b64:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 2013b68:	00800104 	movi	r2,4
 2013b6c:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 2013b70:	e13ffd17 	ldw	r4,-12(fp)
 2013b74:	2013d840 	call	2013d84 <epcs_write_enable>

  alt_avalon_spi_command(
 2013b78:	e1bffb03 	ldbu	r6,-20(fp)
 2013b7c:	e1fffb44 	addi	r7,fp,-19
 2013b80:	d8000015 	stw	zero,0(sp)
 2013b84:	d8000115 	stw	zero,4(sp)
 2013b88:	d8000215 	stw	zero,8(sp)
 2013b8c:	e13ffd17 	ldw	r4,-12(fp)
 2013b90:	000b883a 	mov	r5,zero
 2013b94:	2014d700 	call	2014d70 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2013b98:	e13ffd17 	ldw	r4,-12(fp)
 2013b9c:	2013bc80 	call	2013bc8 <epcs_await_wip_released>

  if(four_bytes_mode)
 2013ba0:	e0bfff17 	ldw	r2,-4(fp)
 2013ba4:	1005003a 	cmpeq	r2,r2,zero
 2013ba8:	1000021e 	bne	r2,zero,2013bb4 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 2013bac:	e13ffd17 	ldw	r4,-12(fp)
 2013bb0:	20140ec0 	call	20140ec <epcs_exit_4_bytes_mode>
  }
}
 2013bb4:	e037883a 	mov	sp,fp
 2013bb8:	dfc00117 	ldw	ra,4(sp)
 2013bbc:	df000017 	ldw	fp,0(sp)
 2013bc0:	dec00204 	addi	sp,sp,8
 2013bc4:	f800283a 	ret

02013bc8 <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 2013bc8:	defffd04 	addi	sp,sp,-12
 2013bcc:	dfc00215 	stw	ra,8(sp)
 2013bd0:	df000115 	stw	fp,4(sp)
 2013bd4:	df000104 	addi	fp,sp,4
 2013bd8:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 2013bdc:	e13fff17 	ldw	r4,-4(fp)
 2013be0:	2013c000 	call	2013c00 <epcs_test_wip>
 2013be4:	1004c03a 	cmpne	r2,r2,zero
 2013be8:	103ffc1e 	bne	r2,zero,2013bdc <epcs_await_wip_released+0x14>
  {
  }
}
 2013bec:	e037883a 	mov	sp,fp
 2013bf0:	dfc00117 	ldw	ra,4(sp)
 2013bf4:	df000017 	ldw	fp,0(sp)
 2013bf8:	dec00204 	addi	sp,sp,8
 2013bfc:	f800283a 	ret

02013c00 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 2013c00:	defffd04 	addi	sp,sp,-12
 2013c04:	dfc00215 	stw	ra,8(sp)
 2013c08:	df000115 	stw	fp,4(sp)
 2013c0c:	df000104 	addi	fp,sp,4
 2013c10:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 2013c14:	e13fff17 	ldw	r4,-4(fp)
 2013c18:	2013a700 	call	2013a70 <epcs_read_status_register>
 2013c1c:	10803fcc 	andi	r2,r2,255
 2013c20:	1080004c 	andi	r2,r2,1
}
 2013c24:	e037883a 	mov	sp,fp
 2013c28:	dfc00117 	ldw	ra,4(sp)
 2013c2c:	df000017 	ldw	fp,0(sp)
 2013c30:	dec00204 	addi	sp,sp,8
 2013c34:	f800283a 	ret

02013c38 <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 2013c38:	defff404 	addi	sp,sp,-48
 2013c3c:	dfc00b15 	stw	ra,44(sp)
 2013c40:	df000a15 	stw	fp,40(sp)
 2013c44:	df000a04 	addi	fp,sp,40
 2013c48:	e13ffc15 	stw	r4,-16(fp)
 2013c4c:	e17ffd15 	stw	r5,-12(fp)
 2013c50:	e1bffe15 	stw	r6,-8(fp)
 2013c54:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 2013c58:	008000c4 	movi	r2,3
 2013c5c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2013c60:	e0800217 	ldw	r2,8(fp)
 2013c64:	1005003a 	cmpeq	r2,r2,zero
 2013c68:	10001c1e 	bne	r2,zero,2013cdc <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 2013c6c:	e0bffd17 	ldw	r2,-12(fp)
 2013c70:	1005d63a 	srai	r2,r2,24
 2013c74:	1007883a 	mov	r3,r2
 2013c78:	00bfffc4 	movi	r2,-1
 2013c7c:	1884703a 	and	r2,r3,r2
 2013c80:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 2013c84:	e0bffd17 	ldw	r2,-12(fp)
 2013c88:	1005d43a 	srai	r2,r2,16
 2013c8c:	1007883a 	mov	r3,r2
 2013c90:	00bfffc4 	movi	r2,-1
 2013c94:	1884703a 	and	r2,r3,r2
 2013c98:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 2013c9c:	e0bffd17 	ldw	r2,-12(fp)
 2013ca0:	1005d23a 	srai	r2,r2,8
 2013ca4:	1007883a 	mov	r3,r2
 2013ca8:	00bfffc4 	movi	r2,-1
 2013cac:	1884703a 	and	r2,r3,r2
 2013cb0:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 2013cb4:	e0bffd17 	ldw	r2,-12(fp)
 2013cb8:	1007883a 	mov	r3,r2
 2013cbc:	00bfffc4 	movi	r2,-1
 2013cc0:	1884703a 	and	r2,r3,r2
 2013cc4:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 2013cc8:	00800144 	movi	r2,5
 2013ccc:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 2013cd0:	e13ffc17 	ldw	r4,-16(fp)
 2013cd4:	20140940 	call	2014094 <epcs_enter_4_bytes_mode>
 2013cd8:	00001306 	br	2013d28 <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 2013cdc:	e0bffd17 	ldw	r2,-12(fp)
 2013ce0:	1005d43a 	srai	r2,r2,16
 2013ce4:	1007883a 	mov	r3,r2
 2013ce8:	00bfffc4 	movi	r2,-1
 2013cec:	1884703a 	and	r2,r3,r2
 2013cf0:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 2013cf4:	e0bffd17 	ldw	r2,-12(fp)
 2013cf8:	1005d23a 	srai	r2,r2,8
 2013cfc:	1007883a 	mov	r3,r2
 2013d00:	00bfffc4 	movi	r2,-1
 2013d04:	1884703a 	and	r2,r3,r2
 2013d08:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 2013d0c:	e0bffd17 	ldw	r2,-12(fp)
 2013d10:	1007883a 	mov	r3,r2
 2013d14:	00bfffc4 	movi	r2,-1
 2013d18:	1884703a 	and	r2,r3,r2
 2013d1c:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 2013d20:	00800104 	movi	r2,4
 2013d24:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 2013d28:	e13ffc17 	ldw	r4,-16(fp)
 2013d2c:	2013bc80 	call	2013bc8 <epcs_await_wip_released>

  alt_avalon_spi_command(
 2013d30:	e0bfff17 	ldw	r2,-4(fp)
 2013d34:	e1fffa04 	addi	r7,fp,-24
 2013d38:	d8800015 	stw	r2,0(sp)
 2013d3c:	e0bffe17 	ldw	r2,-8(fp)
 2013d40:	d8800115 	stw	r2,4(sp)
 2013d44:	d8000215 	stw	zero,8(sp)
 2013d48:	e13ffc17 	ldw	r4,-16(fp)
 2013d4c:	000b883a 	mov	r5,zero
 2013d50:	e1bff917 	ldw	r6,-28(fp)
 2013d54:	2014d700 	call	2014d70 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 2013d58:	e0800217 	ldw	r2,8(fp)
 2013d5c:	1005003a 	cmpeq	r2,r2,zero
 2013d60:	1000021e 	bne	r2,zero,2013d6c <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
 2013d64:	e13ffc17 	ldw	r4,-16(fp)
 2013d68:	20140ec0 	call	20140ec <epcs_exit_4_bytes_mode>
  }

  return length;
 2013d6c:	e0bfff17 	ldw	r2,-4(fp)
}
 2013d70:	e037883a 	mov	sp,fp
 2013d74:	dfc00117 	ldw	ra,4(sp)
 2013d78:	df000017 	ldw	fp,0(sp)
 2013d7c:	dec00204 	addi	sp,sp,8
 2013d80:	f800283a 	ret

02013d84 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 2013d84:	defff904 	addi	sp,sp,-28
 2013d88:	dfc00615 	stw	ra,24(sp)
 2013d8c:	df000515 	stw	fp,20(sp)
 2013d90:	df000504 	addi	fp,sp,20
 2013d94:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 2013d98:	00800184 	movi	r2,6
 2013d9c:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 2013da0:	d8000015 	stw	zero,0(sp)
 2013da4:	d8000115 	stw	zero,4(sp)
 2013da8:	d8000215 	stw	zero,8(sp)
 2013dac:	e13fff17 	ldw	r4,-4(fp)
 2013db0:	000b883a 	mov	r5,zero
 2013db4:	01800044 	movi	r6,1
 2013db8:	e1fffe04 	addi	r7,fp,-8
 2013dbc:	2014d700 	call	2014d70 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 2013dc0:	e037883a 	mov	sp,fp
 2013dc4:	dfc00117 	ldw	ra,4(sp)
 2013dc8:	df000017 	ldw	fp,0(sp)
 2013dcc:	dec00204 	addi	sp,sp,8
 2013dd0:	f800283a 	ret

02013dd4 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 2013dd4:	defff804 	addi	sp,sp,-32
 2013dd8:	dfc00715 	stw	ra,28(sp)
 2013ddc:	df000615 	stw	fp,24(sp)
 2013de0:	df000604 	addi	fp,sp,24
 2013de4:	e13ffe15 	stw	r4,-8(fp)
 2013de8:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 2013dec:	00800044 	movi	r2,1
 2013df0:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 2013df4:	e0bfff03 	ldbu	r2,-4(fp)
 2013df8:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 2013dfc:	d8000015 	stw	zero,0(sp)
 2013e00:	d8000115 	stw	zero,4(sp)
 2013e04:	d8000215 	stw	zero,8(sp)
 2013e08:	e13ffe17 	ldw	r4,-8(fp)
 2013e0c:	000b883a 	mov	r5,zero
 2013e10:	01800084 	movi	r6,2
 2013e14:	e1fffd04 	addi	r7,fp,-12
 2013e18:	2014d700 	call	2014d70 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2013e1c:	e13ffe17 	ldw	r4,-8(fp)
 2013e20:	2013bc80 	call	2013bc8 <epcs_await_wip_released>
}
 2013e24:	e037883a 	mov	sp,fp
 2013e28:	dfc00117 	ldw	ra,4(sp)
 2013e2c:	df000017 	ldw	fp,0(sp)
 2013e30:	dec00204 	addi	sp,sp,8
 2013e34:	f800283a 	ret

02013e38 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 2013e38:	defff404 	addi	sp,sp,-48
 2013e3c:	dfc00b15 	stw	ra,44(sp)
 2013e40:	df000a15 	stw	fp,40(sp)
 2013e44:	df000a04 	addi	fp,sp,40
 2013e48:	e13ffc15 	stw	r4,-16(fp)
 2013e4c:	e17ffd15 	stw	r5,-12(fp)
 2013e50:	e1bffe15 	stw	r6,-8(fp)
 2013e54:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 2013e58:	00800084 	movi	r2,2
 2013e5c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2013e60:	e0800217 	ldw	r2,8(fp)
 2013e64:	1005003a 	cmpeq	r2,r2,zero
 2013e68:	10001c1e 	bne	r2,zero,2013edc <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
 2013e6c:	e0bffd17 	ldw	r2,-12(fp)
 2013e70:	1005d63a 	srai	r2,r2,24
 2013e74:	1007883a 	mov	r3,r2
 2013e78:	00bfffc4 	movi	r2,-1
 2013e7c:	1884703a 	and	r2,r3,r2
 2013e80:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 2013e84:	e0bffd17 	ldw	r2,-12(fp)
 2013e88:	1005d43a 	srai	r2,r2,16
 2013e8c:	1007883a 	mov	r3,r2
 2013e90:	00bfffc4 	movi	r2,-1
 2013e94:	1884703a 	and	r2,r3,r2
 2013e98:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 2013e9c:	e0bffd17 	ldw	r2,-12(fp)
 2013ea0:	1005d23a 	srai	r2,r2,8
 2013ea4:	1007883a 	mov	r3,r2
 2013ea8:	00bfffc4 	movi	r2,-1
 2013eac:	1884703a 	and	r2,r3,r2
 2013eb0:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 2013eb4:	e0bffd17 	ldw	r2,-12(fp)
 2013eb8:	1007883a 	mov	r3,r2
 2013ebc:	00bfffc4 	movi	r2,-1
 2013ec0:	1884703a 	and	r2,r3,r2
 2013ec4:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 2013ec8:	00800144 	movi	r2,5
 2013ecc:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 2013ed0:	e13ffc17 	ldw	r4,-16(fp)
 2013ed4:	20140940 	call	2014094 <epcs_enter_4_bytes_mode>
 2013ed8:	00001306 	br	2013f28 <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 2013edc:	e0bffd17 	ldw	r2,-12(fp)
 2013ee0:	1005d43a 	srai	r2,r2,16
 2013ee4:	1007883a 	mov	r3,r2
 2013ee8:	00bfffc4 	movi	r2,-1
 2013eec:	1884703a 	and	r2,r3,r2
 2013ef0:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 2013ef4:	e0bffd17 	ldw	r2,-12(fp)
 2013ef8:	1005d23a 	srai	r2,r2,8
 2013efc:	1007883a 	mov	r3,r2
 2013f00:	00bfffc4 	movi	r2,-1
 2013f04:	1884703a 	and	r2,r3,r2
 2013f08:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 2013f0c:	e0bffd17 	ldw	r2,-12(fp)
 2013f10:	1007883a 	mov	r3,r2
 2013f14:	00bfffc4 	movi	r2,-1
 2013f18:	1884703a 	and	r2,r3,r2
 2013f1c:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 2013f20:	00800104 	movi	r2,4
 2013f24:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 2013f28:	e13ffc17 	ldw	r4,-16(fp)
 2013f2c:	2013d840 	call	2013d84 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 2013f30:	e1fffa04 	addi	r7,fp,-24
 2013f34:	d8000015 	stw	zero,0(sp)
 2013f38:	d8000115 	stw	zero,4(sp)
 2013f3c:	00800044 	movi	r2,1
 2013f40:	d8800215 	stw	r2,8(sp)
 2013f44:	e13ffc17 	ldw	r4,-16(fp)
 2013f48:	000b883a 	mov	r5,zero
 2013f4c:	e1bff917 	ldw	r6,-28(fp)
 2013f50:	2014d700 	call	2014d70 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 2013f54:	e1bfff17 	ldw	r6,-4(fp)
 2013f58:	d8000015 	stw	zero,0(sp)
 2013f5c:	d8000115 	stw	zero,4(sp)
 2013f60:	d8000215 	stw	zero,8(sp)
 2013f64:	e13ffc17 	ldw	r4,-16(fp)
 2013f68:	000b883a 	mov	r5,zero
 2013f6c:	e1fffe17 	ldw	r7,-8(fp)
 2013f70:	2014d700 	call	2014d70 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 2013f74:	e13ffc17 	ldw	r4,-16(fp)
 2013f78:	2013bc80 	call	2013bc8 <epcs_await_wip_released>

  if(four_bytes_mode)
 2013f7c:	e0800217 	ldw	r2,8(fp)
 2013f80:	1005003a 	cmpeq	r2,r2,zero
 2013f84:	1000021e 	bne	r2,zero,2013f90 <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
 2013f88:	e13ffc17 	ldw	r4,-16(fp)
 2013f8c:	20140ec0 	call	20140ec <epcs_exit_4_bytes_mode>
  }

  return length;
 2013f90:	e0bfff17 	ldw	r2,-4(fp)
}
 2013f94:	e037883a 	mov	sp,fp
 2013f98:	dfc00117 	ldw	ra,4(sp)
 2013f9c:	df000017 	ldw	fp,0(sp)
 2013fa0:	dec00204 	addi	sp,sp,8
 2013fa4:	f800283a 	ret

02013fa8 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 2013fa8:	defff804 	addi	sp,sp,-32
 2013fac:	dfc00715 	stw	ra,28(sp)
 2013fb0:	df000615 	stw	fp,24(sp)
 2013fb4:	df000604 	addi	fp,sp,24
 2013fb8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 2013fbc:	00bfeac4 	movi	r2,-85
 2013fc0:	e0bffd05 	stb	r2,-12(fp)
 2013fc4:	e03ffd45 	stb	zero,-11(fp)
 2013fc8:	e03ffd85 	stb	zero,-10(fp)
 2013fcc:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 2013fd0:	00800044 	movi	r2,1
 2013fd4:	d8800015 	stw	r2,0(sp)
 2013fd8:	e0bffe04 	addi	r2,fp,-8
 2013fdc:	d8800115 	stw	r2,4(sp)
 2013fe0:	d8000215 	stw	zero,8(sp)
 2013fe4:	e13fff17 	ldw	r4,-4(fp)
 2013fe8:	000b883a 	mov	r5,zero
 2013fec:	01800104 	movi	r6,4
 2013ff0:	e1fffd04 	addi	r7,fp,-12
 2013ff4:	2014d700 	call	2014d70 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 2013ff8:	e0bffe03 	ldbu	r2,-8(fp)
 2013ffc:	10803fcc 	andi	r2,r2,255
}
 2014000:	e037883a 	mov	sp,fp
 2014004:	dfc00117 	ldw	ra,4(sp)
 2014008:	df000017 	ldw	fp,0(sp)
 201400c:	dec00204 	addi	sp,sp,8
 2014010:	f800283a 	ret

02014014 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 2014014:	defff904 	addi	sp,sp,-28
 2014018:	dfc00615 	stw	ra,24(sp)
 201401c:	df000515 	stw	fp,20(sp)
 2014020:	df000504 	addi	fp,sp,20
 2014024:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 2014028:	00bfe7c4 	movi	r2,-97
 201402c:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 2014030:	008000c4 	movi	r2,3
 2014034:	d8800015 	stw	r2,0(sp)
 2014038:	e0bffe44 	addi	r2,fp,-7
 201403c:	d8800115 	stw	r2,4(sp)
 2014040:	d8000215 	stw	zero,8(sp)
 2014044:	e13fff17 	ldw	r4,-4(fp)
 2014048:	000b883a 	mov	r5,zero
 201404c:	01800044 	movi	r6,1
 2014050:	e1fffe04 	addi	r7,fp,-8
 2014054:	2014d700 	call	2014d70 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 2014058:	e0bffe43 	ldbu	r2,-7(fp)
 201405c:	10803fcc 	andi	r2,r2,255
 2014060:	1006943a 	slli	r3,r2,16
 2014064:	e0bffe83 	ldbu	r2,-6(fp)
 2014068:	10803fcc 	andi	r2,r2,255
 201406c:	1004923a 	slli	r2,r2,8
 2014070:	1886b03a 	or	r3,r3,r2
 2014074:	e0bffec3 	ldbu	r2,-5(fp)
 2014078:	10803fcc 	andi	r2,r2,255
 201407c:	1884b03a 	or	r2,r3,r2
}
 2014080:	e037883a 	mov	sp,fp
 2014084:	dfc00117 	ldw	ra,4(sp)
 2014088:	df000017 	ldw	fp,0(sp)
 201408c:	dec00204 	addi	sp,sp,8
 2014090:	f800283a 	ret

02014094 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 2014094:	defff904 	addi	sp,sp,-28
 2014098:	dfc00615 	stw	ra,24(sp)
 201409c:	df000515 	stw	fp,20(sp)
 20140a0:	df000504 	addi	fp,sp,20
 20140a4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 20140a8:	00bfedc4 	movi	r2,-73
 20140ac:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 20140b0:	e13fff17 	ldw	r4,-4(fp)
 20140b4:	2013d840 	call	2013d84 <epcs_write_enable>

  alt_avalon_spi_command(
 20140b8:	d8000015 	stw	zero,0(sp)
 20140bc:	d8000115 	stw	zero,4(sp)
 20140c0:	d8000215 	stw	zero,8(sp)
 20140c4:	e13fff17 	ldw	r4,-4(fp)
 20140c8:	000b883a 	mov	r5,zero
 20140cc:	01800044 	movi	r6,1
 20140d0:	e1fffe04 	addi	r7,fp,-8
 20140d4:	2014d700 	call	2014d70 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 20140d8:	e037883a 	mov	sp,fp
 20140dc:	dfc00117 	ldw	ra,4(sp)
 20140e0:	df000017 	ldw	fp,0(sp)
 20140e4:	dec00204 	addi	sp,sp,8
 20140e8:	f800283a 	ret

020140ec <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 20140ec:	defff904 	addi	sp,sp,-28
 20140f0:	dfc00615 	stw	ra,24(sp)
 20140f4:	df000515 	stw	fp,20(sp)
 20140f8:	df000504 	addi	fp,sp,20
 20140fc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 2014100:	00bffa44 	movi	r2,-23
 2014104:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2014108:	e13fff17 	ldw	r4,-4(fp)
 201410c:	2013d840 	call	2013d84 <epcs_write_enable>

  alt_avalon_spi_command(
 2014110:	d8000015 	stw	zero,0(sp)
 2014114:	d8000115 	stw	zero,4(sp)
 2014118:	d8000215 	stw	zero,8(sp)
 201411c:	e13fff17 	ldw	r4,-4(fp)
 2014120:	000b883a 	mov	r5,zero
 2014124:	01800044 	movi	r6,1
 2014128:	e1fffe04 	addi	r7,fp,-8
 201412c:	2014d700 	call	2014d70 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 2014130:	e037883a 	mov	sp,fp
 2014134:	dfc00117 	ldw	ra,4(sp)
 2014138:	df000017 	ldw	fp,0(sp)
 201413c:	dec00204 	addi	sp,sp,8
 2014140:	f800283a 	ret

02014144 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2014144:	defff404 	addi	sp,sp,-48
 2014148:	df000b15 	stw	fp,44(sp)
 201414c:	df000b04 	addi	fp,sp,44
 2014150:	e13ffb15 	stw	r4,-20(fp)
 2014154:	e17ffc15 	stw	r5,-16(fp)
 2014158:	e1bffd15 	stw	r6,-12(fp)
 201415c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2014160:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2014164:	008080b4 	movhi	r2,514
 2014168:	10a64404 	addi	r2,r2,-26352
 201416c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 2014170:	1005003a 	cmpeq	r2,r2,zero
 2014174:	1000411e 	bne	r2,zero,201427c <alt_alarm_start+0x138>
  {
    if (alarm)
 2014178:	e0bffb17 	ldw	r2,-20(fp)
 201417c:	1005003a 	cmpeq	r2,r2,zero
 2014180:	10003b1e 	bne	r2,zero,2014270 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 2014184:	e0fffb17 	ldw	r3,-20(fp)
 2014188:	e0bffd17 	ldw	r2,-12(fp)
 201418c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 2014190:	e0fffb17 	ldw	r3,-20(fp)
 2014194:	e0bffe17 	ldw	r2,-8(fp)
 2014198:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201419c:	0005303a 	rdctl	r2,status
 20141a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20141a4:	e0fff817 	ldw	r3,-32(fp)
 20141a8:	00bfff84 	movi	r2,-2
 20141ac:	1884703a 	and	r2,r3,r2
 20141b0:	1001703a 	wrctl	status,r2
  
  return context;
 20141b4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 20141b8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 20141bc:	008080b4 	movhi	r2,514
 20141c0:	10a64504 	addi	r2,r2,-26348
 20141c4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 20141c8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 20141cc:	e0fffc17 	ldw	r3,-16(fp)
 20141d0:	e0bff917 	ldw	r2,-28(fp)
 20141d4:	1885883a 	add	r2,r3,r2
 20141d8:	10c00044 	addi	r3,r2,1
 20141dc:	e0bffb17 	ldw	r2,-20(fp)
 20141e0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 20141e4:	e0bffb17 	ldw	r2,-20(fp)
 20141e8:	10c00217 	ldw	r3,8(r2)
 20141ec:	e0bff917 	ldw	r2,-28(fp)
 20141f0:	1880042e 	bgeu	r3,r2,2014204 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 20141f4:	e0fffb17 	ldw	r3,-20(fp)
 20141f8:	00800044 	movi	r2,1
 20141fc:	18800405 	stb	r2,16(r3)
 2014200:	00000206 	br	201420c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 2014204:	e0bffb17 	ldw	r2,-20(fp)
 2014208:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 201420c:	e0fffb17 	ldw	r3,-20(fp)
 2014210:	00808074 	movhi	r2,513
 2014214:	109f1804 	addi	r2,r2,31840
 2014218:	e0bff615 	stw	r2,-40(fp)
 201421c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2014220:	e0fff717 	ldw	r3,-36(fp)
 2014224:	e0bff617 	ldw	r2,-40(fp)
 2014228:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 201422c:	e0bff617 	ldw	r2,-40(fp)
 2014230:	10c00017 	ldw	r3,0(r2)
 2014234:	e0bff717 	ldw	r2,-36(fp)
 2014238:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 201423c:	e0bff617 	ldw	r2,-40(fp)
 2014240:	10c00017 	ldw	r3,0(r2)
 2014244:	e0bff717 	ldw	r2,-36(fp)
 2014248:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 201424c:	e0fff617 	ldw	r3,-40(fp)
 2014250:	e0bff717 	ldw	r2,-36(fp)
 2014254:	18800015 	stw	r2,0(r3)
 2014258:	e0bffa17 	ldw	r2,-24(fp)
 201425c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014260:	e0bff517 	ldw	r2,-44(fp)
 2014264:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2014268:	e03fff15 	stw	zero,-4(fp)
 201426c:	00000506 	br	2014284 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 2014270:	00bffa84 	movi	r2,-22
 2014274:	e0bfff15 	stw	r2,-4(fp)
 2014278:	00000206 	br	2014284 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 201427c:	00bfde84 	movi	r2,-134
 2014280:	e0bfff15 	stw	r2,-4(fp)
 2014284:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 2014288:	e037883a 	mov	sp,fp
 201428c:	df000017 	ldw	fp,0(sp)
 2014290:	dec00104 	addi	sp,sp,4
 2014294:	f800283a 	ret

02014298 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 2014298:	defffa04 	addi	sp,sp,-24
 201429c:	dfc00515 	stw	ra,20(sp)
 20142a0:	df000415 	stw	fp,16(sp)
 20142a4:	df000404 	addi	fp,sp,16
 20142a8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 20142ac:	008000c4 	movi	r2,3
 20142b0:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 20142b4:	e0fffc17 	ldw	r3,-16(fp)
 20142b8:	008003f4 	movhi	r2,15
 20142bc:	10909004 	addi	r2,r2,16960
 20142c0:	188b383a 	mul	r5,r3,r2
 20142c4:	01017db4 	movhi	r4,1526
 20142c8:	21384004 	addi	r4,r4,-7936
 20142cc:	2002fcc0 	call	2002fcc <__udivsi3>
 20142d0:	100b883a 	mov	r5,r2
 20142d4:	01200034 	movhi	r4,32768
 20142d8:	213fffc4 	addi	r4,r4,-1
 20142dc:	2002fcc0 	call	2002fcc <__udivsi3>
 20142e0:	100b883a 	mov	r5,r2
 20142e4:	e13fff17 	ldw	r4,-4(fp)
 20142e8:	2002fcc0 	call	2002fcc <__udivsi3>
 20142ec:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 20142f0:	e0bffd17 	ldw	r2,-12(fp)
 20142f4:	1005003a 	cmpeq	r2,r2,zero
 20142f8:	1000281e 	bne	r2,zero,201439c <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
 20142fc:	e03ffe15 	stw	zero,-8(fp)
 2014300:	00001606 	br	201435c <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2014304:	00a00034 	movhi	r2,32768
 2014308:	10bfffc4 	addi	r2,r2,-1
 201430c:	10bfffc4 	addi	r2,r2,-1
 2014310:	103ffe1e 	bne	r2,zero,201430c <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2014314:	e0fffc17 	ldw	r3,-16(fp)
 2014318:	008003f4 	movhi	r2,15
 201431c:	10909004 	addi	r2,r2,16960
 2014320:	188b383a 	mul	r5,r3,r2
 2014324:	01017db4 	movhi	r4,1526
 2014328:	21384004 	addi	r4,r4,-7936
 201432c:	2002fcc0 	call	2002fcc <__udivsi3>
 2014330:	100b883a 	mov	r5,r2
 2014334:	01200034 	movhi	r4,32768
 2014338:	213fffc4 	addi	r4,r4,-1
 201433c:	2002fcc0 	call	2002fcc <__udivsi3>
 2014340:	1007883a 	mov	r3,r2
 2014344:	e0bfff17 	ldw	r2,-4(fp)
 2014348:	10c5c83a 	sub	r2,r2,r3
 201434c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 2014350:	e0bffe17 	ldw	r2,-8(fp)
 2014354:	10800044 	addi	r2,r2,1
 2014358:	e0bffe15 	stw	r2,-8(fp)
 201435c:	e0fffe17 	ldw	r3,-8(fp)
 2014360:	e0bffd17 	ldw	r2,-12(fp)
 2014364:	18bfe716 	blt	r3,r2,2014304 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2014368:	e0fffc17 	ldw	r3,-16(fp)
 201436c:	008003f4 	movhi	r2,15
 2014370:	10909004 	addi	r2,r2,16960
 2014374:	188b383a 	mul	r5,r3,r2
 2014378:	01017db4 	movhi	r4,1526
 201437c:	21384004 	addi	r4,r4,-7936
 2014380:	2002fcc0 	call	2002fcc <__udivsi3>
 2014384:	1007883a 	mov	r3,r2
 2014388:	e0bfff17 	ldw	r2,-4(fp)
 201438c:	1885383a 	mul	r2,r3,r2
 2014390:	10bfffc4 	addi	r2,r2,-1
 2014394:	103ffe1e 	bne	r2,zero,2014390 <alt_busy_sleep+0xf8>
 2014398:	00000c06 	br	20143cc <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 201439c:	e0fffc17 	ldw	r3,-16(fp)
 20143a0:	008003f4 	movhi	r2,15
 20143a4:	10909004 	addi	r2,r2,16960
 20143a8:	188b383a 	mul	r5,r3,r2
 20143ac:	01017db4 	movhi	r4,1526
 20143b0:	21384004 	addi	r4,r4,-7936
 20143b4:	2002fcc0 	call	2002fcc <__udivsi3>
 20143b8:	1007883a 	mov	r3,r2
 20143bc:	e0bfff17 	ldw	r2,-4(fp)
 20143c0:	1885383a 	mul	r2,r3,r2
 20143c4:	10bfffc4 	addi	r2,r2,-1
 20143c8:	00bffe16 	blt	zero,r2,20143c4 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 20143cc:	0005883a 	mov	r2,zero
}
 20143d0:	e037883a 	mov	sp,fp
 20143d4:	dfc00117 	ldw	ra,4(sp)
 20143d8:	df000017 	ldw	fp,0(sp)
 20143dc:	dec00204 	addi	sp,sp,8
 20143e0:	f800283a 	ret

020143e4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 20143e4:	defff904 	addi	sp,sp,-28
 20143e8:	dfc00615 	stw	ra,24(sp)
 20143ec:	df000515 	stw	fp,20(sp)
 20143f0:	df000504 	addi	fp,sp,20
 20143f4:	e13ffd15 	stw	r4,-12(fp)
 20143f8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 20143fc:	e0bffd17 	ldw	r2,-12(fp)
 2014400:	1005003a 	cmpeq	r2,r2,zero
 2014404:	1000041e 	bne	r2,zero,2014418 <alt_dev_llist_insert+0x34>
 2014408:	e0bffd17 	ldw	r2,-12(fp)
 201440c:	10800217 	ldw	r2,8(r2)
 2014410:	1004c03a 	cmpne	r2,r2,zero
 2014414:	1000071e 	bne	r2,zero,2014434 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 2014418:	20144980 	call	2014498 <alt_get_errno>
 201441c:	1007883a 	mov	r3,r2
 2014420:	00800584 	movi	r2,22
 2014424:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 2014428:	00bffa84 	movi	r2,-22
 201442c:	e0bfff15 	stw	r2,-4(fp)
 2014430:	00001306 	br	2014480 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2014434:	e0fffd17 	ldw	r3,-12(fp)
 2014438:	e0bffe17 	ldw	r2,-8(fp)
 201443c:	e0bffb15 	stw	r2,-20(fp)
 2014440:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2014444:	e0fffc17 	ldw	r3,-16(fp)
 2014448:	e0bffb17 	ldw	r2,-20(fp)
 201444c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 2014450:	e0bffb17 	ldw	r2,-20(fp)
 2014454:	10c00017 	ldw	r3,0(r2)
 2014458:	e0bffc17 	ldw	r2,-16(fp)
 201445c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2014460:	e0bffb17 	ldw	r2,-20(fp)
 2014464:	10c00017 	ldw	r3,0(r2)
 2014468:	e0bffc17 	ldw	r2,-16(fp)
 201446c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 2014470:	e0fffb17 	ldw	r3,-20(fp)
 2014474:	e0bffc17 	ldw	r2,-16(fp)
 2014478:	18800015 	stw	r2,0(r3)

  return 0;  
 201447c:	e03fff15 	stw	zero,-4(fp)
 2014480:	e0bfff17 	ldw	r2,-4(fp)
}
 2014484:	e037883a 	mov	sp,fp
 2014488:	dfc00117 	ldw	ra,4(sp)
 201448c:	df000017 	ldw	fp,0(sp)
 2014490:	dec00204 	addi	sp,sp,8
 2014494:	f800283a 	ret

02014498 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2014498:	defffd04 	addi	sp,sp,-12
 201449c:	dfc00215 	stw	ra,8(sp)
 20144a0:	df000115 	stw	fp,4(sp)
 20144a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 20144a8:	00808074 	movhi	r2,513
 20144ac:	109f1304 	addi	r2,r2,31820
 20144b0:	10800017 	ldw	r2,0(r2)
 20144b4:	1005003a 	cmpeq	r2,r2,zero
 20144b8:	1000061e 	bne	r2,zero,20144d4 <alt_get_errno+0x3c>
 20144bc:	00808074 	movhi	r2,513
 20144c0:	109f1304 	addi	r2,r2,31820
 20144c4:	10800017 	ldw	r2,0(r2)
 20144c8:	103ee83a 	callr	r2
 20144cc:	e0bfff15 	stw	r2,-4(fp)
 20144d0:	00000306 	br	20144e0 <alt_get_errno+0x48>
 20144d4:	008080b4 	movhi	r2,514
 20144d8:	10a63c04 	addi	r2,r2,-26384
 20144dc:	e0bfff15 	stw	r2,-4(fp)
 20144e0:	e0bfff17 	ldw	r2,-4(fp)
}
 20144e4:	e037883a 	mov	sp,fp
 20144e8:	dfc00117 	ldw	ra,4(sp)
 20144ec:	df000017 	ldw	fp,0(sp)
 20144f0:	dec00204 	addi	sp,sp,8
 20144f4:	f800283a 	ret

020144f8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 20144f8:	defffd04 	addi	sp,sp,-12
 20144fc:	dfc00215 	stw	ra,8(sp)
 2014500:	df000115 	stw	fp,4(sp)
 2014504:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2014508:	00bfff04 	movi	r2,-4
 201450c:	00c08074 	movhi	r3,513
 2014510:	18d58704 	addi	r3,r3,22044
 2014514:	1885883a 	add	r2,r3,r2
 2014518:	e0bfff15 	stw	r2,-4(fp)
 201451c:	00000606 	br	2014538 <_do_ctors+0x40>
        (*ctor) (); 
 2014520:	e0bfff17 	ldw	r2,-4(fp)
 2014524:	10800017 	ldw	r2,0(r2)
 2014528:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201452c:	e0bfff17 	ldw	r2,-4(fp)
 2014530:	10bfff04 	addi	r2,r2,-4
 2014534:	e0bfff15 	stw	r2,-4(fp)
 2014538:	e0ffff17 	ldw	r3,-4(fp)
 201453c:	00808074 	movhi	r2,513
 2014540:	10958604 	addi	r2,r2,22040
 2014544:	18bff62e 	bgeu	r3,r2,2014520 <_do_ctors+0x28>
        (*ctor) (); 
}
 2014548:	e037883a 	mov	sp,fp
 201454c:	dfc00117 	ldw	ra,4(sp)
 2014550:	df000017 	ldw	fp,0(sp)
 2014554:	dec00204 	addi	sp,sp,8
 2014558:	f800283a 	ret

0201455c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 201455c:	defffd04 	addi	sp,sp,-12
 2014560:	dfc00215 	stw	ra,8(sp)
 2014564:	df000115 	stw	fp,4(sp)
 2014568:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201456c:	00bfff04 	movi	r2,-4
 2014570:	00c08074 	movhi	r3,513
 2014574:	18d58704 	addi	r3,r3,22044
 2014578:	1885883a 	add	r2,r3,r2
 201457c:	e0bfff15 	stw	r2,-4(fp)
 2014580:	00000606 	br	201459c <_do_dtors+0x40>
        (*dtor) (); 
 2014584:	e0bfff17 	ldw	r2,-4(fp)
 2014588:	10800017 	ldw	r2,0(r2)
 201458c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2014590:	e0bfff17 	ldw	r2,-4(fp)
 2014594:	10bfff04 	addi	r2,r2,-4
 2014598:	e0bfff15 	stw	r2,-4(fp)
 201459c:	e0ffff17 	ldw	r3,-4(fp)
 20145a0:	00808074 	movhi	r2,513
 20145a4:	10958704 	addi	r2,r2,22044
 20145a8:	18bff62e 	bgeu	r3,r2,2014584 <_do_dtors+0x28>
        (*dtor) (); 
}
 20145ac:	e037883a 	mov	sp,fp
 20145b0:	dfc00117 	ldw	ra,4(sp)
 20145b4:	df000017 	ldw	fp,0(sp)
 20145b8:	dec00204 	addi	sp,sp,8
 20145bc:	f800283a 	ret

020145c0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 20145c0:	defff904 	addi	sp,sp,-28
 20145c4:	dfc00615 	stw	ra,24(sp)
 20145c8:	df000515 	stw	fp,20(sp)
 20145cc:	df000504 	addi	fp,sp,20
 20145d0:	e13ffd15 	stw	r4,-12(fp)
 20145d4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 20145d8:	e0bffe17 	ldw	r2,-8(fp)
 20145dc:	10800017 	ldw	r2,0(r2)
 20145e0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 20145e4:	e13ffd17 	ldw	r4,-12(fp)
 20145e8:	20040e80 	call	20040e8 <strlen>
 20145ec:	10800044 	addi	r2,r2,1
 20145f0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20145f4:	00000d06 	br	201462c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 20145f8:	e0bffc17 	ldw	r2,-16(fp)
 20145fc:	11000217 	ldw	r4,8(r2)
 2014600:	e1bffb17 	ldw	r6,-20(fp)
 2014604:	e17ffd17 	ldw	r5,-12(fp)
 2014608:	201525c0 	call	201525c <memcmp>
 201460c:	1004c03a 	cmpne	r2,r2,zero
 2014610:	1000031e 	bne	r2,zero,2014620 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2014614:	e0bffc17 	ldw	r2,-16(fp)
 2014618:	e0bfff15 	stw	r2,-4(fp)
 201461c:	00000706 	br	201463c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2014620:	e0bffc17 	ldw	r2,-16(fp)
 2014624:	10800017 	ldw	r2,0(r2)
 2014628:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201462c:	e0fffe17 	ldw	r3,-8(fp)
 2014630:	e0bffc17 	ldw	r2,-16(fp)
 2014634:	10fff01e 	bne	r2,r3,20145f8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2014638:	e03fff15 	stw	zero,-4(fp)
 201463c:	e0bfff17 	ldw	r2,-4(fp)
}
 2014640:	e037883a 	mov	sp,fp
 2014644:	dfc00117 	ldw	ra,4(sp)
 2014648:	df000017 	ldw	fp,0(sp)
 201464c:	dec00204 	addi	sp,sp,8
 2014650:	f800283a 	ret

02014654 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2014654:	defffe04 	addi	sp,sp,-8
 2014658:	dfc00115 	stw	ra,4(sp)
 201465c:	df000015 	stw	fp,0(sp)
 2014660:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 2014664:	0009883a 	mov	r4,zero
 2014668:	01410004 	movi	r5,1024
 201466c:	20151800 	call	2015180 <alt_icache_flush>
#endif
}
 2014670:	e037883a 	mov	sp,fp
 2014674:	dfc00117 	ldw	ra,4(sp)
 2014678:	df000017 	ldw	fp,0(sp)
 201467c:	dec00204 	addi	sp,sp,8
 2014680:	f800283a 	ret

02014684 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2014684:	defff904 	addi	sp,sp,-28
 2014688:	dfc00615 	stw	ra,24(sp)
 201468c:	df000515 	stw	fp,20(sp)
 2014690:	df000504 	addi	fp,sp,20
 2014694:	e13ffc15 	stw	r4,-16(fp)
 2014698:	e17ffd15 	stw	r5,-12(fp)
 201469c:	e1bffe15 	stw	r6,-8(fp)
 20146a0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 20146a4:	e0800217 	ldw	r2,8(fp)
 20146a8:	d8800015 	stw	r2,0(sp)
 20146ac:	e13ffc17 	ldw	r4,-16(fp)
 20146b0:	e17ffd17 	ldw	r5,-12(fp)
 20146b4:	e1bffe17 	ldw	r6,-8(fp)
 20146b8:	e1ffff17 	ldw	r7,-4(fp)
 20146bc:	20148580 	call	2014858 <alt_iic_isr_register>
}  
 20146c0:	e037883a 	mov	sp,fp
 20146c4:	dfc00117 	ldw	ra,4(sp)
 20146c8:	df000017 	ldw	fp,0(sp)
 20146cc:	dec00204 	addi	sp,sp,8
 20146d0:	f800283a 	ret

020146d4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 20146d4:	defff904 	addi	sp,sp,-28
 20146d8:	df000615 	stw	fp,24(sp)
 20146dc:	df000604 	addi	fp,sp,24
 20146e0:	e13ffe15 	stw	r4,-8(fp)
 20146e4:	e17fff15 	stw	r5,-4(fp)
 20146e8:	e0bfff17 	ldw	r2,-4(fp)
 20146ec:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20146f0:	0005303a 	rdctl	r2,status
 20146f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20146f8:	e0fffb17 	ldw	r3,-20(fp)
 20146fc:	00bfff84 	movi	r2,-2
 2014700:	1884703a 	and	r2,r3,r2
 2014704:	1001703a 	wrctl	status,r2
  
  return context;
 2014708:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201470c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 2014710:	e0fffc17 	ldw	r3,-16(fp)
 2014714:	00800044 	movi	r2,1
 2014718:	10c4983a 	sll	r2,r2,r3
 201471c:	1007883a 	mov	r3,r2
 2014720:	008080b4 	movhi	r2,514
 2014724:	10a64004 	addi	r2,r2,-26368
 2014728:	10800017 	ldw	r2,0(r2)
 201472c:	1886b03a 	or	r3,r3,r2
 2014730:	008080b4 	movhi	r2,514
 2014734:	10a64004 	addi	r2,r2,-26368
 2014738:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201473c:	008080b4 	movhi	r2,514
 2014740:	10a64004 	addi	r2,r2,-26368
 2014744:	10800017 	ldw	r2,0(r2)
 2014748:	100170fa 	wrctl	ienable,r2
 201474c:	e0bffd17 	ldw	r2,-12(fp)
 2014750:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014754:	e0bffa17 	ldw	r2,-24(fp)
 2014758:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201475c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 2014760:	e037883a 	mov	sp,fp
 2014764:	df000017 	ldw	fp,0(sp)
 2014768:	dec00104 	addi	sp,sp,4
 201476c:	f800283a 	ret

02014770 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2014770:	defff904 	addi	sp,sp,-28
 2014774:	df000615 	stw	fp,24(sp)
 2014778:	df000604 	addi	fp,sp,24
 201477c:	e13ffe15 	stw	r4,-8(fp)
 2014780:	e17fff15 	stw	r5,-4(fp)
 2014784:	e0bfff17 	ldw	r2,-4(fp)
 2014788:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201478c:	0005303a 	rdctl	r2,status
 2014790:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014794:	e0fffb17 	ldw	r3,-20(fp)
 2014798:	00bfff84 	movi	r2,-2
 201479c:	1884703a 	and	r2,r3,r2
 20147a0:	1001703a 	wrctl	status,r2
  
  return context;
 20147a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 20147a8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 20147ac:	e0fffc17 	ldw	r3,-16(fp)
 20147b0:	00800044 	movi	r2,1
 20147b4:	10c4983a 	sll	r2,r2,r3
 20147b8:	0084303a 	nor	r2,zero,r2
 20147bc:	1007883a 	mov	r3,r2
 20147c0:	008080b4 	movhi	r2,514
 20147c4:	10a64004 	addi	r2,r2,-26368
 20147c8:	10800017 	ldw	r2,0(r2)
 20147cc:	1886703a 	and	r3,r3,r2
 20147d0:	008080b4 	movhi	r2,514
 20147d4:	10a64004 	addi	r2,r2,-26368
 20147d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20147dc:	008080b4 	movhi	r2,514
 20147e0:	10a64004 	addi	r2,r2,-26368
 20147e4:	10800017 	ldw	r2,0(r2)
 20147e8:	100170fa 	wrctl	ienable,r2
 20147ec:	e0bffd17 	ldw	r2,-12(fp)
 20147f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20147f4:	e0bffa17 	ldw	r2,-24(fp)
 20147f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20147fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 2014800:	e037883a 	mov	sp,fp
 2014804:	df000017 	ldw	fp,0(sp)
 2014808:	dec00104 	addi	sp,sp,4
 201480c:	f800283a 	ret

02014810 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2014810:	defffc04 	addi	sp,sp,-16
 2014814:	df000315 	stw	fp,12(sp)
 2014818:	df000304 	addi	fp,sp,12
 201481c:	e13ffe15 	stw	r4,-8(fp)
 2014820:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2014824:	000530fa 	rdctl	r2,ienable
 2014828:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 201482c:	e0ffff17 	ldw	r3,-4(fp)
 2014830:	00800044 	movi	r2,1
 2014834:	10c4983a 	sll	r2,r2,r3
 2014838:	1007883a 	mov	r3,r2
 201483c:	e0bffd17 	ldw	r2,-12(fp)
 2014840:	1884703a 	and	r2,r3,r2
 2014844:	1004c03a 	cmpne	r2,r2,zero
}
 2014848:	e037883a 	mov	sp,fp
 201484c:	df000017 	ldw	fp,0(sp)
 2014850:	dec00104 	addi	sp,sp,4
 2014854:	f800283a 	ret

02014858 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2014858:	defff404 	addi	sp,sp,-48
 201485c:	dfc00b15 	stw	ra,44(sp)
 2014860:	df000a15 	stw	fp,40(sp)
 2014864:	df000a04 	addi	fp,sp,40
 2014868:	e13ffb15 	stw	r4,-20(fp)
 201486c:	e17ffc15 	stw	r5,-16(fp)
 2014870:	e1bffd15 	stw	r6,-12(fp)
 2014874:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 2014878:	00bffa84 	movi	r2,-22
 201487c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2014880:	e0bffc17 	ldw	r2,-16(fp)
 2014884:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2014888:	e0bff917 	ldw	r2,-28(fp)
 201488c:	10800808 	cmpgei	r2,r2,32
 2014890:	1000291e 	bne	r2,zero,2014938 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014894:	0005303a 	rdctl	r2,status
 2014898:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201489c:	e0fff717 	ldw	r3,-36(fp)
 20148a0:	00bfff84 	movi	r2,-2
 20148a4:	1884703a 	and	r2,r3,r2
 20148a8:	1001703a 	wrctl	status,r2
  
  return context;
 20148ac:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 20148b0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 20148b4:	e0bff917 	ldw	r2,-28(fp)
 20148b8:	00c080b4 	movhi	r3,514
 20148bc:	18e69004 	addi	r3,r3,-26048
 20148c0:	100490fa 	slli	r2,r2,3
 20148c4:	10c7883a 	add	r3,r2,r3
 20148c8:	e0bffd17 	ldw	r2,-12(fp)
 20148cc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 20148d0:	e0bff917 	ldw	r2,-28(fp)
 20148d4:	00c080b4 	movhi	r3,514
 20148d8:	18e69004 	addi	r3,r3,-26048
 20148dc:	100490fa 	slli	r2,r2,3
 20148e0:	10c5883a 	add	r2,r2,r3
 20148e4:	10c00104 	addi	r3,r2,4
 20148e8:	e0bffe17 	ldw	r2,-8(fp)
 20148ec:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 20148f0:	e0bffd17 	ldw	r2,-12(fp)
 20148f4:	1005003a 	cmpeq	r2,r2,zero
 20148f8:	1000051e 	bne	r2,zero,2014910 <alt_iic_isr_register+0xb8>
 20148fc:	e17ff917 	ldw	r5,-28(fp)
 2014900:	e13ffb17 	ldw	r4,-20(fp)
 2014904:	20146d40 	call	20146d4 <alt_ic_irq_enable>
 2014908:	e0bfff15 	stw	r2,-4(fp)
 201490c:	00000406 	br	2014920 <alt_iic_isr_register+0xc8>
 2014910:	e17ff917 	ldw	r5,-28(fp)
 2014914:	e13ffb17 	ldw	r4,-20(fp)
 2014918:	20147700 	call	2014770 <alt_ic_irq_disable>
 201491c:	e0bfff15 	stw	r2,-4(fp)
 2014920:	e0bfff17 	ldw	r2,-4(fp)
 2014924:	e0bffa15 	stw	r2,-24(fp)
 2014928:	e0bff817 	ldw	r2,-32(fp)
 201492c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014930:	e0bff617 	ldw	r2,-40(fp)
 2014934:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2014938:	e0bffa17 	ldw	r2,-24(fp)
}
 201493c:	e037883a 	mov	sp,fp
 2014940:	dfc00117 	ldw	ra,4(sp)
 2014944:	df000017 	ldw	fp,0(sp)
 2014948:	dec00204 	addi	sp,sp,8
 201494c:	f800283a 	ret

02014950 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2014950:	defff904 	addi	sp,sp,-28
 2014954:	dfc00615 	stw	ra,24(sp)
 2014958:	df000515 	stw	fp,20(sp)
 201495c:	df000504 	addi	fp,sp,20
 2014960:	e13ffc15 	stw	r4,-16(fp)
 2014964:	e17ffd15 	stw	r5,-12(fp)
 2014968:	e1bffe15 	stw	r6,-8(fp)
 201496c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2014970:	e13ffd17 	ldw	r4,-12(fp)
 2014974:	e17ffe17 	ldw	r5,-8(fp)
 2014978:	e1bfff17 	ldw	r6,-4(fp)
 201497c:	2014b680 	call	2014b68 <open>
 2014980:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 2014984:	e0bffb17 	ldw	r2,-20(fp)
 2014988:	1004803a 	cmplt	r2,r2,zero
 201498c:	10001c1e 	bne	r2,zero,2014a00 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 2014990:	e0bffb17 	ldw	r2,-20(fp)
 2014994:	00c08074 	movhi	r3,513
 2014998:	18da5d04 	addi	r3,r3,26996
 201499c:	10800324 	muli	r2,r2,12
 20149a0:	10c5883a 	add	r2,r2,r3
 20149a4:	10c00017 	ldw	r3,0(r2)
 20149a8:	e0bffc17 	ldw	r2,-16(fp)
 20149ac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 20149b0:	e0bffb17 	ldw	r2,-20(fp)
 20149b4:	00c08074 	movhi	r3,513
 20149b8:	18da5d04 	addi	r3,r3,26996
 20149bc:	10800324 	muli	r2,r2,12
 20149c0:	10c5883a 	add	r2,r2,r3
 20149c4:	10800104 	addi	r2,r2,4
 20149c8:	10c00017 	ldw	r3,0(r2)
 20149cc:	e0bffc17 	ldw	r2,-16(fp)
 20149d0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 20149d4:	e0bffb17 	ldw	r2,-20(fp)
 20149d8:	00c08074 	movhi	r3,513
 20149dc:	18da5d04 	addi	r3,r3,26996
 20149e0:	10800324 	muli	r2,r2,12
 20149e4:	10c5883a 	add	r2,r2,r3
 20149e8:	10800204 	addi	r2,r2,8
 20149ec:	10c00017 	ldw	r3,0(r2)
 20149f0:	e0bffc17 	ldw	r2,-16(fp)
 20149f4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 20149f8:	e13ffb17 	ldw	r4,-20(fp)
 20149fc:	2011fa00 	call	2011fa0 <alt_release_fd>
  }
} 
 2014a00:	e037883a 	mov	sp,fp
 2014a04:	dfc00117 	ldw	ra,4(sp)
 2014a08:	df000017 	ldw	fp,0(sp)
 2014a0c:	dec00204 	addi	sp,sp,8
 2014a10:	f800283a 	ret

02014a14 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2014a14:	defffb04 	addi	sp,sp,-20
 2014a18:	dfc00415 	stw	ra,16(sp)
 2014a1c:	df000315 	stw	fp,12(sp)
 2014a20:	df000304 	addi	fp,sp,12
 2014a24:	e13ffd15 	stw	r4,-12(fp)
 2014a28:	e17ffe15 	stw	r5,-8(fp)
 2014a2c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2014a30:	01008074 	movhi	r4,513
 2014a34:	211a6004 	addi	r4,r4,27008
 2014a38:	e17ffd17 	ldw	r5,-12(fp)
 2014a3c:	01800044 	movi	r6,1
 2014a40:	01c07fc4 	movi	r7,511
 2014a44:	20149500 	call	2014950 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2014a48:	01008074 	movhi	r4,513
 2014a4c:	211a5d04 	addi	r4,r4,26996
 2014a50:	e17ffe17 	ldw	r5,-8(fp)
 2014a54:	000d883a 	mov	r6,zero
 2014a58:	01c07fc4 	movi	r7,511
 2014a5c:	20149500 	call	2014950 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2014a60:	01008074 	movhi	r4,513
 2014a64:	211a6304 	addi	r4,r4,27020
 2014a68:	e17fff17 	ldw	r5,-4(fp)
 2014a6c:	01800044 	movi	r6,1
 2014a70:	01c07fc4 	movi	r7,511
 2014a74:	20149500 	call	2014950 <alt_open_fd>
}  
 2014a78:	e037883a 	mov	sp,fp
 2014a7c:	dfc00117 	ldw	ra,4(sp)
 2014a80:	df000017 	ldw	fp,0(sp)
 2014a84:	dec00204 	addi	sp,sp,8
 2014a88:	f800283a 	ret

02014a8c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2014a8c:	defffc04 	addi	sp,sp,-16
 2014a90:	df000315 	stw	fp,12(sp)
 2014a94:	df000304 	addi	fp,sp,12
 2014a98:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2014a9c:	e0bffe17 	ldw	r2,-8(fp)
 2014aa0:	10800217 	ldw	r2,8(r2)
 2014aa4:	10d00034 	orhi	r3,r2,16384
 2014aa8:	e0bffe17 	ldw	r2,-8(fp)
 2014aac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2014ab0:	e03ffd15 	stw	zero,-12(fp)
 2014ab4:	00002006 	br	2014b38 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2014ab8:	e0bffd17 	ldw	r2,-12(fp)
 2014abc:	00c08074 	movhi	r3,513
 2014ac0:	18da5d04 	addi	r3,r3,26996
 2014ac4:	10800324 	muli	r2,r2,12
 2014ac8:	10c5883a 	add	r2,r2,r3
 2014acc:	10c00017 	ldw	r3,0(r2)
 2014ad0:	e0bffe17 	ldw	r2,-8(fp)
 2014ad4:	10800017 	ldw	r2,0(r2)
 2014ad8:	1880141e 	bne	r3,r2,2014b2c <alt_file_locked+0xa0>
 2014adc:	e0bffd17 	ldw	r2,-12(fp)
 2014ae0:	00c08074 	movhi	r3,513
 2014ae4:	18da5d04 	addi	r3,r3,26996
 2014ae8:	10800324 	muli	r2,r2,12
 2014aec:	10c5883a 	add	r2,r2,r3
 2014af0:	10800204 	addi	r2,r2,8
 2014af4:	10800017 	ldw	r2,0(r2)
 2014af8:	1004403a 	cmpge	r2,r2,zero
 2014afc:	10000b1e 	bne	r2,zero,2014b2c <alt_file_locked+0xa0>
 2014b00:	e0bffd17 	ldw	r2,-12(fp)
 2014b04:	10800324 	muli	r2,r2,12
 2014b08:	1007883a 	mov	r3,r2
 2014b0c:	00808074 	movhi	r2,513
 2014b10:	109a5d04 	addi	r2,r2,26996
 2014b14:	1887883a 	add	r3,r3,r2
 2014b18:	e0bffe17 	ldw	r2,-8(fp)
 2014b1c:	18800326 	beq	r3,r2,2014b2c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2014b20:	00bffcc4 	movi	r2,-13
 2014b24:	e0bfff15 	stw	r2,-4(fp)
 2014b28:	00000a06 	br	2014b54 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2014b2c:	e0bffd17 	ldw	r2,-12(fp)
 2014b30:	10800044 	addi	r2,r2,1
 2014b34:	e0bffd15 	stw	r2,-12(fp)
 2014b38:	00808074 	movhi	r2,513
 2014b3c:	109f1204 	addi	r2,r2,31816
 2014b40:	10800017 	ldw	r2,0(r2)
 2014b44:	1007883a 	mov	r3,r2
 2014b48:	e0bffd17 	ldw	r2,-12(fp)
 2014b4c:	18bfda2e 	bgeu	r3,r2,2014ab8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2014b50:	e03fff15 	stw	zero,-4(fp)
 2014b54:	e0bfff17 	ldw	r2,-4(fp)
}
 2014b58:	e037883a 	mov	sp,fp
 2014b5c:	df000017 	ldw	fp,0(sp)
 2014b60:	dec00104 	addi	sp,sp,4
 2014b64:	f800283a 	ret

02014b68 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2014b68:	defff404 	addi	sp,sp,-48
 2014b6c:	dfc00b15 	stw	ra,44(sp)
 2014b70:	df000a15 	stw	fp,40(sp)
 2014b74:	df000a04 	addi	fp,sp,40
 2014b78:	e13ffb15 	stw	r4,-20(fp)
 2014b7c:	e17ffc15 	stw	r5,-16(fp)
 2014b80:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2014b84:	00bfffc4 	movi	r2,-1
 2014b88:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 2014b8c:	00bffb44 	movi	r2,-19
 2014b90:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 2014b94:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2014b98:	e13ffb17 	ldw	r4,-20(fp)
 2014b9c:	01408074 	movhi	r5,513
 2014ba0:	295f1004 	addi	r5,r5,31808
 2014ba4:	20145c00 	call	20145c0 <alt_find_dev>
 2014ba8:	e0bffa15 	stw	r2,-24(fp)
 2014bac:	e0bffa17 	ldw	r2,-24(fp)
 2014bb0:	1004c03a 	cmpne	r2,r2,zero
 2014bb4:	1000051e 	bne	r2,zero,2014bcc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2014bb8:	e13ffb17 	ldw	r4,-20(fp)
 2014bbc:	2014fa80 	call	2014fa8 <alt_find_file>
 2014bc0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 2014bc4:	00800044 	movi	r2,1
 2014bc8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2014bcc:	e0bffa17 	ldw	r2,-24(fp)
 2014bd0:	1005003a 	cmpeq	r2,r2,zero
 2014bd4:	1000301e 	bne	r2,zero,2014c98 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2014bd8:	e13ffa17 	ldw	r4,-24(fp)
 2014bdc:	20150c80 	call	20150c8 <alt_get_fd>
 2014be0:	e0bff815 	stw	r2,-32(fp)
 2014be4:	e0bff817 	ldw	r2,-32(fp)
 2014be8:	1004403a 	cmpge	r2,r2,zero
 2014bec:	1000031e 	bne	r2,zero,2014bfc <open+0x94>
    {
      status = index;
 2014bf0:	e0bff817 	ldw	r2,-32(fp)
 2014bf4:	e0bff715 	stw	r2,-36(fp)
 2014bf8:	00002906 	br	2014ca0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 2014bfc:	e0bff817 	ldw	r2,-32(fp)
 2014c00:	10800324 	muli	r2,r2,12
 2014c04:	1007883a 	mov	r3,r2
 2014c08:	00808074 	movhi	r2,513
 2014c0c:	109a5d04 	addi	r2,r2,26996
 2014c10:	1885883a 	add	r2,r3,r2
 2014c14:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2014c18:	e0fffc17 	ldw	r3,-16(fp)
 2014c1c:	00900034 	movhi	r2,16384
 2014c20:	10bfffc4 	addi	r2,r2,-1
 2014c24:	1886703a 	and	r3,r3,r2
 2014c28:	e0bff917 	ldw	r2,-28(fp)
 2014c2c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2014c30:	e0bff617 	ldw	r2,-40(fp)
 2014c34:	1004c03a 	cmpne	r2,r2,zero
 2014c38:	1000061e 	bne	r2,zero,2014c54 <open+0xec>
 2014c3c:	e13ff917 	ldw	r4,-28(fp)
 2014c40:	2014a8c0 	call	2014a8c <alt_file_locked>
 2014c44:	e0bff715 	stw	r2,-36(fp)
 2014c48:	e0bff717 	ldw	r2,-36(fp)
 2014c4c:	1004803a 	cmplt	r2,r2,zero
 2014c50:	1000131e 	bne	r2,zero,2014ca0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2014c54:	e0bffa17 	ldw	r2,-24(fp)
 2014c58:	10800317 	ldw	r2,12(r2)
 2014c5c:	1005003a 	cmpeq	r2,r2,zero
 2014c60:	1000091e 	bne	r2,zero,2014c88 <open+0x120>
 2014c64:	e0bffa17 	ldw	r2,-24(fp)
 2014c68:	10800317 	ldw	r2,12(r2)
 2014c6c:	e13ff917 	ldw	r4,-28(fp)
 2014c70:	e17ffb17 	ldw	r5,-20(fp)
 2014c74:	e1bffc17 	ldw	r6,-16(fp)
 2014c78:	e1fffd17 	ldw	r7,-12(fp)
 2014c7c:	103ee83a 	callr	r2
 2014c80:	e0bfff15 	stw	r2,-4(fp)
 2014c84:	00000106 	br	2014c8c <open+0x124>
 2014c88:	e03fff15 	stw	zero,-4(fp)
 2014c8c:	e0bfff17 	ldw	r2,-4(fp)
 2014c90:	e0bff715 	stw	r2,-36(fp)
 2014c94:	00000206 	br	2014ca0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2014c98:	00bffb44 	movi	r2,-19
 2014c9c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2014ca0:	e0bff717 	ldw	r2,-36(fp)
 2014ca4:	1004403a 	cmpge	r2,r2,zero
 2014ca8:	1000091e 	bne	r2,zero,2014cd0 <open+0x168>
  {
    alt_release_fd (index);  
 2014cac:	e13ff817 	ldw	r4,-32(fp)
 2014cb0:	2011fa00 	call	2011fa0 <alt_release_fd>
    ALT_ERRNO = -status;
 2014cb4:	2014cf00 	call	2014cf0 <alt_get_errno>
 2014cb8:	e0fff717 	ldw	r3,-36(fp)
 2014cbc:	00c7c83a 	sub	r3,zero,r3
 2014cc0:	10c00015 	stw	r3,0(r2)
    return -1;
 2014cc4:	00bfffc4 	movi	r2,-1
 2014cc8:	e0bffe15 	stw	r2,-8(fp)
 2014ccc:	00000206 	br	2014cd8 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 2014cd0:	e0bff817 	ldw	r2,-32(fp)
 2014cd4:	e0bffe15 	stw	r2,-8(fp)
 2014cd8:	e0bffe17 	ldw	r2,-8(fp)
}
 2014cdc:	e037883a 	mov	sp,fp
 2014ce0:	dfc00117 	ldw	ra,4(sp)
 2014ce4:	df000017 	ldw	fp,0(sp)
 2014ce8:	dec00204 	addi	sp,sp,8
 2014cec:	f800283a 	ret

02014cf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2014cf0:	defffd04 	addi	sp,sp,-12
 2014cf4:	dfc00215 	stw	ra,8(sp)
 2014cf8:	df000115 	stw	fp,4(sp)
 2014cfc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2014d00:	00808074 	movhi	r2,513
 2014d04:	109f1304 	addi	r2,r2,31820
 2014d08:	10800017 	ldw	r2,0(r2)
 2014d0c:	1005003a 	cmpeq	r2,r2,zero
 2014d10:	1000061e 	bne	r2,zero,2014d2c <alt_get_errno+0x3c>
 2014d14:	00808074 	movhi	r2,513
 2014d18:	109f1304 	addi	r2,r2,31820
 2014d1c:	10800017 	ldw	r2,0(r2)
 2014d20:	103ee83a 	callr	r2
 2014d24:	e0bfff15 	stw	r2,-4(fp)
 2014d28:	00000306 	br	2014d38 <alt_get_errno+0x48>
 2014d2c:	008080b4 	movhi	r2,514
 2014d30:	10a63c04 	addi	r2,r2,-26384
 2014d34:	e0bfff15 	stw	r2,-4(fp)
 2014d38:	e0bfff17 	ldw	r2,-4(fp)
}
 2014d3c:	e037883a 	mov	sp,fp
 2014d40:	dfc00117 	ldw	ra,4(sp)
 2014d44:	df000017 	ldw	fp,0(sp)
 2014d48:	dec00204 	addi	sp,sp,8
 2014d4c:	f800283a 	ret

02014d50 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 2014d50:	deffff04 	addi	sp,sp,-4
 2014d54:	df000015 	stw	fp,0(sp)
 2014d58:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2014d5c:	000170fa 	wrctl	ienable,zero
}
 2014d60:	e037883a 	mov	sp,fp
 2014d64:	df000017 	ldw	fp,0(sp)
 2014d68:	dec00104 	addi	sp,sp,4
 2014d6c:	f800283a 	ret

02014d70 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 2014d70:	defff404 	addi	sp,sp,-48
 2014d74:	df000b15 	stw	fp,44(sp)
 2014d78:	df000b04 	addi	fp,sp,44
 2014d7c:	e13ffc15 	stw	r4,-16(fp)
 2014d80:	e17ffd15 	stw	r5,-12(fp)
 2014d84:	e1bffe15 	stw	r6,-8(fp)
 2014d88:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 2014d8c:	e0fffe17 	ldw	r3,-8(fp)
 2014d90:	e0bfff17 	ldw	r2,-4(fp)
 2014d94:	10c5883a 	add	r2,r2,r3
 2014d98:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
 2014d9c:	e0c00117 	ldw	r3,4(fp)
 2014da0:	e0800217 	ldw	r2,8(fp)
 2014da4:	10c5883a 	add	r2,r2,r3
 2014da8:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 2014dac:	e0800117 	ldw	r2,4(fp)
 2014db0:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
 2014db4:	e0bffe17 	ldw	r2,-8(fp)
 2014db8:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 2014dbc:	00800044 	movi	r2,1
 2014dc0:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 2014dc4:	e0bffc17 	ldw	r2,-16(fp)
 2014dc8:	11000504 	addi	r4,r2,20
 2014dcc:	e0fffd17 	ldw	r3,-12(fp)
 2014dd0:	00800044 	movi	r2,1
 2014dd4:	10c6983a 	sll	r3,r2,r3
 2014dd8:	2005883a 	mov	r2,r4
 2014ddc:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 2014de0:	e0800317 	ldw	r2,12(fp)
 2014de4:	1080008c 	andi	r2,r2,2
 2014de8:	1004c03a 	cmpne	r2,r2,zero
 2014dec:	1000051e 	bne	r2,zero,2014e04 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 2014df0:	e0bffc17 	ldw	r2,-16(fp)
 2014df4:	10800304 	addi	r2,r2,12
 2014df8:	1007883a 	mov	r3,r2
 2014dfc:	00810004 	movi	r2,1024
 2014e00:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2014e04:	e0bffc17 	ldw	r2,-16(fp)
 2014e08:	10800037 	ldwio	r2,0(r2)
 2014e0c:	00000006 	br	2014e10 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2014e10:	e0bffc17 	ldw	r2,-16(fp)
 2014e14:	10800204 	addi	r2,r2,8
 2014e18:	10800037 	ldwio	r2,0(r2)
 2014e1c:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2014e20:	e0bff717 	ldw	r2,-36(fp)
 2014e24:	1080100c 	andi	r2,r2,64
 2014e28:	1005003a 	cmpeq	r2,r2,zero
 2014e2c:	1000031e 	bne	r2,zero,2014e3c <alt_avalon_spi_command+0xcc>
 2014e30:	e0bff617 	ldw	r2,-40(fp)
 2014e34:	1004c03a 	cmpne	r2,r2,zero
 2014e38:	1000041e 	bne	r2,zero,2014e4c <alt_avalon_spi_command+0xdc>
 2014e3c:	e0bff717 	ldw	r2,-36(fp)
 2014e40:	1080200c 	andi	r2,r2,128
 2014e44:	1005003a 	cmpeq	r2,r2,zero
 2014e48:	103ff11e 	bne	r2,zero,2014e10 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 2014e4c:	e0bff717 	ldw	r2,-36(fp)
 2014e50:	1080100c 	andi	r2,r2,64
 2014e54:	1005003a 	cmpeq	r2,r2,zero
 2014e58:	1000201e 	bne	r2,zero,2014edc <alt_avalon_spi_command+0x16c>
 2014e5c:	e0bff617 	ldw	r2,-40(fp)
 2014e60:	10800050 	cmplti	r2,r2,1
 2014e64:	10001d1e 	bne	r2,zero,2014edc <alt_avalon_spi_command+0x16c>
    {
      credits--;
 2014e68:	e0bff617 	ldw	r2,-40(fp)
 2014e6c:	10bfffc4 	addi	r2,r2,-1
 2014e70:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
 2014e74:	e0ffff17 	ldw	r3,-4(fp)
 2014e78:	e0bffb17 	ldw	r2,-20(fp)
 2014e7c:	18800b2e 	bgeu	r3,r2,2014eac <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 2014e80:	e0bffc17 	ldw	r2,-16(fp)
 2014e84:	11000104 	addi	r4,r2,4
 2014e88:	e0bfff17 	ldw	r2,-4(fp)
 2014e8c:	10800003 	ldbu	r2,0(r2)
 2014e90:	10c03fcc 	andi	r3,r2,255
 2014e94:	e0bfff17 	ldw	r2,-4(fp)
 2014e98:	10800044 	addi	r2,r2,1
 2014e9c:	e0bfff15 	stw	r2,-4(fp)
 2014ea0:	2005883a 	mov	r2,r4
 2014ea4:	10c00035 	stwio	r3,0(r2)
 2014ea8:	00000c06 	br	2014edc <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
 2014eac:	e0bff917 	ldw	r2,-28(fp)
 2014eb0:	1005003a 	cmpeq	r2,r2,zero
 2014eb4:	1000071e 	bne	r2,zero,2014ed4 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
 2014eb8:	e0bff917 	ldw	r2,-28(fp)
 2014ebc:	10bfffc4 	addi	r2,r2,-1
 2014ec0:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 2014ec4:	e0bffc17 	ldw	r2,-16(fp)
 2014ec8:	10800104 	addi	r2,r2,4
 2014ecc:	10000035 	stwio	zero,0(r2)
 2014ed0:	00000206 	br	2014edc <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
 2014ed4:	00bf0004 	movi	r2,-1024
 2014ed8:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 2014edc:	e0bff717 	ldw	r2,-36(fp)
 2014ee0:	1080200c 	andi	r2,r2,128
 2014ee4:	1005003a 	cmpeq	r2,r2,zero
 2014ee8:	103fc91e 	bne	r2,zero,2014e10 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2014eec:	e0bffc17 	ldw	r2,-16(fp)
 2014ef0:	10800037 	ldwio	r2,0(r2)
 2014ef4:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
 2014ef8:	e0bff817 	ldw	r2,-32(fp)
 2014efc:	1005003a 	cmpeq	r2,r2,zero
 2014f00:	1000041e 	bne	r2,zero,2014f14 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
 2014f04:	e0bff817 	ldw	r2,-32(fp)
 2014f08:	10bfffc4 	addi	r2,r2,-1
 2014f0c:	e0bff815 	stw	r2,-32(fp)
 2014f10:	00000706 	br	2014f30 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
 2014f14:	e0bff517 	ldw	r2,-44(fp)
 2014f18:	1007883a 	mov	r3,r2
 2014f1c:	e0800217 	ldw	r2,8(fp)
 2014f20:	10c00005 	stb	r3,0(r2)
 2014f24:	e0800217 	ldw	r2,8(fp)
 2014f28:	10800044 	addi	r2,r2,1
 2014f2c:	e0800215 	stw	r2,8(fp)
      credits++;
 2014f30:	e0bff617 	ldw	r2,-40(fp)
 2014f34:	10800044 	addi	r2,r2,1
 2014f38:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
 2014f3c:	e0bff817 	ldw	r2,-32(fp)
 2014f40:	1004c03a 	cmpne	r2,r2,zero
 2014f44:	103fb21e 	bne	r2,zero,2014e10 <alt_avalon_spi_command+0xa0>
 2014f48:	e0c00217 	ldw	r3,8(fp)
 2014f4c:	e0bffa17 	ldw	r2,-24(fp)
 2014f50:	18800126 	beq	r3,r2,2014f58 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
 2014f54:	003fae06 	br	2014e10 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2014f58:	e0bffc17 	ldw	r2,-16(fp)
 2014f5c:	10800204 	addi	r2,r2,8
 2014f60:	10800037 	ldwio	r2,0(r2)
 2014f64:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 2014f68:	e0bff717 	ldw	r2,-36(fp)
 2014f6c:	1080080c 	andi	r2,r2,32
 2014f70:	1005003a 	cmpeq	r2,r2,zero
 2014f74:	103ff81e 	bne	r2,zero,2014f58 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 2014f78:	e0800317 	ldw	r2,12(fp)
 2014f7c:	1080004c 	andi	r2,r2,1
 2014f80:	1004c03a 	cmpne	r2,r2,zero
 2014f84:	1000031e 	bne	r2,zero,2014f94 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 2014f88:	e0bffc17 	ldw	r2,-16(fp)
 2014f8c:	10800304 	addi	r2,r2,12
 2014f90:	10000035 	stwio	zero,0(r2)

  return read_length;
 2014f94:	e0800117 	ldw	r2,4(fp)
}
 2014f98:	e037883a 	mov	sp,fp
 2014f9c:	df000017 	ldw	fp,0(sp)
 2014fa0:	dec00104 	addi	sp,sp,4
 2014fa4:	f800283a 	ret

02014fa8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2014fa8:	defffa04 	addi	sp,sp,-24
 2014fac:	dfc00515 	stw	ra,20(sp)
 2014fb0:	df000415 	stw	fp,16(sp)
 2014fb4:	df000404 	addi	fp,sp,16
 2014fb8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2014fbc:	00808074 	movhi	r2,513
 2014fc0:	109f0e04 	addi	r2,r2,31800
 2014fc4:	10800017 	ldw	r2,0(r2)
 2014fc8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2014fcc:	00003306 	br	201509c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 2014fd0:	e0bffd17 	ldw	r2,-12(fp)
 2014fd4:	11000217 	ldw	r4,8(r2)
 2014fd8:	20040e80 	call	20040e8 <strlen>
 2014fdc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 2014fe0:	e0bffd17 	ldw	r2,-12(fp)
 2014fe4:	10c00217 	ldw	r3,8(r2)
 2014fe8:	e0bffc17 	ldw	r2,-16(fp)
 2014fec:	1885883a 	add	r2,r3,r2
 2014ff0:	10bfffc4 	addi	r2,r2,-1
 2014ff4:	10800003 	ldbu	r2,0(r2)
 2014ff8:	10803fcc 	andi	r2,r2,255
 2014ffc:	1080201c 	xori	r2,r2,128
 2015000:	10bfe004 	addi	r2,r2,-128
 2015004:	10800bd8 	cmpnei	r2,r2,47
 2015008:	1000031e 	bne	r2,zero,2015018 <alt_find_file+0x70>
    {
      len -= 1;
 201500c:	e0bffc17 	ldw	r2,-16(fp)
 2015010:	10bfffc4 	addi	r2,r2,-1
 2015014:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2015018:	e0bffc17 	ldw	r2,-16(fp)
 201501c:	1007883a 	mov	r3,r2
 2015020:	e0bffe17 	ldw	r2,-8(fp)
 2015024:	1885883a 	add	r2,r3,r2
 2015028:	10800003 	ldbu	r2,0(r2)
 201502c:	10803fcc 	andi	r2,r2,255
 2015030:	1080201c 	xori	r2,r2,128
 2015034:	10bfe004 	addi	r2,r2,-128
 2015038:	10800be0 	cmpeqi	r2,r2,47
 201503c:	10000a1e 	bne	r2,zero,2015068 <alt_find_file+0xc0>
 2015040:	e0bffc17 	ldw	r2,-16(fp)
 2015044:	1007883a 	mov	r3,r2
 2015048:	e0bffe17 	ldw	r2,-8(fp)
 201504c:	1885883a 	add	r2,r3,r2
 2015050:	10800003 	ldbu	r2,0(r2)
 2015054:	10803fcc 	andi	r2,r2,255
 2015058:	1080201c 	xori	r2,r2,128
 201505c:	10bfe004 	addi	r2,r2,-128
 2015060:	1004c03a 	cmpne	r2,r2,zero
 2015064:	10000a1e 	bne	r2,zero,2015090 <alt_find_file+0xe8>
 2015068:	e0bffd17 	ldw	r2,-12(fp)
 201506c:	11000217 	ldw	r4,8(r2)
 2015070:	e1bffc17 	ldw	r6,-16(fp)
 2015074:	e17ffe17 	ldw	r5,-8(fp)
 2015078:	201525c0 	call	201525c <memcmp>
 201507c:	1004c03a 	cmpne	r2,r2,zero
 2015080:	1000031e 	bne	r2,zero,2015090 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2015084:	e0bffd17 	ldw	r2,-12(fp)
 2015088:	e0bfff15 	stw	r2,-4(fp)
 201508c:	00000806 	br	20150b0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 2015090:	e0bffd17 	ldw	r2,-12(fp)
 2015094:	10800017 	ldw	r2,0(r2)
 2015098:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201509c:	00c08074 	movhi	r3,513
 20150a0:	18df0e04 	addi	r3,r3,31800
 20150a4:	e0bffd17 	ldw	r2,-12(fp)
 20150a8:	10ffc91e 	bne	r2,r3,2014fd0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 20150ac:	e03fff15 	stw	zero,-4(fp)
 20150b0:	e0bfff17 	ldw	r2,-4(fp)
}
 20150b4:	e037883a 	mov	sp,fp
 20150b8:	dfc00117 	ldw	ra,4(sp)
 20150bc:	df000017 	ldw	fp,0(sp)
 20150c0:	dec00204 	addi	sp,sp,8
 20150c4:	f800283a 	ret

020150c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 20150c8:	defffc04 	addi	sp,sp,-16
 20150cc:	df000315 	stw	fp,12(sp)
 20150d0:	df000304 	addi	fp,sp,12
 20150d4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 20150d8:	00bffa04 	movi	r2,-24
 20150dc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20150e0:	e03ffe15 	stw	zero,-8(fp)
 20150e4:	00001e06 	br	2015160 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 20150e8:	e0bffe17 	ldw	r2,-8(fp)
 20150ec:	00c08074 	movhi	r3,513
 20150f0:	18da5d04 	addi	r3,r3,26996
 20150f4:	10800324 	muli	r2,r2,12
 20150f8:	10c5883a 	add	r2,r2,r3
 20150fc:	10800017 	ldw	r2,0(r2)
 2015100:	1004c03a 	cmpne	r2,r2,zero
 2015104:	1000131e 	bne	r2,zero,2015154 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 2015108:	e0bffe17 	ldw	r2,-8(fp)
 201510c:	00c08074 	movhi	r3,513
 2015110:	18da5d04 	addi	r3,r3,26996
 2015114:	10800324 	muli	r2,r2,12
 2015118:	10c7883a 	add	r3,r2,r3
 201511c:	e0bfff17 	ldw	r2,-4(fp)
 2015120:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 2015124:	00808074 	movhi	r2,513
 2015128:	109f1204 	addi	r2,r2,31816
 201512c:	10c00017 	ldw	r3,0(r2)
 2015130:	e0bffe17 	ldw	r2,-8(fp)
 2015134:	1880040e 	bge	r3,r2,2015148 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 2015138:	00c08074 	movhi	r3,513
 201513c:	18df1204 	addi	r3,r3,31816
 2015140:	e0bffe17 	ldw	r2,-8(fp)
 2015144:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 2015148:	e0bffe17 	ldw	r2,-8(fp)
 201514c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 2015150:	00000606 	br	201516c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2015154:	e0bffe17 	ldw	r2,-8(fp)
 2015158:	10800044 	addi	r2,r2,1
 201515c:	e0bffe15 	stw	r2,-8(fp)
 2015160:	e0bffe17 	ldw	r2,-8(fp)
 2015164:	10800810 	cmplti	r2,r2,32
 2015168:	103fdf1e 	bne	r2,zero,20150e8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 201516c:	e0bffd17 	ldw	r2,-12(fp)
}
 2015170:	e037883a 	mov	sp,fp
 2015174:	df000017 	ldw	fp,0(sp)
 2015178:	dec00104 	addi	sp,sp,4
 201517c:	f800283a 	ret

02015180 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 2015180:	defffb04 	addi	sp,sp,-20
 2015184:	df000415 	stw	fp,16(sp)
 2015188:	df000404 	addi	fp,sp,16
 201518c:	e13ffe15 	stw	r4,-8(fp)
 2015190:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 2015194:	e0bfff17 	ldw	r2,-4(fp)
 2015198:	10810070 	cmpltui	r2,r2,1025
 201519c:	1000021e 	bne	r2,zero,20151a8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 20151a0:	00810004 	movi	r2,1024
 20151a4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 20151a8:	e0fffe17 	ldw	r3,-8(fp)
 20151ac:	e0bfff17 	ldw	r2,-4(fp)
 20151b0:	1885883a 	add	r2,r3,r2
 20151b4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 20151b8:	e0bffe17 	ldw	r2,-8(fp)
 20151bc:	e0bffd15 	stw	r2,-12(fp)
 20151c0:	00000506 	br	20151d8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 20151c4:	e0bffd17 	ldw	r2,-12(fp)
 20151c8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 20151cc:	e0bffd17 	ldw	r2,-12(fp)
 20151d0:	10800804 	addi	r2,r2,32
 20151d4:	e0bffd15 	stw	r2,-12(fp)
 20151d8:	e0fffd17 	ldw	r3,-12(fp)
 20151dc:	e0bffc17 	ldw	r2,-16(fp)
 20151e0:	18bff836 	bltu	r3,r2,20151c4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 20151e4:	e0bffe17 	ldw	r2,-8(fp)
 20151e8:	108007cc 	andi	r2,r2,31
 20151ec:	1005003a 	cmpeq	r2,r2,zero
 20151f0:	1000021e 	bne	r2,zero,20151fc <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 20151f4:	e0bffd17 	ldw	r2,-12(fp)
 20151f8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 20151fc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 2015200:	e037883a 	mov	sp,fp
 2015204:	df000017 	ldw	fp,0(sp)
 2015208:	dec00104 	addi	sp,sp,4
 201520c:	f800283a 	ret

02015210 <atexit>:
 2015210:	200b883a 	mov	r5,r4
 2015214:	000d883a 	mov	r6,zero
 2015218:	0009883a 	mov	r4,zero
 201521c:	000f883a 	mov	r7,zero
 2015220:	20152d01 	jmpi	20152d0 <__register_exitproc>

02015224 <exit>:
 2015224:	defffe04 	addi	sp,sp,-8
 2015228:	000b883a 	mov	r5,zero
 201522c:	dc000015 	stw	r16,0(sp)
 2015230:	dfc00115 	stw	ra,4(sp)
 2015234:	2021883a 	mov	r16,r4
 2015238:	20154080 	call	2015408 <__call_exitprocs>
 201523c:	00808074 	movhi	r2,513
 2015240:	109f0b04 	addi	r2,r2,31788
 2015244:	11000017 	ldw	r4,0(r2)
 2015248:	20800f17 	ldw	r2,60(r4)
 201524c:	10000126 	beq	r2,zero,2015254 <exit+0x30>
 2015250:	103ee83a 	callr	r2
 2015254:	8009883a 	mov	r4,r16
 2015258:	20155f80 	call	20155f8 <_exit>

0201525c <memcmp>:
 201525c:	00c000c4 	movi	r3,3
 2015260:	1980032e 	bgeu	r3,r6,2015270 <memcmp+0x14>
 2015264:	2144b03a 	or	r2,r4,r5
 2015268:	10c4703a 	and	r2,r2,r3
 201526c:	10000f26 	beq	r2,zero,20152ac <memcmp+0x50>
 2015270:	31ffffc4 	addi	r7,r6,-1
 2015274:	3000061e 	bne	r6,zero,2015290 <memcmp+0x34>
 2015278:	00000a06 	br	20152a4 <memcmp+0x48>
 201527c:	39ffffc4 	addi	r7,r7,-1
 2015280:	00bfffc4 	movi	r2,-1
 2015284:	21000044 	addi	r4,r4,1
 2015288:	29400044 	addi	r5,r5,1
 201528c:	38800526 	beq	r7,r2,20152a4 <memcmp+0x48>
 2015290:	20c00003 	ldbu	r3,0(r4)
 2015294:	28800003 	ldbu	r2,0(r5)
 2015298:	18bff826 	beq	r3,r2,201527c <memcmp+0x20>
 201529c:	1885c83a 	sub	r2,r3,r2
 20152a0:	f800283a 	ret
 20152a4:	0005883a 	mov	r2,zero
 20152a8:	f800283a 	ret
 20152ac:	180f883a 	mov	r7,r3
 20152b0:	20c00017 	ldw	r3,0(r4)
 20152b4:	28800017 	ldw	r2,0(r5)
 20152b8:	18bfed1e 	bne	r3,r2,2015270 <memcmp+0x14>
 20152bc:	31bfff04 	addi	r6,r6,-4
 20152c0:	21000104 	addi	r4,r4,4
 20152c4:	29400104 	addi	r5,r5,4
 20152c8:	39bff936 	bltu	r7,r6,20152b0 <memcmp+0x54>
 20152cc:	003fe806 	br	2015270 <memcmp+0x14>

020152d0 <__register_exitproc>:
 20152d0:	defffa04 	addi	sp,sp,-24
 20152d4:	00808074 	movhi	r2,513
 20152d8:	109f0b04 	addi	r2,r2,31788
 20152dc:	dc000015 	stw	r16,0(sp)
 20152e0:	14000017 	ldw	r16,0(r2)
 20152e4:	dd000415 	stw	r20,16(sp)
 20152e8:	2829883a 	mov	r20,r5
 20152ec:	81405217 	ldw	r5,328(r16)
 20152f0:	dcc00315 	stw	r19,12(sp)
 20152f4:	dc800215 	stw	r18,8(sp)
 20152f8:	dc400115 	stw	r17,4(sp)
 20152fc:	dfc00515 	stw	ra,20(sp)
 2015300:	2023883a 	mov	r17,r4
 2015304:	3027883a 	mov	r19,r6
 2015308:	3825883a 	mov	r18,r7
 201530c:	28002526 	beq	r5,zero,20153a4 <__register_exitproc+0xd4>
 2015310:	29000117 	ldw	r4,4(r5)
 2015314:	008007c4 	movi	r2,31
 2015318:	11002716 	blt	r2,r4,20153b8 <__register_exitproc+0xe8>
 201531c:	8800101e 	bne	r17,zero,2015360 <__register_exitproc+0x90>
 2015320:	2105883a 	add	r2,r4,r4
 2015324:	1085883a 	add	r2,r2,r2
 2015328:	20c00044 	addi	r3,r4,1
 201532c:	1145883a 	add	r2,r2,r5
 2015330:	0009883a 	mov	r4,zero
 2015334:	15000215 	stw	r20,8(r2)
 2015338:	28c00115 	stw	r3,4(r5)
 201533c:	2005883a 	mov	r2,r4
 2015340:	dfc00517 	ldw	ra,20(sp)
 2015344:	dd000417 	ldw	r20,16(sp)
 2015348:	dcc00317 	ldw	r19,12(sp)
 201534c:	dc800217 	ldw	r18,8(sp)
 2015350:	dc400117 	ldw	r17,4(sp)
 2015354:	dc000017 	ldw	r16,0(sp)
 2015358:	dec00604 	addi	sp,sp,24
 201535c:	f800283a 	ret
 2015360:	29802204 	addi	r6,r5,136
 2015364:	00800044 	movi	r2,1
 2015368:	110e983a 	sll	r7,r2,r4
 201536c:	30c04017 	ldw	r3,256(r6)
 2015370:	2105883a 	add	r2,r4,r4
 2015374:	1085883a 	add	r2,r2,r2
 2015378:	1185883a 	add	r2,r2,r6
 201537c:	19c6b03a 	or	r3,r3,r7
 2015380:	14802015 	stw	r18,128(r2)
 2015384:	14c00015 	stw	r19,0(r2)
 2015388:	00800084 	movi	r2,2
 201538c:	30c04015 	stw	r3,256(r6)
 2015390:	88bfe31e 	bne	r17,r2,2015320 <__register_exitproc+0x50>
 2015394:	30804117 	ldw	r2,260(r6)
 2015398:	11c4b03a 	or	r2,r2,r7
 201539c:	30804115 	stw	r2,260(r6)
 20153a0:	003fdf06 	br	2015320 <__register_exitproc+0x50>
 20153a4:	008080b4 	movhi	r2,514
 20153a8:	10a6d004 	addi	r2,r2,-25792
 20153ac:	100b883a 	mov	r5,r2
 20153b0:	80805215 	stw	r2,328(r16)
 20153b4:	003fd606 	br	2015310 <__register_exitproc+0x40>
 20153b8:	00808034 	movhi	r2,512
 20153bc:	108ddf04 	addi	r2,r2,14204
 20153c0:	1000021e 	bne	r2,zero,20153cc <__register_exitproc+0xfc>
 20153c4:	013fffc4 	movi	r4,-1
 20153c8:	003fdc06 	br	201533c <__register_exitproc+0x6c>
 20153cc:	01006404 	movi	r4,400
 20153d0:	103ee83a 	callr	r2
 20153d4:	1007883a 	mov	r3,r2
 20153d8:	103ffa26 	beq	r2,zero,20153c4 <__register_exitproc+0xf4>
 20153dc:	80805217 	ldw	r2,328(r16)
 20153e0:	180b883a 	mov	r5,r3
 20153e4:	18000115 	stw	zero,4(r3)
 20153e8:	18800015 	stw	r2,0(r3)
 20153ec:	80c05215 	stw	r3,328(r16)
 20153f0:	18006215 	stw	zero,392(r3)
 20153f4:	18006315 	stw	zero,396(r3)
 20153f8:	0009883a 	mov	r4,zero
 20153fc:	883fc826 	beq	r17,zero,2015320 <__register_exitproc+0x50>
 2015400:	003fd706 	br	2015360 <__register_exitproc+0x90>

02015404 <register_fini>:
 2015404:	f800283a 	ret

02015408 <__call_exitprocs>:
 2015408:	00808074 	movhi	r2,513
 201540c:	109f0b04 	addi	r2,r2,31788
 2015410:	10800017 	ldw	r2,0(r2)
 2015414:	defff304 	addi	sp,sp,-52
 2015418:	df000b15 	stw	fp,44(sp)
 201541c:	d8800115 	stw	r2,4(sp)
 2015420:	00808034 	movhi	r2,512
 2015424:	108dda04 	addi	r2,r2,14184
 2015428:	1005003a 	cmpeq	r2,r2,zero
 201542c:	d8800215 	stw	r2,8(sp)
 2015430:	d8800117 	ldw	r2,4(sp)
 2015434:	dd400815 	stw	r21,32(sp)
 2015438:	dd000715 	stw	r20,28(sp)
 201543c:	10805204 	addi	r2,r2,328
 2015440:	dfc00c15 	stw	ra,48(sp)
 2015444:	ddc00a15 	stw	r23,40(sp)
 2015448:	dd800915 	stw	r22,36(sp)
 201544c:	dcc00615 	stw	r19,24(sp)
 2015450:	dc800515 	stw	r18,20(sp)
 2015454:	dc400415 	stw	r17,16(sp)
 2015458:	dc000315 	stw	r16,12(sp)
 201545c:	282b883a 	mov	r21,r5
 2015460:	2039883a 	mov	fp,r4
 2015464:	d8800015 	stw	r2,0(sp)
 2015468:	2829003a 	cmpeq	r20,r5,zero
 201546c:	d8800117 	ldw	r2,4(sp)
 2015470:	14405217 	ldw	r17,328(r2)
 2015474:	88001026 	beq	r17,zero,20154b8 <__call_exitprocs+0xb0>
 2015478:	ddc00017 	ldw	r23,0(sp)
 201547c:	88800117 	ldw	r2,4(r17)
 2015480:	8c802204 	addi	r18,r17,136
 2015484:	143fffc4 	addi	r16,r2,-1
 2015488:	80000916 	blt	r16,zero,20154b0 <__call_exitprocs+0xa8>
 201548c:	05bfffc4 	movi	r22,-1
 2015490:	a000151e 	bne	r20,zero,20154e8 <__call_exitprocs+0xe0>
 2015494:	8409883a 	add	r4,r16,r16
 2015498:	2105883a 	add	r2,r4,r4
 201549c:	1485883a 	add	r2,r2,r18
 20154a0:	10c02017 	ldw	r3,128(r2)
 20154a4:	a8c01126 	beq	r21,r3,20154ec <__call_exitprocs+0xe4>
 20154a8:	843fffc4 	addi	r16,r16,-1
 20154ac:	85bff81e 	bne	r16,r22,2015490 <__call_exitprocs+0x88>
 20154b0:	d8800217 	ldw	r2,8(sp)
 20154b4:	10003126 	beq	r2,zero,201557c <__call_exitprocs+0x174>
 20154b8:	dfc00c17 	ldw	ra,48(sp)
 20154bc:	df000b17 	ldw	fp,44(sp)
 20154c0:	ddc00a17 	ldw	r23,40(sp)
 20154c4:	dd800917 	ldw	r22,36(sp)
 20154c8:	dd400817 	ldw	r21,32(sp)
 20154cc:	dd000717 	ldw	r20,28(sp)
 20154d0:	dcc00617 	ldw	r19,24(sp)
 20154d4:	dc800517 	ldw	r18,20(sp)
 20154d8:	dc400417 	ldw	r17,16(sp)
 20154dc:	dc000317 	ldw	r16,12(sp)
 20154e0:	dec00d04 	addi	sp,sp,52
 20154e4:	f800283a 	ret
 20154e8:	8409883a 	add	r4,r16,r16
 20154ec:	88c00117 	ldw	r3,4(r17)
 20154f0:	2105883a 	add	r2,r4,r4
 20154f4:	1445883a 	add	r2,r2,r17
 20154f8:	18ffffc4 	addi	r3,r3,-1
 20154fc:	11800217 	ldw	r6,8(r2)
 2015500:	1c001526 	beq	r3,r16,2015558 <__call_exitprocs+0x150>
 2015504:	10000215 	stw	zero,8(r2)
 2015508:	303fe726 	beq	r6,zero,20154a8 <__call_exitprocs+0xa0>
 201550c:	00c00044 	movi	r3,1
 2015510:	1c06983a 	sll	r3,r3,r16
 2015514:	90804017 	ldw	r2,256(r18)
 2015518:	8cc00117 	ldw	r19,4(r17)
 201551c:	1884703a 	and	r2,r3,r2
 2015520:	10001426 	beq	r2,zero,2015574 <__call_exitprocs+0x16c>
 2015524:	90804117 	ldw	r2,260(r18)
 2015528:	1884703a 	and	r2,r3,r2
 201552c:	10000c1e 	bne	r2,zero,2015560 <__call_exitprocs+0x158>
 2015530:	2105883a 	add	r2,r4,r4
 2015534:	1485883a 	add	r2,r2,r18
 2015538:	11400017 	ldw	r5,0(r2)
 201553c:	e009883a 	mov	r4,fp
 2015540:	303ee83a 	callr	r6
 2015544:	88800117 	ldw	r2,4(r17)
 2015548:	98bfc81e 	bne	r19,r2,201546c <__call_exitprocs+0x64>
 201554c:	b8800017 	ldw	r2,0(r23)
 2015550:	147fd526 	beq	r2,r17,20154a8 <__call_exitprocs+0xa0>
 2015554:	003fc506 	br	201546c <__call_exitprocs+0x64>
 2015558:	8c000115 	stw	r16,4(r17)
 201555c:	003fea06 	br	2015508 <__call_exitprocs+0x100>
 2015560:	2105883a 	add	r2,r4,r4
 2015564:	1485883a 	add	r2,r2,r18
 2015568:	11000017 	ldw	r4,0(r2)
 201556c:	303ee83a 	callr	r6
 2015570:	003ff406 	br	2015544 <__call_exitprocs+0x13c>
 2015574:	303ee83a 	callr	r6
 2015578:	003ff206 	br	2015544 <__call_exitprocs+0x13c>
 201557c:	88800117 	ldw	r2,4(r17)
 2015580:	1000081e 	bne	r2,zero,20155a4 <__call_exitprocs+0x19c>
 2015584:	89000017 	ldw	r4,0(r17)
 2015588:	20000726 	beq	r4,zero,20155a8 <__call_exitprocs+0x1a0>
 201558c:	b9000015 	stw	r4,0(r23)
 2015590:	8809883a 	mov	r4,r17
 2015594:	20037680 	call	2003768 <free>
 2015598:	bc400017 	ldw	r17,0(r23)
 201559c:	883fb71e 	bne	r17,zero,201547c <__call_exitprocs+0x74>
 20155a0:	003fc506 	br	20154b8 <__call_exitprocs+0xb0>
 20155a4:	89000017 	ldw	r4,0(r17)
 20155a8:	882f883a 	mov	r23,r17
 20155ac:	2023883a 	mov	r17,r4
 20155b0:	883fb21e 	bne	r17,zero,201547c <__call_exitprocs+0x74>
 20155b4:	003fc006 	br	20154b8 <__call_exitprocs+0xb0>

020155b8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 20155b8:	defffd04 	addi	sp,sp,-12
 20155bc:	df000215 	stw	fp,8(sp)
 20155c0:	df000204 	addi	fp,sp,8
 20155c4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 20155c8:	e0bfff17 	ldw	r2,-4(fp)
 20155cc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 20155d0:	e0bffe17 	ldw	r2,-8(fp)
 20155d4:	1005003a 	cmpeq	r2,r2,zero
 20155d8:	1000021e 	bne	r2,zero,20155e4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 20155dc:	002af070 	cmpltui	zero,zero,43969
 20155e0:	00000106 	br	20155e8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 20155e4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 20155e8:	e037883a 	mov	sp,fp
 20155ec:	df000017 	ldw	fp,0(sp)
 20155f0:	dec00104 	addi	sp,sp,4
 20155f4:	f800283a 	ret

020155f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 20155f8:	defffd04 	addi	sp,sp,-12
 20155fc:	dfc00215 	stw	ra,8(sp)
 2015600:	df000115 	stw	fp,4(sp)
 2015604:	df000104 	addi	fp,sp,4
 2015608:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 201560c:	e13fff17 	ldw	r4,-4(fp)
 2015610:	20155b80 	call	20155b8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2015614:	003fff06 	br	2015614 <_exit+0x1c>
 2015618:	02015404 	movi	r8,1360
